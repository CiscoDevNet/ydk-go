// This module contains a collection of YANG definitions
// for Cisco IOS-XR ifmgr package configuration.
// 
// This module contains definitions
// for the following management objects:
//   global-interface-configuration: Global scoped configuration
//     for interfaces
//   interface-configurations: interface configurations
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ifmgr_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ifmgr_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg global-interface-configuration}", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg interface-configurations}", reflect.TypeOf(InterfaceConfigurations{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:interface-configurations", reflect.TypeOf(InterfaceConfigurations{}))
}

// InterfaceModeEnum represents Interface mode enum
type InterfaceModeEnum string

const (
    // Default Interface Mode
    InterfaceModeEnum_default_ InterfaceModeEnum = "default"

    // Point-to-Point Interface Mode
    InterfaceModeEnum_point_to_point InterfaceModeEnum = "point-to-point"

    // Multipoint Interface Mode
    InterfaceModeEnum_multipoint InterfaceModeEnum = "multipoint"

    // L2 Transport Interface Mode
    InterfaceModeEnum_l2_transport InterfaceModeEnum = "l2-transport"
)

// SecondaryAdminStateEnum represents Secondary admin state enum
type SecondaryAdminStateEnum string

const (
    // Normal Mode
    SecondaryAdminStateEnum_normal SecondaryAdminStateEnum = "normal"

    // Maintenance Mode
    SecondaryAdminStateEnum_maintenance SecondaryAdminStateEnum = "maintenance"
)

// LinkStatusEnum represents Link status enum
type LinkStatusEnum string

const (
    // Display link status messages for physical links
    LinkStatusEnum_default_ LinkStatusEnum = "default"

    // Disable link status messages
    LinkStatusEnum_disable LinkStatusEnum = "disable"

    // Display link status messages for all interfaces
    LinkStatusEnum_software_interfaces LinkStatusEnum = "software-interfaces"
)

// GlobalInterfaceConfiguration
// Global scoped configuration for interfaces
type GlobalInterfaceConfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable link-status messages. The type is LinkStatusEnum. The
    // default value is default.
    LinkStatus interface{}
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetFilter() yfilter.YFilter { return globalInterfaceConfiguration.YFilter }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) SetFilter(yf yfilter.YFilter) { globalInterfaceConfiguration.YFilter = yf }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetGoName(yname string) string {
    if yname == "link-status" { return "LinkStatus" }
    return ""
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetSegmentPath() string {
    return "Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration"
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-status"] = globalInterfaceConfiguration.LinkStatus
    return leafs
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetYangName() string { return "global-interface-configuration" }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) SetParent(parent types.Entity) { globalInterfaceConfiguration.parent = parent }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetParent() types.Entity { return globalInterfaceConfiguration.parent }

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetParentYangName() string { return "Cisco-IOS-XR-ifmgr-cfg" }

// InterfaceConfigurations
// interface configurations
type InterfaceConfigurations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The configuration for an interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration.
    InterfaceConfiguration []InterfaceConfigurations_InterfaceConfiguration
}

func (interfaceConfigurations *InterfaceConfigurations) GetFilter() yfilter.YFilter { return interfaceConfigurations.YFilter }

func (interfaceConfigurations *InterfaceConfigurations) SetFilter(yf yfilter.YFilter) { interfaceConfigurations.YFilter = yf }

func (interfaceConfigurations *InterfaceConfigurations) GetGoName(yname string) string {
    if yname == "interface-configuration" { return "InterfaceConfiguration" }
    return ""
}

func (interfaceConfigurations *InterfaceConfigurations) GetSegmentPath() string {
    return "Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
}

func (interfaceConfigurations *InterfaceConfigurations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-configuration" {
        for _, c := range interfaceConfigurations.InterfaceConfiguration {
            if interfaceConfigurations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration{}
        interfaceConfigurations.InterfaceConfiguration = append(interfaceConfigurations.InterfaceConfiguration, child)
        return &interfaceConfigurations.InterfaceConfiguration[len(interfaceConfigurations.InterfaceConfiguration)-1]
    }
    return nil
}

func (interfaceConfigurations *InterfaceConfigurations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceConfigurations.InterfaceConfiguration {
        children[interfaceConfigurations.InterfaceConfiguration[i].GetSegmentPath()] = &interfaceConfigurations.InterfaceConfiguration[i]
    }
    return children
}

func (interfaceConfigurations *InterfaceConfigurations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceConfigurations *InterfaceConfigurations) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceConfigurations *InterfaceConfigurations) GetYangName() string { return "interface-configurations" }

func (interfaceConfigurations *InterfaceConfigurations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceConfigurations *InterfaceConfigurations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceConfigurations *InterfaceConfigurations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceConfigurations *InterfaceConfigurations) SetParent(parent types.Entity) { interfaceConfigurations.parent = parent }

func (interfaceConfigurations *InterfaceConfigurations) GetParent() types.Entity { return interfaceConfigurations.parent }

func (interfaceConfigurations *InterfaceConfigurations) GetParentYangName() string { return "Cisco-IOS-XR-ifmgr-cfg" }

// InterfaceConfigurations_InterfaceConfiguration
// The configuration for an interface
type InterfaceConfigurations_InterfaceConfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Whether the interface is active or preconfigured.
    // The type is string with pattern: (act)|(pre).
    Active interface{}

    // This attribute is a key. The name of the interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The existence of this configuration indicates the interface is shut down.
    // The type is interface{}.
    Shutdown interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software virtual/subinterface. The type is
    // interface{}.
    InterfaceVirtual interface{}

    // The secondary admin state of the interface. The type is
    // SecondaryAdminStateEnum.
    SecondaryAdminState interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software subinterface. The type is
    // InterfaceModeEnum. The default value is default.
    InterfaceModeNonPhysical interface{}

    // The bandwidth of the interface in kbps. The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Enable interface and line-protocol state change alarms. The type is
    // interface{}.
    LinkStatus interface{}

    // The description of this interface. The type is string.
    Description interface{}

    // Configure Laser-Squelch. The type is interface{}.
    LaserSquelch interface{}

    // Configure Performance Monitoring . The type is interface{}.
    PerfMonDisable interface{}

    // configure maintenance embargo flag on the given interface. The type is
    // bool.
    MaintenanceEmbargo interface{}

    // Assign the interface to a VRF. The type is string with length: 1..32.
    Vrf interface{}

    // Track Name. The type is string with length: 1..32.
    TrackName interface{}

    // Enable Fast Shutdown for this interface. The type is interface{}.
    FastShutdown interface{}

    // Set the Mac address on an interface. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddr interface{}

    // Whether this interface's state changes are dampened or not.
    Dampening InterfaceConfigurations_InterfaceConfiguration_Dampening

    // The MTU configuration for the interface.
    Mtus InterfaceConfigurations_InterfaceConfiguration_Mtus

    // The encapsulation on the interface.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_Encapsulation

    // AAA configuration.
    AaaTable InterfaceConfigurations_InterfaceConfiguration_AaaTable

    // EthernetControl.
    EthernetControl InterfaceConfigurations_InterfaceConfiguration_EthernetControl

    // Precision Time Protocol interface configuration.
    Ptp InterfaceConfigurations_InterfaceConfiguration_Ptp

    // PW-Ether attributes.
    PseudowireEther InterfaceConfigurations_InterfaceConfiguration_PseudowireEther

    // PW-IW attributes.
    PseudowireIw InterfaceConfigurations_InterfaceConfiguration_PseudowireIw

    // BVI attributes.
    Bvi InterfaceConfigurations_InterfaceConfiguration_Bvi

    // Interface Layer 2 Transport service configuration data.
    L2Transport InterfaceConfigurations_InterfaceConfiguration_L2Transport

    // ATM Configuration.
    Atm InterfaceConfigurations_InterfaceConfiguration_Atm

    // BFD over bundle members configuration.
    Bfd InterfaceConfigurations_InterfaceConfiguration_Bfd

    // Generic per-bundle configuration.
    Bundle InterfaceConfigurations_InterfaceConfiguration_Bundle

    // Link Aggregation Control Protocol per-interface configuration (for bundle
    // or member).
    Lacp InterfaceConfigurations_InterfaceConfiguration_Lacp

    // Generic per-member configuration.
    BundleMember InterfaceConfigurations_InterfaceConfiguration_BundleMember

    // Multi-chassis LACP configuration.
    Mlacp InterfaceConfigurations_InterfaceConfiguration_Mlacp

    // Interface specific CDP configuration.
    Cdp InterfaceConfigurations_InterfaceConfiguration_Cdp

    // Optics controller configuration.
    Optics InterfaceConfigurations_InterfaceConfiguration_Optics

    // OTU port controller configuration.
    Otu InterfaceConfigurations_InterfaceConfiguration_Otu

    // MACSec service for an interface.
    Macsec InterfaceConfigurations_InterfaceConfiguration_Macsec

    // Interface Specific Dot1x Configuration.
    Dot1XInterface InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface

    // Configure Extended loopback (diagnostics).
    Loopbacks InterfaceConfigurations_InterfaceConfiguration_Loopbacks

    // Ether specific interface configuration.
    Ethernet InterfaceConfigurations_InterfaceConfiguration_Ethernet

    // DWDM port controller configuration.
    Dwdm InterfaceConfigurations_InterfaceConfiguration_Dwdm

    // IEEE 802.1Q VLAN subinterface configuration.
    VlanSubConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration

    // Ethernet service configuration.
    EthernetService InterfaceConfigurations_InterfaceConfiguration_EthernetService

    // Ethernet Infra BNG specific configuration.
    EthernetBng InterfaceConfigurations_InterfaceConfiguration_EthernetBng

    // MAC Accounting Configuration.
    MacAccounting InterfaceConfigurations_InterfaceConfiguration_MacAccounting

    // Ethernet Features Configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_CarrierDelay

    // IEEE 802.1Q VLAN trunk interface configuration.
    VlanTrunkConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration

    // nV Satellite Access Link Configuration.
    NvSatelliteAccess InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess

    // nV Satellite Fabric Link Configuration.
    NvSatelliteFabricLink InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink

    // Complex Network connection to one or more Satellites.
    NvSatelliteFabricNetwork InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork

    // Disable LLDP TX or RX.
    Lldp InterfaceConfigurations_InterfaceConfiguration_Lldp

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions

    // Frequency Synchronization interface configuration.
    CiscoIosXrFreqsyncCfgFrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization

    // Interface control subscriber policy configuration.
    ServicePolicies InterfaceConfigurations_InterfaceConfiguration_ServicePolicies

    // Per-address-family and topology configuration.
    Afs InterfaceConfigurations_InterfaceConfiguration_Afs

    // Per-interface statistics configuration.
    Statistics InterfaceConfigurations_InterfaceConfiguration_Statistics

    // IPv6 Packet Filtering configuration for the interface.
    Ipv6PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter

    // ES Packet Filtering configuration for the interface.
    EsPacketFilter InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter

    // IPv4 Packet Filtering configuration for the interface.
    Ipv4PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter

    // Direct-Attached Gateway Redundancy configuration.
    Dagrs InterfaceConfigurations_InterfaceConfiguration_Dagrs

    // Configure Address Resolution Protocol.
    Ipv4Arp InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp

    // Interface IPv4 Network configuration data.
    Ipv4Network InterfaceConfigurations_InterfaceConfiguration_Ipv4Network

    // Interface IPv4 Network configuration data also used for forwarding.
    Ipv4NetworkForwarding InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding

    // Interface IPv6 Network configuration data.
    Ipv6Network InterfaceConfigurations_InterfaceConfiguration_Ipv6Network

    // IPv6 interface neighbor or neighbor discovery configuration.
    Ipv6Neighbor InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor

    // MPLS configuration under an interface.
    Mpls InterfaceConfigurations_InterfaceConfiguration_Mpls

    // MPLS tunnel attributes.
    TunnelTeAttributes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes

    // MPLS-TP tunnel attributes.
    TransportProfileTunnel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel

    // MPLS P2MP tunnel attributes.
    MteTunnelAttributes InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes

    // Frequency Synchronization interface configuration.
    CiscoIosXrNcs4KFreqsyncCfgFrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization

    // Configure through port-mode.
    Portmode InterfaceConfigurations_InterfaceConfiguration_Portmode

    // Interface PBR configuration.
    Pbr InterfaceConfigurations_InterfaceConfiguration_Pbr

    // Configure pm parameters.
    PerformanceManagement InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement

    // Interface PPP configuration data.
    CiscoIosXrPppMaCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaFsmCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaIpcpCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaIpcpiwCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp

    // Interface PPP configuration data.
    CiscoIosXrPppMaLcpCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp

    // SSRP Config.
    SsrpSession InterfaceConfigurations_InterfaceConfiguration_SsrpSession

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_Qos

    // Subscribers on interface.
    Subscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber

    // Interface PPPoE configuration data.
    Pppoe InterfaceConfigurations_InterfaceConfiguration_Pppoe

    // Interface netflow configuration.
    NetFlow InterfaceConfigurations_InterfaceConfiguration_NetFlow

    // IP over GRE encapsulation.
    TunnelIp InterfaceConfigurations_InterfaceConfiguration_TunnelIp

    // NVE operational data.
    Nve InterfaceConfigurations_InterfaceConfiguration_Nve

    // WANPHY port controller configuration.
    Wanphy InterfaceConfigurations_InterfaceConfiguration_Wanphy
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetFilter() yfilter.YFilter { return interfaceConfiguration.YFilter }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) SetFilter(yf yfilter.YFilter) { interfaceConfiguration.YFilter = yf }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "interface-virtual" { return "InterfaceVirtual" }
    if yname == "secondary-admin-state" { return "SecondaryAdminState" }
    if yname == "interface-mode-non-physical" { return "InterfaceModeNonPhysical" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "link-status" { return "LinkStatus" }
    if yname == "description" { return "Description" }
    if yname == "laser-squelch" { return "LaserSquelch" }
    if yname == "perf-mon-disable" { return "PerfMonDisable" }
    if yname == "maintenance-embargo" { return "MaintenanceEmbargo" }
    if yname == "vrf" { return "Vrf" }
    if yname == "track-name" { return "TrackName" }
    if yname == "fast-shutdown" { return "FastShutdown" }
    if yname == "mac-addr" { return "MacAddr" }
    if yname == "dampening" { return "Dampening" }
    if yname == "mtus" { return "Mtus" }
    if yname == "encapsulation" { return "Encapsulation" }
    if yname == "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table" { return "AaaTable" }
    if yname == "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control" { return "EthernetControl" }
    if yname == "Cisco-IOS-XR-ptp-cfg:ptp" { return "Ptp" }
    if yname == "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether" { return "PseudowireEther" }
    if yname == "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw" { return "PseudowireIw" }
    if yname == "Cisco-IOS-XR-l2vpn-cfg:bvi" { return "Bvi" }
    if yname == "Cisco-IOS-XR-l2vpn-cfg:l2-transport" { return "L2Transport" }
    if yname == "Cisco-IOS-XR-atm-vcm-cfg:atm" { return "Atm" }
    if yname == "Cisco-IOS-XR-bundlemgr-cfg:bfd" { return "Bfd" }
    if yname == "Cisco-IOS-XR-bundlemgr-cfg:bundle" { return "Bundle" }
    if yname == "Cisco-IOS-XR-bundlemgr-cfg:lacp" { return "Lacp" }
    if yname == "Cisco-IOS-XR-bundlemgr-cfg:bundle-member" { return "BundleMember" }
    if yname == "Cisco-IOS-XR-bundlemgr-cfg:mlacp" { return "Mlacp" }
    if yname == "Cisco-IOS-XR-cdp-cfg:cdp" { return "Cdp" }
    if yname == "Cisco-IOS-XR-controller-optics-cfg:optics" { return "Optics" }
    if yname == "Cisco-IOS-XR-controller-otu-cfg:otu" { return "Otu" }
    if yname == "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec" { return "Macsec" }
    if yname == "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface" { return "Dot1XInterface" }
    if yname == "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks" { return "Loopbacks" }
    if yname == "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet" { return "Ethernet" }
    if yname == "Cisco-IOS-XR-dwdm-ui-cfg:dwdm" { return "Dwdm" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration" { return "VlanSubConfiguration" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service" { return "EthernetService" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng" { return "EthernetBng" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting" { return "MacAccounting" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features" { return "EthernetFeatures" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay" { return "CarrierDelay" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration" { return "VlanTrunkConfiguration" }
    if yname == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access" { return "NvSatelliteAccess" }
    if yname == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link" { return "NvSatelliteFabricLink" }
    if yname == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network" { return "NvSatelliteFabricNetwork" }
    if yname == "Cisco-IOS-XR-ethernet-lldp-cfg:lldp" { return "Lldp" }
    if yname == "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions" { return "SpanMonitorSessions" }
    if yname == "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization" { return "CiscoIosXrFreqsyncCfgFrequencySynchronization" }
    if yname == "Cisco-IOS-XR-iedge4710-cfg:service-policies" { return "ServicePolicies" }
    if yname == "Cisco-IOS-XR-infra-rsi-cfg:afs" { return "Afs" }
    if yname == "Cisco-IOS-XR-infra-statsd-cfg:statistics" { return "Statistics" }
    if yname == "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter" { return "Ipv6PacketFilter" }
    if yname == "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter" { return "EsPacketFilter" }
    if yname == "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter" { return "Ipv4PacketFilter" }
    if yname == "Cisco-IOS-XR-ipv4-arp-cfg:dagrs" { return "Dagrs" }
    if yname == "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp" { return "Ipv4Arp" }
    if yname == "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network" { return "Ipv4Network" }
    if yname == "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding" { return "Ipv4NetworkForwarding" }
    if yname == "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network" { return "Ipv6Network" }
    if yname == "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor" { return "Ipv6Neighbor" }
    if yname == "Cisco-IOS-XR-mpls-io-cfg:mpls" { return "Mpls" }
    if yname == "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes" { return "TunnelTeAttributes" }
    if yname == "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel" { return "TransportProfileTunnel" }
    if yname == "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes" { return "MteTunnelAttributes" }
    if yname == "Cisco-IOS-XR-ncs4k-freqsync-cfg:frequency-synchronization" { return "CiscoIosXrNcs4KFreqsyncCfgFrequencySynchronization" }
    if yname == "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode" { return "Portmode" }
    if yname == "Cisco-IOS-XR-pbr-cfg:pbr" { return "Pbr" }
    if yname == "Cisco-IOS-XR-pmengine-cfg:performance-management" { return "PerformanceManagement" }
    if yname == "Cisco-IOS-XR-ppp-ma-cfg:ppp" { return "CiscoIosXrPppMaCfgPpp" }
    if yname == "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp" { return "CiscoIosXrPppMaFsmCfgPpp" }
    if yname == "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp" { return "CiscoIosXrPppMaIpcpCfgPpp" }
    if yname == "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp" { return "CiscoIosXrPppMaIpcpiwCfgPpp" }
    if yname == "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp" { return "CiscoIosXrPppMaLcpCfgPpp" }
    if yname == "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session" { return "SsrpSession" }
    if yname == "Cisco-IOS-XR-qos-ma-cfg:qos" { return "Qos" }
    if yname == "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber" { return "Subscriber" }
    if yname == "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe" { return "Pppoe" }
    if yname == "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow" { return "NetFlow" }
    if yname == "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip" { return "TunnelIp" }
    if yname == "Cisco-IOS-XR-tunnel-nve-cfg:nve" { return "Nve" }
    if yname == "Cisco-IOS-XR-wanphy-ui-cfg:wanphy" { return "Wanphy" }
    return ""
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetSegmentPath() string {
    return "interface-configuration" + "[active='" + fmt.Sprintf("%v", interfaceConfiguration.Active) + "']" + "[interface-name='" + fmt.Sprintf("%v", interfaceConfiguration.InterfaceName) + "']"
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dampening" {
        return &interfaceConfiguration.Dampening
    }
    if childYangName == "mtus" {
        return &interfaceConfiguration.Mtus
    }
    if childYangName == "encapsulation" {
        return &interfaceConfiguration.Encapsulation
    }
    if childYangName == "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table" {
        return &interfaceConfiguration.AaaTable
    }
    if childYangName == "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control" {
        return &interfaceConfiguration.EthernetControl
    }
    if childYangName == "Cisco-IOS-XR-ptp-cfg:ptp" {
        return &interfaceConfiguration.Ptp
    }
    if childYangName == "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether" {
        return &interfaceConfiguration.PseudowireEther
    }
    if childYangName == "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw" {
        return &interfaceConfiguration.PseudowireIw
    }
    if childYangName == "Cisco-IOS-XR-l2vpn-cfg:bvi" {
        return &interfaceConfiguration.Bvi
    }
    if childYangName == "Cisco-IOS-XR-l2vpn-cfg:l2-transport" {
        return &interfaceConfiguration.L2Transport
    }
    if childYangName == "Cisco-IOS-XR-atm-vcm-cfg:atm" {
        return &interfaceConfiguration.Atm
    }
    if childYangName == "Cisco-IOS-XR-bundlemgr-cfg:bfd" {
        return &interfaceConfiguration.Bfd
    }
    if childYangName == "Cisco-IOS-XR-bundlemgr-cfg:bundle" {
        return &interfaceConfiguration.Bundle
    }
    if childYangName == "Cisco-IOS-XR-bundlemgr-cfg:lacp" {
        return &interfaceConfiguration.Lacp
    }
    if childYangName == "Cisco-IOS-XR-bundlemgr-cfg:bundle-member" {
        return &interfaceConfiguration.BundleMember
    }
    if childYangName == "Cisco-IOS-XR-bundlemgr-cfg:mlacp" {
        return &interfaceConfiguration.Mlacp
    }
    if childYangName == "Cisco-IOS-XR-cdp-cfg:cdp" {
        return &interfaceConfiguration.Cdp
    }
    if childYangName == "Cisco-IOS-XR-controller-optics-cfg:optics" {
        return &interfaceConfiguration.Optics
    }
    if childYangName == "Cisco-IOS-XR-controller-otu-cfg:otu" {
        return &interfaceConfiguration.Otu
    }
    if childYangName == "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec" {
        return &interfaceConfiguration.Macsec
    }
    if childYangName == "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface" {
        return &interfaceConfiguration.Dot1XInterface
    }
    if childYangName == "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks" {
        return &interfaceConfiguration.Loopbacks
    }
    if childYangName == "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet" {
        return &interfaceConfiguration.Ethernet
    }
    if childYangName == "Cisco-IOS-XR-dwdm-ui-cfg:dwdm" {
        return &interfaceConfiguration.Dwdm
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration" {
        return &interfaceConfiguration.VlanSubConfiguration
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service" {
        return &interfaceConfiguration.EthernetService
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng" {
        return &interfaceConfiguration.EthernetBng
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting" {
        return &interfaceConfiguration.MacAccounting
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features" {
        return &interfaceConfiguration.EthernetFeatures
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay" {
        return &interfaceConfiguration.CarrierDelay
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration" {
        return &interfaceConfiguration.VlanTrunkConfiguration
    }
    if childYangName == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access" {
        return &interfaceConfiguration.NvSatelliteAccess
    }
    if childYangName == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link" {
        return &interfaceConfiguration.NvSatelliteFabricLink
    }
    if childYangName == "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network" {
        return &interfaceConfiguration.NvSatelliteFabricNetwork
    }
    if childYangName == "Cisco-IOS-XR-ethernet-lldp-cfg:lldp" {
        return &interfaceConfiguration.Lldp
    }
    if childYangName == "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions" {
        return &interfaceConfiguration.SpanMonitorSessions
    }
    if childYangName == "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization" {
        return &interfaceConfiguration.CiscoIosXrFreqsyncCfgFrequencySynchronization
    }
    if childYangName == "Cisco-IOS-XR-iedge4710-cfg:service-policies" {
        return &interfaceConfiguration.ServicePolicies
    }
    if childYangName == "Cisco-IOS-XR-infra-rsi-cfg:afs" {
        return &interfaceConfiguration.Afs
    }
    if childYangName == "Cisco-IOS-XR-infra-statsd-cfg:statistics" {
        return &interfaceConfiguration.Statistics
    }
    if childYangName == "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter" {
        return &interfaceConfiguration.Ipv6PacketFilter
    }
    if childYangName == "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter" {
        return &interfaceConfiguration.EsPacketFilter
    }
    if childYangName == "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter" {
        return &interfaceConfiguration.Ipv4PacketFilter
    }
    if childYangName == "Cisco-IOS-XR-ipv4-arp-cfg:dagrs" {
        return &interfaceConfiguration.Dagrs
    }
    if childYangName == "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp" {
        return &interfaceConfiguration.Ipv4Arp
    }
    if childYangName == "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network" {
        return &interfaceConfiguration.Ipv4Network
    }
    if childYangName == "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding" {
        return &interfaceConfiguration.Ipv4NetworkForwarding
    }
    if childYangName == "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network" {
        return &interfaceConfiguration.Ipv6Network
    }
    if childYangName == "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor" {
        return &interfaceConfiguration.Ipv6Neighbor
    }
    if childYangName == "Cisco-IOS-XR-mpls-io-cfg:mpls" {
        return &interfaceConfiguration.Mpls
    }
    if childYangName == "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes" {
        return &interfaceConfiguration.TunnelTeAttributes
    }
    if childYangName == "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel" {
        return &interfaceConfiguration.TransportProfileTunnel
    }
    if childYangName == "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes" {
        return &interfaceConfiguration.MteTunnelAttributes
    }
    if childYangName == "Cisco-IOS-XR-ncs4k-freqsync-cfg:frequency-synchronization" {
        return &interfaceConfiguration.CiscoIosXrNcs4KFreqsyncCfgFrequencySynchronization
    }
    if childYangName == "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode" {
        return &interfaceConfiguration.Portmode
    }
    if childYangName == "Cisco-IOS-XR-pbr-cfg:pbr" {
        return &interfaceConfiguration.Pbr
    }
    if childYangName == "Cisco-IOS-XR-pmengine-cfg:performance-management" {
        return &interfaceConfiguration.PerformanceManagement
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-cfg:ppp" {
        return &interfaceConfiguration.CiscoIosXrPppMaCfgPpp
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp" {
        return &interfaceConfiguration.CiscoIosXrPppMaFsmCfgPpp
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp" {
        return &interfaceConfiguration.CiscoIosXrPppMaIpcpCfgPpp
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp" {
        return &interfaceConfiguration.CiscoIosXrPppMaIpcpiwCfgPpp
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp" {
        return &interfaceConfiguration.CiscoIosXrPppMaLcpCfgPpp
    }
    if childYangName == "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session" {
        return &interfaceConfiguration.SsrpSession
    }
    if childYangName == "Cisco-IOS-XR-qos-ma-cfg:qos" {
        return &interfaceConfiguration.Qos
    }
    if childYangName == "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber" {
        return &interfaceConfiguration.Subscriber
    }
    if childYangName == "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe" {
        return &interfaceConfiguration.Pppoe
    }
    if childYangName == "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow" {
        return &interfaceConfiguration.NetFlow
    }
    if childYangName == "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip" {
        return &interfaceConfiguration.TunnelIp
    }
    if childYangName == "Cisco-IOS-XR-tunnel-nve-cfg:nve" {
        return &interfaceConfiguration.Nve
    }
    if childYangName == "Cisco-IOS-XR-wanphy-ui-cfg:wanphy" {
        return &interfaceConfiguration.Wanphy
    }
    return nil
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dampening"] = &interfaceConfiguration.Dampening
    children["mtus"] = &interfaceConfiguration.Mtus
    children["encapsulation"] = &interfaceConfiguration.Encapsulation
    children["Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"] = &interfaceConfiguration.AaaTable
    children["Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"] = &interfaceConfiguration.EthernetControl
    children["Cisco-IOS-XR-ptp-cfg:ptp"] = &interfaceConfiguration.Ptp
    children["Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"] = &interfaceConfiguration.PseudowireEther
    children["Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"] = &interfaceConfiguration.PseudowireIw
    children["Cisco-IOS-XR-l2vpn-cfg:bvi"] = &interfaceConfiguration.Bvi
    children["Cisco-IOS-XR-l2vpn-cfg:l2-transport"] = &interfaceConfiguration.L2Transport
    children["Cisco-IOS-XR-atm-vcm-cfg:atm"] = &interfaceConfiguration.Atm
    children["Cisco-IOS-XR-bundlemgr-cfg:bfd"] = &interfaceConfiguration.Bfd
    children["Cisco-IOS-XR-bundlemgr-cfg:bundle"] = &interfaceConfiguration.Bundle
    children["Cisco-IOS-XR-bundlemgr-cfg:lacp"] = &interfaceConfiguration.Lacp
    children["Cisco-IOS-XR-bundlemgr-cfg:bundle-member"] = &interfaceConfiguration.BundleMember
    children["Cisco-IOS-XR-bundlemgr-cfg:mlacp"] = &interfaceConfiguration.Mlacp
    children["Cisco-IOS-XR-cdp-cfg:cdp"] = &interfaceConfiguration.Cdp
    children["Cisco-IOS-XR-controller-optics-cfg:optics"] = &interfaceConfiguration.Optics
    children["Cisco-IOS-XR-controller-otu-cfg:otu"] = &interfaceConfiguration.Otu
    children["Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"] = &interfaceConfiguration.Macsec
    children["Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"] = &interfaceConfiguration.Dot1XInterface
    children["Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"] = &interfaceConfiguration.Loopbacks
    children["Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"] = &interfaceConfiguration.Ethernet
    children["Cisco-IOS-XR-dwdm-ui-cfg:dwdm"] = &interfaceConfiguration.Dwdm
    children["Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"] = &interfaceConfiguration.VlanSubConfiguration
    children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"] = &interfaceConfiguration.EthernetService
    children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"] = &interfaceConfiguration.EthernetBng
    children["Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"] = &interfaceConfiguration.MacAccounting
    children["Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"] = &interfaceConfiguration.EthernetFeatures
    children["Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"] = &interfaceConfiguration.CarrierDelay
    children["Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"] = &interfaceConfiguration.VlanTrunkConfiguration
    children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"] = &interfaceConfiguration.NvSatelliteAccess
    children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"] = &interfaceConfiguration.NvSatelliteFabricLink
    children["Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"] = &interfaceConfiguration.NvSatelliteFabricNetwork
    children["Cisco-IOS-XR-ethernet-lldp-cfg:lldp"] = &interfaceConfiguration.Lldp
    children["Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"] = &interfaceConfiguration.SpanMonitorSessions
    children["Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"] = &interfaceConfiguration.CiscoIosXrFreqsyncCfgFrequencySynchronization
    children["Cisco-IOS-XR-iedge4710-cfg:service-policies"] = &interfaceConfiguration.ServicePolicies
    children["Cisco-IOS-XR-infra-rsi-cfg:afs"] = &interfaceConfiguration.Afs
    children["Cisco-IOS-XR-infra-statsd-cfg:statistics"] = &interfaceConfiguration.Statistics
    children["Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"] = &interfaceConfiguration.Ipv6PacketFilter
    children["Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"] = &interfaceConfiguration.EsPacketFilter
    children["Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"] = &interfaceConfiguration.Ipv4PacketFilter
    children["Cisco-IOS-XR-ipv4-arp-cfg:dagrs"] = &interfaceConfiguration.Dagrs
    children["Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"] = &interfaceConfiguration.Ipv4Arp
    children["Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"] = &interfaceConfiguration.Ipv4Network
    children["Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"] = &interfaceConfiguration.Ipv4NetworkForwarding
    children["Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"] = &interfaceConfiguration.Ipv6Network
    children["Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"] = &interfaceConfiguration.Ipv6Neighbor
    children["Cisco-IOS-XR-mpls-io-cfg:mpls"] = &interfaceConfiguration.Mpls
    children["Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"] = &interfaceConfiguration.TunnelTeAttributes
    children["Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"] = &interfaceConfiguration.TransportProfileTunnel
    children["Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"] = &interfaceConfiguration.MteTunnelAttributes
    children["Cisco-IOS-XR-ncs4k-freqsync-cfg:frequency-synchronization"] = &interfaceConfiguration.CiscoIosXrNcs4KFreqsyncCfgFrequencySynchronization
    children["Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"] = &interfaceConfiguration.Portmode
    children["Cisco-IOS-XR-pbr-cfg:pbr"] = &interfaceConfiguration.Pbr
    children["Cisco-IOS-XR-pmengine-cfg:performance-management"] = &interfaceConfiguration.PerformanceManagement
    children["Cisco-IOS-XR-ppp-ma-cfg:ppp"] = &interfaceConfiguration.CiscoIosXrPppMaCfgPpp
    children["Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"] = &interfaceConfiguration.CiscoIosXrPppMaFsmCfgPpp
    children["Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"] = &interfaceConfiguration.CiscoIosXrPppMaIpcpCfgPpp
    children["Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"] = &interfaceConfiguration.CiscoIosXrPppMaIpcpiwCfgPpp
    children["Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"] = &interfaceConfiguration.CiscoIosXrPppMaLcpCfgPpp
    children["Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"] = &interfaceConfiguration.SsrpSession
    children["Cisco-IOS-XR-qos-ma-cfg:qos"] = &interfaceConfiguration.Qos
    children["Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"] = &interfaceConfiguration.Subscriber
    children["Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"] = &interfaceConfiguration.Pppoe
    children["Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"] = &interfaceConfiguration.NetFlow
    children["Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"] = &interfaceConfiguration.TunnelIp
    children["Cisco-IOS-XR-tunnel-nve-cfg:nve"] = &interfaceConfiguration.Nve
    children["Cisco-IOS-XR-wanphy-ui-cfg:wanphy"] = &interfaceConfiguration.Wanphy
    return children
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = interfaceConfiguration.Active
    leafs["interface-name"] = interfaceConfiguration.InterfaceName
    leafs["shutdown"] = interfaceConfiguration.Shutdown
    leafs["interface-virtual"] = interfaceConfiguration.InterfaceVirtual
    leafs["secondary-admin-state"] = interfaceConfiguration.SecondaryAdminState
    leafs["interface-mode-non-physical"] = interfaceConfiguration.InterfaceModeNonPhysical
    leafs["bandwidth"] = interfaceConfiguration.Bandwidth
    leafs["link-status"] = interfaceConfiguration.LinkStatus
    leafs["description"] = interfaceConfiguration.Description
    leafs["laser-squelch"] = interfaceConfiguration.LaserSquelch
    leafs["perf-mon-disable"] = interfaceConfiguration.PerfMonDisable
    leafs["maintenance-embargo"] = interfaceConfiguration.MaintenanceEmbargo
    leafs["vrf"] = interfaceConfiguration.Vrf
    leafs["track-name"] = interfaceConfiguration.TrackName
    leafs["fast-shutdown"] = interfaceConfiguration.FastShutdown
    leafs["mac-addr"] = interfaceConfiguration.MacAddr
    return leafs
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetYangName() string { return "interface-configuration" }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) SetParent(parent types.Entity) { interfaceConfiguration.parent = parent }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetParent() types.Entity { return interfaceConfiguration.parent }

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetParentYangName() string { return "interface-configurations" }

// InterfaceConfigurations_InterfaceConfiguration_Dampening
// Whether this interface's state changes are
// dampened or not
type InterfaceConfigurations_InterfaceConfiguration_Dampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dampening Arguments. The type is Args.
    Args interface{}

    // Decay half life (in minutes). The type is interface{} with range: 1..45.
    // Units are minute.
    HalfLife interface{}

    // Reuse threshold. The type is interface{} with range: 1..20000.
    ReuseThreshold interface{}

    // Suppress threshold. The type is interface{} with range: 1..20000.
    SuppressThreshold interface{}

    // Max suppress time (in minutes). The type is interface{} with range: 1..255.
    // Units are minute.
    SuppressTime interface{}

    // Restart penalty. The type is interface{} with range: 0..20000.
    RestartPenalty interface{}
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetFilter() yfilter.YFilter { return dampening.YFilter }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) SetFilter(yf yfilter.YFilter) { dampening.YFilter = yf }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetGoName(yname string) string {
    if yname == "args" { return "Args" }
    if yname == "half-life" { return "HalfLife" }
    if yname == "reuse-threshold" { return "ReuseThreshold" }
    if yname == "suppress-threshold" { return "SuppressThreshold" }
    if yname == "suppress-time" { return "SuppressTime" }
    if yname == "restart-penalty" { return "RestartPenalty" }
    return ""
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetSegmentPath() string {
    return "dampening"
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["args"] = dampening.Args
    leafs["half-life"] = dampening.HalfLife
    leafs["reuse-threshold"] = dampening.ReuseThreshold
    leafs["suppress-threshold"] = dampening.SuppressThreshold
    leafs["suppress-time"] = dampening.SuppressTime
    leafs["restart-penalty"] = dampening.RestartPenalty
    return leafs
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetBundleName() string { return "cisco_ios_xr" }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetYangName() string { return "dampening" }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) SetParent(parent types.Entity) { dampening.parent = parent }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetParent() types.Entity { return dampening.parent }

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Dampening_Args represents Dampening Arguments
type InterfaceConfigurations_InterfaceConfiguration_Dampening_Args string

const (
    // Default values
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "default-values"

    // Half Life Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-half-life"

    // All Arguments except Restart Penalty
    // Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-all"

    // All Arguments Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-rp"
)

// InterfaceConfigurations_InterfaceConfiguration_Mtus
// The MTU configuration for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The MTU for the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu.
    Mtu []InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetFilter() yfilter.YFilter { return mtus.YFilter }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) SetFilter(yf yfilter.YFilter) { mtus.YFilter = yf }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetGoName(yname string) string {
    if yname == "mtu" { return "Mtu" }
    return ""
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetSegmentPath() string {
    return "mtus"
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mtu" {
        for _, c := range mtus.Mtu {
            if mtus.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu{}
        mtus.Mtu = append(mtus.Mtu, child)
        return &mtus.Mtu[len(mtus.Mtu)-1]
    }
    return nil
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mtus.Mtu {
        children[mtus.Mtu[i].GetSegmentPath()] = &mtus.Mtu[i]
    }
    return children
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetBundleName() string { return "cisco_ios_xr" }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetYangName() string { return "mtus" }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) SetParent(parent types.Entity) { mtus.parent = parent }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetParent() types.Entity { return mtus.parent }

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
// The MTU for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The Owner of the interface - eg. for 'LoopbackX'
    // main interface this is 'loopback'. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Owner interface{}

    // The MTU value. The type is interface{} with range: 64..65535. This
    // attribute is mandatory.
    Mtu interface{}
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetFilter() yfilter.YFilter { return mtu.YFilter }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) SetFilter(yf yfilter.YFilter) { mtu.YFilter = yf }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetGoName(yname string) string {
    if yname == "owner" { return "Owner" }
    if yname == "mtu" { return "Mtu" }
    return ""
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetSegmentPath() string {
    return "mtu" + "[owner='" + fmt.Sprintf("%v", mtu.Owner) + "']"
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner"] = mtu.Owner
    leafs["mtu"] = mtu.Mtu
    return leafs
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetBundleName() string { return "cisco_ios_xr" }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetYangName() string { return "mtu" }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) SetParent(parent types.Entity) { mtu.parent = parent }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetParent() types.Entity { return mtu.parent }

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetParentYangName() string { return "mtus" }

// InterfaceConfigurations_InterfaceConfiguration_Encapsulation
// The encapsulation on the interface
type InterfaceConfigurations_InterfaceConfiguration_Encapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The encapsulation - e.g. hdlc, ppp. The type is string.
    Encapsulation interface{}

    // The options for this capsulation, usually '0'. The type is interface{} with
    // range: -2147483648..2147483647.
    CapsulationOptions interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetFilter() yfilter.YFilter { return encapsulation.YFilter }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) SetFilter(yf yfilter.YFilter) { encapsulation.YFilter = yf }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetGoName(yname string) string {
    if yname == "encapsulation" { return "Encapsulation" }
    if yname == "capsulation-options" { return "CapsulationOptions" }
    return ""
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetSegmentPath() string {
    return "encapsulation"
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["encapsulation"] = encapsulation.Encapsulation
    leafs["capsulation-options"] = encapsulation.CapsulationOptions
    return leafs
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetYangName() string { return "encapsulation" }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) SetParent(parent types.Entity) { encapsulation.parent = parent }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetParent() types.Entity { return encapsulation.parent }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_AaaTable
// AAA configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AAA radius configuration.
    Radius InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetFilter() yfilter.YFilter { return aaaTable.YFilter }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) SetFilter(yf yfilter.YFilter) { aaaTable.YFilter = yf }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetGoName(yname string) string {
    if yname == "radius" { return "Radius" }
    return ""
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetSegmentPath() string {
    return "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "radius" {
        return &aaaTable.Radius
    }
    return nil
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["radius"] = &aaaTable.Radius
    return children
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetBundleName() string { return "cisco_ios_xr" }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetYangName() string { return "aaa-table" }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) SetParent(parent types.Entity) { aaaTable.parent = parent }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetParent() types.Entity { return aaaTable.parent }

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
// AAA radius configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AAA radius attribute.
    Attribute InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetFilter() yfilter.YFilter { return radius.YFilter }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) SetFilter(yf yfilter.YFilter) { radius.YFilter = yf }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetGoName(yname string) string {
    if yname == "attribute" { return "Attribute" }
    return ""
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetSegmentPath() string {
    return "radius"
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attribute" {
        return &radius.Attribute
    }
    return nil
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["attribute"] = &radius.Attribute
    return children
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetBundleName() string { return "cisco_ios_xr" }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetYangName() string { return "radius" }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) SetParent(parent types.Entity) { radius.parent = parent }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetParent() types.Entity { return radius.parent }

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetParentYangName() string { return "aaa-table" }

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
// AAA radius attribute
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AAA nas-port-type attribute. The type is NasPortValue.
    NasPortType interface{}
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetFilter() yfilter.YFilter { return attribute.YFilter }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) SetFilter(yf yfilter.YFilter) { attribute.YFilter = yf }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetGoName(yname string) string {
    if yname == "nas-port-type" { return "NasPortType" }
    return ""
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetSegmentPath() string {
    return "attribute"
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nas-port-type"] = attribute.NasPortType
    return leafs
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetBundleName() string { return "cisco_ios_xr" }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetYangName() string { return "attribute" }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) SetParent(parent types.Entity) { attribute.parent = parent }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetParent() types.Entity { return attribute.parent }

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetParentYangName() string { return "radius" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl
// EthernetControl
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the transport mode on an interface. The type is EtherCtrlTransportMode.
    TransportMode interface{}

    // Enable small frame padding on an interface. The type is interface{}.
    SmallFramePadding interface{}

    // Transceiver.
    Transceiver InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetFilter() yfilter.YFilter { return ethernetControl.YFilter }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) SetFilter(yf yfilter.YFilter) { ethernetControl.YFilter = yf }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetGoName(yname string) string {
    if yname == "transport-mode" { return "TransportMode" }
    if yname == "small-frame-padding" { return "SmallFramePadding" }
    if yname == "transceiver" { return "Transceiver" }
    return ""
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetSegmentPath() string {
    return "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transceiver" {
        return &ethernetControl.Transceiver
    }
    return nil
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transceiver"] = &ethernetControl.Transceiver
    return children
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-mode"] = ethernetControl.TransportMode
    leafs["small-frame-padding"] = ethernetControl.SmallFramePadding
    return leafs
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetYangName() string { return "ethernet-control" }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) SetParent(parent types.Entity) { ethernetControl.parent = parent }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetParent() types.Entity { return ethernetControl.parent }

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
// Transceiver
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Permit.
    Permit InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetFilter() yfilter.YFilter { return transceiver.YFilter }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) SetFilter(yf yfilter.YFilter) { transceiver.YFilter = yf }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetGoName(yname string) string {
    if yname == "permit" { return "Permit" }
    return ""
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetSegmentPath() string {
    return "transceiver"
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "permit" {
        return &transceiver.Permit
    }
    return nil
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["permit"] = &transceiver.Permit
    return children
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetBundleName() string { return "cisco_ios_xr" }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetYangName() string { return "transceiver" }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) SetParent(parent types.Entity) { transceiver.parent = parent }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetParent() types.Entity { return transceiver.parent }

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetParentYangName() string { return "ethernet-control" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
// Permit
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Permit pluggable type all. The type is PermitPluggable.
    Type interface{}

    // Permit pluggable PID (Product ID) all. The type is PermitPluggablePid.
    Pid interface{}
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetFilter() yfilter.YFilter { return permit.YFilter }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) SetFilter(yf yfilter.YFilter) { permit.YFilter = yf }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "pid" { return "Pid" }
    return ""
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetSegmentPath() string {
    return "permit"
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = permit.Type
    leafs["pid"] = permit.Pid
    return leafs
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetBundleName() string { return "cisco_ios_xr" }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetYangName() string { return "permit" }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) SetParent(parent types.Entity) { permit.parent = parent }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetParent() types.Entity { return permit.parent }

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetParentYangName() string { return "transceiver" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp
// Precision Time Protocol interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    SyncGrantDuration interface{}

    // General COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    GeneralCos interface{}

    // Enable the precision time protocol. The type is interface{}.
    Enable interface{}

    // Sync timeout, in milliseconds. The type is interface{} with range:
    // 100..100000. Units are millisecond. The default value is 5000.
    SyncTimeout interface{}

    // Transport. The type is PtpEncap. The default value is ipv4.
    Transport interface{}

    // Precision Time Protocol configuration profile. The type is string.
    Profile interface{}

    // Announce Timeout. The type is interface{} with range: 2..10. The default
    // value is 3.
    AnnounceTimeout interface{}

    // COS. The type is interface{} with range: 0..7. The default value is 6.
    Cos interface{}

    // Port state restriction. The type is PtpPortState. The default value is any.
    PortState interface{}

    // Delay-Response timeout, in milliseconds. The type is interface{} with
    // range: 100..100000. Units are millisecond. The default value is 5000.
    DelayResponseTimeout interface{}

    // Local priority. The type is interface{} with range: 1..255. The default
    // value is 128.
    LocalPriority interface{}

    // Delay-Response unicast grant duration, in seconds. The type is interface{}
    // with range: 60..1000. Units are second. The default value is 300.
    DelayResponseGrantDuration interface{}

    // Event COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    EventCos interface{}

    // DSCP. The type is interface{} with range: 0..63. The default value is 46.
    Dscp interface{}

    // General DSCP. The type is interface{} with range: 0..63. The default value
    // is 46.
    GeneralDscp interface{}

    // Clock Operation. The type is PtpClockOperation. The default value is
    // two-step.
    ClockOperation interface{}

    // Announce unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    AnnounceGrantDuration interface{}

    // Invalid unicast grant request response. The type is
    // PtpInvalidUnicastGrantRequestResponse. The default value is reduce.
    UnicastGrantInvalidRequest interface{}

    // Event DSCP. The type is interface{} with range: 0..63. The default value is
    // 46.
    EventDscp interface{}

    // Source IPv6 Address.
    SourceIpv6Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address

    // Announce interval.
    AnnounceInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval

    // Source IPv4 Address.
    SourceIpv4Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address

    // Table for slave configuration.
    Slaves InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves

    // Sync interval.
    SyncInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval

    // Table for master configuration.
    Masters InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters

    // Communication model.
    Communication InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication

    // Minimum delay request interval.
    DelayRequestMinimumInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetFilter() yfilter.YFilter { return ptp.YFilter }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) SetFilter(yf yfilter.YFilter) { ptp.YFilter = yf }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetGoName(yname string) string {
    if yname == "sync-grant-duration" { return "SyncGrantDuration" }
    if yname == "general-cos" { return "GeneralCos" }
    if yname == "enable" { return "Enable" }
    if yname == "sync-timeout" { return "SyncTimeout" }
    if yname == "transport" { return "Transport" }
    if yname == "profile" { return "Profile" }
    if yname == "announce-timeout" { return "AnnounceTimeout" }
    if yname == "cos" { return "Cos" }
    if yname == "port-state" { return "PortState" }
    if yname == "delay-response-timeout" { return "DelayResponseTimeout" }
    if yname == "local-priority" { return "LocalPriority" }
    if yname == "delay-response-grant-duration" { return "DelayResponseGrantDuration" }
    if yname == "event-cos" { return "EventCos" }
    if yname == "dscp" { return "Dscp" }
    if yname == "general-dscp" { return "GeneralDscp" }
    if yname == "clock-operation" { return "ClockOperation" }
    if yname == "announce-grant-duration" { return "AnnounceGrantDuration" }
    if yname == "unicast-grant-invalid-request" { return "UnicastGrantInvalidRequest" }
    if yname == "event-dscp" { return "EventDscp" }
    if yname == "source-ipv6-address" { return "SourceIpv6Address" }
    if yname == "announce-interval" { return "AnnounceInterval" }
    if yname == "source-ipv4-address" { return "SourceIpv4Address" }
    if yname == "slaves" { return "Slaves" }
    if yname == "sync-interval" { return "SyncInterval" }
    if yname == "masters" { return "Masters" }
    if yname == "communication" { return "Communication" }
    if yname == "delay-request-minimum-interval" { return "DelayRequestMinimumInterval" }
    return ""
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ptp-cfg:ptp"
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-ipv6-address" {
        return &ptp.SourceIpv6Address
    }
    if childYangName == "announce-interval" {
        return &ptp.AnnounceInterval
    }
    if childYangName == "source-ipv4-address" {
        return &ptp.SourceIpv4Address
    }
    if childYangName == "slaves" {
        return &ptp.Slaves
    }
    if childYangName == "sync-interval" {
        return &ptp.SyncInterval
    }
    if childYangName == "masters" {
        return &ptp.Masters
    }
    if childYangName == "communication" {
        return &ptp.Communication
    }
    if childYangName == "delay-request-minimum-interval" {
        return &ptp.DelayRequestMinimumInterval
    }
    return nil
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-ipv6-address"] = &ptp.SourceIpv6Address
    children["announce-interval"] = &ptp.AnnounceInterval
    children["source-ipv4-address"] = &ptp.SourceIpv4Address
    children["slaves"] = &ptp.Slaves
    children["sync-interval"] = &ptp.SyncInterval
    children["masters"] = &ptp.Masters
    children["communication"] = &ptp.Communication
    children["delay-request-minimum-interval"] = &ptp.DelayRequestMinimumInterval
    return children
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-grant-duration"] = ptp.SyncGrantDuration
    leafs["general-cos"] = ptp.GeneralCos
    leafs["enable"] = ptp.Enable
    leafs["sync-timeout"] = ptp.SyncTimeout
    leafs["transport"] = ptp.Transport
    leafs["profile"] = ptp.Profile
    leafs["announce-timeout"] = ptp.AnnounceTimeout
    leafs["cos"] = ptp.Cos
    leafs["port-state"] = ptp.PortState
    leafs["delay-response-timeout"] = ptp.DelayResponseTimeout
    leafs["local-priority"] = ptp.LocalPriority
    leafs["delay-response-grant-duration"] = ptp.DelayResponseGrantDuration
    leafs["event-cos"] = ptp.EventCos
    leafs["dscp"] = ptp.Dscp
    leafs["general-dscp"] = ptp.GeneralDscp
    leafs["clock-operation"] = ptp.ClockOperation
    leafs["announce-grant-duration"] = ptp.AnnounceGrantDuration
    leafs["unicast-grant-invalid-request"] = ptp.UnicastGrantInvalidRequest
    leafs["event-dscp"] = ptp.EventDscp
    return leafs
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetBundleName() string { return "cisco_ios_xr" }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetYangName() string { return "ptp" }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) SetParent(parent types.Entity) { ptp.parent = parent }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetParent() types.Entity { return ptp.parent }

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address
// Source IPv6 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable source IPv6 address. The type is bool.
    Enable interface{}

    // Source IPv6 address to use. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceIpv6 interface{}
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetFilter() yfilter.YFilter { return sourceIpv6Address.YFilter }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) SetFilter(yf yfilter.YFilter) { sourceIpv6Address.YFilter = yf }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "source-ipv6" { return "SourceIpv6" }
    return ""
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetSegmentPath() string {
    return "source-ipv6-address"
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = sourceIpv6Address.Enable
    leafs["source-ipv6"] = sourceIpv6Address.SourceIpv6
    return leafs
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetBundleName() string { return "cisco_ios_xr" }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetYangName() string { return "source-ipv6-address" }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) SetParent(parent types.Entity) { sourceIpv6Address.parent = parent }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetParent() types.Entity { return sourceIpv6Address.parent }

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval
// Announce interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 2.
    TimePeriod interface{}
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetFilter() yfilter.YFilter { return announceInterval.YFilter }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) SetFilter(yf yfilter.YFilter) { announceInterval.YFilter = yf }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetGoName(yname string) string {
    if yname == "time-type" { return "TimeType" }
    if yname == "time-period" { return "TimePeriod" }
    return ""
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetSegmentPath() string {
    return "announce-interval"
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["time-type"] = announceInterval.TimeType
    leafs["time-period"] = announceInterval.TimePeriod
    return leafs
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetBundleName() string { return "cisco_ios_xr" }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetYangName() string { return "announce-interval" }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) SetParent(parent types.Entity) { announceInterval.parent = parent }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetParent() types.Entity { return announceInterval.parent }

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address
// Source IPv4 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable source IP address. The type is bool.
    Enable interface{}

    // Source IP address to use. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceIp interface{}
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetFilter() yfilter.YFilter { return sourceIpv4Address.YFilter }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) SetFilter(yf yfilter.YFilter) { sourceIpv4Address.YFilter = yf }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "source-ip" { return "SourceIp" }
    return ""
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetSegmentPath() string {
    return "source-ipv4-address"
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = sourceIpv4Address.Enable
    leafs["source-ip"] = sourceIpv4Address.SourceIp
    return leafs
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetYangName() string { return "source-ipv4-address" }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) SetParent(parent types.Entity) { sourceIpv4Address.parent = parent }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetParent() types.Entity { return sourceIpv4Address.parent }

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves
// Table for slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Slave configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave.
    Slave []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetFilter() yfilter.YFilter { return slaves.YFilter }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) SetFilter(yf yfilter.YFilter) { slaves.YFilter = yf }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetGoName(yname string) string {
    if yname == "slave" { return "Slave" }
    return ""
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetSegmentPath() string {
    return "slaves"
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "slave" {
        for _, c := range slaves.Slave {
            if slaves.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave{}
        slaves.Slave = append(slaves.Slave, child)
        return &slaves.Slave[len(slaves.Slave)-1]
    }
    return nil
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range slaves.Slave {
        children[slaves.Slave[i].GetSegmentPath()] = &slaves.Slave[i]
    }
    return children
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetBundleName() string { return "cisco_ios_xr" }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetYangName() string { return "slaves" }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) SetParent(parent types.Entity) { slaves.parent = parent }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetParent() types.Entity { return slaves.parent }

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
// Slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Slave Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet.
    Ethernet []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6.
    Ipv4OrIpv6 []InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetFilter() yfilter.YFilter { return slave.YFilter }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) SetFilter(yf yfilter.YFilter) { slave.YFilter = yf }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetGoName(yname string) string {
    if yname == "transport" { return "Transport" }
    if yname == "ethernet" { return "Ethernet" }
    if yname == "ipv4-or-ipv6" { return "Ipv4OrIpv6" }
    return ""
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetSegmentPath() string {
    return "slave" + "[transport='" + fmt.Sprintf("%v", slave.Transport) + "']"
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ethernet" {
        for _, c := range slave.Ethernet {
            if slave.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet{}
        slave.Ethernet = append(slave.Ethernet, child)
        return &slave.Ethernet[len(slave.Ethernet)-1]
    }
    if childYangName == "ipv4-or-ipv6" {
        for _, c := range slave.Ipv4OrIpv6 {
            if slave.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6{}
        slave.Ipv4OrIpv6 = append(slave.Ipv4OrIpv6, child)
        return &slave.Ipv4OrIpv6[len(slave.Ipv4OrIpv6)-1]
    }
    return nil
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range slave.Ethernet {
        children[slave.Ethernet[i].GetSegmentPath()] = &slave.Ethernet[i]
    }
    for i := range slave.Ipv4OrIpv6 {
        children[slave.Ipv4OrIpv6[i].GetSegmentPath()] = &slave.Ipv4OrIpv6[i]
    }
    return children
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport"] = slave.Transport
    return leafs
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetBundleName() string { return "cisco_ios_xr" }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetYangName() string { return "slave" }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) SetParent(parent types.Entity) { slave.parent = parent }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetParent() types.Entity { return slave.parent }

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetParentYangName() string { return "slaves" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Slave MAC Address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    SlaveMacAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetFilter() yfilter.YFilter { return ethernet.YFilter }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) SetFilter(yf yfilter.YFilter) { ethernet.YFilter = yf }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetGoName(yname string) string {
    if yname == "slave-mac-address" { return "SlaveMacAddress" }
    if yname == "non-negotiated" { return "NonNegotiated" }
    return ""
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetSegmentPath() string {
    return "ethernet" + "[slave-mac-address='" + fmt.Sprintf("%v", ethernet.SlaveMacAddress) + "']"
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["slave-mac-address"] = ethernet.SlaveMacAddress
    leafs["non-negotiated"] = ethernet.NonNegotiated
    return leafs
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetBundleName() string { return "cisco_ios_xr" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetYangName() string { return "ethernet" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) SetParent(parent types.Entity) { ethernet.parent = parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetParent() types.Entity { return ethernet.parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetParentYangName() string { return "slave" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Slave IP Address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SlaveIpAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetFilter() yfilter.YFilter { return ipv4OrIpv6.YFilter }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) SetFilter(yf yfilter.YFilter) { ipv4OrIpv6.YFilter = yf }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetGoName(yname string) string {
    if yname == "slave-ip-address" { return "SlaveIpAddress" }
    if yname == "non-negotiated" { return "NonNegotiated" }
    return ""
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetSegmentPath() string {
    return "ipv4-or-ipv6" + "[slave-ip-address='" + fmt.Sprintf("%v", ipv4OrIpv6.SlaveIpAddress) + "']"
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["slave-ip-address"] = ipv4OrIpv6.SlaveIpAddress
    leafs["non-negotiated"] = ipv4OrIpv6.NonNegotiated
    return leafs
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetYangName() string { return "ipv4-or-ipv6" }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) SetParent(parent types.Entity) { ipv4OrIpv6.parent = parent }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetParent() types.Entity { return ipv4OrIpv6.parent }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetParentYangName() string { return "slave" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval
// Sync interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetFilter() yfilter.YFilter { return syncInterval.YFilter }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) SetFilter(yf yfilter.YFilter) { syncInterval.YFilter = yf }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetGoName(yname string) string {
    if yname == "time-type" { return "TimeType" }
    if yname == "time-period" { return "TimePeriod" }
    return ""
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetSegmentPath() string {
    return "sync-interval"
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["time-type"] = syncInterval.TimeType
    leafs["time-period"] = syncInterval.TimePeriod
    return leafs
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetBundleName() string { return "cisco_ios_xr" }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetYangName() string { return "sync-interval" }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) SetParent(parent types.Entity) { syncInterval.parent = parent }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetParent() types.Entity { return syncInterval.parent }

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters
// Table for master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Master configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master.
    Master []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetFilter() yfilter.YFilter { return masters.YFilter }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) SetFilter(yf yfilter.YFilter) { masters.YFilter = yf }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetGoName(yname string) string {
    if yname == "master" { return "Master" }
    return ""
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetSegmentPath() string {
    return "masters"
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "master" {
        for _, c := range masters.Master {
            if masters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master{}
        masters.Master = append(masters.Master, child)
        return &masters.Master[len(masters.Master)-1]
    }
    return nil
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range masters.Master {
        children[masters.Master[i].GetSegmentPath()] = &masters.Master[i]
    }
    return children
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetBundleName() string { return "cisco_ios_xr" }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetYangName() string { return "masters" }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) SetParent(parent types.Entity) { masters.parent = parent }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetParent() types.Entity { return masters.parent }

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
// Master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Master Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet.
    Ethernet []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6.
    Ipv4OrIpv6 []InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetFilter() yfilter.YFilter { return master.YFilter }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) SetFilter(yf yfilter.YFilter) { master.YFilter = yf }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetGoName(yname string) string {
    if yname == "transport" { return "Transport" }
    if yname == "ethernet" { return "Ethernet" }
    if yname == "ipv4-or-ipv6" { return "Ipv4OrIpv6" }
    return ""
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetSegmentPath() string {
    return "master" + "[transport='" + fmt.Sprintf("%v", master.Transport) + "']"
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ethernet" {
        for _, c := range master.Ethernet {
            if master.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet{}
        master.Ethernet = append(master.Ethernet, child)
        return &master.Ethernet[len(master.Ethernet)-1]
    }
    if childYangName == "ipv4-or-ipv6" {
        for _, c := range master.Ipv4OrIpv6 {
            if master.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6{}
        master.Ipv4OrIpv6 = append(master.Ipv4OrIpv6, child)
        return &master.Ipv4OrIpv6[len(master.Ipv4OrIpv6)-1]
    }
    return nil
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range master.Ethernet {
        children[master.Ethernet[i].GetSegmentPath()] = &master.Ethernet[i]
    }
    for i := range master.Ipv4OrIpv6 {
        children[master.Ipv4OrIpv6[i].GetSegmentPath()] = &master.Ipv4OrIpv6[i]
    }
    return children
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport"] = master.Transport
    return leafs
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetBundleName() string { return "cisco_ios_xr" }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetYangName() string { return "master" }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) SetParent(parent types.Entity) { master.parent = parent }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetParent() types.Entity { return master.parent }

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetParentYangName() string { return "masters" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Master MAC Address - only used if Transport is
    // Ethernet. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MasterMacAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetFilter() yfilter.YFilter { return ethernet.YFilter }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) SetFilter(yf yfilter.YFilter) { ethernet.YFilter = yf }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetGoName(yname string) string {
    if yname == "master-mac-address" { return "MasterMacAddress" }
    if yname == "master-clock-class" { return "MasterClockClass" }
    if yname == "non-negotiated" { return "NonNegotiated" }
    if yname == "priority" { return "Priority" }
    if yname == "communication" { return "Communication" }
    if yname == "delay-asymmetry" { return "DelayAsymmetry" }
    return ""
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetSegmentPath() string {
    return "ethernet" + "[master-mac-address='" + fmt.Sprintf("%v", ethernet.MasterMacAddress) + "']"
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "delay-asymmetry" {
        return &ethernet.DelayAsymmetry
    }
    return nil
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["delay-asymmetry"] = &ethernet.DelayAsymmetry
    return children
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["master-mac-address"] = ethernet.MasterMacAddress
    leafs["master-clock-class"] = ethernet.MasterClockClass
    leafs["non-negotiated"] = ethernet.NonNegotiated
    leafs["priority"] = ethernet.Priority
    leafs["communication"] = ethernet.Communication
    return leafs
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetBundleName() string { return "cisco_ios_xr" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetYangName() string { return "ethernet" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) SetParent(parent types.Entity) { ethernet.parent = parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetParent() types.Entity { return ethernet.parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetParentYangName() string { return "master" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetFilter() yfilter.YFilter { return delayAsymmetry.YFilter }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) SetFilter(yf yfilter.YFilter) { delayAsymmetry.YFilter = yf }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetGoName(yname string) string {
    if yname == "magnitude" { return "Magnitude" }
    if yname == "units" { return "Units" }
    return ""
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetSegmentPath() string {
    return "delay-asymmetry"
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["magnitude"] = delayAsymmetry.Magnitude
    leafs["units"] = delayAsymmetry.Units
    return leafs
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetBundleName() string { return "cisco_ios_xr" }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetYangName() string { return "delay-asymmetry" }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) SetParent(parent types.Entity) { delayAsymmetry.parent = parent }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetParent() types.Entity { return delayAsymmetry.parent }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetParentYangName() string { return "ethernet" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Master IP Address - used if Transport is not
    // Ethernet. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    MasterIpAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetFilter() yfilter.YFilter { return ipv4OrIpv6.YFilter }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) SetFilter(yf yfilter.YFilter) { ipv4OrIpv6.YFilter = yf }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetGoName(yname string) string {
    if yname == "master-ip-address" { return "MasterIpAddress" }
    if yname == "master-clock-class" { return "MasterClockClass" }
    if yname == "non-negotiated" { return "NonNegotiated" }
    if yname == "priority" { return "Priority" }
    if yname == "communication" { return "Communication" }
    if yname == "delay-asymmetry" { return "DelayAsymmetry" }
    return ""
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetSegmentPath() string {
    return "ipv4-or-ipv6" + "[master-ip-address='" + fmt.Sprintf("%v", ipv4OrIpv6.MasterIpAddress) + "']"
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "delay-asymmetry" {
        return &ipv4OrIpv6.DelayAsymmetry
    }
    return nil
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["delay-asymmetry"] = &ipv4OrIpv6.DelayAsymmetry
    return children
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["master-ip-address"] = ipv4OrIpv6.MasterIpAddress
    leafs["master-clock-class"] = ipv4OrIpv6.MasterClockClass
    leafs["non-negotiated"] = ipv4OrIpv6.NonNegotiated
    leafs["priority"] = ipv4OrIpv6.Priority
    leafs["communication"] = ipv4OrIpv6.Communication
    return leafs
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetYangName() string { return "ipv4-or-ipv6" }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) SetParent(parent types.Entity) { ipv4OrIpv6.parent = parent }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetParent() types.Entity { return ipv4OrIpv6.parent }

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetParentYangName() string { return "master" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetFilter() yfilter.YFilter { return delayAsymmetry.YFilter }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) SetFilter(yf yfilter.YFilter) { delayAsymmetry.YFilter = yf }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetGoName(yname string) string {
    if yname == "magnitude" { return "Magnitude" }
    if yname == "units" { return "Units" }
    return ""
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetSegmentPath() string {
    return "delay-asymmetry"
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["magnitude"] = delayAsymmetry.Magnitude
    leafs["units"] = delayAsymmetry.Units
    return leafs
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetBundleName() string { return "cisco_ios_xr" }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetYangName() string { return "delay-asymmetry" }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) SetParent(parent types.Entity) { delayAsymmetry.parent = parent }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetParent() types.Entity { return delayAsymmetry.parent }

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetParentYangName() string { return "ipv4-or-ipv6" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication
// Communication model
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Model interface{}

    // Target address set. The type is bool. The default value is false.
    TargetAddressSet interface{}

    // Target address. The type is string.
    TargetAddress interface{}
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetFilter() yfilter.YFilter { return communication.YFilter }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) SetFilter(yf yfilter.YFilter) { communication.YFilter = yf }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetGoName(yname string) string {
    if yname == "model" { return "Model" }
    if yname == "target-address-set" { return "TargetAddressSet" }
    if yname == "target-address" { return "TargetAddress" }
    return ""
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetSegmentPath() string {
    return "communication"
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["model"] = communication.Model
    leafs["target-address-set"] = communication.TargetAddressSet
    leafs["target-address"] = communication.TargetAddress
    return leafs
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetBundleName() string { return "cisco_ios_xr" }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetYangName() string { return "communication" }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) SetParent(parent types.Entity) { communication.parent = parent }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetParent() types.Entity { return communication.parent }

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
// Minimum delay request interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetFilter() yfilter.YFilter { return delayRequestMinimumInterval.YFilter }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) SetFilter(yf yfilter.YFilter) { delayRequestMinimumInterval.YFilter = yf }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetGoName(yname string) string {
    if yname == "time-type" { return "TimeType" }
    if yname == "time-period" { return "TimePeriod" }
    return ""
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetSegmentPath() string {
    return "delay-request-minimum-interval"
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["time-type"] = delayRequestMinimumInterval.TimeType
    leafs["time-period"] = delayRequestMinimumInterval.TimePeriod
    return leafs
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetBundleName() string { return "cisco_ios_xr" }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetYangName() string { return "delay-request-minimum-interval" }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) SetParent(parent types.Entity) { delayRequestMinimumInterval.parent = parent }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetParent() types.Entity { return delayRequestMinimumInterval.parent }

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetParentYangName() string { return "ptp" }

// InterfaceConfigurations_InterfaceConfiguration_PseudowireEther
// PW-Ether attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireEther struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}

    // PW Ether L2 overhead requirement. The type is interface{} with range:
    // 1..64.
    L2Overhead interface{}
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetFilter() yfilter.YFilter { return pseudowireEther.YFilter }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) SetFilter(yf yfilter.YFilter) { pseudowireEther.YFilter = yf }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetGoName(yname string) string {
    if yname == "generic-interface-list" { return "GenericInterfaceList" }
    if yname == "l2-overhead" { return "L2Overhead" }
    return ""
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-interface-list"] = pseudowireEther.GenericInterfaceList
    leafs["l2-overhead"] = pseudowireEther.L2Overhead
    return leafs
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetYangName() string { return "pseudowire-ether" }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) SetParent(parent types.Entity) { pseudowireEther.parent = parent }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetParent() types.Entity { return pseudowireEther.parent }

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_PseudowireIw
// PW-IW attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireIw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2 overhead size in bytes. The type is interface{} with range: 1..64. Units
    // are byte.
    L2Overhead interface{}

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetFilter() yfilter.YFilter { return pseudowireIw.YFilter }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) SetFilter(yf yfilter.YFilter) { pseudowireIw.YFilter = yf }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetGoName(yname string) string {
    if yname == "l2-overhead" { return "L2Overhead" }
    if yname == "generic-interface-list" { return "GenericInterfaceList" }
    return ""
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l2-overhead"] = pseudowireIw.L2Overhead
    leafs["generic-interface-list"] = pseudowireIw.GenericInterfaceList
    return leafs
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetYangName() string { return "pseudowire-iw" }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) SetParent(parent types.Entity) { pseudowireIw.parent = parent }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetParent() types.Entity { return pseudowireIw.parent }

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Bvi
// BVI attributes
type InterfaceConfigurations_InterfaceConfiguration_Bvi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable host-routing on this BVI. The type is interface{}.
    HostRouting interface{}
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetFilter() yfilter.YFilter { return bvi.YFilter }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) SetFilter(yf yfilter.YFilter) { bvi.YFilter = yf }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetGoName(yname string) string {
    if yname == "host-routing" { return "HostRouting" }
    return ""
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:bvi"
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["host-routing"] = bvi.HostRouting
    return leafs
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetBundleName() string { return "cisco_ios_xr" }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetYangName() string { return "bvi" }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) SetParent(parent types.Entity) { bvi.parent = parent }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetParent() types.Entity { return bvi.parent }

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport
// Interface Layer 2 Transport service
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_L2Transport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object is only valid on physical interfaces and it controls whether
    // that interface is a port mode Layer 2 attachment circuit (note that for
    // subinterfaces, the Layer 2 property is specified when the subinterface is
    // created).The object must be set before any other L2Transport configuration
    // is supplied for the interface, and must be the last per-interface
    // configuration object to be removed. The type is interface{}.
    Enabled interface{}

    // Enable propagation of the remote attachment-circuit link state to the
    // localattachment-circuit link state. The type is interface{}.
    PropagateRemoteStatus interface{}

    // ATM L2transport Port Mode Parameters Configuration.
    AtmPortModeParameters InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters

    // Interface specific Layer 2 protocol handling.
    L2Protocols InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols

    // L2 Ethernet Features Configuration.
    L2EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions

    // Port Attachment Circuit configuration.
    Pac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac

    // Connection Attachment Circuit configuration.
    Cac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetFilter() yfilter.YFilter { return l2Transport.YFilter }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) SetFilter(yf yfilter.YFilter) { l2Transport.YFilter = yf }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetGoName(yname string) string {
    if yname == "enabled" { return "Enabled" }
    if yname == "propagate-remote-status" { return "PropagateRemoteStatus" }
    if yname == "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters" { return "AtmPortModeParameters" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols" { return "L2Protocols" }
    if yname == "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features" { return "L2EthernetFeatures" }
    if yname == "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions" { return "SpanMonitorSessions" }
    if yname == "Cisco-IOS-XR-qos-ma-cfg:pac" { return "Pac" }
    if yname == "Cisco-IOS-XR-qos-ma-cfg:cac" { return "Cac" }
    return ""
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:l2-transport"
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters" {
        return &l2Transport.AtmPortModeParameters
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols" {
        return &l2Transport.L2Protocols
    }
    if childYangName == "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features" {
        return &l2Transport.L2EthernetFeatures
    }
    if childYangName == "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions" {
        return &l2Transport.SpanMonitorSessions
    }
    if childYangName == "Cisco-IOS-XR-qos-ma-cfg:pac" {
        return &l2Transport.Pac
    }
    if childYangName == "Cisco-IOS-XR-qos-ma-cfg:cac" {
        return &l2Transport.Cac
    }
    return nil
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"] = &l2Transport.AtmPortModeParameters
    children["Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"] = &l2Transport.L2Protocols
    children["Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"] = &l2Transport.L2EthernetFeatures
    children["Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"] = &l2Transport.SpanMonitorSessions
    children["Cisco-IOS-XR-qos-ma-cfg:pac"] = &l2Transport.Pac
    children["Cisco-IOS-XR-qos-ma-cfg:cac"] = &l2Transport.Cac
    return children
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enabled"] = l2Transport.Enabled
    leafs["propagate-remote-status"] = l2Transport.PropagateRemoteStatus
    return leafs
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetBundleName() string { return "cisco_ios_xr" }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetYangName() string { return "l2-transport" }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) SetParent(parent types.Entity) { l2Transport.parent = parent }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetParent() types.Entity { return l2Transport.parent }

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters
// ATM L2transport Port Mode Parameters
// Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetFilter() yfilter.YFilter { return atmPortModeParameters.YFilter }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) SetFilter(yf yfilter.YFilter) { atmPortModeParameters.YFilter = yf }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetGoName(yname string) string {
    if yname == "cell-packing" { return "CellPacking" }
    return ""
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetSegmentPath() string {
    return "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cell-packing" {
        return &atmPortModeParameters.CellPacking
    }
    return nil
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cell-packing"] = &atmPortModeParameters.CellPacking
    return children
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetBundleName() string { return "cisco_ios_xr" }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetYangName() string { return "atm-port-mode-parameters" }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) SetParent(parent types.Entity) { atmPortModeParameters.parent = parent }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetParent() types.Entity { return atmPortModeParameters.parent }

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetFilter() yfilter.YFilter { return cellPacking.YFilter }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) SetFilter(yf yfilter.YFilter) { cellPacking.YFilter = yf }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetGoName(yname string) string {
    if yname == "maximum-cells-packed" { return "MaximumCellsPacked" }
    if yname == "cell-packing-timer-id" { return "CellPackingTimerId" }
    return ""
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetSegmentPath() string {
    return "cell-packing"
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum-cells-packed"] = cellPacking.MaximumCellsPacked
    leafs["cell-packing-timer-id"] = cellPacking.CellPackingTimerId
    return leafs
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetBundleName() string { return "cisco_ios_xr" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetYangName() string { return "cell-packing" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) SetParent(parent types.Entity) { cellPacking.parent = parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetParent() types.Entity { return cellPacking.parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetParentYangName() string { return "atm-port-mode-parameters" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols
// Interface specific Layer 2 protocol handling
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Handling of a specific Layer 2 protocol. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol.
    L2Protocol []InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetFilter() yfilter.YFilter { return l2Protocols.YFilter }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) SetFilter(yf yfilter.YFilter) { l2Protocols.YFilter = yf }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetGoName(yname string) string {
    if yname == "l2-protocol" { return "L2Protocol" }
    return ""
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2-protocol" {
        for _, c := range l2Protocols.L2Protocol {
            if l2Protocols.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol{}
        l2Protocols.L2Protocol = append(l2Protocols.L2Protocol, child)
        return &l2Protocols.L2Protocol[len(l2Protocols.L2Protocol)-1]
    }
    return nil
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range l2Protocols.L2Protocol {
        children[l2Protocols.L2Protocol[i].GetSegmentPath()] = &l2Protocols.L2Protocol[i]
    }
    return children
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetBundleName() string { return "cisco_ios_xr" }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetYangName() string { return "l2-protocols" }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) SetParent(parent types.Entity) { l2Protocols.parent = parent }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetParent() types.Entity { return l2Protocols.parent }

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
// Handling of a specific Layer 2 protocol
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol name. The type is L2ProtocolName.
    L2ProtocolName interface{}

    // How to handle the protocol's packets. The type is L2ProtocolMode. This
    // attribute is mandatory.
    Mode interface{}

    // The value to set the MPLS Exp bits to within the PW.This value may be
    // specified if the mode is forward or tunnel and must not be specified if the
    // mode is drop. The type is interface{} with range: 0..7.
    MplsExpBitsValue interface{}
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetFilter() yfilter.YFilter { return l2Protocol.YFilter }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) SetFilter(yf yfilter.YFilter) { l2Protocol.YFilter = yf }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetGoName(yname string) string {
    if yname == "l2-protocol-name" { return "L2ProtocolName" }
    if yname == "mode" { return "Mode" }
    if yname == "mpls-exp-bits-value" { return "MplsExpBitsValue" }
    return ""
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetSegmentPath() string {
    return "l2-protocol" + "[l2-protocol-name='" + fmt.Sprintf("%v", l2Protocol.L2ProtocolName) + "']"
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l2-protocol-name"] = l2Protocol.L2ProtocolName
    leafs["mode"] = l2Protocol.Mode
    leafs["mpls-exp-bits-value"] = l2Protocol.MplsExpBitsValue
    return leafs
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetYangName() string { return "l2-protocol" }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) SetParent(parent types.Entity) { l2Protocol.parent = parent }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetParent() types.Entity { return l2Protocol.parent }

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetParentYangName() string { return "l2-protocols" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures
// L2 Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress Ethernet filtering. The type is EgressFiltering. The default value
    // is egress-filtering-type-default.
    EgressFiltering interface{}

    // Mark all ingress packets to bypass any egress VLAN filter. The type is
    // interface{}.
    SourceBypassEgressFiltering interface{}
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetFilter() yfilter.YFilter { return l2EthernetFeatures.YFilter }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) SetFilter(yf yfilter.YFilter) { l2EthernetFeatures.YFilter = yf }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetGoName(yname string) string {
    if yname == "egress-filtering" { return "EgressFiltering" }
    if yname == "source-bypass-egress-filtering" { return "SourceBypassEgressFiltering" }
    return ""
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["egress-filtering"] = l2EthernetFeatures.EgressFiltering
    leafs["source-bypass-egress-filtering"] = l2EthernetFeatures.SourceBypassEgressFiltering
    return leafs
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetBundleName() string { return "cisco_ios_xr" }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetYangName() string { return "l2-ethernet-features" }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) SetParent(parent types.Entity) { l2EthernetFeatures.parent = parent }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetParent() types.Entity { return l2EthernetFeatures.parent }

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetFilter() yfilter.YFilter { return spanMonitorSessions.YFilter }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) SetFilter(yf yfilter.YFilter) { spanMonitorSessions.YFilter = yf }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetGoName(yname string) string {
    if yname == "span-monitor-session" { return "SpanMonitorSession" }
    return ""
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetSegmentPath() string {
    return "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "span-monitor-session" {
        for _, c := range spanMonitorSessions.SpanMonitorSession {
            if spanMonitorSessions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession{}
        spanMonitorSessions.SpanMonitorSession = append(spanMonitorSessions.SpanMonitorSession, child)
        return &spanMonitorSessions.SpanMonitorSession[len(spanMonitorSessions.SpanMonitorSession)-1]
    }
    return nil
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spanMonitorSessions.SpanMonitorSession {
        children[spanMonitorSessions.SpanMonitorSession[i].GetSegmentPath()] = &spanMonitorSessions.SpanMonitorSession[i]
    }
    return children
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetBundleName() string { return "cisco_ios_xr" }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetYangName() string { return "span-monitor-sessions" }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) SetParent(parent types.Entity) { spanMonitorSessions.parent = parent }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetParent() types.Entity { return spanMonitorSessions.parent }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetFilter() yfilter.YFilter { return spanMonitorSession.YFilter }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) SetFilter(yf yfilter.YFilter) { spanMonitorSession.YFilter = yf }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetGoName(yname string) string {
    if yname == "session-class" { return "SessionClass" }
    if yname == "mirror-first" { return "MirrorFirst" }
    if yname == "mirror-interval" { return "MirrorInterval" }
    if yname == "attachment" { return "Attachment" }
    if yname == "acl" { return "Acl" }
    return ""
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetSegmentPath() string {
    return "span-monitor-session" + "[session-class='" + fmt.Sprintf("%v", spanMonitorSession.SessionClass) + "']"
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attachment" {
        return &spanMonitorSession.Attachment
    }
    if childYangName == "acl" {
        return &spanMonitorSession.Acl
    }
    return nil
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["attachment"] = &spanMonitorSession.Attachment
    children["acl"] = &spanMonitorSession.Acl
    return children
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-class"] = spanMonitorSession.SessionClass
    leafs["mirror-first"] = spanMonitorSession.MirrorFirst
    leafs["mirror-interval"] = spanMonitorSession.MirrorInterval
    return leafs
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetBundleName() string { return "cisco_ios_xr" }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetYangName() string { return "span-monitor-session" }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) SetParent(parent types.Entity) { spanMonitorSession.parent = parent }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetParent() types.Entity { return spanMonitorSession.parent }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetParentYangName() string { return "span-monitor-sessions" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetFilter() yfilter.YFilter { return attachment.YFilter }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) SetFilter(yf yfilter.YFilter) { attachment.YFilter = yf }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetGoName(yname string) string {
    if yname == "session-name" { return "SessionName" }
    if yname == "direction" { return "Direction" }
    if yname == "port-level-enable" { return "PortLevelEnable" }
    return ""
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetSegmentPath() string {
    return "attachment"
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-name"] = attachment.SessionName
    leafs["direction"] = attachment.Direction
    leafs["port-level-enable"] = attachment.PortLevelEnable
    return leafs
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetBundleName() string { return "cisco_ios_xr" }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetYangName() string { return "attachment" }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) SetParent(parent types.Entity) { attachment.parent = parent }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetParent() types.Entity { return attachment.parent }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetParentYangName() string { return "span-monitor-session" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetFilter() yfilter.YFilter { return acl.YFilter }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) SetFilter(yf yfilter.YFilter) { acl.YFilter = yf }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetGoName(yname string) string {
    if yname == "acl-enable" { return "AclEnable" }
    if yname == "acl-name" { return "AclName" }
    return ""
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetSegmentPath() string {
    return "acl"
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-enable"] = acl.AclEnable
    leafs["acl-name"] = acl.AclName
    return leafs
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetBundleName() string { return "cisco_ios_xr" }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetYangName() string { return "acl" }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) SetParent(parent types.Entity) { acl.parent = parent }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetParent() types.Entity { return acl.parent }

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetParentYangName() string { return "span-monitor-session" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac
// Port Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetFilter() yfilter.YFilter { return pac.YFilter }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) SetFilter(yf yfilter.YFilter) { pac.YFilter = yf }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetGoName(yname string) string {
    if yname == "qos" { return "Qos" }
    return ""
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-cfg:pac"
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos" {
        return &pac.Qos
    }
    return nil
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["qos"] = &pac.Qos
    return children
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetBundleName() string { return "cisco_ios_xr" }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetYangName() string { return "pac" }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) SetParent(parent types.Entity) { pac.parent = parent }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetParent() types.Entity { return pac.parent }

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetSegmentPath() string {
    return "qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetParentYangName() string { return "pac" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range output.ServicePolicyQos {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos{}
        output.ServicePolicyQos = append(output.ServicePolicyQos, child)
        return &output.ServicePolicyQos[len(output.ServicePolicyQos)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    for i := range output.ServicePolicyQos {
        children[output.ServicePolicyQos[i].GetSegmentPath()] = &output.ServicePolicyQos[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range input.ServicePolicyQos {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos{}
        input.ServicePolicyQos = append(input.ServicePolicyQos, child)
        return &input.ServicePolicyQos[len(input.ServicePolicyQos)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    for i := range input.ServicePolicyQos {
        children[input.ServicePolicyQos[i].GetSegmentPath()] = &input.ServicePolicyQos[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
// Connection Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetFilter() yfilter.YFilter { return cac.YFilter }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) SetFilter(yf yfilter.YFilter) { cac.YFilter = yf }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetGoName(yname string) string {
    if yname == "qos" { return "Qos" }
    return ""
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-cfg:cac"
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qos" {
        return &cac.Qos
    }
    return nil
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["qos"] = &cac.Qos
    return children
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetBundleName() string { return "cisco_ios_xr" }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetYangName() string { return "cac" }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) SetParent(parent types.Entity) { cac.parent = parent }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetParent() types.Entity { return cac.parent }

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetParentYangName() string { return "l2-transport" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetSegmentPath() string {
    return "qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetParentYangName() string { return "cac" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range output.ServicePolicyQos {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos{}
        output.ServicePolicyQos = append(output.ServicePolicyQos, child)
        return &output.ServicePolicyQos[len(output.ServicePolicyQos)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    for i := range output.ServicePolicyQos {
        children[output.ServicePolicyQos[i].GetSegmentPath()] = &output.ServicePolicyQos[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range input.ServicePolicyQos {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos{}
        input.ServicePolicyQos = append(input.ServicePolicyQos, child)
        return &input.ServicePolicyQos[len(input.ServicePolicyQos)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    for i := range input.ServicePolicyQos {
        children[input.ServicePolicyQos[i].GetSegmentPath()] = &input.ServicePolicyQos[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_Atm
// ATM Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Support 12-bits VPI cell format. The type is AtmVpiBitsMode.
    MaxVpiBits interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // PVP Configuration.
    Pvps InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps

    // PVC Configuration.
    Pvcs InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs

    // Configure maximum cell-packing timers.  All parameters are mandatory.
    MaximumCellPackingTimers InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers

    // VP tunnel configuration.
    VpTunnels InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetFilter() yfilter.YFilter { return atm.YFilter }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) SetFilter(yf yfilter.YFilter) { atm.YFilter = yf }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetGoName(yname string) string {
    if yname == "max-vpi-bits" { return "MaxVpiBits" }
    if yname == "vc-class" { return "VcClass" }
    if yname == "pvps" { return "Pvps" }
    if yname == "pvcs" { return "Pvcs" }
    if yname == "maximum-cell-packing-timers" { return "MaximumCellPackingTimers" }
    if yname == "vp-tunnels" { return "VpTunnels" }
    return ""
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetSegmentPath() string {
    return "Cisco-IOS-XR-atm-vcm-cfg:atm"
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pvps" {
        return &atm.Pvps
    }
    if childYangName == "pvcs" {
        return &atm.Pvcs
    }
    if childYangName == "maximum-cell-packing-timers" {
        return &atm.MaximumCellPackingTimers
    }
    if childYangName == "vp-tunnels" {
        return &atm.VpTunnels
    }
    return nil
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pvps"] = &atm.Pvps
    children["pvcs"] = &atm.Pvcs
    children["maximum-cell-packing-timers"] = &atm.MaximumCellPackingTimers
    children["vp-tunnels"] = &atm.VpTunnels
    return children
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-vpi-bits"] = atm.MaxVpiBits
    leafs["vc-class"] = atm.VcClass
    return leafs
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetBundleName() string { return "cisco_ios_xr" }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetYangName() string { return "atm" }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) SetParent(parent types.Entity) { atm.parent = parent }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetParent() types.Entity { return atm.parent }

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps
// PVP Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration of particular PVP. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp.
    Pvp []InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetFilter() yfilter.YFilter { return pvps.YFilter }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) SetFilter(yf yfilter.YFilter) { pvps.YFilter = yf }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetGoName(yname string) string {
    if yname == "pvp" { return "Pvp" }
    return ""
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetSegmentPath() string {
    return "pvps"
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pvp" {
        for _, c := range pvps.Pvp {
            if pvps.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp{}
        pvps.Pvp = append(pvps.Pvp, child)
        return &pvps.Pvp[len(pvps.Pvp)-1]
    }
    return nil
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pvps.Pvp {
        children[pvps.Pvp[i].GetSegmentPath()] = &pvps.Pvp[i]
    }
    return children
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetBundleName() string { return "cisco_ios_xr" }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetYangName() string { return "pvps" }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) SetParent(parent types.Entity) { pvps.parent = parent }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetParent() types.Entity { return pvps.parent }

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetParentYangName() string { return "atm" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
// Configuration of particular PVP
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Create the PVP. The type is interface{}.
    Enable interface{}

    // Configure the PVP test mode. The type is AtmPvpTestMode.
    TestMode interface{}

    // Enable L2VPN PVP OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetFilter() yfilter.YFilter { return pvp.YFilter }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) SetFilter(yf yfilter.YFilter) { pvp.YFilter = yf }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetGoName(yname string) string {
    if yname == "vpi" { return "Vpi" }
    if yname == "enable" { return "Enable" }
    if yname == "test-mode" { return "TestMode" }
    if yname == "oam-segment-endpoint" { return "OamSegmentEndpoint" }
    if yname == "shape" { return "Shape" }
    if yname == "cell-packing" { return "CellPacking" }
    return ""
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetSegmentPath() string {
    return "pvp" + "[vpi='" + fmt.Sprintf("%v", pvp.Vpi) + "']"
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "shape" {
        return &pvp.Shape
    }
    if childYangName == "cell-packing" {
        return &pvp.CellPacking
    }
    return nil
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["shape"] = &pvp.Shape
    children["cell-packing"] = &pvp.CellPacking
    return children
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vpi"] = pvp.Vpi
    leafs["enable"] = pvp.Enable
    leafs["test-mode"] = pvp.TestMode
    leafs["oam-segment-endpoint"] = pvp.OamSegmentEndpoint
    return leafs
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetBundleName() string { return "cisco_ios_xr" }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetYangName() string { return "pvp" }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) SetParent(parent types.Entity) { pvp.parent = parent }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetParent() types.Entity { return pvp.parent }

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetParentYangName() string { return "pvps" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "peak-cell-rate" { return "PeakCellRate" }
    if yname == "sustained-cell-rate" { return "SustainedCellRate" }
    if yname == "burst-size" { return "BurstSize" }
    return ""
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = shape.Type
    leafs["peak-cell-rate"] = shape.PeakCellRate
    leafs["sustained-cell-rate"] = shape.SustainedCellRate
    leafs["burst-size"] = shape.BurstSize
    return leafs
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetYangName() string { return "shape" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetParent() types.Entity { return shape.parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetParentYangName() string { return "pvp" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetFilter() yfilter.YFilter { return cellPacking.YFilter }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) SetFilter(yf yfilter.YFilter) { cellPacking.YFilter = yf }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetGoName(yname string) string {
    if yname == "maximum-cells-packed" { return "MaximumCellsPacked" }
    if yname == "cell-packing-timer-id" { return "CellPackingTimerId" }
    return ""
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetSegmentPath() string {
    return "cell-packing"
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum-cells-packed"] = cellPacking.MaximumCellsPacked
    leafs["cell-packing-timer-id"] = cellPacking.CellPackingTimerId
    return leafs
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetBundleName() string { return "cisco_ios_xr" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetYangName() string { return "cell-packing" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) SetParent(parent types.Entity) { cellPacking.parent = parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetParent() types.Entity { return cellPacking.parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetParentYangName() string { return "pvp" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs
// PVC Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration particular PVC. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc.
    Pvc []InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetFilter() yfilter.YFilter { return pvcs.YFilter }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) SetFilter(yf yfilter.YFilter) { pvcs.YFilter = yf }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetGoName(yname string) string {
    if yname == "pvc" { return "Pvc" }
    return ""
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetSegmentPath() string {
    return "pvcs"
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pvc" {
        for _, c := range pvcs.Pvc {
            if pvcs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc{}
        pvcs.Pvc = append(pvcs.Pvc, child)
        return &pvcs.Pvc[len(pvcs.Pvc)-1]
    }
    return nil
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pvcs.Pvc {
        children[pvcs.Pvc[i].GetSegmentPath()] = &pvcs.Pvc[i]
    }
    return children
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetBundleName() string { return "cisco_ios_xr" }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetYangName() string { return "pvcs" }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) SetParent(parent types.Entity) { pvcs.parent = parent }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetParent() types.Entity { return pvcs.parent }

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetParentYangName() string { return "atm" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
// Configuration particular PVC
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // This attribute is a key. VCI value. The type is interface{} with range:
    // 1..65535.
    Vci interface{}

    // This attribute is a key. PVC type. The type is AtmPvcData.
    PvCtype interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // Configure encapsulation. The type is AtmPvcEncapsulation.
    Encapsulation interface{}

    // Create the PVC. The type is interface{}.
    Enable interface{}

    // Configure the PVC test mode. The type is AtmPvcTestMode.
    TestMode interface{}

    // Enable L2VPN PVC OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape

    // L2VPN OAM emulation.
    OamEmulation InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetFilter() yfilter.YFilter { return pvc.YFilter }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) SetFilter(yf yfilter.YFilter) { pvc.YFilter = yf }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetGoName(yname string) string {
    if yname == "vpi" { return "Vpi" }
    if yname == "vci" { return "Vci" }
    if yname == "pv-ctype" { return "PvCtype" }
    if yname == "vc-class" { return "VcClass" }
    if yname == "encapsulation" { return "Encapsulation" }
    if yname == "enable" { return "Enable" }
    if yname == "test-mode" { return "TestMode" }
    if yname == "oam-segment-endpoint" { return "OamSegmentEndpoint" }
    if yname == "shape" { return "Shape" }
    if yname == "oam-emulation" { return "OamEmulation" }
    if yname == "cell-packing" { return "CellPacking" }
    return ""
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetSegmentPath() string {
    return "pvc" + "[vpi='" + fmt.Sprintf("%v", pvc.Vpi) + "']" + "[vci='" + fmt.Sprintf("%v", pvc.Vci) + "']" + "[pv-ctype='" + fmt.Sprintf("%v", pvc.PvCtype) + "']"
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "shape" {
        return &pvc.Shape
    }
    if childYangName == "oam-emulation" {
        return &pvc.OamEmulation
    }
    if childYangName == "cell-packing" {
        return &pvc.CellPacking
    }
    return nil
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["shape"] = &pvc.Shape
    children["oam-emulation"] = &pvc.OamEmulation
    children["cell-packing"] = &pvc.CellPacking
    return children
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vpi"] = pvc.Vpi
    leafs["vci"] = pvc.Vci
    leafs["pv-ctype"] = pvc.PvCtype
    leafs["vc-class"] = pvc.VcClass
    leafs["encapsulation"] = pvc.Encapsulation
    leafs["enable"] = pvc.Enable
    leafs["test-mode"] = pvc.TestMode
    leafs["oam-segment-endpoint"] = pvc.OamSegmentEndpoint
    return leafs
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetBundleName() string { return "cisco_ios_xr" }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetYangName() string { return "pvc" }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) SetParent(parent types.Entity) { pvc.parent = parent }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetParent() types.Entity { return pvc.parent }

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetParentYangName() string { return "pvcs" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "peak-cell-rate" { return "PeakCellRate" }
    if yname == "sustained-cell-rate" { return "SustainedCellRate" }
    if yname == "burst-size" { return "BurstSize" }
    return ""
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = shape.Type
    leafs["peak-cell-rate"] = shape.PeakCellRate
    leafs["sustained-cell-rate"] = shape.SustainedCellRate
    leafs["burst-size"] = shape.BurstSize
    return leafs
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetYangName() string { return "shape" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetParent() types.Entity { return shape.parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetParentYangName() string { return "pvc" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation
// L2VPN OAM emulation
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable OAM emulation. The type is interface{}.
    Enable interface{}

    // AIS cell transmit rate (1 per x seconds). The type is interface{} with
    // range: 0..60.
    AisTransmitRate interface{}
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetFilter() yfilter.YFilter { return oamEmulation.YFilter }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) SetFilter(yf yfilter.YFilter) { oamEmulation.YFilter = yf }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "ais-transmit-rate" { return "AisTransmitRate" }
    return ""
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetSegmentPath() string {
    return "oam-emulation"
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = oamEmulation.Enable
    leafs["ais-transmit-rate"] = oamEmulation.AisTransmitRate
    return leafs
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetBundleName() string { return "cisco_ios_xr" }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetYangName() string { return "oam-emulation" }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) SetParent(parent types.Entity) { oamEmulation.parent = parent }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetParent() types.Entity { return oamEmulation.parent }

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetParentYangName() string { return "pvc" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetFilter() yfilter.YFilter { return cellPacking.YFilter }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) SetFilter(yf yfilter.YFilter) { cellPacking.YFilter = yf }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetGoName(yname string) string {
    if yname == "maximum-cells-packed" { return "MaximumCellsPacked" }
    if yname == "cell-packing-timer-id" { return "CellPackingTimerId" }
    return ""
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetSegmentPath() string {
    return "cell-packing"
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum-cells-packed"] = cellPacking.MaximumCellsPacked
    leafs["cell-packing-timer-id"] = cellPacking.CellPackingTimerId
    return leafs
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetBundleName() string { return "cisco_ios_xr" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetYangName() string { return "cell-packing" }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) SetParent(parent types.Entity) { cellPacking.parent = parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetParent() types.Entity { return cellPacking.parent }

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetParentYangName() string { return "pvc" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers
// Configure maximum cell-packing timers.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Cell-packing timer1 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer1 interface{}

    // Cell-packing timer2 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer2 interface{}

    // Cell-packing timer3 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer3 interface{}
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetFilter() yfilter.YFilter { return maximumCellPackingTimers.YFilter }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) SetFilter(yf yfilter.YFilter) { maximumCellPackingTimers.YFilter = yf }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetGoName(yname string) string {
    if yname == "cell-packing-timer1" { return "CellPackingTimer1" }
    if yname == "cell-packing-timer2" { return "CellPackingTimer2" }
    if yname == "cell-packing-timer3" { return "CellPackingTimer3" }
    return ""
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetSegmentPath() string {
    return "maximum-cell-packing-timers"
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cell-packing-timer1"] = maximumCellPackingTimers.CellPackingTimer1
    leafs["cell-packing-timer2"] = maximumCellPackingTimers.CellPackingTimer2
    leafs["cell-packing-timer3"] = maximumCellPackingTimers.CellPackingTimer3
    return leafs
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetBundleName() string { return "cisco_ios_xr" }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetYangName() string { return "maximum-cell-packing-timers" }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) SetParent(parent types.Entity) { maximumCellPackingTimers.parent = parent }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetParent() types.Entity { return maximumCellPackingTimers.parent }

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetParentYangName() string { return "atm" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
// VP tunnel configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a VP tunnel on this interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel.
    VpTunnel []InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetFilter() yfilter.YFilter { return vpTunnels.YFilter }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) SetFilter(yf yfilter.YFilter) { vpTunnels.YFilter = yf }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetGoName(yname string) string {
    if yname == "vp-tunnel" { return "VpTunnel" }
    return ""
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetSegmentPath() string {
    return "vp-tunnels"
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vp-tunnel" {
        for _, c := range vpTunnels.VpTunnel {
            if vpTunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel{}
        vpTunnels.VpTunnel = append(vpTunnels.VpTunnel, child)
        return &vpTunnels.VpTunnel[len(vpTunnels.VpTunnel)-1]
    }
    return nil
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vpTunnels.VpTunnel {
        children[vpTunnels.VpTunnel[i].GetSegmentPath()] = &vpTunnels.VpTunnel[i]
    }
    return children
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetYangName() string { return "vp-tunnels" }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) SetParent(parent types.Entity) { vpTunnels.parent = parent }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetParent() types.Entity { return vpTunnels.parent }

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetParentYangName() string { return "atm" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
// Configure a VP tunnel on this interface
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Enable Hierarchical Shaping configuration. The type is interface{}.
    EnableHierarchicalShaping interface{}

    // Create the VP Tunnel. The type is interface{}.
    Enable interface{}

    // Disable F4 OAM configuration. The type is interface{}.
    DisableF4Oam interface{}

    // Configure Traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetFilter() yfilter.YFilter { return vpTunnel.YFilter }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) SetFilter(yf yfilter.YFilter) { vpTunnel.YFilter = yf }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetGoName(yname string) string {
    if yname == "vpi" { return "Vpi" }
    if yname == "enable-hierarchical-shaping" { return "EnableHierarchicalShaping" }
    if yname == "enable" { return "Enable" }
    if yname == "disable-f4oam" { return "DisableF4Oam" }
    if yname == "shape" { return "Shape" }
    return ""
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetSegmentPath() string {
    return "vp-tunnel" + "[vpi='" + fmt.Sprintf("%v", vpTunnel.Vpi) + "']"
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "shape" {
        return &vpTunnel.Shape
    }
    return nil
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["shape"] = &vpTunnel.Shape
    return children
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vpi"] = vpTunnel.Vpi
    leafs["enable-hierarchical-shaping"] = vpTunnel.EnableHierarchicalShaping
    leafs["enable"] = vpTunnel.Enable
    leafs["disable-f4oam"] = vpTunnel.DisableF4Oam
    return leafs
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetYangName() string { return "vp-tunnel" }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) SetParent(parent types.Entity) { vpTunnel.parent = parent }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetParent() types.Entity { return vpTunnel.parent }

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetParentYangName() string { return "vp-tunnels" }

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
// Configure Traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmVpShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetFilter() yfilter.YFilter { return shape.YFilter }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) SetFilter(yf yfilter.YFilter) { shape.YFilter = yf }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "peak-cell-rate" { return "PeakCellRate" }
    if yname == "sustained-cell-rate" { return "SustainedCellRate" }
    if yname == "burst-size" { return "BurstSize" }
    return ""
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetSegmentPath() string {
    return "shape"
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = shape.Type
    leafs["peak-cell-rate"] = shape.PeakCellRate
    leafs["sustained-cell-rate"] = shape.SustainedCellRate
    leafs["burst-size"] = shape.BurstSize
    return leafs
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetBundleName() string { return "cisco_ios_xr" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetYangName() string { return "shape" }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) SetParent(parent types.Entity) { shape.parent = parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetParent() types.Entity { return shape.parent }

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetParentYangName() string { return "vp-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd
// BFD over bundle members configuration
type InterfaceConfigurations_InterfaceConfiguration_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration of BFDoBM mode [cisco|ietf]. The type is BfdMode. The default
    // value is no-cfg.
    Mode interface{}

    // Configuration of BFDoBM for all address families.
    AddressFamily InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetGoName(yname string) string {
    if yname == "mode" { return "Mode" }
    if yname == "address-family" { return "AddressFamily" }
    return ""
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-cfg:bfd"
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "address-family" {
        return &bfd.AddressFamily
    }
    return nil
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["address-family"] = &bfd.AddressFamily
    return children
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mode"] = bfd.Mode
    return leafs
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetYangName() string { return "bfd" }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
// Configuration of BFDoBM for all address
// families
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration of BFDoBM for IPv6 address family.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6

    // Configuration of BFDoBM for IPv4 address family.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetFilter() yfilter.YFilter { return addressFamily.YFilter }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) SetFilter(yf yfilter.YFilter) { addressFamily.YFilter = yf }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetGoName(yname string) string {
    if yname == "ipv6" { return "Ipv6" }
    if yname == "ipv4" { return "Ipv4" }
    return ""
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetSegmentPath() string {
    return "address-family"
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6" {
        return &addressFamily.Ipv6
    }
    if childYangName == "ipv4" {
        return &addressFamily.Ipv4
    }
    return nil
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv6"] = &addressFamily.Ipv6
    children["ipv4"] = &addressFamily.Ipv4
    return children
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetYangName() string { return "address-family" }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) SetParent(parent types.Entity) { addressFamily.parent = parent }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetParent() types.Entity { return addressFamily.parent }

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetParentYangName() string { return "bfd" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6
// Configuration of BFDoBM for IPv6 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Destination address for BFD sessions created by bundlemgr. The type is
    // string.
    Ipv6DestinationAddress interface{}

    // IPv6 Detection multiplier for BFD sessions created by bundlemgr. The type
    // is interface{} with range: 2..50.
    Ipv6DetectionMultiplier interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    Ipv6FastDetect interface{}

    // IPV6 Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Ipv6Interval interface{}

    // Timers associated with BFDoBM.
    Ipv6Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetGoName(yname string) string {
    if yname == "ipv6-destination-address" { return "Ipv6DestinationAddress" }
    if yname == "ipv6-detection-multiplier" { return "Ipv6DetectionMultiplier" }
    if yname == "ipv6-fast-detect" { return "Ipv6FastDetect" }
    if yname == "ipv6-interval" { return "Ipv6Interval" }
    if yname == "ipv6-timers" { return "Ipv6Timers" }
    return ""
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-timers" {
        return &ipv6.Ipv6Timers
    }
    return nil
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv6-timers"] = &ipv6.Ipv6Timers
    return children
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv6-destination-address"] = ipv6.Ipv6DestinationAddress
    leafs["ipv6-detection-multiplier"] = ipv6.Ipv6DetectionMultiplier
    leafs["ipv6-fast-detect"] = ipv6.Ipv6FastDetect
    leafs["ipv6-interval"] = ipv6.Ipv6Interval
    return leafs
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetParentYangName() string { return "address-family" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    Ipv6NborUnconfigTimer interface{}

    // IPv6 Timer associated with aggressiveness on BFD session creation. The type
    // is interface{} with range: 60..3600.
    Ipv6StartTimer interface{}
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetFilter() yfilter.YFilter { return ipv6Timers.YFilter }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) SetFilter(yf yfilter.YFilter) { ipv6Timers.YFilter = yf }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetGoName(yname string) string {
    if yname == "ipv6-nbor-unconfig-timer" { return "Ipv6NborUnconfigTimer" }
    if yname == "ipv6-start-timer" { return "Ipv6StartTimer" }
    return ""
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetSegmentPath() string {
    return "ipv6-timers"
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv6-nbor-unconfig-timer"] = ipv6Timers.Ipv6NborUnconfigTimer
    leafs["ipv6-start-timer"] = ipv6Timers.Ipv6StartTimer
    return leafs
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetYangName() string { return "ipv6-timers" }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) SetParent(parent types.Entity) { ipv6Timers.parent = parent }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetParent() types.Entity { return ipv6Timers.parent }

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetParentYangName() string { return "ipv6" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
// Configuration of BFDoBM for IPv4 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Interval interface{}

    // Detection multiplier for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Destination address for BFD sessions created by bundlemgr. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    FastDetect interface{}

    // Container for Echo min-multiplier.
    Echo InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo

    // Timers associated with BFDoBM.
    Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "echo" { return "Echo" }
    if yname == "timers" { return "Timers" }
    return ""
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "echo" {
        return &ipv4.Echo
    }
    if childYangName == "timers" {
        return &ipv4.Timers
    }
    return nil
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["echo"] = &ipv4.Echo
    children["timers"] = &ipv4.Timers
    return children
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ipv4.Interval
    leafs["detection-multiplier"] = ipv4.DetectionMultiplier
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["fast-detect"] = ipv4.FastDetect
    return leafs
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetParentYangName() string { return "address-family" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo
// Container for Echo min-multiplier
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure echo min-interval for bundle interface. The type is interface{}
    // with range: 15..2000.
    MinInterval interface{}
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetFilter() yfilter.YFilter { return echo.YFilter }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) SetFilter(yf yfilter.YFilter) { echo.YFilter = yf }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetGoName(yname string) string {
    if yname == "min-interval" { return "MinInterval" }
    return ""
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetSegmentPath() string {
    return "echo"
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-interval"] = echo.MinInterval
    return leafs
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetBundleName() string { return "cisco_ios_xr" }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetYangName() string { return "echo" }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) SetParent(parent types.Entity) { echo.parent = parent }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetParent() types.Entity { return echo.parent }

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetParentYangName() string { return "ipv4" }

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    NborUnconfigTimer interface{}

    // Timer associated with aggressiveness on BFD session creation. The type is
    // interface{} with range: 60..3600.
    StartTimer interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetGoName(yname string) string {
    if yname == "nbor-unconfig-timer" { return "NborUnconfigTimer" }
    if yname == "start-timer" { return "StartTimer" }
    return ""
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nbor-unconfig-timer"] = timers.NborUnconfigTimer
    leafs["start-timer"] = timers.StartTimer
    return leafs
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetYangName() string { return "timers" }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetParent() types.Entity { return timers.parent }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetParentYangName() string { return "ipv4" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle
// Generic per-bundle configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the lacp-delay timeout for members of this bundle. The type is
    // interface{} with range: 1000..15000.
    LacpDelay interface{}

    // Deactivate all member links (down to Standby state). The type is
    // interface{}.
    Shutdown interface{}

    // Set the wait-while timeout for members of this bundle. The type is
    // interface{} with range: 0..2000. The default value is 2000.
    WaitWhile interface{}

    // Load-balance configuration.
    BundleLoadBalancing InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing

    // Minimum criteria for a bundle to be active.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive

    // Set a limit on the number of links that can be active.
    MaximumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetGoName(yname string) string {
    if yname == "lacp-delay" { return "LacpDelay" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "wait-while" { return "WaitWhile" }
    if yname == "bundle-load-balancing" { return "BundleLoadBalancing" }
    if yname == "minimum-active" { return "MinimumActive" }
    if yname == "maximum-active" { return "MaximumActive" }
    return ""
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-cfg:bundle"
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-load-balancing" {
        return &bundle.BundleLoadBalancing
    }
    if childYangName == "minimum-active" {
        return &bundle.MinimumActive
    }
    if childYangName == "maximum-active" {
        return &bundle.MaximumActive
    }
    return nil
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-load-balancing"] = &bundle.BundleLoadBalancing
    children["minimum-active"] = &bundle.MinimumActive
    children["maximum-active"] = &bundle.MaximumActive
    return children
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacp-delay"] = bundle.LacpDelay
    leafs["shutdown"] = bundle.Shutdown
    leafs["wait-while"] = bundle.WaitWhile
    return leafs
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetYangName() string { return "bundle" }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing
// Load-balance configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set thresholds for forwarding bundle traffic within a rack. The type is
    // interface{} with range: 1..64.
    LocalizeLinks interface{}

    // Enable loadbalancing on this Bundle / EFP.
    HashFunction InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetFilter() yfilter.YFilter { return bundleLoadBalancing.YFilter }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) SetFilter(yf yfilter.YFilter) { bundleLoadBalancing.YFilter = yf }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetGoName(yname string) string {
    if yname == "localize-links" { return "LocalizeLinks" }
    if yname == "hash-function" { return "HashFunction" }
    return ""
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetSegmentPath() string {
    return "bundle-load-balancing"
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hash-function" {
        return &bundleLoadBalancing.HashFunction
    }
    return nil
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hash-function"] = &bundleLoadBalancing.HashFunction
    return children
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["localize-links"] = bundleLoadBalancing.LocalizeLinks
    return leafs
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetBundleName() string { return "cisco_ios_xr" }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetYangName() string { return "bundle-load-balancing" }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) SetParent(parent types.Entity) { bundleLoadBalancing.parent = parent }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetParent() types.Entity { return bundleLoadBalancing.parent }

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetParentYangName() string { return "bundle" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
// Enable loadbalancing on this Bundle / EFP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The specified hash function to use. The type is BundleLoadBalance. This
    // attribute is mandatory.
    HashType interface{}

    // The loadbalance hash value selected. For non-EFP Value methods, this value
    // must be set to 1. The type is interface{} with range: 1..64. This attribute
    // is mandatory.
    HashValue interface{}
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetFilter() yfilter.YFilter { return hashFunction.YFilter }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) SetFilter(yf yfilter.YFilter) { hashFunction.YFilter = yf }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetGoName(yname string) string {
    if yname == "hash-type" { return "HashType" }
    if yname == "hash-value" { return "HashValue" }
    return ""
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetSegmentPath() string {
    return "hash-function"
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hash-type"] = hashFunction.HashType
    leafs["hash-value"] = hashFunction.HashValue
    return leafs
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetBundleName() string { return "cisco_ios_xr" }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetYangName() string { return "hash-function" }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) SetParent(parent types.Entity) { hashFunction.parent = parent }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetParent() types.Entity { return hashFunction.parent }

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetParentYangName() string { return "bundle-load-balancing" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive
// Minimum criteria for a bundle to be active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active links needed to bring up a bundle. The type is interface{}
    // with range: 1..64. The default value is 1.
    Links interface{}

    // Bandwidth (in kbps) needed to bring up a bundle.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetFilter() yfilter.YFilter { return minimumActive.YFilter }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) SetFilter(yf yfilter.YFilter) { minimumActive.YFilter = yf }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetSegmentPath() string {
    return "minimum-active"
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth" {
        return &minimumActive.Bandwidth
    }
    return nil
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth"] = &minimumActive.Bandwidth
    return children
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = minimumActive.Links
    return leafs
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetBundleName() string { return "cisco_ios_xr" }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetYangName() string { return "minimum-active" }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) SetParent(parent types.Entity) { minimumActive.parent = parent }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetParent() types.Entity { return minimumActive.parent }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetParentYangName() string { return "bundle" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
// Bandwidth (in kbps) needed to bring up a
// bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum Bandwidth Range. The type is BundleMinimumBandwidthRange. This
    // attribute is mandatory.
    MinBandwidthRange interface{}

    // Bandwidth. The type is interface{} with range: 1..4294967295. This
    // attribute is mandatory.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetGoName(yname string) string {
    if yname == "min-bandwidth-range" { return "MinBandwidthRange" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-bandwidth-range"] = bandwidth.MinBandwidthRange
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetParentYangName() string { return "minimum-active" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
// Set a limit on the number of links that can be
// active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of active links in a bundle.
    Links InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetFilter() yfilter.YFilter { return maximumActive.YFilter }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) SetFilter(yf yfilter.YFilter) { maximumActive.YFilter = yf }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    return ""
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetSegmentPath() string {
    return "maximum-active"
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "links" {
        return &maximumActive.Links
    }
    return nil
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["links"] = &maximumActive.Links
    return children
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetBundleName() string { return "cisco_ios_xr" }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetYangName() string { return "maximum-active" }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) SetParent(parent types.Entity) { maximumActive.parent = parent }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetParent() types.Entity { return maximumActive.parent }

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetParentYangName() string { return "bundle" }

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
// Maximum number of active links in a bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active links. The type is interface{} with range: 1..64. This
    // attribute is mandatory.
    Links interface{}

    // Maximum active links mode. The type is BundleMaximumActiveLinksMode.
    MaxActiveLinksMode interface{}
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetFilter() yfilter.YFilter { return links.YFilter }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) SetFilter(yf yfilter.YFilter) { links.YFilter = yf }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "max-active-links-mode" { return "MaxActiveLinksMode" }
    return ""
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetSegmentPath() string {
    return "links"
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = links.Links
    leafs["max-active-links-mode"] = links.MaxActiveLinksMode
    return leafs
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetBundleName() string { return "cisco_ios_xr" }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetYangName() string { return "links" }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) SetParent(parent types.Entity) { links.parent = parent }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetParent() types.Entity { return links.parent }

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetParentYangName() string { return "maximum-active" }

// InterfaceConfigurations_InterfaceConfiguration_Lacp
// Link Aggregation Control Protocol per-interface
// configuration (for bundle or member)
type InterfaceConfigurations_InterfaceConfiguration_Lacp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System priority for this bundle. Lower value is higher priority. The type
    // is interface{} with range: 1..65535.
    SystemPriority interface{}

    // Lacp period for the bundle. The type is one of the following types:
    // enumeration BundlePeriod, or int with range: 1..1000.
    Period interface{}

    // Collector Max Delay value to signal to the LACP partner. The type is
    // interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // Configure to enable lacp non-revertive mode. The type is interface{}.
    LacpNonrevertive interface{}

    // Lacp mode for the bundle. The type is BundleMode.
    Mode interface{}

    // Configure to enable the fast-switchover mode. The type is interface{}.
    FastSwitchover interface{}

    // Suppress flaps on switchover for the specified period (in ms). The type is
    // interface{} with range: 100..65535.
    SuppressFlaps interface{}

    // System identifier for this bundle. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    SystemMac interface{}

    // LACP period to request from the partner (LACP standard short period, or
    // rate in milliseconds for use with Cisco-specific extensions). Default is
    // LACP standard long period (30s). The type is one of the following types:
    // enumeration PeriodShortEnum Units are millisecond., or int with range:
    // 1..1000 Units are millisecond..
    PeriodShort interface{}

    // Log churn notifications on the specified system(s). The type is
    // ChurnLogging.
    ChurnLogging interface{}

    // Enable bundle Cisco extensions.
    CiscoExtensions InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions

    // Set timeout values for LACP-related timers.
    Timeout InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetFilter() yfilter.YFilter { return lacp.YFilter }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) SetFilter(yf yfilter.YFilter) { lacp.YFilter = yf }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetGoName(yname string) string {
    if yname == "system-priority" { return "SystemPriority" }
    if yname == "period" { return "Period" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "mode" { return "Mode" }
    if yname == "fast-switchover" { return "FastSwitchover" }
    if yname == "suppress-flaps" { return "SuppressFlaps" }
    if yname == "system-mac" { return "SystemMac" }
    if yname == "period-short" { return "PeriodShort" }
    if yname == "churn-logging" { return "ChurnLogging" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "timeout" { return "Timeout" }
    return ""
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-cfg:lacp"
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cisco-extensions" {
        return &lacp.CiscoExtensions
    }
    if childYangName == "timeout" {
        return &lacp.Timeout
    }
    return nil
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cisco-extensions"] = &lacp.CiscoExtensions
    children["timeout"] = &lacp.Timeout
    return children
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-priority"] = lacp.SystemPriority
    leafs["period"] = lacp.Period
    leafs["collector-max-delay"] = lacp.CollectorMaxDelay
    leafs["lacp-nonrevertive"] = lacp.LacpNonrevertive
    leafs["mode"] = lacp.Mode
    leafs["fast-switchover"] = lacp.FastSwitchover
    leafs["suppress-flaps"] = lacp.SuppressFlaps
    leafs["system-mac"] = lacp.SystemMac
    leafs["period-short"] = lacp.PeriodShort
    leafs["churn-logging"] = lacp.ChurnLogging
    return leafs
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetBundleName() string { return "cisco_ios_xr" }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetYangName() string { return "lacp" }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) SetParent(parent types.Entity) { lacp.parent = parent }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetParent() types.Entity { return lacp.parent }

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions
// Enable bundle Cisco extensions
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Cisco extensions. The type is interface{}. This attribute is mandatory.
    CiscoExt interface{}

    // Specific Cisco extension to enable / disable. The type is
    // BundleCiscoExtTypes.
    CiscoExtType interface{}
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetFilter() yfilter.YFilter { return ciscoExtensions.YFilter }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) SetFilter(yf yfilter.YFilter) { ciscoExtensions.YFilter = yf }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetGoName(yname string) string {
    if yname == "cisco-ext" { return "CiscoExt" }
    if yname == "cisco-ext-type" { return "CiscoExtType" }
    return ""
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetSegmentPath() string {
    return "cisco-extensions"
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cisco-ext"] = ciscoExtensions.CiscoExt
    leafs["cisco-ext-type"] = ciscoExtensions.CiscoExtType
    return leafs
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetYangName() string { return "cisco-extensions" }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) SetParent(parent types.Entity) { ciscoExtensions.parent = parent }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetParent() types.Entity { return ciscoExtensions.parent }

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetParentYangName() string { return "lacp" }

// InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
// Set timeout values for LACP-related timers
type InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the timeout between expired and defaulted states. The type is
    // interface{} with range: 0..3000.
    RxDefault interface{}

    // The time in milliseconds for which to run the timer. The type is
    // interface{} with range: 0..120.
    ActorChurn interface{}

    // Set the timeout to use before declaring partner churn. The type is
    // interface{} with range: 0..120.
    PartnerChurn interface{}
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetFilter() yfilter.YFilter { return timeout.YFilter }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) SetFilter(yf yfilter.YFilter) { timeout.YFilter = yf }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetGoName(yname string) string {
    if yname == "rx-default" { return "RxDefault" }
    if yname == "actor-churn" { return "ActorChurn" }
    if yname == "partner-churn" { return "PartnerChurn" }
    return ""
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetSegmentPath() string {
    return "timeout"
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rx-default"] = timeout.RxDefault
    leafs["actor-churn"] = timeout.ActorChurn
    leafs["partner-churn"] = timeout.PartnerChurn
    return leafs
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetBundleName() string { return "cisco_ios_xr" }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetYangName() string { return "timeout" }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) SetParent(parent types.Entity) { timeout.parent = parent }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetParent() types.Entity { return timeout.parent }

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetParentYangName() string { return "lacp" }

// InterfaceConfigurations_InterfaceConfiguration_BundleMember
// Generic per-member configuration
type InterfaceConfigurations_InterfaceConfiguration_BundleMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority for this port. Lower value is higher priority. The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Add the port to an aggregated interface.
    Id InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetFilter() yfilter.YFilter { return bundleMember.YFilter }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) SetFilter(yf yfilter.YFilter) { bundleMember.YFilter = yf }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetGoName(yname string) string {
    if yname == "port-priority" { return "PortPriority" }
    if yname == "id" { return "Id" }
    return ""
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-cfg:bundle-member"
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "id" {
        return &bundleMember.Id
    }
    return nil
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["id"] = &bundleMember.Id
    return children
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-priority"] = bundleMember.PortPriority
    return leafs
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetBundleName() string { return "cisco_ios_xr" }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetYangName() string { return "bundle-member" }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) SetParent(parent types.Entity) { bundleMember.parent = parent }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetParent() types.Entity { return bundleMember.parent }

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
// Add the port to an aggregated interface.
type InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Identifier of the bundle to add the port to. The type is interface{} with
    // range: 1..65535.
    BundleId interface{}

    // Port Activity. The type is BundlePortActivity.
    PortActivity interface{}
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetFilter() yfilter.YFilter { return id.YFilter }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) SetFilter(yf yfilter.YFilter) { id.YFilter = yf }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetGoName(yname string) string {
    if yname == "bundle-id" { return "BundleId" }
    if yname == "port-activity" { return "PortActivity" }
    return ""
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetSegmentPath() string {
    return "id"
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-id"] = id.BundleId
    leafs["port-activity"] = id.PortActivity
    return leafs
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetBundleName() string { return "cisco_ios_xr" }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetYangName() string { return "id" }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) SetParent(parent types.Entity) { id.parent = parent }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetParent() types.Entity { return id.parent }

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetParentYangName() string { return "bundle-member" }

// InterfaceConfigurations_InterfaceConfiguration_Mlacp
// Multi-chassis LACP configuration
type InterfaceConfigurations_InterfaceConfiguration_Mlacp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LACP port priority (lower value is higher priority). The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Set the delay before the bundle becomes active after recovery from failure.
    // The type is interface{} with range: 0..65535. The default value is 300.
    RecoveryDelay interface{}

    // Set the type of mLACP switchover to use for this bundle. The type is
    // MlacpSwitchover.
    SwitchoverType interface{}

    // Specify an ICCP Group in which this bundle should operate. The type is
    // interface{} with range: 1..4294967295.
    IccpGroup interface{}

    // Set parameters to maximize between the mLACP peers.
    Maximize InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetFilter() yfilter.YFilter { return mlacp.YFilter }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) SetFilter(yf yfilter.YFilter) { mlacp.YFilter = yf }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetGoName(yname string) string {
    if yname == "port-priority" { return "PortPriority" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "maximize" { return "Maximize" }
    return ""
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-cfg:mlacp"
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "maximize" {
        return &mlacp.Maximize
    }
    return nil
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["maximize"] = &mlacp.Maximize
    return children
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-priority"] = mlacp.PortPriority
    leafs["recovery-delay"] = mlacp.RecoveryDelay
    leafs["switchover-type"] = mlacp.SwitchoverType
    leafs["iccp-group"] = mlacp.IccpGroup
    return leafs
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetBundleName() string { return "cisco_ios_xr" }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetYangName() string { return "mlacp" }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) SetParent(parent types.Entity) { mlacp.parent = parent }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetParent() types.Entity { return mlacp.parent }

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
// Set parameters to maximize between the mLACP
// peers
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The paramenter which should be maximized. The type is
    // MlacpMaximizeParameter. This attribute is mandatory.
    MaximizeBy interface{}

    // The number of links below which to switch to the peer if it has more links
    // available. Only applicable if maximizing by links. If 0, no threshold is
    // applied. The type is interface{} with range: 0..64.
    LinkThreshold interface{}

    // The bandwidth (in kbps) below which to switch to the peer if it has more
    // bandwidth available . Only applicable if maximizing by bandwidth. If 0, no
    // threshold is applied. The type is interface{} with range: 0..4294967295.
    BandwidthThreshold interface{}
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetFilter() yfilter.YFilter { return maximize.YFilter }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) SetFilter(yf yfilter.YFilter) { maximize.YFilter = yf }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetGoName(yname string) string {
    if yname == "maximize-by" { return "MaximizeBy" }
    if yname == "link-threshold" { return "LinkThreshold" }
    if yname == "bandwidth-threshold" { return "BandwidthThreshold" }
    return ""
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetSegmentPath() string {
    return "maximize"
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximize-by"] = maximize.MaximizeBy
    leafs["link-threshold"] = maximize.LinkThreshold
    leafs["bandwidth-threshold"] = maximize.BandwidthThreshold
    return leafs
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetBundleName() string { return "cisco_ios_xr" }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetYangName() string { return "maximize" }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) SetParent(parent types.Entity) { maximize.parent = parent }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetParent() types.Entity { return maximize.parent }

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetParentYangName() string { return "mlacp" }

// InterfaceConfigurations_InterfaceConfiguration_Cdp
// Interface specific CDP configuration
type InterfaceConfigurations_InterfaceConfiguration_Cdp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable CDP on an interface. The type is interface{}.
    Enable interface{}
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetFilter() yfilter.YFilter { return cdp.YFilter }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) SetFilter(yf yfilter.YFilter) { cdp.YFilter = yf }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetSegmentPath() string {
    return "Cisco-IOS-XR-cdp-cfg:cdp"
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = cdp.Enable
    return leafs
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetBundleName() string { return "cisco_ios_xr" }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetYangName() string { return "cdp" }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) SetParent(parent types.Entity) { cdp.parent = parent }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetParent() types.Entity { return cdp.parent }

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Optics
// Optics controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..20.
    OpticsTransmitPower interface{}

    // Configure max delta among all measured channel powers . The type is
    // interface{} with range: -500..300.
    OpticsOtsChannelPowerMaxDelta interface{}

    // Configure optics loopback mode . The type is OpticsLoopback. The default
    // value is none.
    OpticsLoopback interface{}

    // Configure Optical safety remote interlock (OSRI). The type is bool.
    OpticsOtsOsri interface{}

    // Select Amplifier Gain Degrade High Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeHighThreshold interface{}

    // Select RX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsRxVoaAttenuation interface{}

    // Configure optics fec . The type is OpticsFec. The default value is
    // fec-none.
    OpticsFec interface{}

    // Select DGD high threshold(in units of 0.1ps). The type is interface{} with
    // range: 0..18000.
    OpticsDgdHighThreshold interface{}

    // Select Amplifier Channel Power(in units of 0 .1dBm). The type is
    // interface{} with range: -500..300.
    OpticsOtsAmplifierChannelPower interface{}

    // Configure amplifier working mode. The type is OpticsOtsAmpliControlMode.
    OpticsOtsAmplifierControlMode interface{}

    // Select Amplifier Gain value(in units of 0.1dBm). The type is interface{}
    // with range: 0..500.
    OpticsOtsAmplifierGain interface{}

    // Normal or extended Ampli Gain Range. The type is OpticsOtsAmpliGainRange.
    OpticsOtsAmplifierGainRange interface{}

    // Configure safety Control Mode. The type is OpticsOtsSafetyControlMode.
    OpticsOtsSafetyControlMode interface{}

    // Select min chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMin interface{}

    // Select TX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsTxVoaAttenuation interface{}

    // Select Amplifier Tilt value(in units of 0.1dB). The type is interface{}
    // with range: -50..50.
    OpticsOtsAmplifierTilt interface{}

    // Configure optics transmit laser shutdown . The type is bool.
    OpticsTransmitShutdown interface{}

    // Configure optics port description . The type is string with length: 1..255.
    OpticsDescription interface{}

    // Select Performance Monitoring as Enable or Disable. The type is bool. The
    // default value is true.
    OpticsPerformanceMonitoring interface{}

    // Select max chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMax interface{}

    // Select power level (in units of percentage). The type is interface{} with
    // range: 0..100.
    OpticsLbcHighThreshold interface{}

    // Select chromatic dispersion high threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdHighThreshold interface{}

    // Select OSNR low threshold(in units of 0.01db). The type is interface{} with
    // range: 0..4000.
    OpticsOsnrLowThreshold interface{}

    // Select Amplifier Gain Degrade Low Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeLowThreshold interface{}

    // Select chromatic dispersion low threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdLowThreshold interface{}

    // breakout mode configuration. The type is string with pattern:
    // (4x10)|(4x25).
    Breakout interface{}

    // Configure Rx threshold.
    RxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds

    // Configure Network srlgs.
    OpticsNetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs

    // Configure optics DWDM Carrier.
    OpticsDwdmCarrier InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier

    // Optics lanes.
    OpticsLanes InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes

    // Configure Tx threshold.
    TxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetFilter() yfilter.YFilter { return optics.YFilter }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) SetFilter(yf yfilter.YFilter) { optics.YFilter = yf }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetGoName(yname string) string {
    if yname == "optics-transmit-power" { return "OpticsTransmitPower" }
    if yname == "optics-ots-channel-power-max-delta" { return "OpticsOtsChannelPowerMaxDelta" }
    if yname == "optics-loopback" { return "OpticsLoopback" }
    if yname == "optics-ots-osri" { return "OpticsOtsOsri" }
    if yname == "optics-ots-amplifier-gain-degrade-high-threshold" { return "OpticsOtsAmplifierGainDegradeHighThreshold" }
    if yname == "optics-ots-rx-voa-attenuation" { return "OpticsOtsRxVoaAttenuation" }
    if yname == "optics-fec" { return "OpticsFec" }
    if yname == "optics-dgd-high-threshold" { return "OpticsDgdHighThreshold" }
    if yname == "optics-ots-amplifier-channel-power" { return "OpticsOtsAmplifierChannelPower" }
    if yname == "optics-ots-amplifier-control-mode" { return "OpticsOtsAmplifierControlMode" }
    if yname == "optics-ots-amplifier-gain" { return "OpticsOtsAmplifierGain" }
    if yname == "optics-ots-amplifier-gain-range" { return "OpticsOtsAmplifierGainRange" }
    if yname == "optics-ots-safety-control-mode" { return "OpticsOtsSafetyControlMode" }
    if yname == "optics-cd-min" { return "OpticsCdMin" }
    if yname == "optics-ots-tx-voa-attenuation" { return "OpticsOtsTxVoaAttenuation" }
    if yname == "optics-ots-amplifier-tilt" { return "OpticsOtsAmplifierTilt" }
    if yname == "optics-transmit-shutdown" { return "OpticsTransmitShutdown" }
    if yname == "optics-description" { return "OpticsDescription" }
    if yname == "optics-performance-monitoring" { return "OpticsPerformanceMonitoring" }
    if yname == "optics-cd-max" { return "OpticsCdMax" }
    if yname == "optics-lbc-high-threshold" { return "OpticsLbcHighThreshold" }
    if yname == "optics-cd-high-threshold" { return "OpticsCdHighThreshold" }
    if yname == "optics-osnr-low-threshold" { return "OpticsOsnrLowThreshold" }
    if yname == "optics-ots-amplifier-gain-degrade-low-threshold" { return "OpticsOtsAmplifierGainDegradeLowThreshold" }
    if yname == "optics-cd-low-threshold" { return "OpticsCdLowThreshold" }
    if yname == "breakout" { return "Breakout" }
    if yname == "rx-thresholds" { return "RxThresholds" }
    if yname == "optics-network-srlgs" { return "OpticsNetworkSrlgs" }
    if yname == "optics-dwdm-carrier" { return "OpticsDwdmCarrier" }
    if yname == "optics-lanes" { return "OpticsLanes" }
    if yname == "tx-thresholds" { return "TxThresholds" }
    return ""
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetSegmentPath() string {
    return "Cisco-IOS-XR-controller-optics-cfg:optics"
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rx-thresholds" {
        return &optics.RxThresholds
    }
    if childYangName == "optics-network-srlgs" {
        return &optics.OpticsNetworkSrlgs
    }
    if childYangName == "optics-dwdm-carrier" {
        return &optics.OpticsDwdmCarrier
    }
    if childYangName == "optics-lanes" {
        return &optics.OpticsLanes
    }
    if childYangName == "tx-thresholds" {
        return &optics.TxThresholds
    }
    return nil
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rx-thresholds"] = &optics.RxThresholds
    children["optics-network-srlgs"] = &optics.OpticsNetworkSrlgs
    children["optics-dwdm-carrier"] = &optics.OpticsDwdmCarrier
    children["optics-lanes"] = &optics.OpticsLanes
    children["tx-thresholds"] = &optics.TxThresholds
    return children
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-transmit-power"] = optics.OpticsTransmitPower
    leafs["optics-ots-channel-power-max-delta"] = optics.OpticsOtsChannelPowerMaxDelta
    leafs["optics-loopback"] = optics.OpticsLoopback
    leafs["optics-ots-osri"] = optics.OpticsOtsOsri
    leafs["optics-ots-amplifier-gain-degrade-high-threshold"] = optics.OpticsOtsAmplifierGainDegradeHighThreshold
    leafs["optics-ots-rx-voa-attenuation"] = optics.OpticsOtsRxVoaAttenuation
    leafs["optics-fec"] = optics.OpticsFec
    leafs["optics-dgd-high-threshold"] = optics.OpticsDgdHighThreshold
    leafs["optics-ots-amplifier-channel-power"] = optics.OpticsOtsAmplifierChannelPower
    leafs["optics-ots-amplifier-control-mode"] = optics.OpticsOtsAmplifierControlMode
    leafs["optics-ots-amplifier-gain"] = optics.OpticsOtsAmplifierGain
    leafs["optics-ots-amplifier-gain-range"] = optics.OpticsOtsAmplifierGainRange
    leafs["optics-ots-safety-control-mode"] = optics.OpticsOtsSafetyControlMode
    leafs["optics-cd-min"] = optics.OpticsCdMin
    leafs["optics-ots-tx-voa-attenuation"] = optics.OpticsOtsTxVoaAttenuation
    leafs["optics-ots-amplifier-tilt"] = optics.OpticsOtsAmplifierTilt
    leafs["optics-transmit-shutdown"] = optics.OpticsTransmitShutdown
    leafs["optics-description"] = optics.OpticsDescription
    leafs["optics-performance-monitoring"] = optics.OpticsPerformanceMonitoring
    leafs["optics-cd-max"] = optics.OpticsCdMax
    leafs["optics-lbc-high-threshold"] = optics.OpticsLbcHighThreshold
    leafs["optics-cd-high-threshold"] = optics.OpticsCdHighThreshold
    leafs["optics-osnr-low-threshold"] = optics.OpticsOsnrLowThreshold
    leafs["optics-ots-amplifier-gain-degrade-low-threshold"] = optics.OpticsOtsAmplifierGainDegradeLowThreshold
    leafs["optics-cd-low-threshold"] = optics.OpticsCdLowThreshold
    leafs["breakout"] = optics.Breakout
    return leafs
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetBundleName() string { return "cisco_ios_xr" }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetYangName() string { return "optics" }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) SetParent(parent types.Entity) { optics.parent = parent }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetParent() types.Entity { return optics.parent }

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds
// Configure Rx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Optics RX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold.
    RxThreshold []InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetFilter() yfilter.YFilter { return rxThresholds.YFilter }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) SetFilter(yf yfilter.YFilter) { rxThresholds.YFilter = yf }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetGoName(yname string) string {
    if yname == "rx-threshold" { return "RxThreshold" }
    return ""
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetSegmentPath() string {
    return "rx-thresholds"
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rx-threshold" {
        for _, c := range rxThresholds.RxThreshold {
            if rxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold{}
        rxThresholds.RxThreshold = append(rxThresholds.RxThreshold, child)
        return &rxThresholds.RxThreshold[len(rxThresholds.RxThreshold)-1]
    }
    return nil
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rxThresholds.RxThreshold {
        children[rxThresholds.RxThreshold[i].GetSegmentPath()] = &rxThresholds.RxThreshold[i]
    }
    return children
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetYangName() string { return "rx-thresholds" }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) SetParent(parent types.Entity) { rxThresholds.parent = parent }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetParent() types.Entity { return rxThresholds.parent }

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetParentYangName() string { return "optics" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
// Optics RX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Low or high rx threshold. The type is Threshold.
    RxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    RxThreshold interface{}
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetFilter() yfilter.YFilter { return rxThreshold.YFilter }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) SetFilter(yf yfilter.YFilter) { rxThreshold.YFilter = yf }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetGoName(yname string) string {
    if yname == "rx-threshold-type" { return "RxThresholdType" }
    if yname == "rx-threshold" { return "RxThreshold" }
    return ""
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetSegmentPath() string {
    return "rx-threshold" + "[rx-threshold-type='" + fmt.Sprintf("%v", rxThreshold.RxThresholdType) + "']"
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rx-threshold-type"] = rxThreshold.RxThresholdType
    leafs["rx-threshold"] = rxThreshold.RxThreshold
    return leafs
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetYangName() string { return "rx-threshold" }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) SetParent(parent types.Entity) { rxThreshold.parent = parent }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetParent() types.Entity { return rxThreshold.parent }

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetParentYangName() string { return "rx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg.
    OpticsNetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetFilter() yfilter.YFilter { return opticsNetworkSrlgs.YFilter }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) SetFilter(yf yfilter.YFilter) { opticsNetworkSrlgs.YFilter = yf }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetGoName(yname string) string {
    if yname == "optics-network-srlg" { return "OpticsNetworkSrlg" }
    return ""
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetSegmentPath() string {
    return "optics-network-srlgs"
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "optics-network-srlg" {
        for _, c := range opticsNetworkSrlgs.OpticsNetworkSrlg {
            if opticsNetworkSrlgs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg{}
        opticsNetworkSrlgs.OpticsNetworkSrlg = append(opticsNetworkSrlgs.OpticsNetworkSrlg, child)
        return &opticsNetworkSrlgs.OpticsNetworkSrlg[len(opticsNetworkSrlgs.OpticsNetworkSrlg)-1]
    }
    return nil
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range opticsNetworkSrlgs.OpticsNetworkSrlg {
        children[opticsNetworkSrlgs.OpticsNetworkSrlg[i].GetSegmentPath()] = &opticsNetworkSrlgs.OpticsNetworkSrlg[i]
    }
    return children
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetBundleName() string { return "cisco_ios_xr" }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetYangName() string { return "optics-network-srlgs" }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) SetParent(parent types.Entity) { opticsNetworkSrlgs.parent = parent }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetParent() types.Entity { return opticsNetworkSrlgs.parent }

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetParentYangName() string { return "optics" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetFilter() yfilter.YFilter { return opticsNetworkSrlg.YFilter }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) SetFilter(yf yfilter.YFilter) { opticsNetworkSrlg.YFilter = yf }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetGoName(yname string) string {
    if yname == "set-id" { return "SetId" }
    if yname == "srlg1" { return "Srlg1" }
    if yname == "srlg2" { return "Srlg2" }
    if yname == "srlg3" { return "Srlg3" }
    if yname == "srlg4" { return "Srlg4" }
    if yname == "srlg5" { return "Srlg5" }
    if yname == "srlg6" { return "Srlg6" }
    return ""
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetSegmentPath() string {
    return "optics-network-srlg" + "[set-id='" + fmt.Sprintf("%v", opticsNetworkSrlg.SetId) + "']"
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["set-id"] = opticsNetworkSrlg.SetId
    leafs["srlg1"] = opticsNetworkSrlg.Srlg1
    leafs["srlg2"] = opticsNetworkSrlg.Srlg2
    leafs["srlg3"] = opticsNetworkSrlg.Srlg3
    leafs["srlg4"] = opticsNetworkSrlg.Srlg4
    leafs["srlg5"] = opticsNetworkSrlg.Srlg5
    leafs["srlg6"] = opticsNetworkSrlg.Srlg6
    return leafs
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetBundleName() string { return "cisco_ios_xr" }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetYangName() string { return "optics-network-srlg" }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) SetParent(parent types.Entity) { opticsNetworkSrlg.parent = parent }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetParent() types.Entity { return opticsNetworkSrlg.parent }

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetParentYangName() string { return "optics-network-srlgs" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier
// Configure optics DWDM Carrier
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DWDM Channel Grid Type. The type is OpticsDwdmCarrierGrid. This attribute
    // is mandatory.
    GridType interface{}

    // DWDM Channel Parameter Type ITU-Channel or Frequency or Wavelength. The
    // type is OpticsDwdmCarrierParam. This attribute is mandatory.
    ParamType interface{}

    // Type ITU-Channel Range 1-100, Frequency Range 19115-19610, Wavelength Range
    // 1528773-1568362, 100MHz Frequency Range 1911500-1961000. The type is
    // interface{} with range: 1..1961000. This attribute is mandatory.
    ParamValue interface{}
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetFilter() yfilter.YFilter { return opticsDwdmCarrier.YFilter }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) SetFilter(yf yfilter.YFilter) { opticsDwdmCarrier.YFilter = yf }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetGoName(yname string) string {
    if yname == "grid-type" { return "GridType" }
    if yname == "param-type" { return "ParamType" }
    if yname == "param-value" { return "ParamValue" }
    return ""
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetSegmentPath() string {
    return "optics-dwdm-carrier"
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grid-type"] = opticsDwdmCarrier.GridType
    leafs["param-type"] = opticsDwdmCarrier.ParamType
    leafs["param-value"] = opticsDwdmCarrier.ParamValue
    return leafs
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetBundleName() string { return "cisco_ios_xr" }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetYangName() string { return "optics-dwdm-carrier" }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) SetParent(parent types.Entity) { opticsDwdmCarrier.parent = parent }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetParent() types.Entity { return opticsDwdmCarrier.parent }

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetParentYangName() string { return "optics" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes
// Optics lanes
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Lane. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane.
    OpticsLane []InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetFilter() yfilter.YFilter { return opticsLanes.YFilter }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) SetFilter(yf yfilter.YFilter) { opticsLanes.YFilter = yf }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetGoName(yname string) string {
    if yname == "optics-lane" { return "OpticsLane" }
    return ""
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetSegmentPath() string {
    return "optics-lanes"
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "optics-lane" {
        for _, c := range opticsLanes.OpticsLane {
            if opticsLanes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane{}
        opticsLanes.OpticsLane = append(opticsLanes.OpticsLane, child)
        return &opticsLanes.OpticsLane[len(opticsLanes.OpticsLane)-1]
    }
    return nil
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range opticsLanes.OpticsLane {
        children[opticsLanes.OpticsLane[i].GetSegmentPath()] = &opticsLanes.OpticsLane[i]
    }
    return children
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetBundleName() string { return "cisco_ios_xr" }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetYangName() string { return "optics-lanes" }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) SetParent(parent types.Entity) { opticsLanes.parent = parent }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetParent() types.Entity { return opticsLanes.parent }

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetParentYangName() string { return "optics" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
// Lane
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Lane Number. The type is interface{} with range:
    // -2147483648..2147483647.
    Index interface{}

    // Configure description for this Lane. The type is string with length:
    // 1..255.
    Description interface{}
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetFilter() yfilter.YFilter { return opticsLane.YFilter }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) SetFilter(yf yfilter.YFilter) { opticsLane.YFilter = yf }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "description" { return "Description" }
    return ""
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetSegmentPath() string {
    return "optics-lane" + "[index='" + fmt.Sprintf("%v", opticsLane.Index) + "']"
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = opticsLane.Index
    leafs["description"] = opticsLane.Description
    return leafs
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetBundleName() string { return "cisco_ios_xr" }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetYangName() string { return "optics-lane" }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) SetParent(parent types.Entity) { opticsLane.parent = parent }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetParent() types.Entity { return opticsLane.parent }

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetParentYangName() string { return "optics-lanes" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
// Configure Tx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Optics TX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold.
    TxThreshold []InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetFilter() yfilter.YFilter { return txThresholds.YFilter }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) SetFilter(yf yfilter.YFilter) { txThresholds.YFilter = yf }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetGoName(yname string) string {
    if yname == "tx-threshold" { return "TxThreshold" }
    return ""
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetSegmentPath() string {
    return "tx-thresholds"
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tx-threshold" {
        for _, c := range txThresholds.TxThreshold {
            if txThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold{}
        txThresholds.TxThreshold = append(txThresholds.TxThreshold, child)
        return &txThresholds.TxThreshold[len(txThresholds.TxThreshold)-1]
    }
    return nil
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range txThresholds.TxThreshold {
        children[txThresholds.TxThreshold[i].GetSegmentPath()] = &txThresholds.TxThreshold[i]
    }
    return children
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetYangName() string { return "tx-thresholds" }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) SetParent(parent types.Entity) { txThresholds.parent = parent }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetParent() types.Entity { return txThresholds.parent }

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetParentYangName() string { return "optics" }

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
// Optics TX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Low or high tx threshold. The type is Threshold.
    TxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    TxThreshold interface{}
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetFilter() yfilter.YFilter { return txThreshold.YFilter }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) SetFilter(yf yfilter.YFilter) { txThreshold.YFilter = yf }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetGoName(yname string) string {
    if yname == "tx-threshold-type" { return "TxThresholdType" }
    if yname == "tx-threshold" { return "TxThreshold" }
    return ""
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetSegmentPath() string {
    return "tx-threshold" + "[tx-threshold-type='" + fmt.Sprintf("%v", txThreshold.TxThresholdType) + "']"
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-threshold-type"] = txThreshold.TxThresholdType
    leafs["tx-threshold"] = txThreshold.TxThreshold
    return leafs
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetYangName() string { return "tx-threshold" }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) SetParent(parent types.Entity) { txThreshold.parent = parent }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetParent() types.Entity { return txThreshold.parent }

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetParentYangName() string { return "tx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_Otu
// OTU port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Otu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // General Communication Channel configuration. The type is interface{}.
    Gcc interface{}

    // Signal failure threshold. The type is interface{} with range: 5..9.
    Sf interface{}

    // Configure secondary admin state . The type is OtnSecAdminState. The default
    // value is normal.
    SecondaryAdminState interface{}

    // Signal degrade threshold. The type is interface{} with range: 5..9.
    Sd interface{}

    // Configure performance monitoring. The type is OtnPerMon. The default value
    // is enable.
    PerformanceMonitoring interface{}

    // Type of Loopback. The type is OtnLoopback.
    Loopback interface{}

    // Configure forward error correction. The type is OtuForwardErrorCorrection.
    // The default value is none.
    Fec interface{}

    // Configure OTN Send TTI value for OS config.
    OtnSendTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos

    // Configure OTN Send TTI value for DAPI configs.
    OtnSendTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi

    // Configure OTN Expected TTI value for SAPI configs.
    OtnExpectedTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi

    // Configure Proactive Protection.
    ProactiveProtection InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs

    // Configure OTN Send TTI value for Full ASCII/HEX.
    OtnSendTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti

    // Configure OTN Expected TTI value for DAPI configs.
    OtnExpectedTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi

    // Configure OTN Send TTI value for SAPI configs.
    OtnSendTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi

    // Enable Prbs And configure.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs

    // Configure OTN Expected TTI value for OS config.
    OtnExpectedTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos

    // Configure OTN Expected TTI value for Full ASCII/HEX.
    OtnExpectedTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetFilter() yfilter.YFilter { return otu.YFilter }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) SetFilter(yf yfilter.YFilter) { otu.YFilter = yf }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetGoName(yname string) string {
    if yname == "gcc" { return "Gcc" }
    if yname == "sf" { return "Sf" }
    if yname == "secondary-admin-state" { return "SecondaryAdminState" }
    if yname == "sd" { return "Sd" }
    if yname == "performance-monitoring" { return "PerformanceMonitoring" }
    if yname == "loopback" { return "Loopback" }
    if yname == "fec" { return "Fec" }
    if yname == "otn-send-ttitcmos" { return "OtnSendTtitcmos" }
    if yname == "otn-send-ttitcmdapi" { return "OtnSendTtitcmdapi" }
    if yname == "otn-expected-ttisapi" { return "OtnExpectedTtisapi" }
    if yname == "proactive-protection" { return "ProactiveProtection" }
    if yname == "network-srlgs" { return "NetworkSrlgs" }
    if yname == "otn-send-tti" { return "OtnSendTti" }
    if yname == "otn-expected-ttitcmdapi" { return "OtnExpectedTtitcmdapi" }
    if yname == "otn-send-ttisapi" { return "OtnSendTtisapi" }
    if yname == "prbs" { return "Prbs" }
    if yname == "otn-expected-ttitcmos" { return "OtnExpectedTtitcmos" }
    if yname == "otn-expected-tti" { return "OtnExpectedTti" }
    return ""
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetSegmentPath() string {
    return "Cisco-IOS-XR-controller-otu-cfg:otu"
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "otn-send-ttitcmos" {
        return &otu.OtnSendTtitcmos
    }
    if childYangName == "otn-send-ttitcmdapi" {
        return &otu.OtnSendTtitcmdapi
    }
    if childYangName == "otn-expected-ttisapi" {
        return &otu.OtnExpectedTtisapi
    }
    if childYangName == "proactive-protection" {
        return &otu.ProactiveProtection
    }
    if childYangName == "network-srlgs" {
        return &otu.NetworkSrlgs
    }
    if childYangName == "otn-send-tti" {
        return &otu.OtnSendTti
    }
    if childYangName == "otn-expected-ttitcmdapi" {
        return &otu.OtnExpectedTtitcmdapi
    }
    if childYangName == "otn-send-ttisapi" {
        return &otu.OtnSendTtisapi
    }
    if childYangName == "prbs" {
        return &otu.Prbs
    }
    if childYangName == "otn-expected-ttitcmos" {
        return &otu.OtnExpectedTtitcmos
    }
    if childYangName == "otn-expected-tti" {
        return &otu.OtnExpectedTti
    }
    return nil
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["otn-send-ttitcmos"] = &otu.OtnSendTtitcmos
    children["otn-send-ttitcmdapi"] = &otu.OtnSendTtitcmdapi
    children["otn-expected-ttisapi"] = &otu.OtnExpectedTtisapi
    children["proactive-protection"] = &otu.ProactiveProtection
    children["network-srlgs"] = &otu.NetworkSrlgs
    children["otn-send-tti"] = &otu.OtnSendTti
    children["otn-expected-ttitcmdapi"] = &otu.OtnExpectedTtitcmdapi
    children["otn-send-ttisapi"] = &otu.OtnSendTtisapi
    children["prbs"] = &otu.Prbs
    children["otn-expected-ttitcmos"] = &otu.OtnExpectedTtitcmos
    children["otn-expected-tti"] = &otu.OtnExpectedTti
    return children
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gcc"] = otu.Gcc
    leafs["sf"] = otu.Sf
    leafs["secondary-admin-state"] = otu.SecondaryAdminState
    leafs["sd"] = otu.Sd
    leafs["performance-monitoring"] = otu.PerformanceMonitoring
    leafs["loopback"] = otu.Loopback
    leafs["fec"] = otu.Fec
    return leafs
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetBundleName() string { return "cisco_ios_xr" }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetYangName() string { return "otu" }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) SetParent(parent types.Entity) { otu.parent = parent }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetParent() types.Entity { return otu.parent }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos
// Configure OTN Send TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetFilter() yfilter.YFilter { return otnSendTtitcmos.YFilter }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) SetFilter(yf yfilter.YFilter) { otnSendTtitcmos.YFilter = yf }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "osascii-string" { return "OsasciiString" }
    if yname == "oshex-string" { return "OshexString" }
    return ""
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetSegmentPath() string {
    return "otn-send-ttitcmos"
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnSendTtitcmos.StringType
    leafs["osascii-string"] = otnSendTtitcmos.OsasciiString
    leafs["oshex-string"] = otnSendTtitcmos.OshexString
    return leafs
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetBundleName() string { return "cisco_ios_xr" }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetYangName() string { return "otn-send-ttitcmos" }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) SetParent(parent types.Entity) { otnSendTtitcmos.parent = parent }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetParent() types.Entity { return otnSendTtitcmos.parent }

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi
// Configure OTN Send TTI value for DAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetFilter() yfilter.YFilter { return otnSendTtitcmdapi.YFilter }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) SetFilter(yf yfilter.YFilter) { otnSendTtitcmdapi.YFilter = yf }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "dapi-ascii-string" { return "DapiAsciiString" }
    return ""
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetSegmentPath() string {
    return "otn-send-ttitcmdapi"
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnSendTtitcmdapi.StringType
    leafs["dapi-ascii-string"] = otnSendTtitcmdapi.DapiAsciiString
    return leafs
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetBundleName() string { return "cisco_ios_xr" }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetYangName() string { return "otn-send-ttitcmdapi" }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) SetParent(parent types.Entity) { otnSendTtitcmdapi.parent = parent }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetParent() types.Entity { return otnSendTtitcmdapi.parent }

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi
// Configure OTN Expected TTI value for SAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetFilter() yfilter.YFilter { return otnExpectedTtisapi.YFilter }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) SetFilter(yf yfilter.YFilter) { otnExpectedTtisapi.YFilter = yf }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "sapi-ascii-string" { return "SapiAsciiString" }
    return ""
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetSegmentPath() string {
    return "otn-expected-ttisapi"
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnExpectedTtisapi.StringType
    leafs["sapi-ascii-string"] = otnExpectedTtisapi.SapiAsciiString
    return leafs
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetBundleName() string { return "cisco_ios_xr" }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetYangName() string { return "otn-expected-ttisapi" }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) SetParent(parent types.Entity) { otnExpectedTtisapi.parent = parent }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetParent() types.Entity { return otnExpectedTtisapi.parent }

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection
// Configure Proactive Protection
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Proactive Protection. The type is interface{}.
    Status interface{}

    // Proactive Protection Threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold

    // Proactive Protection Window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow

    // Proactive Protection Window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow

    // Proactive Protection Threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetFilter() yfilter.YFilter { return proactiveProtection.YFilter }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) SetFilter(yf yfilter.YFilter) { proactiveProtection.YFilter = yf }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    if yname == "trigger-threshold" { return "TriggerThreshold" }
    if yname == "revert-window" { return "RevertWindow" }
    if yname == "trigger-window" { return "TriggerWindow" }
    if yname == "revert-threshold" { return "RevertThreshold" }
    return ""
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetSegmentPath() string {
    return "proactive-protection"
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trigger-threshold" {
        return &proactiveProtection.TriggerThreshold
    }
    if childYangName == "revert-window" {
        return &proactiveProtection.RevertWindow
    }
    if childYangName == "trigger-window" {
        return &proactiveProtection.TriggerWindow
    }
    if childYangName == "revert-threshold" {
        return &proactiveProtection.RevertThreshold
    }
    return nil
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trigger-threshold"] = &proactiveProtection.TriggerThreshold
    children["revert-window"] = &proactiveProtection.RevertWindow
    children["trigger-window"] = &proactiveProtection.TriggerWindow
    children["revert-threshold"] = &proactiveProtection.RevertThreshold
    return children
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["status"] = proactiveProtection.Status
    return leafs
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetBundleName() string { return "cisco_ios_xr" }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetYangName() string { return "proactive-protection" }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) SetParent(parent types.Entity) { proactiveProtection.parent = parent }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetParent() types.Entity { return proactiveProtection.parent }

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 3..9.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetFilter() yfilter.YFilter { return triggerThreshold.YFilter }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) SetFilter(yf yfilter.YFilter) { triggerThreshold.YFilter = yf }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetGoName(yname string) string {
    if yname == "coefficient" { return "Coefficient" }
    if yname == "power" { return "Power" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetSegmentPath() string {
    return "trigger-threshold"
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["coefficient"] = triggerThreshold.Coefficient
    leafs["power"] = triggerThreshold.Power
    leafs["enable"] = triggerThreshold.Enable
    return leafs
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetYangName() string { return "trigger-threshold" }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) SetParent(parent types.Entity) { triggerThreshold.parent = parent }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetParent() types.Entity { return triggerThreshold.parent }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetParentYangName() string { return "proactive-protection" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 2000..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetFilter() yfilter.YFilter { return revertWindow.YFilter }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) SetFilter(yf yfilter.YFilter) { revertWindow.YFilter = yf }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetSegmentPath() string {
    return "revert-window"
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = revertWindow.Value
    leafs["enable"] = revertWindow.Enable
    return leafs
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetBundleName() string { return "cisco_ios_xr" }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetYangName() string { return "revert-window" }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) SetParent(parent types.Entity) { revertWindow.parent = parent }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetParent() types.Entity { return revertWindow.parent }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetParentYangName() string { return "proactive-protection" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetFilter() yfilter.YFilter { return triggerWindow.YFilter }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) SetFilter(yf yfilter.YFilter) { triggerWindow.YFilter = yf }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetSegmentPath() string {
    return "trigger-window"
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = triggerWindow.Value
    leafs["enable"] = triggerWindow.Enable
    return leafs
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetBundleName() string { return "cisco_ios_xr" }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetYangName() string { return "trigger-window" }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) SetParent(parent types.Entity) { triggerWindow.parent = parent }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetParent() types.Entity { return triggerWindow.parent }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetParentYangName() string { return "proactive-protection" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 4..10.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetFilter() yfilter.YFilter { return revertThreshold.YFilter }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) SetFilter(yf yfilter.YFilter) { revertThreshold.YFilter = yf }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetGoName(yname string) string {
    if yname == "coefficient" { return "Coefficient" }
    if yname == "power" { return "Power" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetSegmentPath() string {
    return "revert-threshold"
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["coefficient"] = revertThreshold.Coefficient
    leafs["power"] = revertThreshold.Power
    leafs["enable"] = revertThreshold.Enable
    return leafs
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetYangName() string { return "revert-threshold" }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) SetParent(parent types.Entity) { revertThreshold.parent = parent }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetParent() types.Entity { return revertThreshold.parent }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetParentYangName() string { return "proactive-protection" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetFilter() yfilter.YFilter { return networkSrlgs.YFilter }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) SetFilter(yf yfilter.YFilter) { networkSrlgs.YFilter = yf }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetGoName(yname string) string {
    if yname == "network-srlg" { return "NetworkSrlg" }
    return ""
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetSegmentPath() string {
    return "network-srlgs"
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "network-srlg" {
        for _, c := range networkSrlgs.NetworkSrlg {
            if networkSrlgs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg{}
        networkSrlgs.NetworkSrlg = append(networkSrlgs.NetworkSrlg, child)
        return &networkSrlgs.NetworkSrlg[len(networkSrlgs.NetworkSrlg)-1]
    }
    return nil
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range networkSrlgs.NetworkSrlg {
        children[networkSrlgs.NetworkSrlg[i].GetSegmentPath()] = &networkSrlgs.NetworkSrlg[i]
    }
    return children
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetBundleName() string { return "cisco_ios_xr" }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetYangName() string { return "network-srlgs" }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) SetParent(parent types.Entity) { networkSrlgs.parent = parent }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetParent() types.Entity { return networkSrlgs.parent }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // First value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg1 interface{}

    // Second value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg2 interface{}

    // Third value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg3 interface{}

    // Forth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg4 interface{}

    // Fifth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg5 interface{}

    // Sixth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetFilter() yfilter.YFilter { return networkSrlg.YFilter }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) SetFilter(yf yfilter.YFilter) { networkSrlg.YFilter = yf }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetGoName(yname string) string {
    if yname == "set-id" { return "SetId" }
    if yname == "srlg1" { return "Srlg1" }
    if yname == "srlg2" { return "Srlg2" }
    if yname == "srlg3" { return "Srlg3" }
    if yname == "srlg4" { return "Srlg4" }
    if yname == "srlg5" { return "Srlg5" }
    if yname == "srlg6" { return "Srlg6" }
    return ""
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetSegmentPath() string {
    return "network-srlg" + "[set-id='" + fmt.Sprintf("%v", networkSrlg.SetId) + "']"
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["set-id"] = networkSrlg.SetId
    leafs["srlg1"] = networkSrlg.Srlg1
    leafs["srlg2"] = networkSrlg.Srlg2
    leafs["srlg3"] = networkSrlg.Srlg3
    leafs["srlg4"] = networkSrlg.Srlg4
    leafs["srlg5"] = networkSrlg.Srlg5
    leafs["srlg6"] = networkSrlg.Srlg6
    return leafs
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetBundleName() string { return "cisco_ios_xr" }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetYangName() string { return "network-srlg" }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) SetParent(parent types.Entity) { networkSrlg.parent = parent }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetParent() types.Entity { return networkSrlg.parent }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetParentYangName() string { return "network-srlgs" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti
// Configure OTN Send TTI value for Full ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetFilter() yfilter.YFilter { return otnSendTti.YFilter }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) SetFilter(yf yfilter.YFilter) { otnSendTti.YFilter = yf }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "full-ascii-string" { return "FullAsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetSegmentPath() string {
    return "otn-send-tti"
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnSendTti.StringType
    leafs["full-ascii-string"] = otnSendTti.FullAsciiString
    leafs["hex-string"] = otnSendTti.HexString
    return leafs
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetBundleName() string { return "cisco_ios_xr" }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetYangName() string { return "otn-send-tti" }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) SetParent(parent types.Entity) { otnSendTti.parent = parent }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetParent() types.Entity { return otnSendTti.parent }

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi
// Configure OTN Expected TTI value for DAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetFilter() yfilter.YFilter { return otnExpectedTtitcmdapi.YFilter }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) SetFilter(yf yfilter.YFilter) { otnExpectedTtitcmdapi.YFilter = yf }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "dapi-ascii-string" { return "DapiAsciiString" }
    return ""
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetSegmentPath() string {
    return "otn-expected-ttitcmdapi"
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnExpectedTtitcmdapi.StringType
    leafs["dapi-ascii-string"] = otnExpectedTtitcmdapi.DapiAsciiString
    return leafs
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetBundleName() string { return "cisco_ios_xr" }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetYangName() string { return "otn-expected-ttitcmdapi" }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) SetParent(parent types.Entity) { otnExpectedTtitcmdapi.parent = parent }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetParent() types.Entity { return otnExpectedTtitcmdapi.parent }

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi
// Configure OTN Send TTI value for SAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetFilter() yfilter.YFilter { return otnSendTtisapi.YFilter }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) SetFilter(yf yfilter.YFilter) { otnSendTtisapi.YFilter = yf }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "sapi-ascii-string" { return "SapiAsciiString" }
    return ""
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetSegmentPath() string {
    return "otn-send-ttisapi"
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnSendTtisapi.StringType
    leafs["sapi-ascii-string"] = otnSendTtisapi.SapiAsciiString
    return leafs
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetBundleName() string { return "cisco_ios_xr" }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetYangName() string { return "otn-send-ttisapi" }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) SetParent(parent types.Entity) { otnSendTtisapi.parent = parent }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetParent() types.Entity { return otnSendTtisapi.parent }

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs
// Enable Prbs And configure
type InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mode value. The type is OtuMode.
    ModeValue interface{}

    // Pattern value. The type is OtuPattern.
    Patternvalue interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetFilter() yfilter.YFilter { return prbs.YFilter }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) SetFilter(yf yfilter.YFilter) { prbs.YFilter = yf }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetGoName(yname string) string {
    if yname == "mode-value" { return "ModeValue" }
    if yname == "patternvalue" { return "Patternvalue" }
    return ""
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetSegmentPath() string {
    return "prbs"
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mode-value"] = prbs.ModeValue
    leafs["patternvalue"] = prbs.Patternvalue
    return leafs
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetBundleName() string { return "cisco_ios_xr" }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetYangName() string { return "prbs" }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) SetParent(parent types.Entity) { prbs.parent = parent }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetParent() types.Entity { return prbs.parent }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos
// Configure OTN Expected TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetFilter() yfilter.YFilter { return otnExpectedTtitcmos.YFilter }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) SetFilter(yf yfilter.YFilter) { otnExpectedTtitcmos.YFilter = yf }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "osascii-string" { return "OsasciiString" }
    if yname == "oshex-string" { return "OshexString" }
    return ""
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetSegmentPath() string {
    return "otn-expected-ttitcmos"
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnExpectedTtitcmos.StringType
    leafs["osascii-string"] = otnExpectedTtitcmos.OsasciiString
    leafs["oshex-string"] = otnExpectedTtitcmos.OshexString
    return leafs
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetBundleName() string { return "cisco_ios_xr" }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetYangName() string { return "otn-expected-ttitcmos" }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) SetParent(parent types.Entity) { otnExpectedTtitcmos.parent = parent }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetParent() types.Entity { return otnExpectedTtitcmos.parent }

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
// Configure OTN Expected TTI value for Full
// ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetFilter() yfilter.YFilter { return otnExpectedTti.YFilter }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) SetFilter(yf yfilter.YFilter) { otnExpectedTti.YFilter = yf }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "full-ascii-string" { return "FullAsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetSegmentPath() string {
    return "otn-expected-tti"
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otnExpectedTti.StringType
    leafs["full-ascii-string"] = otnExpectedTti.FullAsciiString
    leafs["hex-string"] = otnExpectedTti.HexString
    return leafs
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetBundleName() string { return "cisco_ios_xr" }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetYangName() string { return "otn-expected-tti" }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) SetParent(parent types.Entity) { otnExpectedTti.parent = parent }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetParent() types.Entity { return otnExpectedTti.parent }

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Macsec
// MACSec service for an interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macsec-service configuration on interface.
    MacsecService InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService

    // Enabling MACSec eap Configuration on Interface.
    Eap InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap

    // MACSec MKA Configuration on Interface.
    PskKeyChain InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetFilter() yfilter.YFilter { return macsec.YFilter }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) SetFilter(yf yfilter.YFilter) { macsec.YFilter = yf }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetGoName(yname string) string {
    if yname == "macsec-service" { return "MacsecService" }
    if yname == "eap" { return "Eap" }
    if yname == "psk-key-chain" { return "PskKeyChain" }
    return ""
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetSegmentPath() string {
    return "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "macsec-service" {
        return &macsec.MacsecService
    }
    if childYangName == "eap" {
        return &macsec.Eap
    }
    if childYangName == "psk-key-chain" {
        return &macsec.PskKeyChain
    }
    return nil
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["macsec-service"] = &macsec.MacsecService
    children["eap"] = &macsec.Eap
    children["psk-key-chain"] = &macsec.PskKeyChain
    return children
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetBundleName() string { return "cisco_ios_xr" }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetYangName() string { return "macsec" }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) SetParent(parent types.Entity) { macsec.parent = parent }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetParent() types.Entity { return macsec.parent }

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService
// macsec-service configuration on interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macsec service decryption port. The type is string with pattern:
    // [a-zA-Z0-9./-]+. This attribute is mandatory.
    DecryptPort interface{}

    // name of keychain. The type is string with length: 1..32. This attribute is
    // mandatory.
    KeyChain interface{}

    // name of policy. The type is string with length: 1..16.
    Policy interface{}
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetFilter() yfilter.YFilter { return macsecService.YFilter }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) SetFilter(yf yfilter.YFilter) { macsecService.YFilter = yf }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetGoName(yname string) string {
    if yname == "decrypt-port" { return "DecryptPort" }
    if yname == "key-chain" { return "KeyChain" }
    if yname == "policy" { return "Policy" }
    return ""
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetSegmentPath() string {
    return "macsec-service"
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["decrypt-port"] = macsecService.DecryptPort
    leafs["key-chain"] = macsecService.KeyChain
    leafs["policy"] = macsecService.Policy
    return leafs
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetBundleName() string { return "cisco_ios_xr" }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetYangName() string { return "macsec-service" }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) SetParent(parent types.Entity) { macsecService.parent = parent }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetParent() types.Entity { return macsecService.parent }

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetParentYangName() string { return "macsec" }

// InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap
// Enabling MACSec eap Configuration on Interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Eap config. The type is string with pattern: (eap).
    EapConfig interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetFilter() yfilter.YFilter { return eap.YFilter }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) SetFilter(yf yfilter.YFilter) { eap.YFilter = yf }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetGoName(yname string) string {
    if yname == "eap-config" { return "EapConfig" }
    if yname == "policy-name" { return "PolicyName" }
    return ""
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetSegmentPath() string {
    return "eap"
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eap-config"] = eap.EapConfig
    leafs["policy-name"] = eap.PolicyName
    return leafs
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetBundleName() string { return "cisco_ios_xr" }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetYangName() string { return "eap" }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) SetParent(parent types.Entity) { eap.parent = parent }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetParent() types.Entity { return eap.parent }

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetParentYangName() string { return "macsec" }

// InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
// MACSec MKA Configuration on Interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of KeyChainName. The type is string with length: 1..32. This attribute
    // is mandatory.
    KeyChainName interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}

    // name of fallback keychain. The type is string with length: 1..32.
    FallbackKeyChain interface{}
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetFilter() yfilter.YFilter { return pskKeyChain.YFilter }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) SetFilter(yf yfilter.YFilter) { pskKeyChain.YFilter = yf }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetGoName(yname string) string {
    if yname == "key-chain-name" { return "KeyChainName" }
    if yname == "policy-name" { return "PolicyName" }
    if yname == "fallback-key-chain" { return "FallbackKeyChain" }
    return ""
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetSegmentPath() string {
    return "psk-key-chain"
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-chain-name"] = pskKeyChain.KeyChainName
    leafs["policy-name"] = pskKeyChain.PolicyName
    leafs["fallback-key-chain"] = pskKeyChain.FallbackKeyChain
    return leafs
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetBundleName() string { return "cisco_ios_xr" }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetYangName() string { return "psk-key-chain" }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) SetParent(parent types.Entity) { pskKeyChain.parent = parent }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetParent() types.Entity { return pskKeyChain.parent }

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetParentYangName() string { return "macsec" }

// InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface
// Interface Specific Dot1x Configuration
type InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of Dot1x profile. The type is string.
    Dot1XProfile interface{}
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetFilter() yfilter.YFilter { return dot1XInterface.YFilter }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) SetFilter(yf yfilter.YFilter) { dot1XInterface.YFilter = yf }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetGoName(yname string) string {
    if yname == "dot1x-profile" { return "Dot1XProfile" }
    return ""
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetSegmentPath() string {
    return "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dot1x-profile"] = dot1XInterface.Dot1XProfile
    return leafs
}

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetBundleName() string { return "cisco_ios_xr" }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetYangName() string { return "dot1x-interface" }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) SetParent(parent types.Entity) { dot1XInterface.parent = parent }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetParent() types.Entity { return dot1XInterface.parent }

func (dot1XInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1XInterface) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks
// Configure Extended loopback (diagnostics)
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure extended loopback mode. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback.
    Loopback []InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetFilter() yfilter.YFilter { return loopbacks.YFilter }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) SetFilter(yf yfilter.YFilter) { loopbacks.YFilter = yf }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetGoName(yname string) string {
    if yname == "loopback" { return "Loopback" }
    return ""
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetSegmentPath() string {
    return "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loopback" {
        for _, c := range loopbacks.Loopback {
            if loopbacks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback{}
        loopbacks.Loopback = append(loopbacks.Loopback, child)
        return &loopbacks.Loopback[len(loopbacks.Loopback)-1]
    }
    return nil
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range loopbacks.Loopback {
        children[loopbacks.Loopback[i].GetSegmentPath()] = &loopbacks.Loopback[i]
    }
    return children
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetBundleName() string { return "cisco_ios_xr" }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetYangName() string { return "loopbacks" }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) SetParent(parent types.Entity) { loopbacks.parent = parent }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetParent() types.Entity { return loopbacks.parent }

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
// Configure extended loopback mode
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is interface{} with range: 1..3.
    Level interface{}

    // Loopback. The type is ExtendedEthernetLoopback. This attribute is
    // mandatory.
    Loopback interface{}
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetFilter() yfilter.YFilter { return loopback.YFilter }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) SetFilter(yf yfilter.YFilter) { loopback.YFilter = yf }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "loopback" { return "Loopback" }
    return ""
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetSegmentPath() string {
    return "loopback" + "[level='" + fmt.Sprintf("%v", loopback.Level) + "']"
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = loopback.Level
    leafs["loopback"] = loopback.Loopback
    return leafs
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetBundleName() string { return "cisco_ios_xr" }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetYangName() string { return "loopback" }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) SetParent(parent types.Entity) { loopback.parent = parent }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetParent() types.Entity { return loopback.parent }

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetParentYangName() string { return "loopbacks" }

// InterfaceConfigurations_InterfaceConfiguration_Ethernet
// Ether specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ethernet struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure duplex operational mode. The type is EthernetDuplex.
    Duplex interface{}

    // Link auto-negotiation. The type is EthernetAutoNegotiation.
    AutoNegotiation interface{}

    // Configure flow-control mode. The type is EthernetFlowCtrl.
    FlowControl interface{}

    // Forward Error Correction. The type is EthernetFec.
    ForwardErrorCorrection interface{}

    // Configure priority flow-control mode. The type is EthernetPfc.
    PriorityFlowControl interface{}

    // Configure loopback mode. The type is EthernetLoopback.
    Loopback interface{}

    // Set the ethernet speed on an interface. The type is EthernetSpeed.
    Speed interface{}

    // Inter-packet gap. The type is EthernetIpg.
    InterPacketGap interface{}

    // Signal Fail Bit Error Rate handling options.
    SignalFailBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate

    // Optical power degrade handling options.
    OpticalPowerDegrade InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade

    // Signal Degrade Bit Error Rate handling options.
    SignalDegradeBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetFilter() yfilter.YFilter { return ethernet.YFilter }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) SetFilter(yf yfilter.YFilter) { ethernet.YFilter = yf }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetGoName(yname string) string {
    if yname == "duplex" { return "Duplex" }
    if yname == "auto-negotiation" { return "AutoNegotiation" }
    if yname == "flow-control" { return "FlowControl" }
    if yname == "forward-error-correction" { return "ForwardErrorCorrection" }
    if yname == "priority-flow-control" { return "PriorityFlowControl" }
    if yname == "loopback" { return "Loopback" }
    if yname == "speed" { return "Speed" }
    if yname == "inter-packet-gap" { return "InterPacketGap" }
    if yname == "signal-fail-bit-error-rate" { return "SignalFailBitErrorRate" }
    if yname == "optical-power-degrade" { return "OpticalPowerDegrade" }
    if yname == "signal-degrade-bit-error-rate" { return "SignalDegradeBitErrorRate" }
    if yname == "carrier-delay" { return "CarrierDelay" }
    return ""
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetSegmentPath() string {
    return "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "signal-fail-bit-error-rate" {
        return &ethernet.SignalFailBitErrorRate
    }
    if childYangName == "optical-power-degrade" {
        return &ethernet.OpticalPowerDegrade
    }
    if childYangName == "signal-degrade-bit-error-rate" {
        return &ethernet.SignalDegradeBitErrorRate
    }
    if childYangName == "carrier-delay" {
        return &ethernet.CarrierDelay
    }
    return nil
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["signal-fail-bit-error-rate"] = &ethernet.SignalFailBitErrorRate
    children["optical-power-degrade"] = &ethernet.OpticalPowerDegrade
    children["signal-degrade-bit-error-rate"] = &ethernet.SignalDegradeBitErrorRate
    children["carrier-delay"] = &ethernet.CarrierDelay
    return children
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["duplex"] = ethernet.Duplex
    leafs["auto-negotiation"] = ethernet.AutoNegotiation
    leafs["flow-control"] = ethernet.FlowControl
    leafs["forward-error-correction"] = ethernet.ForwardErrorCorrection
    leafs["priority-flow-control"] = ethernet.PriorityFlowControl
    leafs["loopback"] = ethernet.Loopback
    leafs["speed"] = ethernet.Speed
    leafs["inter-packet-gap"] = ethernet.InterPacketGap
    return leafs
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetBundleName() string { return "cisco_ios_xr" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetYangName() string { return "ethernet" }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) SetParent(parent types.Entity) { ethernet.parent = parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetParent() types.Entity { return ethernet.parent }

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate
// Signal Fail Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Signal a remote fault to the peer device whenever the link is taken down
    // due to crossing the SF-BER threshold. The type is interface{}.
    SignalRemoteFault interface{}

    // Set the Signal Fail bit error rate threshold on an interface to a value of
    // 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 4..12. The default value is 4.
    SignalFailThreshold interface{}

    // Disable generation of an alarm whenever the SF-BER threshold is crossed for
    // this interface. The type is interface{}.
    SignalFailReportDisable interface{}
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetFilter() yfilter.YFilter { return signalFailBitErrorRate.YFilter }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) SetFilter(yf yfilter.YFilter) { signalFailBitErrorRate.YFilter = yf }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetGoName(yname string) string {
    if yname == "signal-remote-fault" { return "SignalRemoteFault" }
    if yname == "signal-fail-threshold" { return "SignalFailThreshold" }
    if yname == "signal-fail-report-disable" { return "SignalFailReportDisable" }
    return ""
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetSegmentPath() string {
    return "signal-fail-bit-error-rate"
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["signal-remote-fault"] = signalFailBitErrorRate.SignalRemoteFault
    leafs["signal-fail-threshold"] = signalFailBitErrorRate.SignalFailThreshold
    leafs["signal-fail-report-disable"] = signalFailBitErrorRate.SignalFailReportDisable
    return leafs
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetBundleName() string { return "cisco_ios_xr" }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetYangName() string { return "signal-fail-bit-error-rate" }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) SetParent(parent types.Entity) { signalFailBitErrorRate.parent = parent }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetParent() types.Entity { return signalFailBitErrorRate.parent }

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetParentYangName() string { return "ethernet" }

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade
// Optical power degrade handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the value of the received optical power degrade alarm threshold on an
    // interface. The type is interface{} with range: -300..50.
    RxAlarmThreshold interface{}
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetFilter() yfilter.YFilter { return opticalPowerDegrade.YFilter }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) SetFilter(yf yfilter.YFilter) { opticalPowerDegrade.YFilter = yf }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetGoName(yname string) string {
    if yname == "rx-alarm-threshold" { return "RxAlarmThreshold" }
    return ""
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetSegmentPath() string {
    return "optical-power-degrade"
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rx-alarm-threshold"] = opticalPowerDegrade.RxAlarmThreshold
    return leafs
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetBundleName() string { return "cisco_ios_xr" }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetYangName() string { return "optical-power-degrade" }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) SetParent(parent types.Entity) { opticalPowerDegrade.parent = parent }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetParent() types.Entity { return opticalPowerDegrade.parent }

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetParentYangName() string { return "ethernet" }

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate
// Signal Degrade Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the Signal Degrade bit error rate threshold on an interface to a value
    // of 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 3..12. The default value is 6.
    SignalDegradeThreshold interface{}

    // Generate an alarm whenever the SD-BER threshold is crossed for this
    // interface. The type is interface{}.
    SignalDegradeReport interface{}
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetFilter() yfilter.YFilter { return signalDegradeBitErrorRate.YFilter }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) SetFilter(yf yfilter.YFilter) { signalDegradeBitErrorRate.YFilter = yf }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetGoName(yname string) string {
    if yname == "signal-degrade-threshold" { return "SignalDegradeThreshold" }
    if yname == "signal-degrade-report" { return "SignalDegradeReport" }
    return ""
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetSegmentPath() string {
    return "signal-degrade-bit-error-rate"
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["signal-degrade-threshold"] = signalDegradeBitErrorRate.SignalDegradeThreshold
    leafs["signal-degrade-report"] = signalDegradeBitErrorRate.SignalDegradeReport
    return leafs
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetBundleName() string { return "cisco_ios_xr" }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetYangName() string { return "signal-degrade-bit-error-rate" }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) SetParent(parent types.Entity) { signalDegradeBitErrorRate.parent = parent }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetParent() types.Entity { return signalDegradeBitErrorRate.parent }

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetParentYangName() string { return "ethernet" }

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
// Set the carrier transition delay on an
// interface in msecs
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayUp interface{}

    // Carrier Delay (down) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetFilter() yfilter.YFilter { return carrierDelay.YFilter }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) SetFilter(yf yfilter.YFilter) { carrierDelay.YFilter = yf }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetGoName(yname string) string {
    if yname == "carrier-delay-up" { return "CarrierDelayUp" }
    if yname == "carrier-delay-down" { return "CarrierDelayDown" }
    return ""
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetSegmentPath() string {
    return "carrier-delay"
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["carrier-delay-up"] = carrierDelay.CarrierDelayUp
    leafs["carrier-delay-down"] = carrierDelay.CarrierDelayDown
    return leafs
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetBundleName() string { return "cisco_ios_xr" }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetYangName() string { return "carrier-delay" }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) SetParent(parent types.Entity) { carrierDelay.parent = parent }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetParent() types.Entity { return carrierDelay.parent }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetParentYangName() string { return "ethernet" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm
// DWDM port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Dwdm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable or Enable VTXP configuration. The type is bool.
    EnableVtxp interface{}

    // Configure network port id. The type is string with length: 1..64.
    NetworkPortId interface{}

    // Configure transport admin state. The type is DwdmAdminState. The default
    // value is out-of-service.
    TransportAdminState interface{}

    // Configure laser off/on. The type is interface{}.
    Laser interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..10.
    TransmitPower interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -350..50.
    RxThreshold interface{}

    // Configure network connection id. The type is string with length: 1..64.
    NetworkConnectionId interface{}

    // Configure loopback mode . The type is DwdmLoopback. The default value is
    // none.
    Loopback interface{}

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs

    // Configure G709 parameters.
    G709 InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709

    // Configure transponder wavelength.
    Wavelength InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetFilter() yfilter.YFilter { return dwdm.YFilter }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) SetFilter(yf yfilter.YFilter) { dwdm.YFilter = yf }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetGoName(yname string) string {
    if yname == "enable-vtxp" { return "EnableVtxp" }
    if yname == "network-port-id" { return "NetworkPortId" }
    if yname == "transport-admin-state" { return "TransportAdminState" }
    if yname == "laser" { return "Laser" }
    if yname == "transmit-power" { return "TransmitPower" }
    if yname == "rx-threshold" { return "RxThreshold" }
    if yname == "network-connection-id" { return "NetworkConnectionId" }
    if yname == "loopback" { return "Loopback" }
    if yname == "network-srlgs" { return "NetworkSrlgs" }
    if yname == "g709" { return "G709" }
    if yname == "wavelength" { return "Wavelength" }
    return ""
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetSegmentPath() string {
    return "Cisco-IOS-XR-dwdm-ui-cfg:dwdm"
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "network-srlgs" {
        return &dwdm.NetworkSrlgs
    }
    if childYangName == "g709" {
        return &dwdm.G709
    }
    if childYangName == "wavelength" {
        return &dwdm.Wavelength
    }
    return nil
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["network-srlgs"] = &dwdm.NetworkSrlgs
    children["g709"] = &dwdm.G709
    children["wavelength"] = &dwdm.Wavelength
    return children
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable-vtxp"] = dwdm.EnableVtxp
    leafs["network-port-id"] = dwdm.NetworkPortId
    leafs["transport-admin-state"] = dwdm.TransportAdminState
    leafs["laser"] = dwdm.Laser
    leafs["transmit-power"] = dwdm.TransmitPower
    leafs["rx-threshold"] = dwdm.RxThreshold
    leafs["network-connection-id"] = dwdm.NetworkConnectionId
    leafs["loopback"] = dwdm.Loopback
    return leafs
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetBundleName() string { return "cisco_ios_xr" }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetYangName() string { return "dwdm" }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) SetParent(parent types.Entity) { dwdm.parent = parent }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetParent() types.Entity { return dwdm.parent }

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetFilter() yfilter.YFilter { return networkSrlgs.YFilter }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) SetFilter(yf yfilter.YFilter) { networkSrlgs.YFilter = yf }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetGoName(yname string) string {
    if yname == "network-srlg" { return "NetworkSrlg" }
    return ""
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetSegmentPath() string {
    return "network-srlgs"
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "network-srlg" {
        for _, c := range networkSrlgs.NetworkSrlg {
            if networkSrlgs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg{}
        networkSrlgs.NetworkSrlg = append(networkSrlgs.NetworkSrlg, child)
        return &networkSrlgs.NetworkSrlg[len(networkSrlgs.NetworkSrlg)-1]
    }
    return nil
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range networkSrlgs.NetworkSrlg {
        children[networkSrlgs.NetworkSrlg[i].GetSegmentPath()] = &networkSrlgs.NetworkSrlg[i]
    }
    return children
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetBundleName() string { return "cisco_ios_xr" }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetYangName() string { return "network-srlgs" }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) SetParent(parent types.Entity) { networkSrlgs.parent = parent }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetParent() types.Entity { return networkSrlgs.parent }

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetParentYangName() string { return "dwdm" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetFilter() yfilter.YFilter { return networkSrlg.YFilter }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) SetFilter(yf yfilter.YFilter) { networkSrlg.YFilter = yf }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetGoName(yname string) string {
    if yname == "set-id" { return "SetId" }
    if yname == "srlg1" { return "Srlg1" }
    if yname == "srlg2" { return "Srlg2" }
    if yname == "srlg3" { return "Srlg3" }
    if yname == "srlg4" { return "Srlg4" }
    if yname == "srlg5" { return "Srlg5" }
    if yname == "srlg6" { return "Srlg6" }
    return ""
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetSegmentPath() string {
    return "network-srlg" + "[set-id='" + fmt.Sprintf("%v", networkSrlg.SetId) + "']"
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["set-id"] = networkSrlg.SetId
    leafs["srlg1"] = networkSrlg.Srlg1
    leafs["srlg2"] = networkSrlg.Srlg2
    leafs["srlg3"] = networkSrlg.Srlg3
    leafs["srlg4"] = networkSrlg.Srlg4
    leafs["srlg5"] = networkSrlg.Srlg5
    leafs["srlg6"] = networkSrlg.Srlg6
    return leafs
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetBundleName() string { return "cisco_ios_xr" }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetYangName() string { return "network-srlg" }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) SetParent(parent types.Entity) { networkSrlg.parent = parent }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetParent() types.Entity { return networkSrlg.parent }

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetParentYangName() string { return "network-srlgs" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709
// Configure G709 parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable proactive protectioni Graceful or Default mode. The type is
    // Proactive.
    Proactive interface{}

    // Enable GAIS insertion. The type is interface{}.
    BdiToGais interface{}

    // Configure Trace Identifier Mismatch alarm consequence. The type is
    // interface{}.
    TimToGais interface{}

    // Configure proactive protection log file. The type is string with length:
    // 1..128.
    ProactiveLoggingFile interface{}

    // Configure Trail Trace Identifier  processing. The type is interface{}.
    TtiProcessing interface{}

    // Disable or Enable g709 framing. The type is bool.
    Enable interface{}

    // Over clocking mode for client signal bw compatibility. The type is Framing.
    Framing interface{}

    // Configure ODU parameters.
    Odu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu

    // Configure OTU parameters.
    Otu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu

    // Configure PRBS mode and pattern.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs

    // Configure FEC mode.
    Fec InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetFilter() yfilter.YFilter { return g709.YFilter }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) SetFilter(yf yfilter.YFilter) { g709.YFilter = yf }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetGoName(yname string) string {
    if yname == "proactive" { return "Proactive" }
    if yname == "bdi-to-gais" { return "BdiToGais" }
    if yname == "tim-to-gais" { return "TimToGais" }
    if yname == "proactive-logging-file" { return "ProactiveLoggingFile" }
    if yname == "tti-processing" { return "TtiProcessing" }
    if yname == "enable" { return "Enable" }
    if yname == "framing" { return "Framing" }
    if yname == "odu" { return "Odu" }
    if yname == "otu" { return "Otu" }
    if yname == "prbs" { return "Prbs" }
    if yname == "fec" { return "Fec" }
    return ""
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetSegmentPath() string {
    return "g709"
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "odu" {
        return &g709.Odu
    }
    if childYangName == "otu" {
        return &g709.Otu
    }
    if childYangName == "prbs" {
        return &g709.Prbs
    }
    if childYangName == "fec" {
        return &g709.Fec
    }
    return nil
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["odu"] = &g709.Odu
    children["otu"] = &g709.Otu
    children["prbs"] = &g709.Prbs
    children["fec"] = &g709.Fec
    return children
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["proactive"] = g709.Proactive
    leafs["bdi-to-gais"] = g709.BdiToGais
    leafs["tim-to-gais"] = g709.TimToGais
    leafs["proactive-logging-file"] = g709.ProactiveLoggingFile
    leafs["tti-processing"] = g709.TtiProcessing
    leafs["enable"] = g709.Enable
    leafs["framing"] = g709.Framing
    return leafs
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetBundleName() string { return "cisco_ios_xr" }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetYangName() string { return "g709" }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) SetParent(parent types.Entity) { g709.parent = parent }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetParent() types.Entity { return g709.parent }

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetParentYangName() string { return "dwdm" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu
// Configure ODU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ODU alarm reporting.
    OduReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports

    // Configure ODU threshold value.
    OduThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds

    // Configure ODU Expected TTI value.
    OduExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti

    // Configure ODU TTI value.
    OduTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetFilter() yfilter.YFilter { return odu.YFilter }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) SetFilter(yf yfilter.YFilter) { odu.YFilter = yf }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetGoName(yname string) string {
    if yname == "odu-reports" { return "OduReports" }
    if yname == "odu-thresholds" { return "OduThresholds" }
    if yname == "odu-expected-tti" { return "OduExpectedTti" }
    if yname == "odu-tx-tti" { return "OduTxTti" }
    return ""
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetSegmentPath() string {
    return "odu"
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "odu-reports" {
        return &odu.OduReports
    }
    if childYangName == "odu-thresholds" {
        return &odu.OduThresholds
    }
    if childYangName == "odu-expected-tti" {
        return &odu.OduExpectedTti
    }
    if childYangName == "odu-tx-tti" {
        return &odu.OduTxTti
    }
    return nil
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["odu-reports"] = &odu.OduReports
    children["odu-thresholds"] = &odu.OduThresholds
    children["odu-expected-tti"] = &odu.OduExpectedTti
    children["odu-tx-tti"] = &odu.OduTxTti
    return children
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetBundleName() string { return "cisco_ios_xr" }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetYangName() string { return "odu" }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) SetParent(parent types.Entity) { odu.parent = parent }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetParent() types.Entity { return odu.parent }

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetParentYangName() string { return "g709" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports
// Configure ODU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport.
    OduReport []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetFilter() yfilter.YFilter { return oduReports.YFilter }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) SetFilter(yf yfilter.YFilter) { oduReports.YFilter = yf }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetGoName(yname string) string {
    if yname == "odu-report" { return "OduReport" }
    return ""
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetSegmentPath() string {
    return "odu-reports"
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "odu-report" {
        for _, c := range oduReports.OduReport {
            if oduReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport{}
        oduReports.OduReport = append(oduReports.OduReport, child)
        return &oduReports.OduReport[len(oduReports.OduReport)-1]
    }
    return nil
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range oduReports.OduReport {
        children[oduReports.OduReport[i].GetSegmentPath()] = &oduReports.OduReport[i]
    }
    return children
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetBundleName() string { return "cisco_ios_xr" }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetYangName() string { return "odu-reports" }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) SetParent(parent types.Entity) { oduReports.parent = parent }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetParent() types.Entity { return oduReports.parent }

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetParentYangName() string { return "odu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ODU alarm type. The type is OduAlarm.
    Alarm interface{}
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetFilter() yfilter.YFilter { return oduReport.YFilter }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) SetFilter(yf yfilter.YFilter) { oduReport.YFilter = yf }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetGoName(yname string) string {
    if yname == "alarm" { return "Alarm" }
    return ""
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetSegmentPath() string {
    return "odu-report" + "[alarm='" + fmt.Sprintf("%v", oduReport.Alarm) + "']"
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["alarm"] = oduReport.Alarm
    return leafs
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetBundleName() string { return "cisco_ios_xr" }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetYangName() string { return "odu-report" }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) SetParent(parent types.Entity) { oduReport.parent = parent }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetParent() types.Entity { return oduReport.parent }

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetParentYangName() string { return "odu-reports" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds
// Configure ODU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold.
    OduThreshold []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetFilter() yfilter.YFilter { return oduThresholds.YFilter }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) SetFilter(yf yfilter.YFilter) { oduThresholds.YFilter = yf }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetGoName(yname string) string {
    if yname == "odu-threshold" { return "OduThreshold" }
    return ""
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetSegmentPath() string {
    return "odu-thresholds"
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "odu-threshold" {
        for _, c := range oduThresholds.OduThreshold {
            if oduThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold{}
        oduThresholds.OduThreshold = append(oduThresholds.OduThreshold, child)
        return &oduThresholds.OduThreshold[len(oduThresholds.OduThreshold)-1]
    }
    return nil
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range oduThresholds.OduThreshold {
        children[oduThresholds.OduThreshold[i].GetSegmentPath()] = &oduThresholds.OduThreshold[i]
    }
    return children
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetYangName() string { return "odu-thresholds" }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) SetParent(parent types.Entity) { oduThresholds.parent = parent }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetParent() types.Entity { return oduThresholds.parent }

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetParentYangName() string { return "odu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ODU Threshold type. The type is OduThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetFilter() yfilter.YFilter { return oduThreshold.YFilter }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) SetFilter(yf yfilter.YFilter) { oduThreshold.YFilter = yf }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetGoName(yname string) string {
    if yname == "threshold" { return "Threshold" }
    if yname == "threshold-value" { return "ThresholdValue" }
    return ""
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetSegmentPath() string {
    return "odu-threshold" + "[threshold='" + fmt.Sprintf("%v", oduThreshold.Threshold) + "']"
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold"] = oduThreshold.Threshold
    leafs["threshold-value"] = oduThreshold.ThresholdValue
    return leafs
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetYangName() string { return "odu-threshold" }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) SetParent(parent types.Entity) { oduThreshold.parent = parent }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetParent() types.Entity { return oduThreshold.parent }

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetParentYangName() string { return "odu-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti
// Configure ODU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetFilter() yfilter.YFilter { return oduExpectedTti.YFilter }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) SetFilter(yf yfilter.YFilter) { oduExpectedTti.YFilter = yf }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "ascii-string" { return "AsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetSegmentPath() string {
    return "odu-expected-tti"
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = oduExpectedTti.StringType
    leafs["ascii-string"] = oduExpectedTti.AsciiString
    leafs["hex-string"] = oduExpectedTti.HexString
    return leafs
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetBundleName() string { return "cisco_ios_xr" }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetYangName() string { return "odu-expected-tti" }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) SetParent(parent types.Entity) { oduExpectedTti.parent = parent }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetParent() types.Entity { return oduExpectedTti.parent }

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetParentYangName() string { return "odu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
// Configure ODU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetFilter() yfilter.YFilter { return oduTxTti.YFilter }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) SetFilter(yf yfilter.YFilter) { oduTxTti.YFilter = yf }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "ascii-string" { return "AsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetSegmentPath() string {
    return "odu-tx-tti"
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = oduTxTti.StringType
    leafs["ascii-string"] = oduTxTti.AsciiString
    leafs["hex-string"] = oduTxTti.HexString
    return leafs
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetBundleName() string { return "cisco_ios_xr" }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetYangName() string { return "odu-tx-tti" }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) SetParent(parent types.Entity) { oduTxTti.parent = parent }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetParent() types.Entity { return oduTxTti.parent }

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetParentYangName() string { return "odu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu
// Configure OTU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure OTU Expected TTI value.
    OtuExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti

    // Configure OTU threshold value.
    OtuThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds

    // Configure FRR thresholds and Window for trigger and revert.
    Frr InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr

    // Configure OTU alarm reporting.
    OtuReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports

    // Configure OTU TTI value.
    OtuTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetFilter() yfilter.YFilter { return otu.YFilter }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) SetFilter(yf yfilter.YFilter) { otu.YFilter = yf }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetGoName(yname string) string {
    if yname == "otu-expected-tti" { return "OtuExpectedTti" }
    if yname == "otu-thresholds" { return "OtuThresholds" }
    if yname == "frr" { return "Frr" }
    if yname == "otu-reports" { return "OtuReports" }
    if yname == "otu-tx-tti" { return "OtuTxTti" }
    return ""
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetSegmentPath() string {
    return "otu"
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "otu-expected-tti" {
        return &otu.OtuExpectedTti
    }
    if childYangName == "otu-thresholds" {
        return &otu.OtuThresholds
    }
    if childYangName == "frr" {
        return &otu.Frr
    }
    if childYangName == "otu-reports" {
        return &otu.OtuReports
    }
    if childYangName == "otu-tx-tti" {
        return &otu.OtuTxTti
    }
    return nil
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["otu-expected-tti"] = &otu.OtuExpectedTti
    children["otu-thresholds"] = &otu.OtuThresholds
    children["frr"] = &otu.Frr
    children["otu-reports"] = &otu.OtuReports
    children["otu-tx-tti"] = &otu.OtuTxTti
    return children
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetBundleName() string { return "cisco_ios_xr" }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetYangName() string { return "otu" }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) SetParent(parent types.Entity) { otu.parent = parent }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetParent() types.Entity { return otu.parent }

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetParentYangName() string { return "g709" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti
// Configure OTU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetFilter() yfilter.YFilter { return otuExpectedTti.YFilter }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) SetFilter(yf yfilter.YFilter) { otuExpectedTti.YFilter = yf }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "ascii-string" { return "AsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetSegmentPath() string {
    return "otu-expected-tti"
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otuExpectedTti.StringType
    leafs["ascii-string"] = otuExpectedTti.AsciiString
    leafs["hex-string"] = otuExpectedTti.HexString
    return leafs
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetBundleName() string { return "cisco_ios_xr" }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetYangName() string { return "otu-expected-tti" }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) SetParent(parent types.Entity) { otuExpectedTti.parent = parent }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetParent() types.Entity { return otuExpectedTti.parent }

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds
// Configure OTU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold.
    OtuThreshold []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetFilter() yfilter.YFilter { return otuThresholds.YFilter }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) SetFilter(yf yfilter.YFilter) { otuThresholds.YFilter = yf }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetGoName(yname string) string {
    if yname == "otu-threshold" { return "OtuThreshold" }
    return ""
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetSegmentPath() string {
    return "otu-thresholds"
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "otu-threshold" {
        for _, c := range otuThresholds.OtuThreshold {
            if otuThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold{}
        otuThresholds.OtuThreshold = append(otuThresholds.OtuThreshold, child)
        return &otuThresholds.OtuThreshold[len(otuThresholds.OtuThreshold)-1]
    }
    return nil
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range otuThresholds.OtuThreshold {
        children[otuThresholds.OtuThreshold[i].GetSegmentPath()] = &otuThresholds.OtuThreshold[i]
    }
    return children
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetYangName() string { return "otu-thresholds" }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) SetParent(parent types.Entity) { otuThresholds.parent = parent }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetParent() types.Entity { return otuThresholds.parent }

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OTU Threshold type. The type is OtuThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetFilter() yfilter.YFilter { return otuThreshold.YFilter }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) SetFilter(yf yfilter.YFilter) { otuThreshold.YFilter = yf }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetGoName(yname string) string {
    if yname == "threshold" { return "Threshold" }
    if yname == "threshold-value" { return "ThresholdValue" }
    return ""
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetSegmentPath() string {
    return "otu-threshold" + "[threshold='" + fmt.Sprintf("%v", otuThreshold.Threshold) + "']"
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold"] = otuThreshold.Threshold
    leafs["threshold-value"] = otuThreshold.ThresholdValue
    return leafs
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetYangName() string { return "otu-threshold" }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) SetParent(parent types.Entity) { otuThreshold.parent = parent }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetParent() types.Entity { return otuThreshold.parent }

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetParentYangName() string { return "otu-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr
// Configure FRR thresholds and Window for
// trigger and revert
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure FRR trigger window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow

    // Configure proactive protection revert threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold

    // Configure proactive protection trigger threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold

    // Configure FRR revert window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetFilter() yfilter.YFilter { return frr.YFilter }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) SetFilter(yf yfilter.YFilter) { frr.YFilter = yf }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetGoName(yname string) string {
    if yname == "trigger-window" { return "TriggerWindow" }
    if yname == "revert-threshold" { return "RevertThreshold" }
    if yname == "trigger-threshold" { return "TriggerThreshold" }
    if yname == "revert-window" { return "RevertWindow" }
    return ""
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetSegmentPath() string {
    return "frr"
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trigger-window" {
        return &frr.TriggerWindow
    }
    if childYangName == "revert-threshold" {
        return &frr.RevertThreshold
    }
    if childYangName == "trigger-threshold" {
        return &frr.TriggerThreshold
    }
    if childYangName == "revert-window" {
        return &frr.RevertWindow
    }
    return nil
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trigger-window"] = &frr.TriggerWindow
    children["revert-threshold"] = &frr.RevertThreshold
    children["trigger-threshold"] = &frr.TriggerThreshold
    children["revert-window"] = &frr.RevertWindow
    return children
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetBundleName() string { return "cisco_ios_xr" }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetYangName() string { return "frr" }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) SetParent(parent types.Entity) { frr.parent = parent }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetParent() types.Entity { return frr.parent }

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow
// Configure FRR trigger window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetFilter() yfilter.YFilter { return triggerWindow.YFilter }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) SetFilter(yf yfilter.YFilter) { triggerWindow.YFilter = yf }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "dummy" { return "Dummy" }
    return ""
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetSegmentPath() string {
    return "trigger-window"
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = triggerWindow.Window
    leafs["dummy"] = triggerWindow.Dummy
    return leafs
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetBundleName() string { return "cisco_ios_xr" }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetYangName() string { return "trigger-window" }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) SetParent(parent types.Entity) { triggerWindow.parent = parent }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetParent() types.Entity { return triggerWindow.parent }

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetParentYangName() string { return "frr" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold
// Configure proactive protection revert
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range:
    // 3..10. This attribute is mandatory.
    BerPower interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetFilter() yfilter.YFilter { return revertThreshold.YFilter }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) SetFilter(yf yfilter.YFilter) { revertThreshold.YFilter = yf }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetGoName(yname string) string {
    if yname == "ber-base" { return "BerBase" }
    if yname == "ber-power" { return "BerPower" }
    return ""
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetSegmentPath() string {
    return "revert-threshold"
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ber-base"] = revertThreshold.BerBase
    leafs["ber-power"] = revertThreshold.BerPower
    return leafs
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetYangName() string { return "revert-threshold" }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) SetParent(parent types.Entity) { revertThreshold.parent = parent }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetParent() types.Entity { return revertThreshold.parent }

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetParentYangName() string { return "frr" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold
// Configure proactive protection trigger
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range: 2..9.
    // This attribute is mandatory.
    BerPower interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetFilter() yfilter.YFilter { return triggerThreshold.YFilter }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) SetFilter(yf yfilter.YFilter) { triggerThreshold.YFilter = yf }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetGoName(yname string) string {
    if yname == "ber-base" { return "BerBase" }
    if yname == "ber-power" { return "BerPower" }
    return ""
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetSegmentPath() string {
    return "trigger-threshold"
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ber-base"] = triggerThreshold.BerBase
    leafs["ber-power"] = triggerThreshold.BerPower
    return leafs
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetYangName() string { return "trigger-threshold" }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) SetParent(parent types.Entity) { triggerThreshold.parent = parent }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetParent() types.Entity { return triggerThreshold.parent }

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetParentYangName() string { return "frr" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
// Configure FRR revert window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Integration window for FRR revert in MS. The type is interface{} with
    // range: 500..100000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetFilter() yfilter.YFilter { return revertWindow.YFilter }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) SetFilter(yf yfilter.YFilter) { revertWindow.YFilter = yf }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "dummy" { return "Dummy" }
    return ""
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetSegmentPath() string {
    return "revert-window"
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = revertWindow.Window
    leafs["dummy"] = revertWindow.Dummy
    return leafs
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetBundleName() string { return "cisco_ios_xr" }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetYangName() string { return "revert-window" }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) SetParent(parent types.Entity) { revertWindow.parent = parent }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetParent() types.Entity { return revertWindow.parent }

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetParentYangName() string { return "frr" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports
// Configure OTU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport.
    OtuReport []InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetFilter() yfilter.YFilter { return otuReports.YFilter }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) SetFilter(yf yfilter.YFilter) { otuReports.YFilter = yf }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetGoName(yname string) string {
    if yname == "otu-report" { return "OtuReport" }
    return ""
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetSegmentPath() string {
    return "otu-reports"
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "otu-report" {
        for _, c := range otuReports.OtuReport {
            if otuReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport{}
        otuReports.OtuReport = append(otuReports.OtuReport, child)
        return &otuReports.OtuReport[len(otuReports.OtuReport)-1]
    }
    return nil
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range otuReports.OtuReport {
        children[otuReports.OtuReport[i].GetSegmentPath()] = &otuReports.OtuReport[i]
    }
    return children
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetBundleName() string { return "cisco_ios_xr" }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetYangName() string { return "otu-reports" }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) SetParent(parent types.Entity) { otuReports.parent = parent }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetParent() types.Entity { return otuReports.parent }

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OTU alarm type. The type is OtuAlarm.
    Alarm interface{}
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetFilter() yfilter.YFilter { return otuReport.YFilter }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) SetFilter(yf yfilter.YFilter) { otuReport.YFilter = yf }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetGoName(yname string) string {
    if yname == "alarm" { return "Alarm" }
    return ""
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetSegmentPath() string {
    return "otu-report" + "[alarm='" + fmt.Sprintf("%v", otuReport.Alarm) + "']"
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["alarm"] = otuReport.Alarm
    return leafs
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetBundleName() string { return "cisco_ios_xr" }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetYangName() string { return "otu-report" }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) SetParent(parent types.Entity) { otuReport.parent = parent }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetParent() types.Entity { return otuReport.parent }

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetParentYangName() string { return "otu-reports" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
// Configure OTU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetFilter() yfilter.YFilter { return otuTxTti.YFilter }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) SetFilter(yf yfilter.YFilter) { otuTxTti.YFilter = yf }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetGoName(yname string) string {
    if yname == "string-type" { return "StringType" }
    if yname == "ascii-string" { return "AsciiString" }
    if yname == "hex-string" { return "HexString" }
    return ""
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetSegmentPath() string {
    return "otu-tx-tti"
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["string-type"] = otuTxTti.StringType
    leafs["ascii-string"] = otuTxTti.AsciiString
    leafs["hex-string"] = otuTxTti.HexString
    return leafs
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetBundleName() string { return "cisco_ios_xr" }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetYangName() string { return "otu-tx-tti" }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) SetParent(parent types.Entity) { otuTxTti.parent = parent }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetParent() types.Entity { return otuTxTti.parent }

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetParentYangName() string { return "otu" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs
// Configure PRBS mode and pattern
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable PRBS with mode. The type is PrbsMode. This attribute is mandatory.
    PrbsMode interface{}

    // Enable prbs test with pattern. The type is PrbsPattern. This attribute is
    // mandatory.
    PrbsPattern interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetFilter() yfilter.YFilter { return prbs.YFilter }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) SetFilter(yf yfilter.YFilter) { prbs.YFilter = yf }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetGoName(yname string) string {
    if yname == "prbs-mode" { return "PrbsMode" }
    if yname == "prbs-pattern" { return "PrbsPattern" }
    return ""
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetSegmentPath() string {
    return "prbs"
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prbs-mode"] = prbs.PrbsMode
    leafs["prbs-pattern"] = prbs.PrbsPattern
    return leafs
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetBundleName() string { return "cisco_ios_xr" }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetYangName() string { return "prbs" }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) SetParent(parent types.Entity) { prbs.parent = parent }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetParent() types.Entity { return prbs.parent }

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetParentYangName() string { return "g709" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
// Configure FEC mode
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // None, Standard, Enhanced, High-Gain, Long-Haul, Ci-BCH. The type is Fec.
    // This attribute is mandatory.
    FecMode interface{}

    // Enhanced FECMode to use i.4, i.7, Other FECMode to use None. The type is
    // Efec. The default value is none.
    EfecMode interface{}
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetFilter() yfilter.YFilter { return fec.YFilter }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) SetFilter(yf yfilter.YFilter) { fec.YFilter = yf }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetGoName(yname string) string {
    if yname == "fec-mode" { return "FecMode" }
    if yname == "efec-mode" { return "EfecMode" }
    return ""
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetSegmentPath() string {
    return "fec"
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-mode"] = fec.FecMode
    leafs["efec-mode"] = fec.EfecMode
    return leafs
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetBundleName() string { return "cisco_ios_xr" }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetYangName() string { return "fec" }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) SetParent(parent types.Entity) { fec.parent = parent }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetParent() types.Entity { return fec.parent }

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetParentYangName() string { return "g709" }

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
// Configure transponder wavelength
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Select a ITU channel number,channel range for C-band:
    // 1~82,L-band:106~185,spacing:50GHZ or 100MHz. The type is interface{} with
    // range: 1..1568362. This attribute is mandatory.
    WaveChannel interface{}

    // Wave Channel Number. The type is WaveChannelNum. This attribute is
    // mandatory.
    WaveChannelNumber interface{}

    // Enter Frequency Data in THz. The type is string with length: 1..128.
    ProgFrequency interface{}
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetFilter() yfilter.YFilter { return wavelength.YFilter }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) SetFilter(yf yfilter.YFilter) { wavelength.YFilter = yf }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetGoName(yname string) string {
    if yname == "wave-channel" { return "WaveChannel" }
    if yname == "wave-channel-number" { return "WaveChannelNumber" }
    if yname == "prog-frequency" { return "ProgFrequency" }
    return ""
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetSegmentPath() string {
    return "wavelength"
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wave-channel"] = wavelength.WaveChannel
    leafs["wave-channel-number"] = wavelength.WaveChannelNumber
    leafs["prog-frequency"] = wavelength.ProgFrequency
    return leafs
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetBundleName() string { return "cisco_ios_xr" }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetYangName() string { return "wavelength" }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) SetParent(parent types.Entity) { wavelength.parent = parent }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetParent() types.Entity { return wavelength.parent }

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetParentYangName() string { return "dwdm" }

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration
// IEEE 802.1Q VLAN subinterface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The VLAN tag stack associated with this sub-interface.
    VlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetFilter() yfilter.YFilter { return vlanSubConfiguration.YFilter }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) SetFilter(yf yfilter.YFilter) { vlanSubConfiguration.YFilter = yf }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetGoName(yname string) string {
    if yname == "vlan-identifier" { return "VlanIdentifier" }
    return ""
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-identifier" {
        return &vlanSubConfiguration.VlanIdentifier
    }
    return nil
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vlan-identifier"] = &vlanSubConfiguration.VlanIdentifier
    return children
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetYangName() string { return "vlan-sub-configuration" }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) SetParent(parent types.Entity) { vlanSubConfiguration.parent = parent }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetParent() types.Entity { return vlanSubConfiguration.parent }

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
// The VLAN tag stack associated with this
// sub-interface.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether this sub-interface is dot1ad or dot1Q. The type is Vlan. This
    // attribute is mandatory.
    VlanType interface{}

    // First (outermost) VLAN tag value. The type is interface{} with range:
    // 1..4094. This attribute is mandatory.
    FirstTag interface{}

    // Second VLAN tag value. The any value may only be used for Layer 2
    // subinterfaces. The type is one of the following types: enumeration
    // VlanTagOrNull, or int with range: 0..4094.
    SecondTag interface{}
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetFilter() yfilter.YFilter { return vlanIdentifier.YFilter }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) SetFilter(yf yfilter.YFilter) { vlanIdentifier.YFilter = yf }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetGoName(yname string) string {
    if yname == "vlan-type" { return "VlanType" }
    if yname == "first-tag" { return "FirstTag" }
    if yname == "second-tag" { return "SecondTag" }
    return ""
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetSegmentPath() string {
    return "vlan-identifier"
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vlan-type"] = vlanIdentifier.VlanType
    leafs["first-tag"] = vlanIdentifier.FirstTag
    leafs["second-tag"] = vlanIdentifier.SecondTag
    return leafs
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetBundleName() string { return "cisco_ios_xr" }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetYangName() string { return "vlan-identifier" }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) SetParent(parent types.Entity) { vlanIdentifier.parent = parent }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetParent() types.Entity { return vlanIdentifier.parent }

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetParentYangName() string { return "vlan-sub-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetService
// Ethernet service configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetService struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The default encapsulation to be used for locally-sourced packets.
    LocalTrafficDefaultEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation

    // The encapsulation of this Ethernet service.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation

    // The rewrite operation for the Ethernet service.
    Rewrite InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetFilter() yfilter.YFilter { return ethernetService.YFilter }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) SetFilter(yf yfilter.YFilter) { ethernetService.YFilter = yf }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetGoName(yname string) string {
    if yname == "local-traffic-default-encapsulation" { return "LocalTrafficDefaultEncapsulation" }
    if yname == "encapsulation" { return "Encapsulation" }
    if yname == "rewrite" { return "Rewrite" }
    return ""
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local-traffic-default-encapsulation" {
        return &ethernetService.LocalTrafficDefaultEncapsulation
    }
    if childYangName == "encapsulation" {
        return &ethernetService.Encapsulation
    }
    if childYangName == "rewrite" {
        return &ethernetService.Rewrite
    }
    return nil
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local-traffic-default-encapsulation"] = &ethernetService.LocalTrafficDefaultEncapsulation
    children["encapsulation"] = &ethernetService.Encapsulation
    children["rewrite"] = &ethernetService.Rewrite
    return children
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetYangName() string { return "ethernet-service" }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) SetParent(parent types.Entity) { ethernetService.parent = parent }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetParent() types.Entity { return ethernetService.parent }

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation
// The default encapsulation to be used for
// locally-sourced packets
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of outer tag. The type is Vlan. This attribute is mandatory.
    OuterTagType interface{}

    // VLAN id for outer tag. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    OuterVlanId interface{}

    // Optional VLAN Id for inner Dot1Q tag. The type is interface{} with range:
    // 1..4094.
    InnerVlanId interface{}
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetFilter() yfilter.YFilter { return localTrafficDefaultEncapsulation.YFilter }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) SetFilter(yf yfilter.YFilter) { localTrafficDefaultEncapsulation.YFilter = yf }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetGoName(yname string) string {
    if yname == "outer-tag-type" { return "OuterTagType" }
    if yname == "outer-vlan-id" { return "OuterVlanId" }
    if yname == "inner-vlan-id" { return "InnerVlanId" }
    return ""
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetSegmentPath() string {
    return "local-traffic-default-encapsulation"
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outer-tag-type"] = localTrafficDefaultEncapsulation.OuterTagType
    leafs["outer-vlan-id"] = localTrafficDefaultEncapsulation.OuterVlanId
    leafs["inner-vlan-id"] = localTrafficDefaultEncapsulation.InnerVlanId
    return leafs
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetYangName() string { return "local-traffic-default-encapsulation" }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) SetParent(parent types.Entity) { localTrafficDefaultEncapsulation.parent = parent }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetParent() types.Entity { return localTrafficDefaultEncapsulation.parent }

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetParentYangName() string { return "ethernet-service" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation
// The encapsulation of this Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetFilter() yfilter.YFilter { return encapsulation.YFilter }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) SetFilter(yf yfilter.YFilter) { encapsulation.YFilter = yf }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetGoName(yname string) string {
    if yname == "outer-tag-type" { return "OuterTagType" }
    if yname == "outer-range1-low" { return "OuterRange1Low" }
    if yname == "outer-range1-high" { return "OuterRange1High" }
    if yname == "inner-tag-type" { return "InnerTagType" }
    if yname == "inner-range1-low" { return "InnerRange1Low" }
    if yname == "inner-range1-high" { return "InnerRange1High" }
    if yname == "additional-range1-low" { return "AdditionalRange1Low" }
    if yname == "additional-range1-high" { return "AdditionalRange1High" }
    if yname == "additional-range2-low" { return "AdditionalRange2Low" }
    if yname == "additional-range2-high" { return "AdditionalRange2High" }
    if yname == "additional-range3-low" { return "AdditionalRange3Low" }
    if yname == "additional-range3-high" { return "AdditionalRange3High" }
    if yname == "additional-range4-low" { return "AdditionalRange4Low" }
    if yname == "additional-range4-high" { return "AdditionalRange4High" }
    if yname == "additional-range5-low" { return "AdditionalRange5Low" }
    if yname == "additional-range5-high" { return "AdditionalRange5High" }
    if yname == "additional-range6-low" { return "AdditionalRange6Low" }
    if yname == "additional-range6-high" { return "AdditionalRange6High" }
    if yname == "additional-range7-low" { return "AdditionalRange7Low" }
    if yname == "additional-range7-high" { return "AdditionalRange7High" }
    if yname == "additional-range8-low" { return "AdditionalRange8Low" }
    if yname == "additional-range8-high" { return "AdditionalRange8High" }
    if yname == "outer-class-of-service" { return "OuterClassOfService" }
    if yname == "inner-class-of-service" { return "InnerClassOfService" }
    if yname == "payload-ethertype-match" { return "PayloadEthertypeMatch" }
    if yname == "ingress-source-mac" { return "IngressSourceMac" }
    if yname == "ingress-destination-mac" { return "IngressDestinationMac" }
    if yname == "exact" { return "Exact" }
    return ""
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetSegmentPath() string {
    return "encapsulation"
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outer-tag-type"] = encapsulation.OuterTagType
    leafs["outer-range1-low"] = encapsulation.OuterRange1Low
    leafs["outer-range1-high"] = encapsulation.OuterRange1High
    leafs["inner-tag-type"] = encapsulation.InnerTagType
    leafs["inner-range1-low"] = encapsulation.InnerRange1Low
    leafs["inner-range1-high"] = encapsulation.InnerRange1High
    leafs["additional-range1-low"] = encapsulation.AdditionalRange1Low
    leafs["additional-range1-high"] = encapsulation.AdditionalRange1High
    leafs["additional-range2-low"] = encapsulation.AdditionalRange2Low
    leafs["additional-range2-high"] = encapsulation.AdditionalRange2High
    leafs["additional-range3-low"] = encapsulation.AdditionalRange3Low
    leafs["additional-range3-high"] = encapsulation.AdditionalRange3High
    leafs["additional-range4-low"] = encapsulation.AdditionalRange4Low
    leafs["additional-range4-high"] = encapsulation.AdditionalRange4High
    leafs["additional-range5-low"] = encapsulation.AdditionalRange5Low
    leafs["additional-range5-high"] = encapsulation.AdditionalRange5High
    leafs["additional-range6-low"] = encapsulation.AdditionalRange6Low
    leafs["additional-range6-high"] = encapsulation.AdditionalRange6High
    leafs["additional-range7-low"] = encapsulation.AdditionalRange7Low
    leafs["additional-range7-high"] = encapsulation.AdditionalRange7High
    leafs["additional-range8-low"] = encapsulation.AdditionalRange8Low
    leafs["additional-range8-high"] = encapsulation.AdditionalRange8High
    leafs["outer-class-of-service"] = encapsulation.OuterClassOfService
    leafs["inner-class-of-service"] = encapsulation.InnerClassOfService
    leafs["payload-ethertype-match"] = encapsulation.PayloadEthertypeMatch
    leafs["ingress-source-mac"] = encapsulation.IngressSourceMac
    leafs["ingress-destination-mac"] = encapsulation.IngressDestinationMac
    leafs["exact"] = encapsulation.Exact
    return leafs
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetYangName() string { return "encapsulation" }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) SetParent(parent types.Entity) { encapsulation.parent = parent }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetParent() types.Entity { return encapsulation.parent }

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetParentYangName() string { return "ethernet-service" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
// The rewrite operation for the Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type of rewrite to perform. The type is Rewrite. This attribute is
    // mandatory.
    RewriteType interface{}

    // Type of outermost tag to be pushed. The type is Match.
    OuterTagType interface{}

    // VLAN Id of outermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    OuterTagValue interface{}

    // Type of innermost tag to be pushed. The type is Match.
    InnerTagType interface{}

    // VLAN Id of innermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    InnerTagValue interface{}
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetFilter() yfilter.YFilter { return rewrite.YFilter }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) SetFilter(yf yfilter.YFilter) { rewrite.YFilter = yf }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetGoName(yname string) string {
    if yname == "rewrite-type" { return "RewriteType" }
    if yname == "outer-tag-type" { return "OuterTagType" }
    if yname == "outer-tag-value" { return "OuterTagValue" }
    if yname == "inner-tag-type" { return "InnerTagType" }
    if yname == "inner-tag-value" { return "InnerTagValue" }
    return ""
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetSegmentPath() string {
    return "rewrite"
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-type"] = rewrite.RewriteType
    leafs["outer-tag-type"] = rewrite.OuterTagType
    leafs["outer-tag-value"] = rewrite.OuterTagValue
    leafs["inner-tag-type"] = rewrite.InnerTagType
    leafs["inner-tag-value"] = rewrite.InnerTagValue
    return leafs
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetBundleName() string { return "cisco_ios_xr" }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetYangName() string { return "rewrite" }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) SetParent(parent types.Entity) { rewrite.parent = parent }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetParent() types.Entity { return rewrite.parent }

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetParentYangName() string { return "ethernet-service" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng
// Ethernet Infra BNG specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L3 Ambiguous encapsulation.
    AmbiguousEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetFilter() yfilter.YFilter { return ethernetBng.YFilter }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) SetFilter(yf yfilter.YFilter) { ethernetBng.YFilter = yf }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetGoName(yname string) string {
    if yname == "ambiguous-encapsulation" { return "AmbiguousEncapsulation" }
    return ""
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ambiguous-encapsulation" {
        return &ethernetBng.AmbiguousEncapsulation
    }
    return nil
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ambiguous-encapsulation"] = &ethernetBng.AmbiguousEncapsulation
    return children
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetYangName() string { return "ethernet-bng" }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) SetParent(parent types.Entity) { ethernetBng.parent = parent }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetParent() types.Entity { return ethernetBng.parent }

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
// L3 Ambiguous encapsulation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetFilter() yfilter.YFilter { return ambiguousEncapsulation.YFilter }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) SetFilter(yf yfilter.YFilter) { ambiguousEncapsulation.YFilter = yf }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetGoName(yname string) string {
    if yname == "outer-tag-type" { return "OuterTagType" }
    if yname == "outer-range1-low" { return "OuterRange1Low" }
    if yname == "outer-range1-high" { return "OuterRange1High" }
    if yname == "inner-tag-type" { return "InnerTagType" }
    if yname == "inner-range1-low" { return "InnerRange1Low" }
    if yname == "inner-range1-high" { return "InnerRange1High" }
    if yname == "additional-range1-low" { return "AdditionalRange1Low" }
    if yname == "additional-range1-high" { return "AdditionalRange1High" }
    if yname == "additional-range2-low" { return "AdditionalRange2Low" }
    if yname == "additional-range2-high" { return "AdditionalRange2High" }
    if yname == "additional-range3-low" { return "AdditionalRange3Low" }
    if yname == "additional-range3-high" { return "AdditionalRange3High" }
    if yname == "additional-range4-low" { return "AdditionalRange4Low" }
    if yname == "additional-range4-high" { return "AdditionalRange4High" }
    if yname == "additional-range5-low" { return "AdditionalRange5Low" }
    if yname == "additional-range5-high" { return "AdditionalRange5High" }
    if yname == "additional-range6-low" { return "AdditionalRange6Low" }
    if yname == "additional-range6-high" { return "AdditionalRange6High" }
    if yname == "additional-range7-low" { return "AdditionalRange7Low" }
    if yname == "additional-range7-high" { return "AdditionalRange7High" }
    if yname == "additional-range8-low" { return "AdditionalRange8Low" }
    if yname == "additional-range8-high" { return "AdditionalRange8High" }
    if yname == "outer-class-of-service" { return "OuterClassOfService" }
    if yname == "inner-class-of-service" { return "InnerClassOfService" }
    if yname == "payload-ethertype-match" { return "PayloadEthertypeMatch" }
    if yname == "ingress-source-mac" { return "IngressSourceMac" }
    if yname == "ingress-destination-mac" { return "IngressDestinationMac" }
    if yname == "exact" { return "Exact" }
    return ""
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetSegmentPath() string {
    return "ambiguous-encapsulation"
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outer-tag-type"] = ambiguousEncapsulation.OuterTagType
    leafs["outer-range1-low"] = ambiguousEncapsulation.OuterRange1Low
    leafs["outer-range1-high"] = ambiguousEncapsulation.OuterRange1High
    leafs["inner-tag-type"] = ambiguousEncapsulation.InnerTagType
    leafs["inner-range1-low"] = ambiguousEncapsulation.InnerRange1Low
    leafs["inner-range1-high"] = ambiguousEncapsulation.InnerRange1High
    leafs["additional-range1-low"] = ambiguousEncapsulation.AdditionalRange1Low
    leafs["additional-range1-high"] = ambiguousEncapsulation.AdditionalRange1High
    leafs["additional-range2-low"] = ambiguousEncapsulation.AdditionalRange2Low
    leafs["additional-range2-high"] = ambiguousEncapsulation.AdditionalRange2High
    leafs["additional-range3-low"] = ambiguousEncapsulation.AdditionalRange3Low
    leafs["additional-range3-high"] = ambiguousEncapsulation.AdditionalRange3High
    leafs["additional-range4-low"] = ambiguousEncapsulation.AdditionalRange4Low
    leafs["additional-range4-high"] = ambiguousEncapsulation.AdditionalRange4High
    leafs["additional-range5-low"] = ambiguousEncapsulation.AdditionalRange5Low
    leafs["additional-range5-high"] = ambiguousEncapsulation.AdditionalRange5High
    leafs["additional-range6-low"] = ambiguousEncapsulation.AdditionalRange6Low
    leafs["additional-range6-high"] = ambiguousEncapsulation.AdditionalRange6High
    leafs["additional-range7-low"] = ambiguousEncapsulation.AdditionalRange7Low
    leafs["additional-range7-high"] = ambiguousEncapsulation.AdditionalRange7High
    leafs["additional-range8-low"] = ambiguousEncapsulation.AdditionalRange8Low
    leafs["additional-range8-high"] = ambiguousEncapsulation.AdditionalRange8High
    leafs["outer-class-of-service"] = ambiguousEncapsulation.OuterClassOfService
    leafs["inner-class-of-service"] = ambiguousEncapsulation.InnerClassOfService
    leafs["payload-ethertype-match"] = ambiguousEncapsulation.PayloadEthertypeMatch
    leafs["ingress-source-mac"] = ambiguousEncapsulation.IngressSourceMac
    leafs["ingress-destination-mac"] = ambiguousEncapsulation.IngressDestinationMac
    leafs["exact"] = ambiguousEncapsulation.Exact
    return leafs
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetYangName() string { return "ambiguous-encapsulation" }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) SetParent(parent types.Entity) { ambiguousEncapsulation.parent = parent }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetParent() types.Entity { return ambiguousEncapsulation.parent }

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetParentYangName() string { return "ethernet-bng" }

// InterfaceConfigurations_InterfaceConfiguration_MacAccounting
// MAC Accounting Configuration
type InterfaceConfigurations_InterfaceConfiguration_MacAccounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per MAC address accounting statistics. The type is interface{}.
    Ingress interface{}

    // Per MAC address accounting statistics. The type is interface{}.
    Egress interface{}
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetFilter() yfilter.YFilter { return macAccounting.YFilter }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) SetFilter(yf yfilter.YFilter) { macAccounting.YFilter = yf }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetGoName(yname string) string {
    if yname == "ingress" { return "Ingress" }
    if yname == "egress" { return "Egress" }
    return ""
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ingress"] = macAccounting.Ingress
    leafs["egress"] = macAccounting.Egress
    return leafs
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetBundleName() string { return "cisco_ios_xr" }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetYangName() string { return "mac-accounting" }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) SetParent(parent types.Entity) { macAccounting.parent = parent }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetParent() types.Entity { return macAccounting.parent }

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures
// Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ingress Ethernet frame filtering. The type is Filtering.
    Filtering interface{}

    // Enable Ethernet Link OAM on the interface. The type is interface{}.
    EtherLinkOamEnable interface{}

    // CFM interface configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm

    // Ethernet Link OAM Interface Configuration.
    EtherLinkOam InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetFilter() yfilter.YFilter { return ethernetFeatures.YFilter }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) SetFilter(yf yfilter.YFilter) { ethernetFeatures.YFilter = yf }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetGoName(yname string) string {
    if yname == "filtering" { return "Filtering" }
    if yname == "ether-link-oam-enable" { return "EtherLinkOamEnable" }
    if yname == "Cisco-IOS-XR-ethernet-cfm-cfg:cfm" { return "Cfm" }
    if yname == "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam" { return "EtherLinkOam" }
    return ""
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "Cisco-IOS-XR-ethernet-cfm-cfg:cfm" {
        return &ethernetFeatures.Cfm
    }
    if childYangName == "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam" {
        return &ethernetFeatures.EtherLinkOam
    }
    return nil
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["Cisco-IOS-XR-ethernet-cfm-cfg:cfm"] = &ethernetFeatures.Cfm
    children["Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"] = &ethernetFeatures.EtherLinkOam
    return children
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filtering"] = ethernetFeatures.Filtering
    leafs["ether-link-oam-enable"] = ethernetFeatures.EtherLinkOamEnable
    return leafs
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetYangName() string { return "ethernet-features" }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) SetParent(parent types.Entity) { ethernetFeatures.parent = parent }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetParent() types.Entity { return ethernetFeatures.parent }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm
// CFM interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain-specific interface configuration.
    Domains InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains

    // Interface specific AIS configuration.
    AisUp InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetFilter() yfilter.YFilter { return cfm.YFilter }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) SetFilter(yf yfilter.YFilter) { cfm.YFilter = yf }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetGoName(yname string) string {
    if yname == "domains" { return "Domains" }
    if yname == "ais-up" { return "AisUp" }
    return ""
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetSegmentPath() string {
    return "Cisco-IOS-XR-ethernet-cfm-cfg:cfm"
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "domains" {
        return &cfm.Domains
    }
    if childYangName == "ais-up" {
        return &cfm.AisUp
    }
    return nil
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["domains"] = &cfm.Domains
    children["ais-up"] = &cfm.AisUp
    return children
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetBundleName() string { return "cisco_ios_xr" }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetYangName() string { return "cfm" }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) SetParent(parent types.Entity) { cfm.parent = parent }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetParent() types.Entity { return cfm.parent }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetParentYangName() string { return "ethernet-features" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains
// Domain-specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular Maintenance Domain. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain.
    Domain []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetFilter() yfilter.YFilter { return domains.YFilter }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) SetFilter(yf yfilter.YFilter) { domains.YFilter = yf }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetGoName(yname string) string {
    if yname == "domain" { return "Domain" }
    return ""
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetSegmentPath() string {
    return "domains"
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "domain" {
        for _, c := range domains.Domain {
            if domains.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain{}
        domains.Domain = append(domains.Domain, child)
        return &domains.Domain[len(domains.Domain)-1]
    }
    return nil
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range domains.Domain {
        children[domains.Domain[i].GetSegmentPath()] = &domains.Domain[i]
    }
    return children
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetBundleName() string { return "cisco_ios_xr" }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetYangName() string { return "domains" }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) SetParent(parent types.Entity) { domains.parent = parent }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetParent() types.Entity { return domains.parent }

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetParentYangName() string { return "cfm" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
// Configuration for a particular Maintenance
// Domain
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Maintenance Domain. The type is string with
    // length: 1..79.
    Domain interface{}

    // MEP Configuration.
    Mep InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetFilter() yfilter.YFilter { return domain.YFilter }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) SetFilter(yf yfilter.YFilter) { domain.YFilter = yf }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetGoName(yname string) string {
    if yname == "domain" { return "Domain" }
    if yname == "mep" { return "Mep" }
    return ""
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetSegmentPath() string {
    return "domain" + "[domain='" + fmt.Sprintf("%v", domain.Domain) + "']"
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mep" {
        return &domain.Mep
    }
    return nil
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mep"] = &domain.Mep
    return children
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain"] = domain.Domain
    return leafs
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetBundleName() string { return "cisco_ios_xr" }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetYangName() string { return "domain" }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) SetParent(parent types.Entity) { domain.parent = parent }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetParent() types.Entity { return domain.parent }

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetParentYangName() string { return "domains" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
// MEP Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Class of Service bits for this MEP. The type is interface{} with range:
    // 0..7.
    Cos interface{}

    // SLA specific configuration.
    SlaProfileTargetMepIds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds

    // Properties for this MEP.
    MepProperties InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties

    // Loss-measurement specific configuration.
    LossMeasurementCounters InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetFilter() yfilter.YFilter { return mep.YFilter }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) SetFilter(yf yfilter.YFilter) { mep.YFilter = yf }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetGoName(yname string) string {
    if yname == "cos" { return "Cos" }
    if yname == "sla-profile-target-mep-ids" { return "SlaProfileTargetMepIds" }
    if yname == "mep-properties" { return "MepProperties" }
    if yname == "loss-measurement-counters" { return "LossMeasurementCounters" }
    return ""
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetSegmentPath() string {
    return "mep"
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sla-profile-target-mep-ids" {
        return &mep.SlaProfileTargetMepIds
    }
    if childYangName == "mep-properties" {
        return &mep.MepProperties
    }
    if childYangName == "loss-measurement-counters" {
        return &mep.LossMeasurementCounters
    }
    return nil
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sla-profile-target-mep-ids"] = &mep.SlaProfileTargetMepIds
    children["mep-properties"] = &mep.MepProperties
    children["loss-measurement-counters"] = &mep.LossMeasurementCounters
    return children
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cos"] = mep.Cos
    return leafs
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetBundleName() string { return "cisco_ios_xr" }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetYangName() string { return "mep" }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) SetParent(parent types.Entity) { mep.parent = parent }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetParent() types.Entity { return mep.parent }

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetParentYangName() string { return "domain" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds
// SLA specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId.
    SlaProfileTargetMepId []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress.
    SlaProfileTargetMacAddress []InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetFilter() yfilter.YFilter { return slaProfileTargetMepIds.YFilter }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) SetFilter(yf yfilter.YFilter) { slaProfileTargetMepIds.YFilter = yf }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetGoName(yname string) string {
    if yname == "sla-profile-target-mep-id" { return "SlaProfileTargetMepId" }
    if yname == "sla-profile-target-mac-address" { return "SlaProfileTargetMacAddress" }
    return ""
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetSegmentPath() string {
    return "sla-profile-target-mep-ids"
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sla-profile-target-mep-id" {
        for _, c := range slaProfileTargetMepIds.SlaProfileTargetMepId {
            if slaProfileTargetMepIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId{}
        slaProfileTargetMepIds.SlaProfileTargetMepId = append(slaProfileTargetMepIds.SlaProfileTargetMepId, child)
        return &slaProfileTargetMepIds.SlaProfileTargetMepId[len(slaProfileTargetMepIds.SlaProfileTargetMepId)-1]
    }
    if childYangName == "sla-profile-target-mac-address" {
        for _, c := range slaProfileTargetMepIds.SlaProfileTargetMacAddress {
            if slaProfileTargetMepIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress{}
        slaProfileTargetMepIds.SlaProfileTargetMacAddress = append(slaProfileTargetMepIds.SlaProfileTargetMacAddress, child)
        return &slaProfileTargetMepIds.SlaProfileTargetMacAddress[len(slaProfileTargetMepIds.SlaProfileTargetMacAddress)-1]
    }
    return nil
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range slaProfileTargetMepIds.SlaProfileTargetMepId {
        children[slaProfileTargetMepIds.SlaProfileTargetMepId[i].GetSegmentPath()] = &slaProfileTargetMepIds.SlaProfileTargetMepId[i]
    }
    for i := range slaProfileTargetMepIds.SlaProfileTargetMacAddress {
        children[slaProfileTargetMepIds.SlaProfileTargetMacAddress[i].GetSegmentPath()] = &slaProfileTargetMepIds.SlaProfileTargetMacAddress[i]
    }
    return children
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetBundleName() string { return "cisco_ios_xr" }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetYangName() string { return "sla-profile-target-mep-ids" }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) SetParent(parent types.Entity) { slaProfileTargetMepIds.parent = parent }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetParent() types.Entity { return slaProfileTargetMepIds.parent }

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetParentYangName() string { return "mep" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Profile interface{}

    // This attribute is a key. Target MEP-ID. The type is interface{} with range:
    // 1..8191.
    TargetMepId interface{}
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetFilter() yfilter.YFilter { return slaProfileTargetMepId.YFilter }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) SetFilter(yf yfilter.YFilter) { slaProfileTargetMepId.YFilter = yf }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetGoName(yname string) string {
    if yname == "profile" { return "Profile" }
    if yname == "target-mep-id" { return "TargetMepId" }
    return ""
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetSegmentPath() string {
    return "sla-profile-target-mep-id" + "[profile='" + fmt.Sprintf("%v", slaProfileTargetMepId.Profile) + "']" + "[target-mep-id='" + fmt.Sprintf("%v", slaProfileTargetMepId.TargetMepId) + "']"
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile"] = slaProfileTargetMepId.Profile
    leafs["target-mep-id"] = slaProfileTargetMepId.TargetMepId
    return leafs
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetBundleName() string { return "cisco_ios_xr" }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetYangName() string { return "sla-profile-target-mep-id" }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) SetParent(parent types.Entity) { slaProfileTargetMepId.parent = parent }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetParent() types.Entity { return slaProfileTargetMepId.parent }

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetParentYangName() string { return "sla-profile-target-mep-ids" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Profile interface{}

    // This attribute is a key. Target MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    TargetMacAddress interface{}
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetFilter() yfilter.YFilter { return slaProfileTargetMacAddress.YFilter }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) SetFilter(yf yfilter.YFilter) { slaProfileTargetMacAddress.YFilter = yf }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetGoName(yname string) string {
    if yname == "profile" { return "Profile" }
    if yname == "target-mac-address" { return "TargetMacAddress" }
    return ""
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetSegmentPath() string {
    return "sla-profile-target-mac-address" + "[profile='" + fmt.Sprintf("%v", slaProfileTargetMacAddress.Profile) + "']" + "[target-mac-address='" + fmt.Sprintf("%v", slaProfileTargetMacAddress.TargetMacAddress) + "']"
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile"] = slaProfileTargetMacAddress.Profile
    leafs["target-mac-address"] = slaProfileTargetMacAddress.TargetMacAddress
    return leafs
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetYangName() string { return "sla-profile-target-mac-address" }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) SetParent(parent types.Entity) { slaProfileTargetMacAddress.parent = parent }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetParent() types.Entity { return slaProfileTargetMacAddress.parent }

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetParentYangName() string { return "sla-profile-target-mep-ids" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties
// Properties for this MEP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service (Maintenance Association). The type is string with length: 1..79.
    // This attribute is mandatory.
    Service interface{}

    // MEP ID. The type is interface{} with range: 1..8191. This attribute is
    // mandatory.
    MepId interface{}
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetFilter() yfilter.YFilter { return mepProperties.YFilter }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) SetFilter(yf yfilter.YFilter) { mepProperties.YFilter = yf }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "mep-id" { return "MepId" }
    return ""
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetSegmentPath() string {
    return "mep-properties"
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = mepProperties.Service
    leafs["mep-id"] = mepProperties.MepId
    return leafs
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetBundleName() string { return "cisco_ios_xr" }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetYangName() string { return "mep-properties" }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) SetParent(parent types.Entity) { mepProperties.parent = parent }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetParent() types.Entity { return mepProperties.parent }

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetParentYangName() string { return "mep" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
// Loss-measurement specific configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Aggregate, List, or Range. The type is CfmLmCountersCfg. This attribute is
    // mandatory.
    CfgType interface{}

    // CoS bits for per-CoS counters - start of range or list item. The type is
    // interface{} with range: 0..7.
    Cos0 interface{}

    // CoS bits for per-CoS counters - end of range or list item. The type is
    // interface{} with range: 0..7.
    Cos1 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos2 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos3 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos4 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos5 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos6 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos7 interface{}
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetFilter() yfilter.YFilter { return lossMeasurementCounters.YFilter }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) SetFilter(yf yfilter.YFilter) { lossMeasurementCounters.YFilter = yf }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetGoName(yname string) string {
    if yname == "cfg-type" { return "CfgType" }
    if yname == "cos0" { return "Cos0" }
    if yname == "cos1" { return "Cos1" }
    if yname == "cos2" { return "Cos2" }
    if yname == "cos3" { return "Cos3" }
    if yname == "cos4" { return "Cos4" }
    if yname == "cos5" { return "Cos5" }
    if yname == "cos6" { return "Cos6" }
    if yname == "cos7" { return "Cos7" }
    return ""
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetSegmentPath() string {
    return "loss-measurement-counters"
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cfg-type"] = lossMeasurementCounters.CfgType
    leafs["cos0"] = lossMeasurementCounters.Cos0
    leafs["cos1"] = lossMeasurementCounters.Cos1
    leafs["cos2"] = lossMeasurementCounters.Cos2
    leafs["cos3"] = lossMeasurementCounters.Cos3
    leafs["cos4"] = lossMeasurementCounters.Cos4
    leafs["cos5"] = lossMeasurementCounters.Cos5
    leafs["cos6"] = lossMeasurementCounters.Cos6
    leafs["cos7"] = lossMeasurementCounters.Cos7
    return leafs
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetBundleName() string { return "cisco_ios_xr" }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetYangName() string { return "loss-measurement-counters" }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) SetParent(parent types.Entity) { lossMeasurementCounters.parent = parent }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetParent() types.Entity { return lossMeasurementCounters.parent }

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetParentYangName() string { return "mep" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
// Interface specific AIS configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AIS transmission configuration.
    Transmission InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetFilter() yfilter.YFilter { return aisUp.YFilter }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) SetFilter(yf yfilter.YFilter) { aisUp.YFilter = yf }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetGoName(yname string) string {
    if yname == "transmission" { return "Transmission" }
    return ""
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetSegmentPath() string {
    return "ais-up"
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transmission" {
        return &aisUp.Transmission
    }
    return nil
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transmission"] = &aisUp.Transmission
    return children
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetBundleName() string { return "cisco_ios_xr" }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetYangName() string { return "ais-up" }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) SetParent(parent types.Entity) { aisUp.parent = parent }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetParent() types.Entity { return aisUp.parent }

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetParentYangName() string { return "cfm" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
// AIS transmission configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AIS Interval. The type is CfmAisInterval.
    AisInterval interface{}

    // Class of Service bits. The type is interface{} with range: 0..7.
    Cos interface{}
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetFilter() yfilter.YFilter { return transmission.YFilter }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) SetFilter(yf yfilter.YFilter) { transmission.YFilter = yf }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetGoName(yname string) string {
    if yname == "ais-interval" { return "AisInterval" }
    if yname == "cos" { return "Cos" }
    return ""
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetSegmentPath() string {
    return "transmission"
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ais-interval"] = transmission.AisInterval
    leafs["cos"] = transmission.Cos
    return leafs
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetBundleName() string { return "cisco_ios_xr" }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetYangName() string { return "transmission" }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) SetParent(parent types.Entity) { transmission.parent = parent }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetParent() types.Entity { return transmission.parent }

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetParentYangName() string { return "ais-up" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
// Ethernet Link OAM Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Connection timeout period in number of lost heartbeats. The type is
    // interface{} with range: 2..30.
    Timeout interface{}

    // Possible Ethernet Link OAM modes. The type is EtherLinkOamModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval. The type is bool.
    MibRetrieval interface{}

    // Set the profile to use on the interface. The type is string.
    ProfileName interface{}

    // Enable or disable remote loopback. The type is bool.
    RemoteLoopback interface{}

    // Possible Ethernet Link OAM hello intervals. The type is
    // EtherLinkOamHelloIntervalEnum.
    HelloInterval interface{}

    // Enable or disable uni-directional link-fault detection. The type is bool.
    Udlf interface{}

    // Configure action parameters.
    Action InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action

    // Configure remote requirement parameters.
    RequireRemote InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote

    // Configure link monitor parameters.
    LinkMonitoring InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetFilter() yfilter.YFilter { return etherLinkOam.YFilter }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) SetFilter(yf yfilter.YFilter) { etherLinkOam.YFilter = yf }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetGoName(yname string) string {
    if yname == "timeout" { return "Timeout" }
    if yname == "mode" { return "Mode" }
    if yname == "mib-retrieval" { return "MibRetrieval" }
    if yname == "profile-name" { return "ProfileName" }
    if yname == "remote-loopback" { return "RemoteLoopback" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "udlf" { return "Udlf" }
    if yname == "action" { return "Action" }
    if yname == "require-remote" { return "RequireRemote" }
    if yname == "link-monitoring" { return "LinkMonitoring" }
    return ""
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetSegmentPath() string {
    return "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "action" {
        return &etherLinkOam.Action
    }
    if childYangName == "require-remote" {
        return &etherLinkOam.RequireRemote
    }
    if childYangName == "link-monitoring" {
        return &etherLinkOam.LinkMonitoring
    }
    return nil
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["action"] = &etherLinkOam.Action
    children["require-remote"] = &etherLinkOam.RequireRemote
    children["link-monitoring"] = &etherLinkOam.LinkMonitoring
    return children
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["timeout"] = etherLinkOam.Timeout
    leafs["mode"] = etherLinkOam.Mode
    leafs["mib-retrieval"] = etherLinkOam.MibRetrieval
    leafs["profile-name"] = etherLinkOam.ProfileName
    leafs["remote-loopback"] = etherLinkOam.RemoteLoopback
    leafs["hello-interval"] = etherLinkOam.HelloInterval
    leafs["udlf"] = etherLinkOam.Udlf
    return leafs
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetBundleName() string { return "cisco_ios_xr" }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetYangName() string { return "ether-link-oam" }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) SetParent(parent types.Entity) { etherLinkOam.parent = parent }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetParent() types.Entity { return etherLinkOam.parent }

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetParentYangName() string { return "ethernet-features" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action
// Configure action parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Action to perform when a dying gasp occurs. The type is
    // EtherLinkOamEventActionEnum.
    DyingGasp interface{}

    // Action to perform when a link fault occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    LinkFault interface{}

    // Action to perform when a capabilities conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    CapabilitiesConflict interface{}

    // Action to perform when a session comes up. The type is
    // EtherLinkOamEventActionPrimEnum.
    SessionUp interface{}

    // Action to perform when a critical event occurs. The type is
    // EtherLinkOamEventActionEnum.
    CriticalEvent interface{}

    // Action to perform when remote loopback is entered or exited. The type is
    // EtherLinkOamEventActionPrimEnum.
    RemoteLoopback interface{}

    // Action to perform when a wiring conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    WiringConflict interface{}

    // Action to perform when a high-threshold event occurs. The type is
    // EtherLinkOamEventActionEnum.
    HighThreshold interface{}

    // Action to perform when discovery timeout occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    DiscoveryTimeout interface{}

    // Action to perform when a session comes down. The type is
    // EtherLinkOamEventActionEnumEfd.
    SessionDown interface{}
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetFilter() yfilter.YFilter { return action.YFilter }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) SetFilter(yf yfilter.YFilter) { action.YFilter = yf }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetGoName(yname string) string {
    if yname == "dying-gasp" { return "DyingGasp" }
    if yname == "link-fault" { return "LinkFault" }
    if yname == "capabilities-conflict" { return "CapabilitiesConflict" }
    if yname == "session-up" { return "SessionUp" }
    if yname == "critical-event" { return "CriticalEvent" }
    if yname == "remote-loopback" { return "RemoteLoopback" }
    if yname == "wiring-conflict" { return "WiringConflict" }
    if yname == "high-threshold" { return "HighThreshold" }
    if yname == "discovery-timeout" { return "DiscoveryTimeout" }
    if yname == "session-down" { return "SessionDown" }
    return ""
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetSegmentPath() string {
    return "action"
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dying-gasp"] = action.DyingGasp
    leafs["link-fault"] = action.LinkFault
    leafs["capabilities-conflict"] = action.CapabilitiesConflict
    leafs["session-up"] = action.SessionUp
    leafs["critical-event"] = action.CriticalEvent
    leafs["remote-loopback"] = action.RemoteLoopback
    leafs["wiring-conflict"] = action.WiringConflict
    leafs["high-threshold"] = action.HighThreshold
    leafs["discovery-timeout"] = action.DiscoveryTimeout
    leafs["session-down"] = action.SessionDown
    return leafs
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetBundleName() string { return "cisco_ios_xr" }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetYangName() string { return "action" }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) SetParent(parent types.Entity) { action.parent = parent }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetParent() types.Entity { return action.parent }

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetParentYangName() string { return "ether-link-oam" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote
// Configure remote requirement parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Possible required peer modes. The type is EtherLinkOamRequireModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval peer requirement. The type is bool.
    MibRetrieval interface{}

    // Enable or disable remote loopback peer requirement. The type is bool.
    RemoteLoopback interface{}

    // Enable or disable link monitoring peer requirement. The type is bool.
    LinkMonitoring interface{}
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetFilter() yfilter.YFilter { return requireRemote.YFilter }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) SetFilter(yf yfilter.YFilter) { requireRemote.YFilter = yf }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetGoName(yname string) string {
    if yname == "mode" { return "Mode" }
    if yname == "mib-retrieval" { return "MibRetrieval" }
    if yname == "remote-loopback" { return "RemoteLoopback" }
    if yname == "link-monitoring" { return "LinkMonitoring" }
    return ""
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetSegmentPath() string {
    return "require-remote"
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mode"] = requireRemote.Mode
    leafs["mib-retrieval"] = requireRemote.MibRetrieval
    leafs["remote-loopback"] = requireRemote.RemoteLoopback
    leafs["link-monitoring"] = requireRemote.LinkMonitoring
    return leafs
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetBundleName() string { return "cisco_ios_xr" }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetYangName() string { return "require-remote" }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) SetParent(parent types.Entity) { requireRemote.parent = parent }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetParent() types.Entity { return requireRemote.parent }

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetParentYangName() string { return "ether-link-oam" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
// Configure link monitor parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable monitoring. The type is bool.
    Monitoring interface{}

    // Symbol-period event configuration.
    SymbolPeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod

    // Frame-period event configuration.
    FramePeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod

    // Frame-seconds event configuration.
    FrameSeconds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds

    // Frame event configuration.
    Frame InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetFilter() yfilter.YFilter { return linkMonitoring.YFilter }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) SetFilter(yf yfilter.YFilter) { linkMonitoring.YFilter = yf }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetGoName(yname string) string {
    if yname == "monitoring" { return "Monitoring" }
    if yname == "symbol-period" { return "SymbolPeriod" }
    if yname == "frame-period" { return "FramePeriod" }
    if yname == "frame-seconds" { return "FrameSeconds" }
    if yname == "frame" { return "Frame" }
    return ""
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetSegmentPath() string {
    return "link-monitoring"
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "symbol-period" {
        return &linkMonitoring.SymbolPeriod
    }
    if childYangName == "frame-period" {
        return &linkMonitoring.FramePeriod
    }
    if childYangName == "frame-seconds" {
        return &linkMonitoring.FrameSeconds
    }
    if childYangName == "frame" {
        return &linkMonitoring.Frame
    }
    return nil
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["symbol-period"] = &linkMonitoring.SymbolPeriod
    children["frame-period"] = &linkMonitoring.FramePeriod
    children["frame-seconds"] = &linkMonitoring.FrameSeconds
    children["frame"] = &linkMonitoring.Frame
    return children
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitoring"] = linkMonitoring.Monitoring
    return leafs
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetBundleName() string { return "cisco_ios_xr" }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetYangName() string { return "link-monitoring" }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) SetParent(parent types.Entity) { linkMonitoring.parent = parent }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetParent() types.Entity { return linkMonitoring.parent }

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetParentYangName() string { return "ether-link-oam" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod
// Symbol-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Window size configuration for symbol-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window

    // Threshold configuration for symbol-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetFilter() yfilter.YFilter { return symbolPeriod.YFilter }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) SetFilter(yf yfilter.YFilter) { symbolPeriod.YFilter = yf }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetSegmentPath() string {
    return "symbol-period"
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "window" {
        return &symbolPeriod.Window
    }
    if childYangName == "threshold" {
        return &symbolPeriod.Threshold
    }
    return nil
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["window"] = &symbolPeriod.Window
    children["threshold"] = &symbolPeriod.Threshold
    return children
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetBundleName() string { return "cisco_ios_xr" }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetYangName() string { return "symbol-period" }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) SetParent(parent types.Entity) { symbolPeriod.parent = parent }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetParent() types.Entity { return symbolPeriod.parent }

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetParentYangName() string { return "link-monitoring" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window
// Window size configuration for symbol-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Size of the symbol-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // Units to use for this window. The type is
    // EtherLinkOamWindowUnitsSymbolsEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Symbols and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetFilter() yfilter.YFilter { return window.YFilter }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) SetFilter(yf yfilter.YFilter) { window.YFilter = yf }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "units" { return "Units" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetSegmentPath() string {
    return "window"
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = window.Window
    leafs["units"] = window.Units
    leafs["multiplier"] = window.Multiplier
    return leafs
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetBundleName() string { return "cisco_ios_xr" }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetYangName() string { return "window" }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) SetParent(parent types.Entity) { window.parent = parent }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetParent() types.Entity { return window.parent }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetParentYangName() string { return "symbol-period" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
// Threshold configuration for symbol-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The low threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsSymbolsEnum. The default value is symbols.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetFilter() yfilter.YFilter { return threshold.YFilter }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) SetFilter(yf yfilter.YFilter) { threshold.YFilter = yf }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetGoName(yname string) string {
    if yname == "threshold-low" { return "ThresholdLow" }
    if yname == "threshold-high" { return "ThresholdHigh" }
    if yname == "units" { return "Units" }
    if yname == "multiplier-low" { return "MultiplierLow" }
    if yname == "multiplier-high" { return "MultiplierHigh" }
    return ""
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetSegmentPath() string {
    return "threshold"
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold-low"] = threshold.ThresholdLow
    leafs["threshold-high"] = threshold.ThresholdHigh
    leafs["units"] = threshold.Units
    leafs["multiplier-low"] = threshold.MultiplierLow
    leafs["multiplier-high"] = threshold.MultiplierHigh
    return leafs
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetBundleName() string { return "cisco_ios_xr" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetYangName() string { return "threshold" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) SetParent(parent types.Entity) { threshold.parent = parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetParent() types.Entity { return threshold.parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetParentYangName() string { return "symbol-period" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod
// Frame-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Window size configuration for frame-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window

    // Threshold configuration for frame-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetFilter() yfilter.YFilter { return framePeriod.YFilter }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) SetFilter(yf yfilter.YFilter) { framePeriod.YFilter = yf }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetSegmentPath() string {
    return "frame-period"
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "window" {
        return &framePeriod.Window
    }
    if childYangName == "threshold" {
        return &framePeriod.Threshold
    }
    return nil
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["window"] = &framePeriod.Window
    children["threshold"] = &framePeriod.Threshold
    return children
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetBundleName() string { return "cisco_ios_xr" }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetYangName() string { return "frame-period" }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) SetParent(parent types.Entity) { framePeriod.parent = parent }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetParent() types.Entity { return framePeriod.parent }

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetParentYangName() string { return "link-monitoring" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window
// Window size configuration for frame-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Size of the frame-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // The units to use for this window. The type is
    // EtherLinkOamWindowUnitsFramesEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Frames and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetFilter() yfilter.YFilter { return window.YFilter }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) SetFilter(yf yfilter.YFilter) { window.YFilter = yf }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "units" { return "Units" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetSegmentPath() string {
    return "window"
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = window.Window
    leafs["units"] = window.Units
    leafs["multiplier"] = window.Multiplier
    return leafs
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetBundleName() string { return "cisco_ios_xr" }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetYangName() string { return "window" }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) SetParent(parent types.Entity) { window.parent = parent }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetParent() types.Entity { return window.parent }

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetParentYangName() string { return "frame-period" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
// Threshold configuration for frame-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The low threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsFramesEnum. The default value is ppm.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetFilter() yfilter.YFilter { return threshold.YFilter }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) SetFilter(yf yfilter.YFilter) { threshold.YFilter = yf }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetGoName(yname string) string {
    if yname == "threshold-low" { return "ThresholdLow" }
    if yname == "threshold-high" { return "ThresholdHigh" }
    if yname == "units" { return "Units" }
    if yname == "multiplier-low" { return "MultiplierLow" }
    if yname == "multiplier-high" { return "MultiplierHigh" }
    return ""
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetSegmentPath() string {
    return "threshold"
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold-low"] = threshold.ThresholdLow
    leafs["threshold-high"] = threshold.ThresholdHigh
    leafs["units"] = threshold.Units
    leafs["multiplier-low"] = threshold.MultiplierLow
    leafs["multiplier-high"] = threshold.MultiplierHigh
    return leafs
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetBundleName() string { return "cisco_ios_xr" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetYangName() string { return "threshold" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) SetParent(parent types.Entity) { threshold.parent = parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetParent() types.Entity { return threshold.parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetParentYangName() string { return "frame-period" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds
// Frame-seconds event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Window size configuration for frame-seconds events. The type is interface{}
    // with range: 10000..900000. Units are millisecond. The default value is
    // 60000.
    Window interface{}

    // Threshold configuration for frame-seconds events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetFilter() yfilter.YFilter { return frameSeconds.YFilter }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) SetFilter(yf yfilter.YFilter) { frameSeconds.YFilter = yf }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetSegmentPath() string {
    return "frame-seconds"
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "threshold" {
        return &frameSeconds.Threshold
    }
    return nil
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["threshold"] = &frameSeconds.Threshold
    return children
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = frameSeconds.Window
    return leafs
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetBundleName() string { return "cisco_ios_xr" }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetYangName() string { return "frame-seconds" }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) SetParent(parent types.Entity) { frameSeconds.parent = parent }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetParent() types.Entity { return frameSeconds.parent }

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetParentYangName() string { return "link-monitoring" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
// Threshold configuration for frame-seconds
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The low threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second.
    ThresholdHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetFilter() yfilter.YFilter { return threshold.YFilter }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) SetFilter(yf yfilter.YFilter) { threshold.YFilter = yf }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetGoName(yname string) string {
    if yname == "threshold-low" { return "ThresholdLow" }
    if yname == "threshold-high" { return "ThresholdHigh" }
    return ""
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetSegmentPath() string {
    return "threshold"
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold-low"] = threshold.ThresholdLow
    leafs["threshold-high"] = threshold.ThresholdHigh
    return leafs
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetBundleName() string { return "cisco_ios_xr" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetYangName() string { return "threshold" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) SetParent(parent types.Entity) { threshold.parent = parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetParent() types.Entity { return threshold.parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetParentYangName() string { return "frame-seconds" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
// Frame event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Window size configuration for frame events. The type is interface{} with
    // range: 1000..60000. Units are millisecond. The default value is 1000.
    Window interface{}

    // Threshold configuration for frame events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetFilter() yfilter.YFilter { return frame.YFilter }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) SetFilter(yf yfilter.YFilter) { frame.YFilter = yf }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetGoName(yname string) string {
    if yname == "window" { return "Window" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetSegmentPath() string {
    return "frame"
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "threshold" {
        return &frame.Threshold
    }
    return nil
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["threshold"] = &frame.Threshold
    return children
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window"] = frame.Window
    return leafs
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetBundleName() string { return "cisco_ios_xr" }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetYangName() string { return "frame" }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) SetParent(parent types.Entity) { frame.parent = parent }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetParent() types.Entity { return frame.parent }

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetParentYangName() string { return "link-monitoring" }

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
// Threshold configuration for frame events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The low threshold for frame events. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame events. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The multiplier to use for the low threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum. The default value is
    // none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetFilter() yfilter.YFilter { return threshold.YFilter }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) SetFilter(yf yfilter.YFilter) { threshold.YFilter = yf }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetGoName(yname string) string {
    if yname == "threshold-low" { return "ThresholdLow" }
    if yname == "threshold-high" { return "ThresholdHigh" }
    if yname == "multiplier-low" { return "MultiplierLow" }
    if yname == "multiplier-high" { return "MultiplierHigh" }
    return ""
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetSegmentPath() string {
    return "threshold"
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["threshold-low"] = threshold.ThresholdLow
    leafs["threshold-high"] = threshold.ThresholdHigh
    leafs["multiplier-low"] = threshold.MultiplierLow
    leafs["multiplier-high"] = threshold.MultiplierHigh
    return leafs
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetBundleName() string { return "cisco_ios_xr" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetYangName() string { return "threshold" }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) SetParent(parent types.Entity) { threshold.parent = parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetParent() types.Entity { return threshold.parent }

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetParentYangName() string { return "frame" }

// InterfaceConfigurations_InterfaceConfiguration_CarrierDelay
// Set the carrier transition delay on an interface
// in msecs
type InterfaceConfigurations_InterfaceConfiguration_CarrierDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range: 1..65535.
    CarrierDelayUp interface{}

    // Carrier Delay down in msecs, must be set to 0. The type is interface{} with
    // range: 0..4294967295.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetFilter() yfilter.YFilter { return carrierDelay.YFilter }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) SetFilter(yf yfilter.YFilter) { carrierDelay.YFilter = yf }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetGoName(yname string) string {
    if yname == "carrier-delay-up" { return "CarrierDelayUp" }
    if yname == "carrier-delay-down" { return "CarrierDelayDown" }
    return ""
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["carrier-delay-up"] = carrierDelay.CarrierDelayUp
    leafs["carrier-delay-down"] = carrierDelay.CarrierDelayDown
    return leafs
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetBundleName() string { return "cisco_ios_xr" }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetYangName() string { return "carrier-delay" }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) SetParent(parent types.Entity) { carrierDelay.parent = parent }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetParent() types.Entity { return carrierDelay.parent }

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration
// IEEE 802.1Q VLAN trunk interface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The outer ethertype used in Q-in-Q frames. The default value is 0x8100. The
    // type is TunnelingEthertype.
    TunnelingEthertype interface{}

    // The Native VLAN identifier associated with this trunk interface.
    NativeVlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetFilter() yfilter.YFilter { return vlanTrunkConfiguration.YFilter }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) SetFilter(yf yfilter.YFilter) { vlanTrunkConfiguration.YFilter = yf }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetGoName(yname string) string {
    if yname == "tunneling-ethertype" { return "TunnelingEthertype" }
    if yname == "native-vlan-identifier" { return "NativeVlanIdentifier" }
    return ""
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "native-vlan-identifier" {
        return &vlanTrunkConfiguration.NativeVlanIdentifier
    }
    return nil
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["native-vlan-identifier"] = &vlanTrunkConfiguration.NativeVlanIdentifier
    return children
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunneling-ethertype"] = vlanTrunkConfiguration.TunnelingEthertype
    return leafs
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetYangName() string { return "vlan-trunk-configuration" }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) SetParent(parent types.Entity) { vlanTrunkConfiguration.parent = parent }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetParent() types.Entity { return vlanTrunkConfiguration.parent }

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier
// The Native VLAN identifier associated with this
// trunk interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether this interface is dot1ad or dot1Q. The type is Vlan. This attribute
    // is mandatory.
    VlanType interface{}

    // VLAN identifier. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    VlanIdentifier interface{}
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetFilter() yfilter.YFilter { return nativeVlanIdentifier.YFilter }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) SetFilter(yf yfilter.YFilter) { nativeVlanIdentifier.YFilter = yf }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetGoName(yname string) string {
    if yname == "vlan-type" { return "VlanType" }
    if yname == "vlan-identifier" { return "VlanIdentifier" }
    return ""
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetSegmentPath() string {
    return "native-vlan-identifier"
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vlan-type"] = nativeVlanIdentifier.VlanType
    leafs["vlan-identifier"] = nativeVlanIdentifier.VlanIdentifier
    return leafs
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetBundleName() string { return "cisco_ios_xr" }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetYangName() string { return "native-vlan-identifier" }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) SetParent(parent types.Entity) { nativeVlanIdentifier.parent = parent }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetParent() types.Entity { return nativeVlanIdentifier.parent }

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetParentYangName() string { return "vlan-trunk-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype represents default value is 0x8100
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype string

const (
    // 0x9100
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9100 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9100"

    // 0x9200
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9200 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9200"
)

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess
// nV Satellite Access Link Configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetFilter() yfilter.YFilter { return nvSatelliteAccess.YFilter }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) SetFilter(yf yfilter.YFilter) { nvSatelliteAccess.YFilter = yf }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetGoName(yname string) string {
    if yname == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" { return "Qos" }
    return ""
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetSegmentPath() string {
    return "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" {
        return &nvSatelliteAccess.Qos
    }
    return nil
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = &nvSatelliteAccess.Qos
    return children
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetBundleName() string { return "cisco_ios_xr" }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetYangName() string { return "nv-satellite-access" }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) SetParent(parent types.Entity) { nvSatelliteAccess.parent = parent }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetParent() types.Entity { return nvSatelliteAccess.parent }

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetParentYangName() string { return "nv-satellite-access" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink
// nV Satellite Fabric Link Configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hub & Spoke connection to a single Satellite. The type is interface{} with
    // range: 100..65534.
    Satellite interface{}

    // Mininum number of active links required. The type is interface{} with
    // range: 1..64.
    MinimumRequiredLinks interface{}

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts

    // Ethernet Satellite configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures

    // Frequency Synchronization satellite configuration.
    FrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetFilter() yfilter.YFilter { return nvSatelliteFabricLink.YFilter }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) SetFilter(yf yfilter.YFilter) { nvSatelliteFabricLink.YFilter = yf }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetGoName(yname string) string {
    if yname == "satellite" { return "Satellite" }
    if yname == "minimum-required-links" { return "MinimumRequiredLinks" }
    if yname == "redundancy" { return "Redundancy" }
    if yname == "remote-ports" { return "RemotePorts" }
    if yname == "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features" { return "EthernetFeatures" }
    if yname == "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization" { return "FrequencySynchronization" }
    if yname == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" { return "Qos" }
    return ""
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetSegmentPath() string {
    return "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redundancy" {
        return &nvSatelliteFabricLink.Redundancy
    }
    if childYangName == "remote-ports" {
        return &nvSatelliteFabricLink.RemotePorts
    }
    if childYangName == "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features" {
        return &nvSatelliteFabricLink.EthernetFeatures
    }
    if childYangName == "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization" {
        return &nvSatelliteFabricLink.FrequencySynchronization
    }
    if childYangName == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" {
        return &nvSatelliteFabricLink.Qos
    }
    return nil
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redundancy"] = &nvSatelliteFabricLink.Redundancy
    children["remote-ports"] = &nvSatelliteFabricLink.RemotePorts
    children["Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"] = &nvSatelliteFabricLink.EthernetFeatures
    children["Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"] = &nvSatelliteFabricLink.FrequencySynchronization
    children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = &nvSatelliteFabricLink.Qos
    return children
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["satellite"] = nvSatelliteFabricLink.Satellite
    leafs["minimum-required-links"] = nvSatelliteFabricLink.MinimumRequiredLinks
    return leafs
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetBundleName() string { return "cisco_ios_xr" }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetYangName() string { return "nv-satellite-fabric-link" }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) SetParent(parent types.Entity) { nvSatelliteFabricLink.parent = parent }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetParent() types.Entity { return nvSatelliteFabricLink.parent }

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetFilter() yfilter.YFilter { return redundancy.YFilter }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) SetFilter(yf yfilter.YFilter) { redundancy.YFilter = yf }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "minimum-preferred-links" { return "MinimumPreferredLinks" }
    return ""
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetSegmentPath() string {
    return "redundancy"
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = redundancy.IccpGroup
    leafs["minimum-preferred-links"] = redundancy.MinimumPreferredLinks
    return leafs
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetBundleName() string { return "cisco_ios_xr" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetYangName() string { return "redundancy" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) SetParent(parent types.Entity) { redundancy.parent = parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetParent() types.Entity { return redundancy.parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetParentYangName() string { return "nv-satellite-fabric-link" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort.
    RemotePort []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetFilter() yfilter.YFilter { return remotePorts.YFilter }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) SetFilter(yf yfilter.YFilter) { remotePorts.YFilter = yf }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetGoName(yname string) string {
    if yname == "remote-port" { return "RemotePort" }
    return ""
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetSegmentPath() string {
    return "remote-ports"
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-port" {
        for _, c := range remotePorts.RemotePort {
            if remotePorts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort{}
        remotePorts.RemotePort = append(remotePorts.RemotePort, child)
        return &remotePorts.RemotePort[len(remotePorts.RemotePort)-1]
    }
    return nil
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remotePorts.RemotePort {
        children[remotePorts.RemotePort[i].GetSegmentPath()] = &remotePorts.RemotePort[i]
    }
    return children
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetBundleName() string { return "cisco_ios_xr" }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetYangName() string { return "remote-ports" }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) SetParent(parent types.Entity) { remotePorts.parent = parent }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetParent() types.Entity { return remotePorts.parent }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetParentYangName() string { return "nv-satellite-fabric-link" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Port type. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetFilter() yfilter.YFilter { return remotePort.YFilter }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) SetFilter(yf yfilter.YFilter) { remotePort.YFilter = yf }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetGoName(yname string) string {
    if yname == "port-type" { return "PortType" }
    if yname == "slot" { return "Slot" }
    if yname == "sub-slot" { return "SubSlot" }
    if yname == "port-range" { return "PortRange" }
    return ""
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetSegmentPath() string {
    return "remote-port" + "[port-type='" + fmt.Sprintf("%v", remotePort.PortType) + "']" + "[slot='" + fmt.Sprintf("%v", remotePort.Slot) + "']" + "[sub-slot='" + fmt.Sprintf("%v", remotePort.SubSlot) + "']"
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-type"] = remotePort.PortType
    leafs["slot"] = remotePort.Slot
    leafs["sub-slot"] = remotePort.SubSlot
    leafs["port-range"] = remotePort.PortRange
    return leafs
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetBundleName() string { return "cisco_ios_xr" }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetYangName() string { return "remote-port" }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) SetParent(parent types.Entity) { remotePort.parent = parent }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetParent() types.Entity { return remotePort.parent }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetParentYangName() string { return "remote-ports" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures
// Ethernet Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CFM Satellite configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetFilter() yfilter.YFilter { return ethernetFeatures.YFilter }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) SetFilter(yf yfilter.YFilter) { ethernetFeatures.YFilter = yf }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetGoName(yname string) string {
    if yname == "cfm" { return "Cfm" }
    return ""
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetSegmentPath() string {
    return "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cfm" {
        return &ethernetFeatures.Cfm
    }
    return nil
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cfm"] = &ethernetFeatures.Cfm
    return children
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetYangName() string { return "ethernet-features" }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) SetParent(parent types.Entity) { ethernetFeatures.parent = parent }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetParent() types.Entity { return ethernetFeatures.parent }

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetParentYangName() string { return "nv-satellite-fabric-link" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
// CFM Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Continuity-Check Interval. The type is CfmCcmInterval.
    ContinuityCheckInterval interface{}

    // Maintenance Domain Level. The type is interface{} with range: 0..7.
    Level interface{}

    // Enable CFM on Satellite. The type is interface{}.
    Enable interface{}
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetFilter() yfilter.YFilter { return cfm.YFilter }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) SetFilter(yf yfilter.YFilter) { cfm.YFilter = yf }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetGoName(yname string) string {
    if yname == "continuity-check-interval" { return "ContinuityCheckInterval" }
    if yname == "level" { return "Level" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetSegmentPath() string {
    return "cfm"
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["continuity-check-interval"] = cfm.ContinuityCheckInterval
    leafs["level"] = cfm.Level
    leafs["enable"] = cfm.Enable
    return leafs
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetBundleName() string { return "cisco_ios_xr" }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetYangName() string { return "cfm" }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) SetParent(parent types.Entity) { cfm.parent = parent }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetParent() types.Entity { return cfm.parent }

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetParentYangName() string { return "ethernet-features" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization
// Frequency Synchronization satellite
// configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetFilter() yfilter.YFilter { return frequencySynchronization.YFilter }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) SetFilter(yf yfilter.YFilter) { frequencySynchronization.YFilter = yf }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetSegmentPath() string {
    return "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = frequencySynchronization.Enable
    return leafs
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetBundleName() string { return "cisco_ios_xr" }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetYangName() string { return "frequency-synchronization" }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) SetParent(parent types.Entity) { frequencySynchronization.parent = parent }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetParent() types.Entity { return frequencySynchronization.parent }

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetParentYangName() string { return "nv-satellite-fabric-link" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetParentYangName() string { return "nv-satellite-fabric-link" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork
// Complex Network connection to one or more
// Satellites
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable. The type is interface{}.
    Enable interface{}

    // Connected Satellite table.
    Satellites InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetFilter() yfilter.YFilter { return nvSatelliteFabricNetwork.YFilter }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) SetFilter(yf yfilter.YFilter) { nvSatelliteFabricNetwork.YFilter = yf }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "satellites" { return "Satellites" }
    if yname == "redundancy" { return "Redundancy" }
    return ""
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "satellites" {
        return &nvSatelliteFabricNetwork.Satellites
    }
    if childYangName == "redundancy" {
        return &nvSatelliteFabricNetwork.Redundancy
    }
    return nil
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["satellites"] = &nvSatelliteFabricNetwork.Satellites
    children["redundancy"] = &nvSatelliteFabricNetwork.Redundancy
    return children
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = nvSatelliteFabricNetwork.Enable
    return leafs
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetYangName() string { return "nv-satellite-fabric-network" }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) SetParent(parent types.Entity) { nvSatelliteFabricNetwork.parent = parent }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetParent() types.Entity { return nvSatelliteFabricNetwork.parent }

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites
// Connected Satellite table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Connected Satellite. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite.
    Satellite []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetFilter() yfilter.YFilter { return satellites.YFilter }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) SetFilter(yf yfilter.YFilter) { satellites.YFilter = yf }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetGoName(yname string) string {
    if yname == "satellite" { return "Satellite" }
    if yname == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" { return "Qos" }
    return ""
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetSegmentPath() string {
    return "satellites"
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "satellite" {
        for _, c := range satellites.Satellite {
            if satellites.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite{}
        satellites.Satellite = append(satellites.Satellite, child)
        return &satellites.Satellite[len(satellites.Satellite)-1]
    }
    if childYangName == "Cisco-IOS-XR-qos-ma-sat-cfg:qos" {
        return &satellites.Qos
    }
    return nil
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range satellites.Satellite {
        children[satellites.Satellite[i].GetSegmentPath()] = &satellites.Satellite[i]
    }
    children["Cisco-IOS-XR-qos-ma-sat-cfg:qos"] = &satellites.Qos
    return children
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetBundleName() string { return "cisco_ios_xr" }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetYangName() string { return "satellites" }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) SetParent(parent types.Entity) { satellites.parent = parent }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetParent() types.Entity { return satellites.parent }

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetParentYangName() string { return "nv-satellite-fabric-network" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite
// Connected Satellite
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Satellite ID. The type is interface{} with range:
    // 100..65534.
    SatelliteId interface{}

    // Enable. The type is interface{}.
    Enable interface{}

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetFilter() yfilter.YFilter { return satellite.YFilter }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) SetFilter(yf yfilter.YFilter) { satellite.YFilter = yf }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetGoName(yname string) string {
    if yname == "satellite-id" { return "SatelliteId" }
    if yname == "enable" { return "Enable" }
    if yname == "remote-ports" { return "RemotePorts" }
    return ""
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetSegmentPath() string {
    return "satellite" + "[satellite-id='" + fmt.Sprintf("%v", satellite.SatelliteId) + "']"
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-ports" {
        return &satellite.RemotePorts
    }
    return nil
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-ports"] = &satellite.RemotePorts
    return children
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["satellite-id"] = satellite.SatelliteId
    leafs["enable"] = satellite.Enable
    return leafs
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetBundleName() string { return "cisco_ios_xr" }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetYangName() string { return "satellite" }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) SetParent(parent types.Entity) { satellite.parent = parent }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetParent() types.Entity { return satellite.parent }

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetParentYangName() string { return "satellites" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort.
    RemotePort []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetFilter() yfilter.YFilter { return remotePorts.YFilter }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) SetFilter(yf yfilter.YFilter) { remotePorts.YFilter = yf }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetGoName(yname string) string {
    if yname == "remote-port" { return "RemotePort" }
    return ""
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetSegmentPath() string {
    return "remote-ports"
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-port" {
        for _, c := range remotePorts.RemotePort {
            if remotePorts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort{}
        remotePorts.RemotePort = append(remotePorts.RemotePort, child)
        return &remotePorts.RemotePort[len(remotePorts.RemotePort)-1]
    }
    return nil
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remotePorts.RemotePort {
        children[remotePorts.RemotePort[i].GetSegmentPath()] = &remotePorts.RemotePort[i]
    }
    return children
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetBundleName() string { return "cisco_ios_xr" }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetYangName() string { return "remote-ports" }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) SetParent(parent types.Entity) { remotePorts.parent = parent }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetParent() types.Entity { return remotePorts.parent }

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetParentYangName() string { return "satellite" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Port type. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetFilter() yfilter.YFilter { return remotePort.YFilter }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) SetFilter(yf yfilter.YFilter) { remotePort.YFilter = yf }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetGoName(yname string) string {
    if yname == "port-type" { return "PortType" }
    if yname == "slot" { return "Slot" }
    if yname == "sub-slot" { return "SubSlot" }
    if yname == "port-range" { return "PortRange" }
    return ""
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetSegmentPath() string {
    return "remote-port" + "[port-type='" + fmt.Sprintf("%v", remotePort.PortType) + "']" + "[slot='" + fmt.Sprintf("%v", remotePort.Slot) + "']" + "[sub-slot='" + fmt.Sprintf("%v", remotePort.SubSlot) + "']"
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-type"] = remotePort.PortType
    leafs["slot"] = remotePort.Slot
    leafs["sub-slot"] = remotePort.SubSlot
    leafs["port-range"] = remotePort.PortRange
    return leafs
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetBundleName() string { return "cisco_ios_xr" }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetYangName() string { return "remote-port" }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) SetParent(parent types.Entity) { remotePort.parent = parent }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetParent() types.Entity { return remotePort.parent }

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetParentYangName() string { return "remote-ports" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetParentYangName() string { return "satellites" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetFilter() yfilter.YFilter { return redundancy.YFilter }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) SetFilter(yf yfilter.YFilter) { redundancy.YFilter = yf }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "minimum-preferred-links" { return "MinimumPreferredLinks" }
    return ""
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetSegmentPath() string {
    return "redundancy"
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = redundancy.IccpGroup
    leafs["minimum-preferred-links"] = redundancy.MinimumPreferredLinks
    return leafs
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetBundleName() string { return "cisco_ios_xr" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetYangName() string { return "redundancy" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) SetParent(parent types.Entity) { redundancy.parent = parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetParent() types.Entity { return redundancy.parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetParentYangName() string { return "nv-satellite-fabric-network" }

// InterfaceConfigurations_InterfaceConfiguration_Lldp
// Disable LLDP TX or RX
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lldp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // enter LLDP interface submode. The type is bool. This attribute is
    // mandatory.
    LldpIntfEnter interface{}

    // Disable LLDP TX.
    Transmit InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit

    // Disable LLDP RX.
    Receive InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetFilter() yfilter.YFilter { return lldp.YFilter }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) SetFilter(yf yfilter.YFilter) { lldp.YFilter = yf }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetGoName(yname string) string {
    if yname == "lldp-intf-enter" { return "LldpIntfEnter" }
    if yname == "transmit" { return "Transmit" }
    if yname == "receive" { return "Receive" }
    return ""
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ethernet-lldp-cfg:lldp"
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transmit" {
        return &lldp.Transmit
    }
    if childYangName == "receive" {
        return &lldp.Receive
    }
    return nil
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transmit"] = &lldp.Transmit
    children["receive"] = &lldp.Receive
    return children
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lldp-intf-enter"] = lldp.LldpIntfEnter
    return leafs
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetBundleName() string { return "cisco_ios_xr" }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetYangName() string { return "lldp" }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) SetParent(parent types.Entity) { lldp.parent = parent }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetParent() types.Entity { return lldp.parent }

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit
// Disable LLDP TX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // disable LLDP TX. The type is bool. The default value is false.
    Disable interface{}
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetFilter() yfilter.YFilter { return transmit.YFilter }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) SetFilter(yf yfilter.YFilter) { transmit.YFilter = yf }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetSegmentPath() string {
    return "transmit"
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = transmit.Disable
    return leafs
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetBundleName() string { return "cisco_ios_xr" }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetYangName() string { return "transmit" }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) SetParent(parent types.Entity) { transmit.parent = parent }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetParent() types.Entity { return transmit.parent }

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetParentYangName() string { return "lldp" }

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
// Disable LLDP RX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // disable LLDP RX. The type is bool. The default value is false.
    Disable interface{}
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetFilter() yfilter.YFilter { return receive.YFilter }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) SetFilter(yf yfilter.YFilter) { receive.YFilter = yf }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetSegmentPath() string {
    return "receive"
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = receive.Disable
    return leafs
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetBundleName() string { return "cisco_ios_xr" }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetYangName() string { return "receive" }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) SetParent(parent types.Entity) { receive.parent = parent }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetParent() types.Entity { return receive.parent }

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetParentYangName() string { return "lldp" }

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetFilter() yfilter.YFilter { return spanMonitorSessions.YFilter }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) SetFilter(yf yfilter.YFilter) { spanMonitorSessions.YFilter = yf }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetGoName(yname string) string {
    if yname == "span-monitor-session" { return "SpanMonitorSession" }
    return ""
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetSegmentPath() string {
    return "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "span-monitor-session" {
        for _, c := range spanMonitorSessions.SpanMonitorSession {
            if spanMonitorSessions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession{}
        spanMonitorSessions.SpanMonitorSession = append(spanMonitorSessions.SpanMonitorSession, child)
        return &spanMonitorSessions.SpanMonitorSession[len(spanMonitorSessions.SpanMonitorSession)-1]
    }
    return nil
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spanMonitorSessions.SpanMonitorSession {
        children[spanMonitorSessions.SpanMonitorSession[i].GetSegmentPath()] = &spanMonitorSessions.SpanMonitorSession[i]
    }
    return children
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetBundleName() string { return "cisco_ios_xr" }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetYangName() string { return "span-monitor-sessions" }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) SetParent(parent types.Entity) { spanMonitorSessions.parent = parent }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetParent() types.Entity { return spanMonitorSessions.parent }

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetFilter() yfilter.YFilter { return spanMonitorSession.YFilter }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) SetFilter(yf yfilter.YFilter) { spanMonitorSession.YFilter = yf }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetGoName(yname string) string {
    if yname == "session-class" { return "SessionClass" }
    if yname == "mirror-first" { return "MirrorFirst" }
    if yname == "mirror-interval" { return "MirrorInterval" }
    if yname == "attachment" { return "Attachment" }
    if yname == "acl" { return "Acl" }
    return ""
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetSegmentPath() string {
    return "span-monitor-session" + "[session-class='" + fmt.Sprintf("%v", spanMonitorSession.SessionClass) + "']"
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attachment" {
        return &spanMonitorSession.Attachment
    }
    if childYangName == "acl" {
        return &spanMonitorSession.Acl
    }
    return nil
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["attachment"] = &spanMonitorSession.Attachment
    children["acl"] = &spanMonitorSession.Acl
    return children
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-class"] = spanMonitorSession.SessionClass
    leafs["mirror-first"] = spanMonitorSession.MirrorFirst
    leafs["mirror-interval"] = spanMonitorSession.MirrorInterval
    return leafs
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetBundleName() string { return "cisco_ios_xr" }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetYangName() string { return "span-monitor-session" }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) SetParent(parent types.Entity) { spanMonitorSession.parent = parent }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetParent() types.Entity { return spanMonitorSession.parent }

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetParentYangName() string { return "span-monitor-sessions" }

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetFilter() yfilter.YFilter { return attachment.YFilter }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) SetFilter(yf yfilter.YFilter) { attachment.YFilter = yf }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetGoName(yname string) string {
    if yname == "session-name" { return "SessionName" }
    if yname == "direction" { return "Direction" }
    if yname == "port-level-enable" { return "PortLevelEnable" }
    return ""
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetSegmentPath() string {
    return "attachment"
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-name"] = attachment.SessionName
    leafs["direction"] = attachment.Direction
    leafs["port-level-enable"] = attachment.PortLevelEnable
    return leafs
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetBundleName() string { return "cisco_ios_xr" }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetYangName() string { return "attachment" }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) SetParent(parent types.Entity) { attachment.parent = parent }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetParent() types.Entity { return attachment.parent }

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetParentYangName() string { return "span-monitor-session" }

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetFilter() yfilter.YFilter { return acl.YFilter }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) SetFilter(yf yfilter.YFilter) { acl.YFilter = yf }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetGoName(yname string) string {
    if yname == "acl-enable" { return "AclEnable" }
    if yname == "acl-name" { return "AclName" }
    return ""
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetSegmentPath() string {
    return "acl"
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-enable"] = acl.AclEnable
    leafs["acl-name"] = acl.AclName
    return leafs
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetBundleName() string { return "cisco_ios_xr" }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetYangName() string { return "acl" }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) SetParent(parent types.Entity) { acl.parent = parent }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetParent() types.Entity { return acl.parent }

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetParentYangName() string { return "span-monitor-session" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization
// Frequency Synchronization interface
// configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable SSM on this source. The type is interface{}.
    SsmDisable interface{}

    // Set the time-of-day priority of this source. The type is interface{} with
    // range: 1..254. The default value is 100.
    TimeOfDayPriority interface{}

    // Assign this source as a selection input. The type is interface{}.
    SelectionInput interface{}

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}

    // Set the priority of this source. The type is interface{} with range:
    // 1..254. The default value is 100.
    Priority interface{}

    // Set the wait-to-restore time for this source. The type is interface{} with
    // range: 0..12. The default value is 5.
    WaitToRestoreTime interface{}

    // Set the input quality level.
    InputQualityLevel InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel

    // Set the output quality level.
    OutputQualityLevel InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetFilter() yfilter.YFilter { return ciscoIOSXRFreqsyncCfgFrequencySynchronization.YFilter }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) SetFilter(yf yfilter.YFilter) { ciscoIOSXRFreqsyncCfgFrequencySynchronization.YFilter = yf }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetGoName(yname string) string {
    if yname == "ssm-disable" { return "SsmDisable" }
    if yname == "time-of-day-priority" { return "TimeOfDayPriority" }
    if yname == "selection-input" { return "SelectionInput" }
    if yname == "enable" { return "Enable" }
    if yname == "priority" { return "Priority" }
    if yname == "wait-to-restore-time" { return "WaitToRestoreTime" }
    if yname == "input-quality-level" { return "InputQualityLevel" }
    if yname == "output-quality-level" { return "OutputQualityLevel" }
    return ""
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetSegmentPath() string {
    return "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input-quality-level" {
        return &ciscoIOSXRFreqsyncCfgFrequencySynchronization.InputQualityLevel
    }
    if childYangName == "output-quality-level" {
        return &ciscoIOSXRFreqsyncCfgFrequencySynchronization.OutputQualityLevel
    }
    return nil
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input-quality-level"] = &ciscoIOSXRFreqsyncCfgFrequencySynchronization.InputQualityLevel
    children["output-quality-level"] = &ciscoIOSXRFreqsyncCfgFrequencySynchronization.OutputQualityLevel
    return children
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-disable"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.SsmDisable
    leafs["time-of-day-priority"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.TimeOfDayPriority
    leafs["selection-input"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.SelectionInput
    leafs["enable"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.Enable
    leafs["priority"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.Priority
    leafs["wait-to-restore-time"] = ciscoIOSXRFreqsyncCfgFrequencySynchronization.WaitToRestoreTime
    return leafs
}

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetYangName() string { return "frequency-synchronization" }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) SetParent(parent types.Entity) { ciscoIOSXRFreqsyncCfgFrequencySynchronization.parent = parent }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetParent() types.Entity { return ciscoIOSXRFreqsyncCfgFrequencySynchronization.parent }

func (ciscoIOSXRFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel
// Set the input quality level
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetFilter() yfilter.YFilter { return inputQualityLevel.YFilter }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) SetFilter(yf yfilter.YFilter) { inputQualityLevel.YFilter = yf }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetGoName(yname string) string {
    if yname == "quality-level-option" { return "QualityLevelOption" }
    if yname == "exact-quality-level-value" { return "ExactQualityLevelValue" }
    if yname == "min-quality-level-value" { return "MinQualityLevelValue" }
    if yname == "max-quality-level-value" { return "MaxQualityLevelValue" }
    return ""
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetSegmentPath() string {
    return "input-quality-level"
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quality-level-option"] = inputQualityLevel.QualityLevelOption
    leafs["exact-quality-level-value"] = inputQualityLevel.ExactQualityLevelValue
    leafs["min-quality-level-value"] = inputQualityLevel.MinQualityLevelValue
    leafs["max-quality-level-value"] = inputQualityLevel.MaxQualityLevelValue
    return leafs
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetBundleName() string { return "cisco_ios_xr" }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetYangName() string { return "input-quality-level" }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) SetParent(parent types.Entity) { inputQualityLevel.parent = parent }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetParent() types.Entity { return inputQualityLevel.parent }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetParentYangName() string { return "frequency-synchronization" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel
// Set the output quality level
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetFilter() yfilter.YFilter { return outputQualityLevel.YFilter }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) SetFilter(yf yfilter.YFilter) { outputQualityLevel.YFilter = yf }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetGoName(yname string) string {
    if yname == "quality-level-option" { return "QualityLevelOption" }
    if yname == "exact-quality-level-value" { return "ExactQualityLevelValue" }
    if yname == "min-quality-level-value" { return "MinQualityLevelValue" }
    if yname == "max-quality-level-value" { return "MaxQualityLevelValue" }
    return ""
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetSegmentPath() string {
    return "output-quality-level"
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quality-level-option"] = outputQualityLevel.QualityLevelOption
    leafs["exact-quality-level-value"] = outputQualityLevel.ExactQualityLevelValue
    leafs["min-quality-level-value"] = outputQualityLevel.MinQualityLevelValue
    leafs["max-quality-level-value"] = outputQualityLevel.MaxQualityLevelValue
    return leafs
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetBundleName() string { return "cisco_ios_xr" }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetYangName() string { return "output-quality-level" }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) SetParent(parent types.Entity) { outputQualityLevel.parent = parent }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetParent() types.Entity { return outputQualityLevel.parent }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetParentYangName() string { return "frequency-synchronization" }

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies
// Interface control subscriber policy
// configuration
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy to be applied to access interface  for subscribers. The type
    // is slice of
    // InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetFilter() yfilter.YFilter { return servicePolicies.YFilter }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) SetFilter(yf yfilter.YFilter) { servicePolicies.YFilter = yf }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetSegmentPath() string {
    return "Cisco-IOS-XR-iedge4710-cfg:service-policies"
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range servicePolicies.ServicePolicy {
            if servicePolicies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy{}
        servicePolicies.ServicePolicy = append(servicePolicies.ServicePolicy, child)
        return &servicePolicies.ServicePolicy[len(servicePolicies.ServicePolicy)-1]
    }
    return nil
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range servicePolicies.ServicePolicy {
        children[servicePolicies.ServicePolicy[i].GetSegmentPath()] = &servicePolicies.ServicePolicy[i]
    }
    return children
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetYangName() string { return "service-policies" }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) SetParent(parent types.Entity) { servicePolicies.parent = parent }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetParent() types.Entity { return servicePolicies.parent }

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
// Service policy to be applied to access
// interface  for subscribers
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 1..63.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetParentYangName() string { return "service-policies" }

// InterfaceConfigurations_InterfaceConfiguration_Afs
// Per-address-family and topology configuration
type InterfaceConfigurations_InterfaceConfiguration_Afs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_Af.
    Af []InterfaceConfigurations_InterfaceConfiguration_Afs_Af

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName.
    AfTopologyName []InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetFilter() yfilter.YFilter { return afs.YFilter }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) SetFilter(yf yfilter.YFilter) { afs.YFilter = yf }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "af-topology-name" { return "AfTopologyName" }
    return ""
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetSegmentPath() string {
    return "Cisco-IOS-XR-infra-rsi-cfg:afs"
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af" {
        for _, c := range afs.Af {
            if afs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Afs_Af{}
        afs.Af = append(afs.Af, child)
        return &afs.Af[len(afs.Af)-1]
    }
    if childYangName == "af-topology-name" {
        for _, c := range afs.AfTopologyName {
            if afs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName{}
        afs.AfTopologyName = append(afs.AfTopologyName, child)
        return &afs.AfTopologyName[len(afs.AfTopologyName)-1]
    }
    return nil
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range afs.Af {
        children[afs.Af[i].GetSegmentPath()] = &afs.Af[i]
    }
    for i := range afs.AfTopologyName {
        children[afs.AfTopologyName[i].GetSegmentPath()] = &afs.AfTopologyName[i]
    }
    return children
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetBundleName() string { return "cisco_ios_xr" }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetYangName() string { return "afs" }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) SetParent(parent types.Entity) { afs.parent = parent }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetParent() types.Entity { return afs.parent }

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Afs_Af
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    return ""
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetSegmentPath() string {
    return "af" + "[af-name='" + fmt.Sprintf("%v", af.AfName) + "']" + "[saf-name='" + fmt.Sprintf("%v", af.SafName) + "']"
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    leafs["saf-name"] = af.SafName
    return leafs
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetYangName() string { return "af" }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetParent() types.Entity { return af.parent }

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetParentYangName() string { return "afs" }

// InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Topology name. The type is string with length:
    // 1..32.
    TopologyName interface{}

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetFilter() yfilter.YFilter { return afTopologyName.YFilter }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) SetFilter(yf yfilter.YFilter) { afTopologyName.YFilter = yf }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetGoName(yname string) string {
    if yname == "topology-name" { return "TopologyName" }
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    return ""
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetSegmentPath() string {
    return "af-topology-name" + "[topology-name='" + fmt.Sprintf("%v", afTopologyName.TopologyName) + "']" + "[af-name='" + fmt.Sprintf("%v", afTopologyName.AfName) + "']" + "[saf-name='" + fmt.Sprintf("%v", afTopologyName.SafName) + "']"
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-name"] = afTopologyName.TopologyName
    leafs["af-name"] = afTopologyName.AfName
    leafs["saf-name"] = afTopologyName.SafName
    return leafs
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetBundleName() string { return "cisco_ios_xr" }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetYangName() string { return "af-topology-name" }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) SetParent(parent types.Entity) { afTopologyName.parent = parent }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetParent() types.Entity { return afTopologyName.parent }

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetParentYangName() string { return "afs" }

// InterfaceConfigurations_InterfaceConfiguration_Statistics
// Per-interface statistics configuration
type InterfaceConfigurations_InterfaceConfiguration_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify interval for load calculation for an interface. The type is
    // interface{} with range: 0..600. The default value is 300.
    LoadInterval interface{}
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetGoName(yname string) string {
    if yname == "load-interval" { return "LoadInterval" }
    return ""
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-infra-statsd-cfg:statistics"
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["load-interval"] = statistics.LoadInterval
    return leafs
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetYangName() string { return "statistics" }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter
// IPv6 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound

    // IPv6 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetFilter() yfilter.YFilter { return ipv6PacketFilter.YFilter }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) SetFilter(yf yfilter.YFilter) { ipv6PacketFilter.YFilter = yf }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetGoName(yname string) string {
    if yname == "inbound" { return "Inbound" }
    if yname == "outbound" { return "Outbound" }
    return ""
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "inbound" {
        return &ipv6PacketFilter.Inbound
    }
    if childYangName == "outbound" {
        return &ipv6PacketFilter.Outbound
    }
    return nil
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["inbound"] = &ipv6PacketFilter.Inbound
    children["outbound"] = &ipv6PacketFilter.Outbound
    return children
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetYangName() string { return "ipv6-packet-filter" }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) SetParent(parent types.Entity) { ipv6PacketFilter.parent = parent }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetParent() types.Entity { return ipv6PacketFilter.parent }

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound
// IPv6 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..65.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound  NOTE: This parameter is mandatory if 'CommonACLName' is not
    // specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetFilter() yfilter.YFilter { return inbound.YFilter }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) SetFilter(yf yfilter.YFilter) { inbound.YFilter = yf }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetGoName(yname string) string {
    if yname == "common-acl-name" { return "CommonAclName" }
    if yname == "name" { return "Name" }
    if yname == "interface-statistics" { return "InterfaceStatistics" }
    if yname == "compression-level" { return "CompressionLevel" }
    if yname == "acl-name-array" { return "AclNameArray" }
    if yname == "is-common-array" { return "IsCommonArray" }
    return ""
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetSegmentPath() string {
    return "inbound"
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["common-acl-name"] = inbound.CommonAclName
    leafs["name"] = inbound.Name
    leafs["interface-statistics"] = inbound.InterfaceStatistics
    leafs["compression-level"] = inbound.CompressionLevel
    leafs["acl-name-array"] = inbound.AclNameArray
    leafs["is-common-array"] = inbound.IsCommonArray
    return leafs
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetBundleName() string { return "cisco_ios_xr" }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetYangName() string { return "inbound" }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) SetParent(parent types.Entity) { inbound.parent = parent }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetParent() types.Entity { return inbound.parent }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetParentYangName() string { return "ipv6-packet-filter" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
// IPv6 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..65.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Outbound  packets. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetFilter() yfilter.YFilter { return outbound.YFilter }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) SetFilter(yf yfilter.YFilter) { outbound.YFilter = yf }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetGoName(yname string) string {
    if yname == "do-not-use" { return "DoNotUse" }
    if yname == "name" { return "Name" }
    if yname == "interface-statistics" { return "InterfaceStatistics" }
    if yname == "compression-level" { return "CompressionLevel" }
    if yname == "acl-name-array" { return "AclNameArray" }
    if yname == "is-common-array" { return "IsCommonArray" }
    return ""
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetSegmentPath() string {
    return "outbound"
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["do-not-use"] = outbound.DoNotUse
    leafs["name"] = outbound.Name
    leafs["interface-statistics"] = outbound.InterfaceStatistics
    leafs["compression-level"] = outbound.CompressionLevel
    leafs["acl-name-array"] = outbound.AclNameArray
    leafs["is-common-array"] = outbound.IsCommonArray
    return leafs
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetBundleName() string { return "cisco_ios_xr" }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetYangName() string { return "outbound" }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) SetParent(parent types.Entity) { outbound.parent = parent }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetParent() types.Entity { return outbound.parent }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetParentYangName() string { return "ipv6-packet-filter" }

// InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter
// ES Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of filter to be applied to outbound packets. The type is string with
    // length: 1..65.
    Outbound interface{}

    // Name of filter to be applied to inbound packets. The type is string with
    // length: 1..65.
    Inbound interface{}
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetFilter() yfilter.YFilter { return esPacketFilter.YFilter }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) SetFilter(yf yfilter.YFilter) { esPacketFilter.YFilter = yf }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetGoName(yname string) string {
    if yname == "outbound" { return "Outbound" }
    if yname == "inbound" { return "Inbound" }
    return ""
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outbound"] = esPacketFilter.Outbound
    leafs["inbound"] = esPacketFilter.Inbound
    return leafs
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetBundleName() string { return "cisco_ios_xr" }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetYangName() string { return "es-packet-filter" }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) SetParent(parent types.Entity) { esPacketFilter.parent = parent }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetParent() types.Entity { return esPacketFilter.parent }

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter
// IPv4 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound

    // IPv4 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetFilter() yfilter.YFilter { return ipv4PacketFilter.YFilter }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) SetFilter(yf yfilter.YFilter) { ipv4PacketFilter.YFilter = yf }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetGoName(yname string) string {
    if yname == "outbound" { return "Outbound" }
    if yname == "inbound" { return "Inbound" }
    return ""
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "outbound" {
        return &ipv4PacketFilter.Outbound
    }
    if childYangName == "inbound" {
        return &ipv4PacketFilter.Inbound
    }
    return nil
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["outbound"] = &ipv4PacketFilter.Outbound
    children["inbound"] = &ipv4PacketFilter.Inbound
    return children
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetYangName() string { return "ipv4-packet-filter" }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) SetParent(parent types.Entity) { ipv4PacketFilter.parent = parent }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetParent() types.Entity { return ipv4PacketFilter.parent }

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound
// IPv4 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..65.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Outbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Outbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetFilter() yfilter.YFilter { return outbound.YFilter }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) SetFilter(yf yfilter.YFilter) { outbound.YFilter = yf }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetGoName(yname string) string {
    if yname == "do-not-use" { return "DoNotUse" }
    if yname == "name" { return "Name" }
    if yname == "hardware-count" { return "HardwareCount" }
    if yname == "interface-statistics" { return "InterfaceStatistics" }
    if yname == "compression-level" { return "CompressionLevel" }
    if yname == "acl-name-array" { return "AclNameArray" }
    if yname == "is-common-array" { return "IsCommonArray" }
    return ""
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetSegmentPath() string {
    return "outbound"
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["do-not-use"] = outbound.DoNotUse
    leafs["name"] = outbound.Name
    leafs["hardware-count"] = outbound.HardwareCount
    leafs["interface-statistics"] = outbound.InterfaceStatistics
    leafs["compression-level"] = outbound.CompressionLevel
    leafs["acl-name-array"] = outbound.AclNameArray
    leafs["is-common-array"] = outbound.IsCommonArray
    return leafs
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetBundleName() string { return "cisco_ios_xr" }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetYangName() string { return "outbound" }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) SetParent(parent types.Entity) { outbound.parent = parent }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetParent() types.Entity { return outbound.parent }

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetParentYangName() string { return "ipv4-packet-filter" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
// IPv4 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..65.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..65.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. NOTE: HardwareCount is allowed only if Name
    // is specified. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..65.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetFilter() yfilter.YFilter { return inbound.YFilter }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) SetFilter(yf yfilter.YFilter) { inbound.YFilter = yf }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetGoName(yname string) string {
    if yname == "common-acl-name" { return "CommonAclName" }
    if yname == "name" { return "Name" }
    if yname == "hardware-count" { return "HardwareCount" }
    if yname == "interface-statistics" { return "InterfaceStatistics" }
    if yname == "compression-level" { return "CompressionLevel" }
    if yname == "acl-name-array" { return "AclNameArray" }
    if yname == "is-common-array" { return "IsCommonArray" }
    return ""
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetSegmentPath() string {
    return "inbound"
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["common-acl-name"] = inbound.CommonAclName
    leafs["name"] = inbound.Name
    leafs["hardware-count"] = inbound.HardwareCount
    leafs["interface-statistics"] = inbound.InterfaceStatistics
    leafs["compression-level"] = inbound.CompressionLevel
    leafs["acl-name-array"] = inbound.AclNameArray
    leafs["is-common-array"] = inbound.IsCommonArray
    return leafs
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetBundleName() string { return "cisco_ios_xr" }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetYangName() string { return "inbound" }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) SetParent(parent types.Entity) { inbound.parent = parent }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetParent() types.Entity { return inbound.parent }

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetParentYangName() string { return "ipv4-packet-filter" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs
// Direct-Attached Gateway Redundancy configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The DAGR entry being configured. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr.
    Dagr []InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetFilter() yfilter.YFilter { return dagrs.YFilter }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) SetFilter(yf yfilter.YFilter) { dagrs.YFilter = yf }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetGoName(yname string) string {
    if yname == "dagr" { return "Dagr" }
    return ""
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-arp-cfg:dagrs"
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dagr" {
        for _, c := range dagrs.Dagr {
            if dagrs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr{}
        dagrs.Dagr = append(dagrs.Dagr, child)
        return &dagrs.Dagr[len(dagrs.Dagr)-1]
    }
    return nil
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range dagrs.Dagr {
        children[dagrs.Dagr[i].GetSegmentPath()] = &dagrs.Dagr[i]
    }
    return children
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetBundleName() string { return "cisco_ios_xr" }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetYangName() string { return "dagrs" }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) SetParent(parent types.Entity) { dagrs.parent = parent }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetParent() types.Entity { return dagrs.parent }

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
// The DAGR entry being configured
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. DAGR Peer IPv4 address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpAddr interface{}

    // DAGR Group Enter item. The type is interface{}.
    Enter interface{}

    // DAGR Submode configuration.
    Sub InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetFilter() yfilter.YFilter { return dagr.YFilter }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) SetFilter(yf yfilter.YFilter) { dagr.YFilter = yf }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "enter" { return "Enter" }
    if yname == "sub" { return "Sub" }
    return ""
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetSegmentPath() string {
    return "dagr" + "[ip-addr='" + fmt.Sprintf("%v", dagr.IpAddr) + "']"
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sub" {
        return &dagr.Sub
    }
    return nil
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sub"] = &dagr.Sub
    return children
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = dagr.IpAddr
    leafs["enter"] = dagr.Enter
    return leafs
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetBundleName() string { return "cisco_ios_xr" }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetYangName() string { return "dagr" }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) SetParent(parent types.Entity) { dagr.parent = parent }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetParent() types.Entity { return dagr.parent }

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetParentYangName() string { return "dagrs" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
// DAGR Submode configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Timeout value. The type is interface{} with range: 1..10000. The
    // default value is 20.
    PriorityTimeout interface{}

    // Set Route Metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric

    // Set Query Timers.
    Timers InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers

    // Set Route Distance.
    Distance InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetFilter() yfilter.YFilter { return sub.YFilter }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) SetFilter(yf yfilter.YFilter) { sub.YFilter = yf }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetGoName(yname string) string {
    if yname == "priority-timeout" { return "PriorityTimeout" }
    if yname == "metric" { return "Metric" }
    if yname == "timers" { return "Timers" }
    if yname == "distance" { return "Distance" }
    return ""
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetSegmentPath() string {
    return "sub"
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "metric" {
        return &sub.Metric
    }
    if childYangName == "timers" {
        return &sub.Timers
    }
    if childYangName == "distance" {
        return &sub.Distance
    }
    return nil
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["metric"] = &sub.Metric
    children["timers"] = &sub.Timers
    children["distance"] = &sub.Distance
    return children
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority-timeout"] = sub.PriorityTimeout
    return leafs
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetBundleName() string { return "cisco_ios_xr" }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetYangName() string { return "sub" }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) SetParent(parent types.Entity) { sub.parent = parent }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetParent() types.Entity { return sub.parent }

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetParentYangName() string { return "dagr" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric
// Set Route Metric
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Normal Route Metric. The type is interface{} with range: 0..256. The
    // default value is 100.
    MetricNorm interface{}

    // Priority Route Metric. The type is interface{} with range: 0..256. The
    // default value is 90.
    MetricPrio interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetFilter() yfilter.YFilter { return metric.YFilter }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) SetFilter(yf yfilter.YFilter) { metric.YFilter = yf }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetGoName(yname string) string {
    if yname == "metric-norm" { return "MetricNorm" }
    if yname == "metric-prio" { return "MetricPrio" }
    return ""
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetSegmentPath() string {
    return "metric"
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["metric-norm"] = metric.MetricNorm
    leafs["metric-prio"] = metric.MetricPrio
    return leafs
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetBundleName() string { return "cisco_ios_xr" }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetYangName() string { return "metric" }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) SetParent(parent types.Entity) { metric.parent = parent }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetParent() types.Entity { return metric.parent }

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetParentYangName() string { return "sub" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers
// Set Query Timers
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Query Timeout. The type is interface{} with range: 1..10000. The default
    // value is 1.
    QueryTime interface{}

    // Standby Query Timeout. The type is interface{} with range: 1..10000. The
    // default value is 20.
    SbyTime interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetGoName(yname string) string {
    if yname == "query-time" { return "QueryTime" }
    if yname == "sby-time" { return "SbyTime" }
    return ""
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["query-time"] = timers.QueryTime
    leafs["sby-time"] = timers.SbyTime
    return leafs
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetYangName() string { return "timers" }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetParent() types.Entity { return timers.parent }

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetParentYangName() string { return "sub" }

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
// Set Route Distance
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Normal Route Distance. The type is interface{} with range: 0..256. The
    // default value is 150.
    DistNorm interface{}

    // Priority Route Distance. The type is interface{} with range: 0..256. The
    // default value is 5.
    DistPrio interface{}
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetGoName(yname string) string {
    if yname == "dist-norm" { return "DistNorm" }
    if yname == "dist-prio" { return "DistPrio" }
    return ""
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dist-norm"] = distance.DistNorm
    leafs["dist-prio"] = distance.DistPrio
    return leafs
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetYangName() string { return "distance" }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetParent() types.Entity { return distance.parent }

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetParentYangName() string { return "sub" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp
// Configure Address Resolution Protocol
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable the dynamic learning of ARP entries(for local subnet) on the
    // interface. The type is interface{}.
    LearningLocal interface{}

    // ARP learning solicited configuration. The type is interface{}.
    LearningSolicited interface{}

    // Ignore the receipt of Gratuitous ARP packets on the interface. The type is
    // interface{}.
    GratuitousIgnore interface{}

    // Proxy ARP configuration. The type is interface{}.
    ProxyArp interface{}

    // Time to delay purging arp entries when the interface goes down. The type is
    // interface{} with range: 1..65535.
    PurgeDelay interface{}

    // Disable the dynamic learning of ARP entries on the interface. The type is
    // interface{}.
    LearningDisable interface{}

    // Local Proxy ARP configuration. The type is interface{}.
    LocalProxyArp interface{}

    // Number of seconds for ARP cache timeout. The type is interface{} with
    // range: 30..2144448000. Units are second.
    Timeout interface{}
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetFilter() yfilter.YFilter { return ipv4Arp.YFilter }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) SetFilter(yf yfilter.YFilter) { ipv4Arp.YFilter = yf }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetGoName(yname string) string {
    if yname == "learning-local" { return "LearningLocal" }
    if yname == "learning-solicited" { return "LearningSolicited" }
    if yname == "gratuitous-ignore" { return "GratuitousIgnore" }
    if yname == "proxy-arp" { return "ProxyArp" }
    if yname == "purge-delay" { return "PurgeDelay" }
    if yname == "learning-disable" { return "LearningDisable" }
    if yname == "local-proxy-arp" { return "LocalProxyArp" }
    if yname == "timeout" { return "Timeout" }
    return ""
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["learning-local"] = ipv4Arp.LearningLocal
    leafs["learning-solicited"] = ipv4Arp.LearningSolicited
    leafs["gratuitous-ignore"] = ipv4Arp.GratuitousIgnore
    leafs["proxy-arp"] = ipv4Arp.ProxyArp
    leafs["purge-delay"] = ipv4Arp.PurgeDelay
    leafs["learning-disable"] = ipv4Arp.LearningDisable
    leafs["local-proxy-arp"] = ipv4Arp.LocalProxyArp
    leafs["timeout"] = ipv4Arp.Timeout
    return leafs
}

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetYangName() string { return "ipv4arp" }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) SetParent(parent types.Entity) { ipv4Arp.parent = parent }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetParent() types.Entity { return ipv4Arp.parent }

func (ipv4Arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Arp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network
// Interface IPv4 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 forwarding to get enabled on an interface. The type is interface{}.
    ForwardingEnable interface{}

    // The flag for enabling sending of ICMP mask reply messages. The type is
    // interface{}.
    IcmpMaskReply interface{}

    // Enable TCP MSS Adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Disable TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable point-to-point handling for this interface. The type is interface{}.
    PointToPoint interface{}

    // The IP Maximum Transmission Unit. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // Interface ipv4 bgp configuration.
    BgpPa InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa

    // Enable Verify handling for this interface.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify

    // Interface ipv4 bgp configuration.
    Bgp InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp

    // Set the IP address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses

    // The set of IP destination addresses for UDP broadcasts.
    HelperAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetFilter() yfilter.YFilter { return ipv4Network.YFilter }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) SetFilter(yf yfilter.YFilter) { ipv4Network.YFilter = yf }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetGoName(yname string) string {
    if yname == "forwarding-enable" { return "ForwardingEnable" }
    if yname == "icmp-mask-reply" { return "IcmpMaskReply" }
    if yname == "tcp-mss-adjust-enable" { return "TcpMssAdjustEnable" }
    if yname == "ttl-propagate-disable" { return "TtlPropagateDisable" }
    if yname == "point-to-point" { return "PointToPoint" }
    if yname == "mtu" { return "Mtu" }
    if yname == "bgp-pa" { return "BgpPa" }
    if yname == "verify" { return "Verify" }
    if yname == "bgp" { return "Bgp" }
    if yname == "addresses" { return "Addresses" }
    if yname == "helper-addresses" { return "HelperAddresses" }
    return ""
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-pa" {
        return &ipv4Network.BgpPa
    }
    if childYangName == "verify" {
        return &ipv4Network.Verify
    }
    if childYangName == "bgp" {
        return &ipv4Network.Bgp
    }
    if childYangName == "addresses" {
        return &ipv4Network.Addresses
    }
    if childYangName == "helper-addresses" {
        return &ipv4Network.HelperAddresses
    }
    return nil
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bgp-pa"] = &ipv4Network.BgpPa
    children["verify"] = &ipv4Network.Verify
    children["bgp"] = &ipv4Network.Bgp
    children["addresses"] = &ipv4Network.Addresses
    children["helper-addresses"] = &ipv4Network.HelperAddresses
    return children
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["forwarding-enable"] = ipv4Network.ForwardingEnable
    leafs["icmp-mask-reply"] = ipv4Network.IcmpMaskReply
    leafs["tcp-mss-adjust-enable"] = ipv4Network.TcpMssAdjustEnable
    leafs["ttl-propagate-disable"] = ipv4Network.TtlPropagateDisable
    leafs["point-to-point"] = ipv4Network.PointToPoint
    leafs["mtu"] = ipv4Network.Mtu
    return leafs
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetYangName() string { return "ipv4-network" }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) SetParent(parent types.Entity) { ipv4Network.parent = parent }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetParent() types.Entity { return ipv4Network.parent }

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input

    // Output.
    Output InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetFilter() yfilter.YFilter { return bgpPa.YFilter }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) SetFilter(yf yfilter.YFilter) { bgpPa.YFilter = yf }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    if yname == "output" { return "Output" }
    return ""
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetSegmentPath() string {
    return "bgp-pa"
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &bgpPa.Input
    }
    if childYangName == "output" {
        return &bgpPa.Output
    }
    return nil
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &bgpPa.Input
    children["output"] = &bgpPa.Output
    return children
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetBundleName() string { return "cisco_ios_xr" }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetYangName() string { return "bgp-pa" }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) SetParent(parent types.Entity) { bgpPa.parent = parent }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetParent() types.Entity { return bgpPa.parent }

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetParentYangName() string { return "ipv4-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetGoName(yname string) string {
    if yname == "source-accounting" { return "SourceAccounting" }
    if yname == "destination-accounting" { return "DestinationAccounting" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-accounting"] = input.SourceAccounting
    leafs["destination-accounting"] = input.DestinationAccounting
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetParentYangName() string { return "bgp-pa" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
// Output
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetGoName(yname string) string {
    if yname == "source-accounting" { return "SourceAccounting" }
    if yname == "destination-accounting" { return "DestinationAccounting" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-accounting"] = output.SourceAccounting
    leafs["destination-accounting"] = output.DestinationAccounting
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetParentYangName() string { return "bgp-pa" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify
// Enable Verify handling for this interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source is reachable via any interface or interface on which packet was
    // received. The type is Ipv4Reachable.
    Reachable interface{}

    // Allow router to ping itself (opens vulnerability in verification). The type
    // is Ipv4SelfPing.
    SelfPing interface{}

    // Allow default route to match when checking source address. The type is
    // Ipv4DefaultPing.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetFilter() yfilter.YFilter { return verify.YFilter }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) SetFilter(yf yfilter.YFilter) { verify.YFilter = yf }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetGoName(yname string) string {
    if yname == "reachable" { return "Reachable" }
    if yname == "self-ping" { return "SelfPing" }
    if yname == "default-ping" { return "DefaultPing" }
    return ""
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetSegmentPath() string {
    return "verify"
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable"] = verify.Reachable
    leafs["self-ping"] = verify.SelfPing
    leafs["default-ping"] = verify.DefaultPing
    return leafs
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetBundleName() string { return "cisco_ios_xr" }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetYangName() string { return "verify" }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) SetParent(parent types.Entity) { verify.parent = parent }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetParent() types.Entity { return verify.parent }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetParentYangName() string { return "ipv4-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface ipv4 bgp policy propagation configuration.
    Qppb InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb

    // Interface ipv4 bgp policy propagation flow tag configuration.
    FlowTag InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetGoName(yname string) string {
    if yname == "qppb" { return "Qppb" }
    if yname == "flow-tag" { return "FlowTag" }
    return ""
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetSegmentPath() string {
    return "bgp"
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "qppb" {
        return &bgp.Qppb
    }
    if childYangName == "flow-tag" {
        return &bgp.FlowTag
    }
    return nil
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["qppb"] = &bgp.Qppb
    children["flow-tag"] = &bgp.FlowTag
    return children
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetYangName() string { return "bgp" }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetParentYangName() string { return "ipv4-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb
// Interface ipv4 bgp policy propagation
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetFilter() yfilter.YFilter { return qppb.YFilter }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) SetFilter(yf yfilter.YFilter) { qppb.YFilter = yf }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetSegmentPath() string {
    return "qppb"
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &qppb.Input
    }
    return nil
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &qppb.Input
    return children
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetBundleName() string { return "cisco_ios_xr" }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetYangName() string { return "qppb" }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) SetParent(parent types.Entity) { qppb.parent = parent }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetParent() types.Entity { return qppb.parent }

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetParentYangName() string { return "bgp" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QPPB configuration on source. The type is Ipv4InterfaceQppb.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv4InterfaceQppb.
    Destination interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = input.Source
    leafs["destination"] = input.Destination
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetParentYangName() string { return "qppb" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
// Interface ipv4 bgp policy propagation flow tag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Input.
    FlowTagInput InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetFilter() yfilter.YFilter { return flowTag.YFilter }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) SetFilter(yf yfilter.YFilter) { flowTag.YFilter = yf }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetGoName(yname string) string {
    if yname == "flow-tag-input" { return "FlowTagInput" }
    return ""
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetSegmentPath() string {
    return "flow-tag"
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-tag-input" {
        return &flowTag.FlowTagInput
    }
    return nil
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-tag-input"] = &flowTag.FlowTagInput
    return children
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetBundleName() string { return "cisco_ios_xr" }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetYangName() string { return "flow-tag" }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) SetParent(parent types.Entity) { flowTag.parent = parent }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetParent() types.Entity { return flowTag.parent }

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetParentYangName() string { return "bgp" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowTag configuration on source. The type is bool.
    Source interface{}

    // FlowTag configuration on destination. The type is bool.
    Destination interface{}
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetFilter() yfilter.YFilter { return flowTagInput.YFilter }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) SetFilter(yf yfilter.YFilter) { flowTagInput.YFilter = yf }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    return ""
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetSegmentPath() string {
    return "flow-tag-input"
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = flowTagInput.Source
    leafs["destination"] = flowTagInput.Destination
    return leafs
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetBundleName() string { return "cisco_ios_xr" }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetYangName() string { return "flow-tag-input" }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) SetParent(parent types.Entity) { flowTagInput.parent = parent }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetParent() types.Entity { return flowTagInput.parent }

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetParentYangName() string { return "flow-tag" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses
// Set the IP address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable IP processing without an explicit address. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Unnumbered interface{}

    // IPv4 address and Mask negotiated via DHCP. The type is interface{}.
    Dhcp interface{}

    // Specify a secondary address.
    Secondaries InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries

    // IP address and Mask.
    Primary InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetFilter() yfilter.YFilter { return addresses.YFilter }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) SetFilter(yf yfilter.YFilter) { addresses.YFilter = yf }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetGoName(yname string) string {
    if yname == "unnumbered" { return "Unnumbered" }
    if yname == "dhcp" { return "Dhcp" }
    if yname == "secondaries" { return "Secondaries" }
    if yname == "primary" { return "Primary" }
    return ""
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetSegmentPath() string {
    return "addresses"
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondaries" {
        return &addresses.Secondaries
    }
    if childYangName == "primary" {
        return &addresses.Primary
    }
    return nil
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["secondaries"] = &addresses.Secondaries
    children["primary"] = &addresses.Primary
    return children
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unnumbered"] = addresses.Unnumbered
    leafs["dhcp"] = addresses.Dhcp
    return leafs
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetBundleName() string { return "cisco_ios_xr" }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetYangName() string { return "addresses" }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) SetParent(parent types.Entity) { addresses.parent = parent }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetParent() types.Entity { return addresses.parent }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetParentYangName() string { return "ipv4-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries
// Specify a secondary address
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address and Mask. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary.
    Secondary []InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetFilter() yfilter.YFilter { return secondaries.YFilter }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) SetFilter(yf yfilter.YFilter) { secondaries.YFilter = yf }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetGoName(yname string) string {
    if yname == "secondary" { return "Secondary" }
    return ""
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetSegmentPath() string {
    return "secondaries"
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondary" {
        for _, c := range secondaries.Secondary {
            if secondaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary{}
        secondaries.Secondary = append(secondaries.Secondary, child)
        return &secondaries.Secondary[len(secondaries.Secondary)-1]
    }
    return nil
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range secondaries.Secondary {
        children[secondaries.Secondary[i].GetSegmentPath()] = &secondaries.Secondary[i]
    }
    return children
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetBundleName() string { return "cisco_ios_xr" }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetYangName() string { return "secondaries" }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) SetParent(parent types.Entity) { secondaries.parent = parent }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetParent() types.Entity { return secondaries.parent }

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
// IP address and Mask
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetFilter() yfilter.YFilter { return secondary.YFilter }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) SetFilter(yf yfilter.YFilter) { secondary.YFilter = yf }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetSegmentPath() string {
    return "secondary" + "[address='" + fmt.Sprintf("%v", secondary.Address) + "']"
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = secondary.Address
    leafs["netmask"] = secondary.Netmask
    leafs["route-tag"] = secondary.RouteTag
    return leafs
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetBundleName() string { return "cisco_ios_xr" }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetYangName() string { return "secondary" }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) SetParent(parent types.Entity) { secondary.parent = parent }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetParent() types.Entity { return secondary.parent }

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetParentYangName() string { return "secondaries" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary
// IP address and Mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Address interface{}

    // Netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetFilter() yfilter.YFilter { return primary.YFilter }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) SetFilter(yf yfilter.YFilter) { primary.YFilter = yf }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetSegmentPath() string {
    return "primary"
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = primary.Address
    leafs["netmask"] = primary.Netmask
    leafs["route-tag"] = primary.RouteTag
    return leafs
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetBundleName() string { return "cisco_ios_xr" }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetYangName() string { return "primary" }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) SetParent(parent types.Entity) { primary.parent = parent }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetParent() types.Entity { return primary.parent }

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
// The set of IP destination addresses for UDP
// broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An IP destination addresses for UDP broadcasts. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress.
    HelperAddress []InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetFilter() yfilter.YFilter { return helperAddresses.YFilter }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) SetFilter(yf yfilter.YFilter) { helperAddresses.YFilter = yf }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetGoName(yname string) string {
    if yname == "helper-address" { return "HelperAddress" }
    return ""
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetSegmentPath() string {
    return "helper-addresses"
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "helper-address" {
        for _, c := range helperAddresses.HelperAddress {
            if helperAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress{}
        helperAddresses.HelperAddress = append(helperAddresses.HelperAddress, child)
        return &helperAddresses.HelperAddress[len(helperAddresses.HelperAddress)-1]
    }
    return nil
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helperAddresses.HelperAddress {
        children[helperAddresses.HelperAddress[i].GetSegmentPath()] = &helperAddresses.HelperAddress[i]
    }
    return children
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetYangName() string { return "helper-addresses" }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) SetParent(parent types.Entity) { helperAddresses.parent = parent }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetParent() types.Entity { return helperAddresses.parent }

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetParentYangName() string { return "ipv4-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
// An IP destination addresses for UDP broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP destination address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetFilter() yfilter.YFilter { return helperAddress.YFilter }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) SetFilter(yf yfilter.YFilter) { helperAddress.YFilter = yf }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetSegmentPath() string {
    return "helper-address" + "[address='" + fmt.Sprintf("%v", helperAddress.Address) + "']" + "[vrf-name='" + fmt.Sprintf("%v", helperAddress.VrfName) + "']"
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = helperAddress.Address
    leafs["vrf-name"] = helperAddress.VrfName
    return leafs
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetBundleName() string { return "cisco_ios_xr" }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetYangName() string { return "helper-address" }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) SetParent(parent types.Entity) { helperAddress.parent = parent }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetParent() types.Entity { return helperAddress.parent }

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetParentYangName() string { return "helper-addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding
// Interface IPv4 Network configuration data also
// used for forwarding
type InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable forwarding of directed broadcast. The type is interface{}.
    DirectedBroadcast interface{}

    // Disable sending ICMP unreachables. The type is interface{}.
    Unreachables interface{}

    // Enable sending ICMP Redirect messages. The type is interface{}.
    Redirects interface{}
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetFilter() yfilter.YFilter { return ipv4NetworkForwarding.YFilter }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) SetFilter(yf yfilter.YFilter) { ipv4NetworkForwarding.YFilter = yf }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetGoName(yname string) string {
    if yname == "directed-broadcast" { return "DirectedBroadcast" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "redirects" { return "Redirects" }
    return ""
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["directed-broadcast"] = ipv4NetworkForwarding.DirectedBroadcast
    leafs["unreachables"] = ipv4NetworkForwarding.Unreachables
    leafs["redirects"] = ipv4NetworkForwarding.Redirects
    return leafs
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetYangName() string { return "ipv4-network-forwarding" }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) SetParent(parent types.Entity) { ipv4NetworkForwarding.parent = parent }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetParent() types.Entity { return ipv4NetworkForwarding.parent }

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network
// Interface IPv6 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MTU Setting of Interface. The type is interface{} with range: 1280..65535.
    Mtu interface{}

    // Enable IPv6 processing without an explicit address. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Unnumbered interface{}

    // Disabled TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable TCP MSS adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Override Sending of ICMP Unreachable Messages. The type is interface{}.
    Unreachables interface{}

    // Configure BGP QoS policy propagation.
    BgpQosPolicyPropagation InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation

    // IPv6 BGP Policy Accounting.
    BgpPolicyAccountings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings

    // IPv6 Verify Unicast Souce Reachable.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify

    // Set the IPv6 address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses

    // Interface ipv6 bgp policy propagation flowtag configuration.
    BgpFlowTagPolicyTable InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetFilter() yfilter.YFilter { return ipv6Network.YFilter }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) SetFilter(yf yfilter.YFilter) { ipv6Network.YFilter = yf }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetGoName(yname string) string {
    if yname == "mtu" { return "Mtu" }
    if yname == "unnumbered" { return "Unnumbered" }
    if yname == "ttl-propagate-disable" { return "TtlPropagateDisable" }
    if yname == "tcp-mss-adjust-enable" { return "TcpMssAdjustEnable" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "bgp-qos-policy-propagation" { return "BgpQosPolicyPropagation" }
    if yname == "bgp-policy-accountings" { return "BgpPolicyAccountings" }
    if yname == "verify" { return "Verify" }
    if yname == "addresses" { return "Addresses" }
    if yname == "bgp-flow-tag-policy-table" { return "BgpFlowTagPolicyTable" }
    return ""
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-qos-policy-propagation" {
        return &ipv6Network.BgpQosPolicyPropagation
    }
    if childYangName == "bgp-policy-accountings" {
        return &ipv6Network.BgpPolicyAccountings
    }
    if childYangName == "verify" {
        return &ipv6Network.Verify
    }
    if childYangName == "addresses" {
        return &ipv6Network.Addresses
    }
    if childYangName == "bgp-flow-tag-policy-table" {
        return &ipv6Network.BgpFlowTagPolicyTable
    }
    return nil
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bgp-qos-policy-propagation"] = &ipv6Network.BgpQosPolicyPropagation
    children["bgp-policy-accountings"] = &ipv6Network.BgpPolicyAccountings
    children["verify"] = &ipv6Network.Verify
    children["addresses"] = &ipv6Network.Addresses
    children["bgp-flow-tag-policy-table"] = &ipv6Network.BgpFlowTagPolicyTable
    return children
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mtu"] = ipv6Network.Mtu
    leafs["unnumbered"] = ipv6Network.Unnumbered
    leafs["ttl-propagate-disable"] = ipv6Network.TtlPropagateDisable
    leafs["tcp-mss-adjust-enable"] = ipv6Network.TcpMssAdjustEnable
    leafs["unreachables"] = ipv6Network.Unreachables
    return leafs
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetYangName() string { return "ipv6-network" }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) SetParent(parent types.Entity) { ipv6Network.parent = parent }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetParent() types.Entity { return ipv6Network.parent }

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation
// Configure BGP QoS policy propagation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // QPPB configuration on source. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Destination interface{}
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetFilter() yfilter.YFilter { return bgpQosPolicyPropagation.YFilter }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) SetFilter(yf yfilter.YFilter) { bgpQosPolicyPropagation.YFilter = yf }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    return ""
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetSegmentPath() string {
    return "bgp-qos-policy-propagation"
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = bgpQosPolicyPropagation.Source
    leafs["destination"] = bgpQosPolicyPropagation.Destination
    return leafs
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetBundleName() string { return "cisco_ios_xr" }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetYangName() string { return "bgp-qos-policy-propagation" }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) SetParent(parent types.Entity) { bgpQosPolicyPropagation.parent = parent }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetParent() types.Entity { return bgpQosPolicyPropagation.parent }

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetParentYangName() string { return "ipv6-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings
// IPv6 BGP Policy Accounting
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accounting input or output. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting.
    BgpPolicyAccounting []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetFilter() yfilter.YFilter { return bgpPolicyAccountings.YFilter }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) SetFilter(yf yfilter.YFilter) { bgpPolicyAccountings.YFilter = yf }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetGoName(yname string) string {
    if yname == "bgp-policy-accounting" { return "BgpPolicyAccounting" }
    return ""
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetSegmentPath() string {
    return "bgp-policy-accountings"
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-policy-accounting" {
        for _, c := range bgpPolicyAccountings.BgpPolicyAccounting {
            if bgpPolicyAccountings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting{}
        bgpPolicyAccountings.BgpPolicyAccounting = append(bgpPolicyAccountings.BgpPolicyAccounting, child)
        return &bgpPolicyAccountings.BgpPolicyAccounting[len(bgpPolicyAccountings.BgpPolicyAccounting)-1]
    }
    return nil
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bgpPolicyAccountings.BgpPolicyAccounting {
        children[bgpPolicyAccountings.BgpPolicyAccounting[i].GetSegmentPath()] = &bgpPolicyAccountings.BgpPolicyAccounting[i]
    }
    return children
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetBundleName() string { return "cisco_ios_xr" }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetYangName() string { return "bgp-policy-accountings" }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) SetParent(parent types.Entity) { bgpPolicyAccountings.parent = parent }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetParent() types.Entity { return bgpPolicyAccountings.parent }

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetParentYangName() string { return "ipv6-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
// Accounting input or output
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Accouting on input or output. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Direction interface{}

    // Accounting on Destination IP Address. The type is bool. This attribute is
    // mandatory.
    DestinationAccounting interface{}

    // Accounting on Source IP Address. The type is bool. This attribute is
    // mandatory.
    SourceAccounting interface{}
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetFilter() yfilter.YFilter { return bgpPolicyAccounting.YFilter }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) SetFilter(yf yfilter.YFilter) { bgpPolicyAccounting.YFilter = yf }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetGoName(yname string) string {
    if yname == "direction" { return "Direction" }
    if yname == "destination-accounting" { return "DestinationAccounting" }
    if yname == "source-accounting" { return "SourceAccounting" }
    return ""
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetSegmentPath() string {
    return "bgp-policy-accounting" + "[direction='" + fmt.Sprintf("%v", bgpPolicyAccounting.Direction) + "']"
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["direction"] = bgpPolicyAccounting.Direction
    leafs["destination-accounting"] = bgpPolicyAccounting.DestinationAccounting
    leafs["source-accounting"] = bgpPolicyAccounting.SourceAccounting
    return leafs
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetBundleName() string { return "cisco_ios_xr" }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetYangName() string { return "bgp-policy-accounting" }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) SetParent(parent types.Entity) { bgpPolicyAccounting.parent = parent }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetParent() types.Entity { return bgpPolicyAccounting.parent }

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetParentYangName() string { return "bgp-policy-accountings" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify
// IPv6 Verify Unicast Souce Reachable
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Reachable Interface. The type is Ipv6Reachable. This attribute is
    // mandatory.
    Reachable interface{}

    // Allow Self Ping. The type is Ipv6SelfPing. This attribute is mandatory.
    SelfPing interface{}

    // Allow Default Route. The type is Ipv6DefaultPing. This attribute is
    // mandatory.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetFilter() yfilter.YFilter { return verify.YFilter }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) SetFilter(yf yfilter.YFilter) { verify.YFilter = yf }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetGoName(yname string) string {
    if yname == "reachable" { return "Reachable" }
    if yname == "self-ping" { return "SelfPing" }
    if yname == "default-ping" { return "DefaultPing" }
    return ""
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetSegmentPath() string {
    return "verify"
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable"] = verify.Reachable
    leafs["self-ping"] = verify.SelfPing
    leafs["default-ping"] = verify.DefaultPing
    return leafs
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetBundleName() string { return "cisco_ios_xr" }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetYangName() string { return "verify" }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) SetParent(parent types.Entity) { verify.parent = parent }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetParent() types.Entity { return verify.parent }

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetParentYangName() string { return "ipv6-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses
// Set the IPv6 address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Segment Routing Table.
    SegmentRoutings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings

    // Link local IPv6 address.
    LinkLocalAddress InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress

    // EUI-64 IPv6 address Table.
    Eui64Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses

    // Regular IPv6 address Table.
    RegularAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses

    // Auto IPv6 Interface Configuration.
    AutoConfiguration InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetFilter() yfilter.YFilter { return addresses.YFilter }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) SetFilter(yf yfilter.YFilter) { addresses.YFilter = yf }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetGoName(yname string) string {
    if yname == "segment-routings" { return "SegmentRoutings" }
    if yname == "link-local-address" { return "LinkLocalAddress" }
    if yname == "eui64-addresses" { return "Eui64Addresses" }
    if yname == "regular-addresses" { return "RegularAddresses" }
    if yname == "auto-configuration" { return "AutoConfiguration" }
    return ""
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetSegmentPath() string {
    return "addresses"
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routings" {
        return &addresses.SegmentRoutings
    }
    if childYangName == "link-local-address" {
        return &addresses.LinkLocalAddress
    }
    if childYangName == "eui64-addresses" {
        return &addresses.Eui64Addresses
    }
    if childYangName == "regular-addresses" {
        return &addresses.RegularAddresses
    }
    if childYangName == "auto-configuration" {
        return &addresses.AutoConfiguration
    }
    return nil
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["segment-routings"] = &addresses.SegmentRoutings
    children["link-local-address"] = &addresses.LinkLocalAddress
    children["eui64-addresses"] = &addresses.Eui64Addresses
    children["regular-addresses"] = &addresses.RegularAddresses
    children["auto-configuration"] = &addresses.AutoConfiguration
    return children
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetBundleName() string { return "cisco_ios_xr" }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetYangName() string { return "addresses" }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) SetParent(parent types.Entity) { addresses.parent = parent }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetParent() types.Entity { return addresses.parent }

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetParentYangName() string { return "ipv6-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings
// Segment Routing Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Segment Routing Submode . The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting.
    SegmentRouting []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetFilter() yfilter.YFilter { return segmentRoutings.YFilter }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) SetFilter(yf yfilter.YFilter) { segmentRoutings.YFilter = yf }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetGoName(yname string) string {
    if yname == "segment-routing" { return "SegmentRouting" }
    return ""
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetSegmentPath() string {
    return "segment-routings"
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing" {
        for _, c := range segmentRoutings.SegmentRouting {
            if segmentRoutings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting{}
        segmentRoutings.SegmentRouting = append(segmentRoutings.SegmentRouting, child)
        return &segmentRoutings.SegmentRouting[len(segmentRoutings.SegmentRouting)-1]
    }
    return nil
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range segmentRoutings.SegmentRouting {
        children[segmentRoutings.SegmentRouting[i].GetSegmentPath()] = &segmentRoutings.SegmentRouting[i]
    }
    return children
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetYangName() string { return "segment-routings" }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) SetParent(parent types.Entity) { segmentRoutings.parent = parent }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetParent() types.Entity { return segmentRoutings.parent }

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
// Segment Routing Submode 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Segment Routing Submode. The type is interface{}.
    Enable interface{}

    // Prefix-Sid for Segment Routing.
    Ipv6PrefixSid InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetFilter() yfilter.YFilter { return segmentRouting.YFilter }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) SetFilter(yf yfilter.YFilter) { segmentRouting.YFilter = yf }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "enable" { return "Enable" }
    if yname == "ipv6-prefix-sid" { return "Ipv6PrefixSid" }
    return ""
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetSegmentPath() string {
    return "segment-routing" + "[address='" + fmt.Sprintf("%v", segmentRouting.Address) + "']"
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-prefix-sid" {
        return &segmentRouting.Ipv6PrefixSid
    }
    return nil
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv6-prefix-sid"] = &segmentRouting.Ipv6PrefixSid
    return children
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = segmentRouting.Address
    leafs["enable"] = segmentRouting.Enable
    return leafs
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetYangName() string { return "segment-routing" }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) SetParent(parent types.Entity) { segmentRouting.parent = parent }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetParent() types.Entity { return segmentRouting.parent }

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetParentYangName() string { return "segment-routings" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
// Prefix-Sid for Segment Routing
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetFilter() yfilter.YFilter { return ipv6PrefixSid.YFilter }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) SetFilter(yf yfilter.YFilter) { ipv6PrefixSid.YFilter = yf }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetGoName(yname string) string {
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "zone" { return "Zone" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetSegmentPath() string {
    return "ipv6-prefix-sid"
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-length"] = ipv6PrefixSid.PrefixLength
    leafs["zone"] = ipv6PrefixSid.Zone
    leafs["route-tag"] = ipv6PrefixSid.RouteTag
    return leafs
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetYangName() string { return "ipv6-prefix-sid" }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) SetParent(parent types.Entity) { ipv6PrefixSid.parent = parent }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetParent() types.Entity { return ipv6PrefixSid.parent }

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetParentYangName() string { return "segment-routing" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress
// Link local IPv6 address
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    Address interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetFilter() yfilter.YFilter { return linkLocalAddress.YFilter }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) SetFilter(yf yfilter.YFilter) { linkLocalAddress.YFilter = yf }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "zone" { return "Zone" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetSegmentPath() string {
    return "link-local-address"
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = linkLocalAddress.Address
    leafs["zone"] = linkLocalAddress.Zone
    leafs["route-tag"] = linkLocalAddress.RouteTag
    return leafs
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetYangName() string { return "link-local-address" }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) SetParent(parent types.Entity) { linkLocalAddress.parent = parent }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetParent() types.Entity { return linkLocalAddress.parent }

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses
// EUI-64 IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EUI-64 IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address.
    Eui64Address []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetFilter() yfilter.YFilter { return eui64Addresses.YFilter }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) SetFilter(yf yfilter.YFilter) { eui64Addresses.YFilter = yf }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetGoName(yname string) string {
    if yname == "eui64-address" { return "Eui64Address" }
    return ""
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetSegmentPath() string {
    return "eui64-addresses"
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "eui64-address" {
        for _, c := range eui64Addresses.Eui64Address {
            if eui64Addresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address{}
        eui64Addresses.Eui64Address = append(eui64Addresses.Eui64Address, child)
        return &eui64Addresses.Eui64Address[len(eui64Addresses.Eui64Address)-1]
    }
    return nil
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eui64Addresses.Eui64Address {
        children[eui64Addresses.Eui64Address[i].GetSegmentPath()] = &eui64Addresses.Eui64Address[i]
    }
    return children
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetBundleName() string { return "cisco_ios_xr" }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetYangName() string { return "eui64-addresses" }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) SetParent(parent types.Entity) { eui64Addresses.parent = parent }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetParent() types.Entity { return eui64Addresses.parent }

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
// EUI-64 IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetFilter() yfilter.YFilter { return eui64Address.YFilter }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) SetFilter(yf yfilter.YFilter) { eui64Address.YFilter = yf }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "zone" { return "Zone" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetSegmentPath() string {
    return "eui64-address" + "[address='" + fmt.Sprintf("%v", eui64Address.Address) + "']"
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = eui64Address.Address
    leafs["prefix-length"] = eui64Address.PrefixLength
    leafs["zone"] = eui64Address.Zone
    leafs["route-tag"] = eui64Address.RouteTag
    return leafs
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetBundleName() string { return "cisco_ios_xr" }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetYangName() string { return "eui64-address" }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) SetParent(parent types.Entity) { eui64Address.parent = parent }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetParent() types.Entity { return eui64Address.parent }

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetParentYangName() string { return "eui64-addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses
// Regular IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Regular IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress.
    RegularAddress []InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetFilter() yfilter.YFilter { return regularAddresses.YFilter }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) SetFilter(yf yfilter.YFilter) { regularAddresses.YFilter = yf }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetGoName(yname string) string {
    if yname == "regular-address" { return "RegularAddress" }
    return ""
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetSegmentPath() string {
    return "regular-addresses"
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "regular-address" {
        for _, c := range regularAddresses.RegularAddress {
            if regularAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress{}
        regularAddresses.RegularAddress = append(regularAddresses.RegularAddress, child)
        return &regularAddresses.RegularAddress[len(regularAddresses.RegularAddress)-1]
    }
    return nil
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range regularAddresses.RegularAddress {
        children[regularAddresses.RegularAddress[i].GetSegmentPath()] = &regularAddresses.RegularAddress[i]
    }
    return children
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetYangName() string { return "regular-addresses" }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) SetParent(parent types.Entity) { regularAddresses.parent = parent }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetParent() types.Entity { return regularAddresses.parent }

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
// Regular IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetFilter() yfilter.YFilter { return regularAddress.YFilter }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) SetFilter(yf yfilter.YFilter) { regularAddress.YFilter = yf }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "zone" { return "Zone" }
    if yname == "route-tag" { return "RouteTag" }
    return ""
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetSegmentPath() string {
    return "regular-address" + "[address='" + fmt.Sprintf("%v", regularAddress.Address) + "']"
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = regularAddress.Address
    leafs["prefix-length"] = regularAddress.PrefixLength
    leafs["zone"] = regularAddress.Zone
    leafs["route-tag"] = regularAddress.RouteTag
    return leafs
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetBundleName() string { return "cisco_ios_xr" }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetYangName() string { return "regular-address" }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) SetParent(parent types.Entity) { regularAddress.parent = parent }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetParent() types.Entity { return regularAddress.parent }

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetParentYangName() string { return "regular-addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
// Auto IPv6 Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The flag to enable auto ipv6 interface configuration. The type is
    // interface{}.
    Enable interface{}

    // Enable slaac on Mgmt interface. The type is interface{}.
    AutoConfigSlaac interface{}
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetFilter() yfilter.YFilter { return autoConfiguration.YFilter }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) SetFilter(yf yfilter.YFilter) { autoConfiguration.YFilter = yf }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "auto-config-slaac" { return "AutoConfigSlaac" }
    return ""
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetSegmentPath() string {
    return "auto-configuration"
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = autoConfiguration.Enable
    leafs["auto-config-slaac"] = autoConfiguration.AutoConfigSlaac
    return leafs
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetYangName() string { return "auto-configuration" }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) SetParent(parent types.Entity) { autoConfiguration.parent = parent }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetParent() types.Entity { return autoConfiguration.parent }

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetParentYangName() string { return "addresses" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
// Interface ipv6 bgp policy propagation flowtag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Input.
    BgpFlowTagPolicy InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetFilter() yfilter.YFilter { return bgpFlowTagPolicyTable.YFilter }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) SetFilter(yf yfilter.YFilter) { bgpFlowTagPolicyTable.YFilter = yf }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetGoName(yname string) string {
    if yname == "bgp-flow-tag-policy" { return "BgpFlowTagPolicy" }
    return ""
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetSegmentPath() string {
    return "bgp-flow-tag-policy-table"
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-flow-tag-policy" {
        return &bgpFlowTagPolicyTable.BgpFlowTagPolicy
    }
    return nil
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bgp-flow-tag-policy"] = &bgpFlowTagPolicyTable.BgpFlowTagPolicy
    return children
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetBundleName() string { return "cisco_ios_xr" }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetYangName() string { return "bgp-flow-tag-policy-table" }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) SetParent(parent types.Entity) { bgpFlowTagPolicyTable.parent = parent }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetParent() types.Entity { return bgpFlowTagPolicyTable.parent }

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetParentYangName() string { return "ipv6-network" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flow Tag configuration on source. The type is bool.
    Source interface{}

    // Flow Tag configuration on destination. The type is bool.
    Destination interface{}
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetFilter() yfilter.YFilter { return bgpFlowTagPolicy.YFilter }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) SetFilter(yf yfilter.YFilter) { bgpFlowTagPolicy.YFilter = yf }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    return ""
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetSegmentPath() string {
    return "bgp-flow-tag-policy"
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = bgpFlowTagPolicy.Source
    leafs["destination"] = bgpFlowTagPolicy.Destination
    return leafs
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetBundleName() string { return "cisco_ios_xr" }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetYangName() string { return "bgp-flow-tag-policy" }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) SetParent(parent types.Entity) { bgpFlowTagPolicy.parent = parent }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetParent() types.Entity { return bgpFlowTagPolicy.parent }

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetParentYangName() string { return "bgp-flow-tag-policy-table" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor
// IPv6 interface neighbor or neighbor discovery
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set advertised reachability time in milliseconds. The type is interface{}
    // with range: 0..3600000. Units are millisecond.
    ReachableTime interface{}

    // Unspecify IPv6 Router Advertisement (RA) hop-limit. The type is
    // interface{}.
    RaUnspecifyHoplimit interface{}

    // Set IPv6 duplicate address detection transmits. The type is interface{}
    // with range: 0..600.
    DadAttempts interface{}

    // Set SRP multicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpMulticastEncapsulation interface{}

    // Set advertised NS retransmission interval in milliseconds. The type is
    // interface{} with range: 1000..4294967295. Units are millisecond.
    NsInterval interface{}

    // Set the cache limit for neighbor entries. The type is interface{} with
    // range: 0..128000.
    CacheLimit interface{}

    // Enable sending of ICMP Redirect messages. The type is interface{}.
    Redirect interface{}

    // Set SRP unicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpUnicastEncapsulation interface{}

    // Enable suppress MTU in IPv6 router advertisement. The type is interface{}.
    RamtuSuppress interface{}

    // Host to use stateful protocol for address configuration. The type is
    // interface{}.
    ManagedConfig interface{}

    // Enable unicast IPv6 router advertisement. The type is interface{}.
    RaUnicast interface{}

    // Set IPv6 Router Advertisement (RA) lifetime in seconds. The type is
    // interface{} with range: 0..9000. Units are second.
    RaLifetime interface{}

    // Host to use stateful protocol for non-address configuration. The type is
    // interface{}.
    OtherConfig interface{}

    // Enable suppress IPv6 router advertisement. The type is interface{}.
    RaSuppress interface{}

    // RA Router Preference. The type is Ipv6NdRouterPref.
    RouterPreference interface{}

    // IPv6 Router Advertisement (RA) Specific Route.
    RaspecificRouteS InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS

    // IPv6 Router Advertisement (RA) DNS Search List.
    RadnsSearches InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches

    // IPv6 Router Advertisement (RA) DNS Servre.
    RadnsServers InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers

    // Set IPv6 Router Advertisement (RA) interval in seconds.
    RaInterval InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval

    // Prefixes .
    Ipv6Prefixes InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetFilter() yfilter.YFilter { return ipv6Neighbor.YFilter }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) SetFilter(yf yfilter.YFilter) { ipv6Neighbor.YFilter = yf }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetGoName(yname string) string {
    if yname == "reachable-time" { return "ReachableTime" }
    if yname == "ra-unspecify-hoplimit" { return "RaUnspecifyHoplimit" }
    if yname == "dad-attempts" { return "DadAttempts" }
    if yname == "srp-multicast-encapsulation" { return "SrpMulticastEncapsulation" }
    if yname == "ns-interval" { return "NsInterval" }
    if yname == "cache-limit" { return "CacheLimit" }
    if yname == "redirect" { return "Redirect" }
    if yname == "srp-unicast-encapsulation" { return "SrpUnicastEncapsulation" }
    if yname == "ramtu-suppress" { return "RamtuSuppress" }
    if yname == "managed-config" { return "ManagedConfig" }
    if yname == "ra-unicast" { return "RaUnicast" }
    if yname == "ra-lifetime" { return "RaLifetime" }
    if yname == "other-config" { return "OtherConfig" }
    if yname == "ra-suppress" { return "RaSuppress" }
    if yname == "router-preference" { return "RouterPreference" }
    if yname == "raspecific-route-s" { return "RaspecificRouteS" }
    if yname == "radns-searches" { return "RadnsSearches" }
    if yname == "radns-servers" { return "RadnsServers" }
    if yname == "ra-interval" { return "RaInterval" }
    if yname == "ipv6-prefixes" { return "Ipv6Prefixes" }
    return ""
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "raspecific-route-s" {
        return &ipv6Neighbor.RaspecificRouteS
    }
    if childYangName == "radns-searches" {
        return &ipv6Neighbor.RadnsSearches
    }
    if childYangName == "radns-servers" {
        return &ipv6Neighbor.RadnsServers
    }
    if childYangName == "ra-interval" {
        return &ipv6Neighbor.RaInterval
    }
    if childYangName == "ipv6-prefixes" {
        return &ipv6Neighbor.Ipv6Prefixes
    }
    return nil
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["raspecific-route-s"] = &ipv6Neighbor.RaspecificRouteS
    children["radns-searches"] = &ipv6Neighbor.RadnsSearches
    children["radns-servers"] = &ipv6Neighbor.RadnsServers
    children["ra-interval"] = &ipv6Neighbor.RaInterval
    children["ipv6-prefixes"] = &ipv6Neighbor.Ipv6Prefixes
    return children
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reachable-time"] = ipv6Neighbor.ReachableTime
    leafs["ra-unspecify-hoplimit"] = ipv6Neighbor.RaUnspecifyHoplimit
    leafs["dad-attempts"] = ipv6Neighbor.DadAttempts
    leafs["srp-multicast-encapsulation"] = ipv6Neighbor.SrpMulticastEncapsulation
    leafs["ns-interval"] = ipv6Neighbor.NsInterval
    leafs["cache-limit"] = ipv6Neighbor.CacheLimit
    leafs["redirect"] = ipv6Neighbor.Redirect
    leafs["srp-unicast-encapsulation"] = ipv6Neighbor.SrpUnicastEncapsulation
    leafs["ramtu-suppress"] = ipv6Neighbor.RamtuSuppress
    leafs["managed-config"] = ipv6Neighbor.ManagedConfig
    leafs["ra-unicast"] = ipv6Neighbor.RaUnicast
    leafs["ra-lifetime"] = ipv6Neighbor.RaLifetime
    leafs["other-config"] = ipv6Neighbor.OtherConfig
    leafs["ra-suppress"] = ipv6Neighbor.RaSuppress
    leafs["router-preference"] = ipv6Neighbor.RouterPreference
    return leafs
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetYangName() string { return "ipv6-neighbor" }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) SetParent(parent types.Entity) { ipv6Neighbor.parent = parent }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetParent() types.Entity { return ipv6Neighbor.parent }

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) Specific Route. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute.
    RaspecificRoute []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetFilter() yfilter.YFilter { return raspecificRouteS.YFilter }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) SetFilter(yf yfilter.YFilter) { raspecificRouteS.YFilter = yf }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetGoName(yname string) string {
    if yname == "raspecific-route" { return "RaspecificRoute" }
    return ""
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetSegmentPath() string {
    return "raspecific-route-s"
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "raspecific-route" {
        for _, c := range raspecificRouteS.RaspecificRoute {
            if raspecificRouteS.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute{}
        raspecificRouteS.RaspecificRoute = append(raspecificRouteS.RaspecificRoute, child)
        return &raspecificRouteS.RaspecificRoute[len(raspecificRouteS.RaspecificRoute)-1]
    }
    return nil
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range raspecificRouteS.RaspecificRoute {
        children[raspecificRouteS.RaspecificRoute[i].GetSegmentPath()] = &raspecificRouteS.RaspecificRoute[i]
    }
    return children
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetBundleName() string { return "cisco_ios_xr" }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetYangName() string { return "raspecific-route-s" }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) SetParent(parent types.Entity) { raspecificRouteS.parent = parent }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetParent() types.Entity { return raspecificRouteS.parent }

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetParentYangName() string { return "ipv6-neighbor" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SpecificRoute interface{}

    // Prefix mask length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    Lifetime interface{}

    // Preference. The type is Ipv6NdRouterPref.
    Preference interface{}
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetFilter() yfilter.YFilter { return raspecificRoute.YFilter }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) SetFilter(yf yfilter.YFilter) { raspecificRoute.YFilter = yf }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetGoName(yname string) string {
    if yname == "specific-route" { return "SpecificRoute" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "lifetime" { return "Lifetime" }
    if yname == "preference" { return "Preference" }
    return ""
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetSegmentPath() string {
    return "raspecific-route" + "[specific-route='" + fmt.Sprintf("%v", raspecificRoute.SpecificRoute) + "']"
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["specific-route"] = raspecificRoute.SpecificRoute
    leafs["prefix-length"] = raspecificRoute.PrefixLength
    leafs["lifetime"] = raspecificRoute.Lifetime
    leafs["preference"] = raspecificRoute.Preference
    return leafs
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetBundleName() string { return "cisco_ios_xr" }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetYangName() string { return "raspecific-route" }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) SetParent(parent types.Entity) { raspecificRoute.parent = parent }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetParent() types.Entity { return raspecificRoute.parent }

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetParentYangName() string { return "raspecific-route-s" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Search List. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch.
    RadnsSearch []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetFilter() yfilter.YFilter { return radnsSearches.YFilter }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) SetFilter(yf yfilter.YFilter) { radnsSearches.YFilter = yf }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetGoName(yname string) string {
    if yname == "radns-search" { return "RadnsSearch" }
    return ""
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetSegmentPath() string {
    return "radns-searches"
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "radns-search" {
        for _, c := range radnsSearches.RadnsSearch {
            if radnsSearches.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch{}
        radnsSearches.RadnsSearch = append(radnsSearches.RadnsSearch, child)
        return &radnsSearches.RadnsSearch[len(radnsSearches.RadnsSearch)-1]
    }
    return nil
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range radnsSearches.RadnsSearch {
        children[radnsSearches.RadnsSearch[i].GetSegmentPath()] = &radnsSearches.RadnsSearch[i]
    }
    return children
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetBundleName() string { return "cisco_ios_xr" }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetYangName() string { return "radns-searches" }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) SetParent(parent types.Entity) { radnsSearches.parent = parent }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetParent() types.Entity { return radnsSearches.parent }

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetParentYangName() string { return "ipv6-neighbor" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Search List. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    DnsSearchList interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetFilter() yfilter.YFilter { return radnsSearch.YFilter }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) SetFilter(yf yfilter.YFilter) { radnsSearch.YFilter = yf }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetGoName(yname string) string {
    if yname == "dns-search-list" { return "DnsSearchList" }
    if yname == "lifetime" { return "Lifetime" }
    return ""
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetSegmentPath() string {
    return "radns-search" + "[dns-search-list='" + fmt.Sprintf("%v", radnsSearch.DnsSearchList) + "']"
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dns-search-list"] = radnsSearch.DnsSearchList
    leafs["lifetime"] = radnsSearch.Lifetime
    return leafs
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetBundleName() string { return "cisco_ios_xr" }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetYangName() string { return "radns-search" }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) SetParent(parent types.Entity) { radnsSearch.parent = parent }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetParent() types.Entity { return radnsSearch.parent }

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetParentYangName() string { return "radns-searches" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Servre. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer.
    RadnsServer []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetFilter() yfilter.YFilter { return radnsServers.YFilter }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) SetFilter(yf yfilter.YFilter) { radnsServers.YFilter = yf }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetGoName(yname string) string {
    if yname == "radns-server" { return "RadnsServer" }
    return ""
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetSegmentPath() string {
    return "radns-servers"
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "radns-server" {
        for _, c := range radnsServers.RadnsServer {
            if radnsServers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer{}
        radnsServers.RadnsServer = append(radnsServers.RadnsServer, child)
        return &radnsServers.RadnsServer[len(radnsServers.RadnsServer)-1]
    }
    return nil
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range radnsServers.RadnsServer {
        children[radnsServers.RadnsServer[i].GetSegmentPath()] = &radnsServers.RadnsServer[i]
    }
    return children
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetBundleName() string { return "cisco_ios_xr" }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetYangName() string { return "radns-servers" }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) SetParent(parent types.Entity) { radnsServers.parent = parent }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetParent() types.Entity { return radnsServers.parent }

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetParentYangName() string { return "ipv6-neighbor" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DnsServer interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetFilter() yfilter.YFilter { return radnsServer.YFilter }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) SetFilter(yf yfilter.YFilter) { radnsServer.YFilter = yf }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetGoName(yname string) string {
    if yname == "dns-server" { return "DnsServer" }
    if yname == "lifetime" { return "Lifetime" }
    return ""
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetSegmentPath() string {
    return "radns-server" + "[dns-server='" + fmt.Sprintf("%v", radnsServer.DnsServer) + "']"
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dns-server"] = radnsServer.DnsServer
    leafs["lifetime"] = radnsServer.Lifetime
    return leafs
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetBundleName() string { return "cisco_ios_xr" }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetYangName() string { return "radns-server" }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) SetParent(parent types.Entity) { radnsServer.parent = parent }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetParent() types.Entity { return radnsServer.parent }

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetParentYangName() string { return "radns-servers" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval
// Set IPv6 Router Advertisement (RA) interval in
// seconds
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum RA interval in seconds. The type is interface{} with range:
    // 4..1800. This attribute is mandatory.
    Maximum interface{}

    // Minimum RA interval in seconds. Must be less than 0.75 * maximum interval.
    // The type is interface{} with range: 3..1800.
    Minimum interface{}
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetFilter() yfilter.YFilter { return raInterval.YFilter }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) SetFilter(yf yfilter.YFilter) { raInterval.YFilter = yf }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetGoName(yname string) string {
    if yname == "maximum" { return "Maximum" }
    if yname == "minimum" { return "Minimum" }
    return ""
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetSegmentPath() string {
    return "ra-interval"
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum"] = raInterval.Maximum
    leafs["minimum"] = raInterval.Minimum
    return leafs
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetBundleName() string { return "cisco_ios_xr" }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetYangName() string { return "ra-interval" }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) SetParent(parent types.Entity) { raInterval.parent = parent }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetParent() types.Entity { return raInterval.parent }

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetParentYangName() string { return "ipv6-neighbor" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
// Prefixes 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure prefix with paramemters. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix.
    Ipv6Prefix []InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetFilter() yfilter.YFilter { return ipv6Prefixes.YFilter }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) SetFilter(yf yfilter.YFilter) { ipv6Prefixes.YFilter = yf }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetGoName(yname string) string {
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetSegmentPath() string {
    return "ipv6-prefixes"
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-prefix" {
        for _, c := range ipv6Prefixes.Ipv6Prefix {
            if ipv6Prefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix{}
        ipv6Prefixes.Ipv6Prefix = append(ipv6Prefixes.Ipv6Prefix, child)
        return &ipv6Prefixes.Ipv6Prefix[len(ipv6Prefixes.Ipv6Prefix)-1]
    }
    return nil
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6Prefixes.Ipv6Prefix {
        children[ipv6Prefixes.Ipv6Prefix[i].GetSegmentPath()] = &ipv6Prefixes.Ipv6Prefix[i]
    }
    return children
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetYangName() string { return "ipv6-prefixes" }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) SetParent(parent types.Entity) { ipv6Prefixes.parent = parent }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetParent() types.Entity { return ipv6Prefixes.parent }

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetParentYangName() string { return "ipv6-neighbor" }

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
// Configure prefix with paramemters
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix zone. The type is string with length: 1..9.
    PrefixZone interface{}

    // Prefix mask length. The type is interface{} with range: 0..128. This
    // attribute is mandatory.
    PrefixLength interface{}

    // Valid Lifetime (seconds). The type is interface{} with range:
    // 0..4294967295.
    ValidLifetime interface{}

    // Preferred Lifetime (seconds) must be <= Valid Lifetime. The type is
    // interface{} with range: 0..4294967295.
    PreferredLifetime interface{}

    // If set, prefix will not be used for onlink determination. The type is bool.
    OffLink interface{}

    // If set, prefix will not be used for auto configuration. The type is bool.
    NoAutoConfig interface{}

    // If set, prefix will not be advertized. The type is bool.
    NoAdvertize interface{}

    // Month to expire valid lifetime. The type is Ipv6ndMonth.
    ExpiryMonth interface{}

    // Date to expire valid lifetime. The type is interface{} with range: 1..31.
    ExpiryDate interface{}

    // Year to expire valid lifetime. The type is interface{} with range:
    // 2003..2035.
    ExpiryYear interface{}

    // Hour to expire valid lifetime. The type is interface{} with range: 0..23.
    ExpiryHour interface{}

    // Minute to expire valid lifetime. The type is interface{} with range: 0..59.
    ExpiryMinute interface{}

    // Month to expire preferred lifetime. The type is Ipv6ndMonth.
    PrefExpiryMonth interface{}

    // Date to expire preferred lifetime. The type is interface{} with range:
    // 1..31.
    PrefExpiryDate interface{}

    // Year to expire preferred lifetime. The type is interface{} with range:
    // 2003..2035.
    PrefExpiryYear interface{}

    // Hour to expire preferred lifetime. The type is interface{} with range:
    // 0..23.
    PrefExpiryHour interface{}

    // Minute to expire preferred lifetime. The type is interface{} with range:
    // 0..59.
    PrefExpiryMinute interface{}
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetFilter() yfilter.YFilter { return ipv6Prefix.YFilter }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) SetFilter(yf yfilter.YFilter) { ipv6Prefix.YFilter = yf }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-zone" { return "PrefixZone" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "valid-lifetime" { return "ValidLifetime" }
    if yname == "preferred-lifetime" { return "PreferredLifetime" }
    if yname == "off-link" { return "OffLink" }
    if yname == "no-auto-config" { return "NoAutoConfig" }
    if yname == "no-advertize" { return "NoAdvertize" }
    if yname == "expiry-month" { return "ExpiryMonth" }
    if yname == "expiry-date" { return "ExpiryDate" }
    if yname == "expiry-year" { return "ExpiryYear" }
    if yname == "expiry-hour" { return "ExpiryHour" }
    if yname == "expiry-minute" { return "ExpiryMinute" }
    if yname == "pref-expiry-month" { return "PrefExpiryMonth" }
    if yname == "pref-expiry-date" { return "PrefExpiryDate" }
    if yname == "pref-expiry-year" { return "PrefExpiryYear" }
    if yname == "pref-expiry-hour" { return "PrefExpiryHour" }
    if yname == "pref-expiry-minute" { return "PrefExpiryMinute" }
    return ""
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetSegmentPath() string {
    return "ipv6-prefix" + "[prefix='" + fmt.Sprintf("%v", ipv6Prefix.Prefix) + "']"
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6Prefix.Prefix
    leafs["prefix-zone"] = ipv6Prefix.PrefixZone
    leafs["prefix-length"] = ipv6Prefix.PrefixLength
    leafs["valid-lifetime"] = ipv6Prefix.ValidLifetime
    leafs["preferred-lifetime"] = ipv6Prefix.PreferredLifetime
    leafs["off-link"] = ipv6Prefix.OffLink
    leafs["no-auto-config"] = ipv6Prefix.NoAutoConfig
    leafs["no-advertize"] = ipv6Prefix.NoAdvertize
    leafs["expiry-month"] = ipv6Prefix.ExpiryMonth
    leafs["expiry-date"] = ipv6Prefix.ExpiryDate
    leafs["expiry-year"] = ipv6Prefix.ExpiryYear
    leafs["expiry-hour"] = ipv6Prefix.ExpiryHour
    leafs["expiry-minute"] = ipv6Prefix.ExpiryMinute
    leafs["pref-expiry-month"] = ipv6Prefix.PrefExpiryMonth
    leafs["pref-expiry-date"] = ipv6Prefix.PrefExpiryDate
    leafs["pref-expiry-year"] = ipv6Prefix.PrefExpiryYear
    leafs["pref-expiry-hour"] = ipv6Prefix.PrefExpiryHour
    leafs["pref-expiry-minute"] = ipv6Prefix.PrefExpiryMinute
    return leafs
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetYangName() string { return "ipv6-prefix" }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) SetParent(parent types.Entity) { ipv6Prefix.parent = parent }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetParent() types.Entity { return ipv6Prefix.parent }

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetParentYangName() string { return "ipv6-prefixes" }

// InterfaceConfigurations_InterfaceConfiguration_Mpls
// MPLS configuration under an interface
type InterfaceConfigurations_InterfaceConfiguration_Mpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the MPLS MTU for the interface. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // MPLS label security.
    LabelSecurity InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetFilter() yfilter.YFilter { return mpls.YFilter }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) SetFilter(yf yfilter.YFilter) { mpls.YFilter = yf }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetGoName(yname string) string {
    if yname == "mtu" { return "Mtu" }
    if yname == "label-security" { return "LabelSecurity" }
    return ""
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-io-cfg:mpls"
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-security" {
        return &mpls.LabelSecurity
    }
    return nil
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-security"] = &mpls.LabelSecurity
    return children
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mtu"] = mpls.Mtu
    return leafs
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetBundleName() string { return "cisco_ios_xr" }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetYangName() string { return "mpls" }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) SetParent(parent types.Entity) { mpls.parent = parent }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetParent() types.Entity { return mpls.parent }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
// MPLS label security
type InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable drop of multi-labelled incoming packets on a Interface. The type is
    // interface{}.
    MultiLabelDrop interface{}

    // Enable MPLS RPF for incoming packets on a Interface. The type is
    // interface{}.
    Rpf interface{}
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetFilter() yfilter.YFilter { return labelSecurity.YFilter }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) SetFilter(yf yfilter.YFilter) { labelSecurity.YFilter = yf }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetGoName(yname string) string {
    if yname == "multi-label-drop" { return "MultiLabelDrop" }
    if yname == "rpf" { return "Rpf" }
    return ""
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetSegmentPath() string {
    return "label-security"
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multi-label-drop"] = labelSecurity.MultiLabelDrop
    leafs["rpf"] = labelSecurity.Rpf
    return leafs
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetBundleName() string { return "cisco_ios_xr" }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetYangName() string { return "label-security" }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) SetParent(parent types.Entity) { labelSecurity.parent = parent }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetParent() types.Entity { return labelSecurity.parent }

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetParentYangName() string { return "mpls" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes
// MPLS tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify MPLS tunnel to be path protected. The type is interface{}.
    PathProtection interface{}

    // Forward class value. The type is interface{} with range: 1..7.
    ForwardClass interface{}

    // Set the destination of the tunnel. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Destination interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Path selection metric to use in path calculation. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Enable the soft-preemption feature on the tunnel. The type is interface{}.
    SoftPreemption interface{}

    // Tunnel loadsharing metric. The type is interface{} with range:
    // 1..4294967295.
    LoadShare interface{}

    // The name of the tunnel to be included in signalling messages. The type is
    // string with length: 1..254.
    SignalledName interface{}

    // Tunnel backup bandwidth requirement.
    BackupBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth

    // BFD over TE LSP.
    BfdOverLsp InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp

    // Allocate MPLS binding segment ID.
    BindingSegmentIdMpls InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls

    // Forwarding adjacency announcement to IGP.
    ForwardingAdjacency InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency

    // Tunnel path protection state.
    PathOptionProtects InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects

    // Tunnel Interface Bidirectional configuration data.
    Bidirectional InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional

    // Performs admin operations on the optical tunnel interface.
    AdminMode InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode

    // Specify tunnel LSPs switching capability descriptor.
    Switching InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching

    // PCE config.
    Pce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce

    // Configure path selection properties.
    TunnelPathSelection InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection

    // Tunnel Interface Auto-bandwidth configuration data.
    AutoBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth

    // Tunnel Setup and Hold Priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority

    // Set the affinity flags and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging

    // Tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth

    // Parameters for IGP routing over tunnel.
    Autoroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute

    // Policy classes for PBTS.
    PolicyClasses InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetFilter() yfilter.YFilter { return tunnelTeAttributes.YFilter }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) SetFilter(yf yfilter.YFilter) { tunnelTeAttributes.YFilter = yf }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetGoName(yname string) string {
    if yname == "path-protection" { return "PathProtection" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "destination" { return "Destination" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "soft-preemption" { return "SoftPreemption" }
    if yname == "load-share" { return "LoadShare" }
    if yname == "signalled-name" { return "SignalledName" }
    if yname == "backup-bandwidth" { return "BackupBandwidth" }
    if yname == "bfd-over-lsp" { return "BfdOverLsp" }
    if yname == "binding-segment-id-mpls" { return "BindingSegmentIdMpls" }
    if yname == "forwarding-adjacency" { return "ForwardingAdjacency" }
    if yname == "path-option-protects" { return "PathOptionProtects" }
    if yname == "bidirectional" { return "Bidirectional" }
    if yname == "admin-mode" { return "AdminMode" }
    if yname == "switching" { return "Switching" }
    if yname == "pce" { return "Pce" }
    if yname == "tunnel-path-selection" { return "TunnelPathSelection" }
    if yname == "auto-bandwidth" { return "AutoBandwidth" }
    if yname == "priority" { return "Priority" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "logging" { return "Logging" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "autoroute" { return "Autoroute" }
    if yname == "policy-classes" { return "PolicyClasses" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-bandwidth" {
        return &tunnelTeAttributes.BackupBandwidth
    }
    if childYangName == "bfd-over-lsp" {
        return &tunnelTeAttributes.BfdOverLsp
    }
    if childYangName == "binding-segment-id-mpls" {
        return &tunnelTeAttributes.BindingSegmentIdMpls
    }
    if childYangName == "forwarding-adjacency" {
        return &tunnelTeAttributes.ForwardingAdjacency
    }
    if childYangName == "path-option-protects" {
        return &tunnelTeAttributes.PathOptionProtects
    }
    if childYangName == "bidirectional" {
        return &tunnelTeAttributes.Bidirectional
    }
    if childYangName == "admin-mode" {
        return &tunnelTeAttributes.AdminMode
    }
    if childYangName == "switching" {
        return &tunnelTeAttributes.Switching
    }
    if childYangName == "pce" {
        return &tunnelTeAttributes.Pce
    }
    if childYangName == "tunnel-path-selection" {
        return &tunnelTeAttributes.TunnelPathSelection
    }
    if childYangName == "auto-bandwidth" {
        return &tunnelTeAttributes.AutoBandwidth
    }
    if childYangName == "priority" {
        return &tunnelTeAttributes.Priority
    }
    if childYangName == "affinity-mask" {
        return &tunnelTeAttributes.AffinityMask
    }
    if childYangName == "logging" {
        return &tunnelTeAttributes.Logging
    }
    if childYangName == "bandwidth" {
        return &tunnelTeAttributes.Bandwidth
    }
    if childYangName == "autoroute" {
        return &tunnelTeAttributes.Autoroute
    }
    if childYangName == "policy-classes" {
        return &tunnelTeAttributes.PolicyClasses
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &tunnelTeAttributes.NewStyleAffinityAffinityTypes
    }
    if childYangName == "fast-reroute" {
        return &tunnelTeAttributes.FastReroute
    }
    return nil
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup-bandwidth"] = &tunnelTeAttributes.BackupBandwidth
    children["bfd-over-lsp"] = &tunnelTeAttributes.BfdOverLsp
    children["binding-segment-id-mpls"] = &tunnelTeAttributes.BindingSegmentIdMpls
    children["forwarding-adjacency"] = &tunnelTeAttributes.ForwardingAdjacency
    children["path-option-protects"] = &tunnelTeAttributes.PathOptionProtects
    children["bidirectional"] = &tunnelTeAttributes.Bidirectional
    children["admin-mode"] = &tunnelTeAttributes.AdminMode
    children["switching"] = &tunnelTeAttributes.Switching
    children["pce"] = &tunnelTeAttributes.Pce
    children["tunnel-path-selection"] = &tunnelTeAttributes.TunnelPathSelection
    children["auto-bandwidth"] = &tunnelTeAttributes.AutoBandwidth
    children["priority"] = &tunnelTeAttributes.Priority
    children["affinity-mask"] = &tunnelTeAttributes.AffinityMask
    children["logging"] = &tunnelTeAttributes.Logging
    children["bandwidth"] = &tunnelTeAttributes.Bandwidth
    children["autoroute"] = &tunnelTeAttributes.Autoroute
    children["policy-classes"] = &tunnelTeAttributes.PolicyClasses
    children["new-style-affinity-affinity-types"] = &tunnelTeAttributes.NewStyleAffinityAffinityTypes
    children["fast-reroute"] = &tunnelTeAttributes.FastReroute
    return children
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-protection"] = tunnelTeAttributes.PathProtection
    leafs["forward-class"] = tunnelTeAttributes.ForwardClass
    leafs["destination"] = tunnelTeAttributes.Destination
    leafs["record-route"] = tunnelTeAttributes.RecordRoute
    leafs["path-selection-metric"] = tunnelTeAttributes.PathSelectionMetric
    leafs["soft-preemption"] = tunnelTeAttributes.SoftPreemption
    leafs["load-share"] = tunnelTeAttributes.LoadShare
    leafs["signalled-name"] = tunnelTeAttributes.SignalledName
    return leafs
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetYangName() string { return "tunnel-te-attributes" }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) SetParent(parent types.Entity) { tunnelTeAttributes.parent = parent }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetParent() types.Entity { return tunnelTeAttributes.parent }

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth
// Tunnel backup bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Backup bandwidth pool type, relevant only if DSTEType is PreStandardDSTE.
    // The type is MplsTeBackupBandwidthPool.
    PoolType interface{}

    // Backup bandwidth class type, relevant only if DSTEType is StandardDSTE. The
    // type is MplsTeBackupBandwidthClass.
    ClassType interface{}

    // Backup bandwidth limit type. The type is MplsTeBandwidthLimit.
    LimitType interface{}

    // Backup bandwidth requested by this tunnel in kbps. Ignored if bandwidth
    // limit type is unlimited. The type is interface{} with range: 1..4294967295.
    BackupBandwidth interface{}
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetFilter() yfilter.YFilter { return backupBandwidth.YFilter }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) SetFilter(yf yfilter.YFilter) { backupBandwidth.YFilter = yf }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "pool-type" { return "PoolType" }
    if yname == "class-type" { return "ClassType" }
    if yname == "limit-type" { return "LimitType" }
    if yname == "backup-bandwidth" { return "BackupBandwidth" }
    return ""
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetSegmentPath() string {
    return "backup-bandwidth"
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = backupBandwidth.DsteType
    leafs["pool-type"] = backupBandwidth.PoolType
    leafs["class-type"] = backupBandwidth.ClassType
    leafs["limit-type"] = backupBandwidth.LimitType
    leafs["backup-bandwidth"] = backupBandwidth.BackupBandwidth
    return leafs
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetYangName() string { return "backup-bandwidth" }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) SetParent(parent types.Entity) { backupBandwidth.parent = parent }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetParent() types.Entity { return backupBandwidth.parent }

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp
// BFD over TE LSP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Initial delay in milliseconds (default 16000). The type is interface{} with
    // range: 1..518400000.
    DampeningInitialWait interface{}

    // Enable BFD Fast Detect On the tunnel. The type is MplsTebfdSession.
    FastDetect interface{}

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Specify the multiplier for BFD failure detection. The type is interface{}
    // with range: 3..10.
    Multiplier interface{}

    // Wait for session to come up in seconds (default 60). The type is
    // interface{} with range: 10..3600.
    BringupTimeout interface{}

    // Disable Periodic LSP Ping for BFD over LSP. The type is interface{}.
    PeriodicPingDisable interface{}

    // Secondary delay in milliseconds (default 20000). The type is interface{}
    // with range: 1..518400000.
    DampeningSecondaryWait interface{}

    // Periodic LSP Ping Interval in seconds (default 120). The type is
    // interface{} with range: 60..3600.
    PeriodicPingInterval interface{}

    // Maximum delay in milliseconds (default 600000). The type is interface{}
    // with range: 1..518400000.
    DampeningMaximumWait interface{}

    // Specify the minimum interval for BFD failure detection. The type is
    // interface{} with range: 3..30000.
    MinimumInterval interface{}

    // Specify BFD Encap Mode on the tunnel. The type is interface{} with range:
    // 0..1.
    EncapMode interface{}
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetFilter() yfilter.YFilter { return bfdOverLsp.YFilter }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) SetFilter(yf yfilter.YFilter) { bfdOverLsp.YFilter = yf }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetGoName(yname string) string {
    if yname == "dampening-initial-wait" { return "DampeningInitialWait" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "enable" { return "Enable" }
    if yname == "multiplier" { return "Multiplier" }
    if yname == "bringup-timeout" { return "BringupTimeout" }
    if yname == "periodic-ping-disable" { return "PeriodicPingDisable" }
    if yname == "dampening-secondary-wait" { return "DampeningSecondaryWait" }
    if yname == "periodic-ping-interval" { return "PeriodicPingInterval" }
    if yname == "dampening-maximum-wait" { return "DampeningMaximumWait" }
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "encap-mode" { return "EncapMode" }
    return ""
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetSegmentPath() string {
    return "bfd-over-lsp"
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dampening-initial-wait"] = bfdOverLsp.DampeningInitialWait
    leafs["fast-detect"] = bfdOverLsp.FastDetect
    leafs["enable"] = bfdOverLsp.Enable
    leafs["multiplier"] = bfdOverLsp.Multiplier
    leafs["bringup-timeout"] = bfdOverLsp.BringupTimeout
    leafs["periodic-ping-disable"] = bfdOverLsp.PeriodicPingDisable
    leafs["dampening-secondary-wait"] = bfdOverLsp.DampeningSecondaryWait
    leafs["periodic-ping-interval"] = bfdOverLsp.PeriodicPingInterval
    leafs["dampening-maximum-wait"] = bfdOverLsp.DampeningMaximumWait
    leafs["minimum-interval"] = bfdOverLsp.MinimumInterval
    leafs["encap-mode"] = bfdOverLsp.EncapMode
    return leafs
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetBundleName() string { return "cisco_ios_xr" }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetYangName() string { return "bfd-over-lsp" }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) SetParent(parent types.Entity) { bfdOverLsp.parent = parent }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetParent() types.Entity { return bfdOverLsp.parent }

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls
// Allocate MPLS binding segment ID
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label value type. The type is BindingSegmentId.
    SegmentIdType interface{}

    // MPLS label. The type is interface{} with range: 16..4015.
    LabelValue interface{}
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetFilter() yfilter.YFilter { return bindingSegmentIdMpls.YFilter }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) SetFilter(yf yfilter.YFilter) { bindingSegmentIdMpls.YFilter = yf }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetGoName(yname string) string {
    if yname == "segment-id-type" { return "SegmentIdType" }
    if yname == "label-value" { return "LabelValue" }
    return ""
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetSegmentPath() string {
    return "binding-segment-id-mpls"
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["segment-id-type"] = bindingSegmentIdMpls.SegmentIdType
    leafs["label-value"] = bindingSegmentIdMpls.LabelValue
    return leafs
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetBundleName() string { return "cisco_ios_xr" }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetYangName() string { return "binding-segment-id-mpls" }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) SetParent(parent types.Entity) { bindingSegmentIdMpls.parent = parent }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetParent() types.Entity { return bindingSegmentIdMpls.parent }

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency
// Forwarding adjacency announcement to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable forwarding adjacency. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 forwarding adjacency also. The
    // type is interface{}.
    IncludeIpv6 interface{}

    // Specify the holdtime for the tunnel as forwarding adjacency. The type is
    // interface{} with range: 0..20000.
    HoldTime interface{}
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetFilter() yfilter.YFilter { return forwardingAdjacency.YFilter }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) SetFilter(yf yfilter.YFilter) { forwardingAdjacency.YFilter = yf }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "include-ipv6" { return "IncludeIpv6" }
    if yname == "hold-time" { return "HoldTime" }
    return ""
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetSegmentPath() string {
    return "forwarding-adjacency"
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = forwardingAdjacency.Enable
    leafs["include-ipv6"] = forwardingAdjacency.IncludeIpv6
    leafs["hold-time"] = forwardingAdjacency.HoldTime
    return leafs
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetBundleName() string { return "cisco_ios_xr" }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetYangName() string { return "forwarding-adjacency" }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) SetParent(parent types.Entity) { forwardingAdjacency.parent = parent }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetParent() types.Entity { return forwardingAdjacency.parent }

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects
// Tunnel path protection state
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel path protection. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect.
    PathOptionProtect []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetFilter() yfilter.YFilter { return pathOptionProtects.YFilter }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) SetFilter(yf yfilter.YFilter) { pathOptionProtects.YFilter = yf }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetGoName(yname string) string {
    if yname == "path-option-protect" { return "PathOptionProtect" }
    return ""
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetSegmentPath() string {
    return "path-option-protects"
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option-protect" {
        for _, c := range pathOptionProtects.PathOptionProtect {
            if pathOptionProtects.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect{}
        pathOptionProtects.PathOptionProtect = append(pathOptionProtects.PathOptionProtect, child)
        return &pathOptionProtects.PathOptionProtect[len(pathOptionProtects.PathOptionProtect)-1]
    }
    return nil
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptionProtects.PathOptionProtect {
        children[pathOptionProtects.PathOptionProtect[i].GetSegmentPath()] = &pathOptionProtects.PathOptionProtect[i]
    }
    return children
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetYangName() string { return "path-option-protects" }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) SetParent(parent types.Entity) { pathOptionProtects.parent = parent }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetParent() types.Entity { return pathOptionProtects.parent }

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
// Tunnel path protection
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protection type for this path. The type is
    // MplsTePathOptionProtection.
    Protection interface{}

    // Tunnel path options.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetFilter() yfilter.YFilter { return pathOptionProtect.YFilter }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) SetFilter(yf yfilter.YFilter) { pathOptionProtect.YFilter = yf }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetGoName(yname string) string {
    if yname == "protection" { return "Protection" }
    if yname == "path-options" { return "PathOptions" }
    return ""
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetSegmentPath() string {
    return "path-option-protect" + "[protection='" + fmt.Sprintf("%v", pathOptionProtect.Protection) + "']"
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-options" {
        return &pathOptionProtect.PathOptions
    }
    return nil
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-options"] = &pathOptionProtect.PathOptions
    return children
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protection"] = pathOptionProtect.Protection
    return leafs
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetYangName() string { return "path-option-protect" }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) SetParent(parent types.Entity) { pathOptionProtect.parent = parent }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetParent() types.Entity { return pathOptionProtect.parent }

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetParentYangName() string { return "path-option-protects" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
// Tunnel path options
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A tunnel path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption.
    PathOption []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetFilter() yfilter.YFilter { return pathOptions.YFilter }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) SetFilter(yf yfilter.YFilter) { pathOptions.YFilter = yf }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetGoName(yname string) string {
    if yname == "path-option" { return "PathOption" }
    return ""
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetSegmentPath() string {
    return "path-options"
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option" {
        for _, c := range pathOptions.PathOption {
            if pathOptions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption{}
        pathOptions.PathOption = append(pathOptions.PathOption, child)
        return &pathOptions.PathOption[len(pathOptions.PathOption)-1]
    }
    return nil
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptions.PathOption {
        children[pathOptions.PathOption[i].GetSegmentPath()] = &pathOptions.PathOption[i]
    }
    return children
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetYangName() string { return "path-options" }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) SetParent(parent types.Entity) { pathOptions.parent = parent }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetParent() types.Entity { return pathOptions.parent }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetParentYangName() string { return "path-option-protect" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
// A tunnel path option
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption. This attribute
    // is mandatory.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535. The default value is 1.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Deprecated. The type is interface{} with range: -2147483648..2147483647.
    // The default value is 0.
    PathProperty interface{}

    // Deprecated. The type is string with pattern: [a-zA-Z0-9./-]+.
    Interface interface{}

    // Deprecated. The type is interface{} with range: -2147483648..2147483647.
    // The default value is 0.
    OutputLabel interface{}

    // Deprecated. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    Destination interface{}

    // Lockdown properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Lockdown interface{}

    // Verbatim properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Verbatim interface{}

    // PCE properties. The type is MplsTePathOptionProperty. The default value is
    // none.
    Pce interface{}

    // PCE address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    PceAddress interface{}

    // IGP type. The type is MplsTeIgpProtocol. The default value is none.
    IgpType interface{}

    // IGP instance name. The type is string with length: 1..40.
    IgpInstance interface{}

    // IGP area ID in integer format. The type is interface{} with range:
    // -2147483648..2147483647. The default value is 0.
    IgpArea interface{}

    // IGP area ID in IP address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    IgpAreaIpAddressId interface{}

    // Path option attribute set name. The type is string.
    PathOptionAttributeSetName interface{}

    // Preference level of the protecting explicit path. Leave unset in order to
    // not use an explicit protecting path. The type is interface{} with range:
    // 1..1000. The default value is 1.
    ProtectedByPreferenceLevel interface{}

    // SegmentRouting properties. The type is MplsTePathOptionProperty. The
    // default value is none.
    SegmentRouting interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetFilter() yfilter.YFilter { return pathOption.YFilter }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) SetFilter(yf yfilter.YFilter) { pathOption.YFilter = yf }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetGoName(yname string) string {
    if yname == "preference-level" { return "PreferenceLevel" }
    if yname == "path-type" { return "PathType" }
    if yname == "path-id" { return "PathId" }
    if yname == "path-name" { return "PathName" }
    if yname == "path-property" { return "PathProperty" }
    if yname == "interface" { return "Interface" }
    if yname == "output-label" { return "OutputLabel" }
    if yname == "destination" { return "Destination" }
    if yname == "lockdown" { return "Lockdown" }
    if yname == "verbatim" { return "Verbatim" }
    if yname == "pce" { return "Pce" }
    if yname == "pce-address" { return "PceAddress" }
    if yname == "igp-type" { return "IgpType" }
    if yname == "igp-instance" { return "IgpInstance" }
    if yname == "igp-area" { return "IgpArea" }
    if yname == "igp-area-ip-address-id" { return "IgpAreaIpAddressId" }
    if yname == "path-option-attribute-set-name" { return "PathOptionAttributeSetName" }
    if yname == "protected-by-preference-level" { return "ProtectedByPreferenceLevel" }
    if yname == "segment-routing" { return "SegmentRouting" }
    return ""
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetSegmentPath() string {
    return "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["preference-level"] = pathOption.PreferenceLevel
    leafs["path-type"] = pathOption.PathType
    leafs["path-id"] = pathOption.PathId
    leafs["path-name"] = pathOption.PathName
    leafs["path-property"] = pathOption.PathProperty
    leafs["interface"] = pathOption.Interface
    leafs["output-label"] = pathOption.OutputLabel
    leafs["destination"] = pathOption.Destination
    leafs["lockdown"] = pathOption.Lockdown
    leafs["verbatim"] = pathOption.Verbatim
    leafs["pce"] = pathOption.Pce
    leafs["pce-address"] = pathOption.PceAddress
    leafs["igp-type"] = pathOption.IgpType
    leafs["igp-instance"] = pathOption.IgpInstance
    leafs["igp-area"] = pathOption.IgpArea
    leafs["igp-area-ip-address-id"] = pathOption.IgpAreaIpAddressId
    leafs["path-option-attribute-set-name"] = pathOption.PathOptionAttributeSetName
    leafs["protected-by-preference-level"] = pathOption.ProtectedByPreferenceLevel
    leafs["segment-routing"] = pathOption.SegmentRouting
    return leafs
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetBundleName() string { return "cisco_ios_xr" }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetYangName() string { return "path-option" }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) SetParent(parent types.Entity) { pathOption.parent = parent }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetParent() types.Entity { return pathOption.parent }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetParentYangName() string { return "path-options" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional
// Tunnel Interface Bidirectional configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has bidirectional enabled on it or not. The type is
    // interface{}.
    Enabled interface{}

    // Association Corouted Type.
    AssociationCoroutedType InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType

    // Association ID, Source IP Address, and Global ID.
    AssociationParameters InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetFilter() yfilter.YFilter { return bidirectional.YFilter }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) SetFilter(yf yfilter.YFilter) { bidirectional.YFilter = yf }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetGoName(yname string) string {
    if yname == "enabled" { return "Enabled" }
    if yname == "association-corouted-type" { return "AssociationCoroutedType" }
    if yname == "association-parameters" { return "AssociationParameters" }
    return ""
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetSegmentPath() string {
    return "bidirectional"
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "association-corouted-type" {
        return &bidirectional.AssociationCoroutedType
    }
    if childYangName == "association-parameters" {
        return &bidirectional.AssociationParameters
    }
    return nil
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["association-corouted-type"] = &bidirectional.AssociationCoroutedType
    children["association-parameters"] = &bidirectional.AssociationParameters
    return children
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enabled"] = bidirectional.Enabled
    return leafs
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetBundleName() string { return "cisco_ios_xr" }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetYangName() string { return "bidirectional" }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) SetParent(parent types.Entity) { bidirectional.parent = parent }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetParent() types.Entity { return bidirectional.parent }

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType
// Association Corouted Type
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has LSP Wrap protectionenabled on it or
    // not. The type is interface{}.
    WrapProtectionEnable interface{}

    // Controls whether association type is co-routed. The type is interface{}.
    Enable interface{}

    // Tunnel Fault OAM.
    FaultOam InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetFilter() yfilter.YFilter { return associationCoroutedType.YFilter }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) SetFilter(yf yfilter.YFilter) { associationCoroutedType.YFilter = yf }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetGoName(yname string) string {
    if yname == "wrap-protection-enable" { return "WrapProtectionEnable" }
    if yname == "enable" { return "Enable" }
    if yname == "fault-oam" { return "FaultOam" }
    return ""
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetSegmentPath() string {
    return "association-corouted-type"
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fault-oam" {
        return &associationCoroutedType.FaultOam
    }
    return nil
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fault-oam"] = &associationCoroutedType.FaultOam
    return children
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wrap-protection-enable"] = associationCoroutedType.WrapProtectionEnable
    leafs["enable"] = associationCoroutedType.Enable
    return leafs
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetBundleName() string { return "cisco_ios_xr" }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetYangName() string { return "association-corouted-type" }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) SetParent(parent types.Entity) { associationCoroutedType.parent = parent }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetParent() types.Entity { return associationCoroutedType.parent }

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetParentYangName() string { return "bidirectional" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
// Tunnel Fault OAM
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has fault OAM enabled on it or not. The
    // type is interface{}.
    Enable interface{}
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetFilter() yfilter.YFilter { return faultOam.YFilter }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) SetFilter(yf yfilter.YFilter) { faultOam.YFilter = yf }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetSegmentPath() string {
    return "fault-oam"
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = faultOam.Enable
    return leafs
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetBundleName() string { return "cisco_ios_xr" }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetYangName() string { return "fault-oam" }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) SetParent(parent types.Entity) { faultOam.parent = parent }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetParent() types.Entity { return faultOam.parent }

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetParentYangName() string { return "association-corouted-type" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
// Association ID, Source IP Address, and Global
// ID
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association ID. The type is interface{} with range: 0..65535. This
    // attribute is mandatory.
    AssociationId interface{}

    // Association Source IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    AssociationSourceAddress interface{}

    // Is Association Global ID Configured. The type is bool.
    AssociationIsGlobalIdConfigured interface{}

    // Association Global ID. The type is interface{} with range: 0..4294967295.
    AssociationGlobalId interface{}
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetFilter() yfilter.YFilter { return associationParameters.YFilter }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) SetFilter(yf yfilter.YFilter) { associationParameters.YFilter = yf }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetGoName(yname string) string {
    if yname == "association-id" { return "AssociationId" }
    if yname == "association-source-address" { return "AssociationSourceAddress" }
    if yname == "association-is-global-id-configured" { return "AssociationIsGlobalIdConfigured" }
    if yname == "association-global-id" { return "AssociationGlobalId" }
    return ""
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetSegmentPath() string {
    return "association-parameters"
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["association-id"] = associationParameters.AssociationId
    leafs["association-source-address"] = associationParameters.AssociationSourceAddress
    leafs["association-is-global-id-configured"] = associationParameters.AssociationIsGlobalIdConfigured
    leafs["association-global-id"] = associationParameters.AssociationGlobalId
    return leafs
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetBundleName() string { return "cisco_ios_xr" }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetYangName() string { return "association-parameters" }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) SetParent(parent types.Entity) { associationParameters.parent = parent }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetParent() types.Entity { return associationParameters.parent }

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetParentYangName() string { return "bidirectional" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode
// Performs admin operations on the optical tunnel
// interface
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Performs signalling operation to deactivate optical tunnel. The type is
    // interface{}.
    DeactivateTunnel interface{}
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetFilter() yfilter.YFilter { return adminMode.YFilter }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) SetFilter(yf yfilter.YFilter) { adminMode.YFilter = yf }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetGoName(yname string) string {
    if yname == "deactivate-tunnel" { return "DeactivateTunnel" }
    return ""
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetSegmentPath() string {
    return "admin-mode"
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["deactivate-tunnel"] = adminMode.DeactivateTunnel
    return leafs
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetBundleName() string { return "cisco_ios_xr" }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetYangName() string { return "admin-mode" }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) SetParent(parent types.Entity) { adminMode.parent = parent }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetParent() types.Entity { return adminMode.parent }

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching
// Specify tunnel LSPs switching capability
// descriptor
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify transit switching descriptor parameters.
    Transit InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit

    // Specify end point switching descriptor parameters.
    Endpoint InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetFilter() yfilter.YFilter { return switching.YFilter }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) SetFilter(yf yfilter.YFilter) { switching.YFilter = yf }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetGoName(yname string) string {
    if yname == "transit" { return "Transit" }
    if yname == "endpoint" { return "Endpoint" }
    return ""
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetSegmentPath() string {
    return "switching"
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transit" {
        return &switching.Transit
    }
    if childYangName == "endpoint" {
        return &switching.Endpoint
    }
    return nil
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transit"] = &switching.Transit
    children["endpoint"] = &switching.Endpoint
    return children
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetBundleName() string { return "cisco_ios_xr" }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetYangName() string { return "switching" }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) SetParent(parent types.Entity) { switching.parent = parent }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetParent() types.Entity { return switching.parent }

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit
// Specify transit switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetFilter() yfilter.YFilter { return transit.YFilter }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) SetFilter(yf yfilter.YFilter) { transit.YFilter = yf }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetGoName(yname string) string {
    if yname == "capability" { return "Capability" }
    if yname == "encoding" { return "Encoding" }
    return ""
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetSegmentPath() string {
    return "transit"
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["capability"] = transit.Capability
    leafs["encoding"] = transit.Encoding
    return leafs
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetBundleName() string { return "cisco_ios_xr" }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetYangName() string { return "transit" }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) SetParent(parent types.Entity) { transit.parent = parent }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetParent() types.Entity { return transit.parent }

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetParentYangName() string { return "switching" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
// Specify end point switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetFilter() yfilter.YFilter { return endpoint.YFilter }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) SetFilter(yf yfilter.YFilter) { endpoint.YFilter = yf }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetGoName(yname string) string {
    if yname == "capability" { return "Capability" }
    if yname == "encoding" { return "Encoding" }
    return ""
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetSegmentPath() string {
    return "endpoint"
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["capability"] = endpoint.Capability
    leafs["encoding"] = endpoint.Encoding
    return leafs
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetBundleName() string { return "cisco_ios_xr" }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetYangName() string { return "endpoint" }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) SetParent(parent types.Entity) { endpoint.parent = parent }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetParent() types.Entity { return endpoint.parent }

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetParentYangName() string { return "switching" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce
// PCE config
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Enable PCE Delegation. The type is interface{}.
    Delegation interface{}
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetFilter() yfilter.YFilter { return pce.YFilter }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) SetFilter(yf yfilter.YFilter) { pce.YFilter = yf }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "delegation" { return "Delegation" }
    return ""
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetSegmentPath() string {
    return "pce"
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pce.Enable
    leafs["delegation"] = pce.Delegation
    return leafs
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetBundleName() string { return "cisco_ios_xr" }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetYangName() string { return "pce" }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) SetParent(parent types.Entity) { pce.parent = parent }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetParent() types.Entity { return pce.parent }

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection
// Configure path selection properties
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CSPF tiebreaker to use in path calculation. The type is
    // MplsTePathSelectionTiebreaker.
    Tiebreaker interface{}

    // Path selection hop limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..255.
    PathSelectionHopLimit interface{}

    // Path selection cost limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..4294967295.
    PathSelectionCostLimit interface{}

    // Path invalidation configuration for this specific tunnel.
    Invalidation InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetFilter() yfilter.YFilter { return tunnelPathSelection.YFilter }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) SetFilter(yf yfilter.YFilter) { tunnelPathSelection.YFilter = yf }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    if yname == "path-selection-hop-limit" { return "PathSelectionHopLimit" }
    if yname == "path-selection-cost-limit" { return "PathSelectionCostLimit" }
    if yname == "invalidation" { return "Invalidation" }
    return ""
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetSegmentPath() string {
    return "tunnel-path-selection"
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalidation" {
        return &tunnelPathSelection.Invalidation
    }
    return nil
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalidation"] = &tunnelPathSelection.Invalidation
    return children
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker"] = tunnelPathSelection.Tiebreaker
    leafs["path-selection-hop-limit"] = tunnelPathSelection.PathSelectionHopLimit
    leafs["path-selection-cost-limit"] = tunnelPathSelection.PathSelectionCostLimit
    return leafs
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetYangName() string { return "tunnel-path-selection" }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) SetParent(parent types.Entity) { tunnelPathSelection.parent = parent }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetParent() types.Entity { return tunnelPathSelection.parent }

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
// Path invalidation configuration for this
// specific tunnel
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetFilter() yfilter.YFilter { return invalidation.YFilter }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) SetFilter(yf yfilter.YFilter) { invalidation.YFilter = yf }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetGoName(yname string) string {
    if yname == "path-invalidation-timeout" { return "PathInvalidationTimeout" }
    if yname == "path-invalidation-action" { return "PathInvalidationAction" }
    return ""
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetSegmentPath() string {
    return "invalidation"
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-invalidation-timeout"] = invalidation.PathInvalidationTimeout
    leafs["path-invalidation-action"] = invalidation.PathInvalidationAction
    return leafs
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetBundleName() string { return "cisco_ios_xr" }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetYangName() string { return "invalidation" }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) SetParent(parent types.Entity) { invalidation.parent = parent }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetParent() types.Entity { return invalidation.parent }

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetParentYangName() string { return "tunnel-path-selection" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth
// Tunnel Interface Auto-bandwidth configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable auto bandwidth underflow detection. The type is bool.
    UnderflowEnable interface{}

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has auto-bw enabled on it or not.The object must be set
    // before any other auto-bw configuration is supplied for the interface, and
    // must be the last auto-bw configuration object to be removed . The type is
    // bool.
    Enabled interface{}

    // Set the tunnel auto-bw application frequency in minutes. The type is
    // interface{} with range: 5..10080. Units are minute.
    ApplicationFrequency interface{}

    // Enable auto bandwidth overflow detection. The type is bool.
    OverflowEnable interface{}

    // Enable bandwidth collection only, no auto-bw adjustment. The type is
    // interface{}.
    CollectionOnly interface{}

    // Configuring the tunnel underflow detection.
    Underflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow

    // Configuring the tunnel overflow detection.
    Overflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow

    // Set min/max bandwidth auto-bw can apply on a tunnel.
    BandwidthLimits InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits

    // Set the bandwidth change threshold to trigger adjustment.
    AdjustmentThreshold InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetFilter() yfilter.YFilter { return autoBandwidth.YFilter }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) SetFilter(yf yfilter.YFilter) { autoBandwidth.YFilter = yf }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetGoName(yname string) string {
    if yname == "underflow-enable" { return "UnderflowEnable" }
    if yname == "enabled" { return "Enabled" }
    if yname == "application-frequency" { return "ApplicationFrequency" }
    if yname == "overflow-enable" { return "OverflowEnable" }
    if yname == "collection-only" { return "CollectionOnly" }
    if yname == "underflow" { return "Underflow" }
    if yname == "overflow" { return "Overflow" }
    if yname == "bandwidth-limits" { return "BandwidthLimits" }
    if yname == "adjustment-threshold" { return "AdjustmentThreshold" }
    return ""
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetSegmentPath() string {
    return "auto-bandwidth"
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "underflow" {
        return &autoBandwidth.Underflow
    }
    if childYangName == "overflow" {
        return &autoBandwidth.Overflow
    }
    if childYangName == "bandwidth-limits" {
        return &autoBandwidth.BandwidthLimits
    }
    if childYangName == "adjustment-threshold" {
        return &autoBandwidth.AdjustmentThreshold
    }
    return nil
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["underflow"] = &autoBandwidth.Underflow
    children["overflow"] = &autoBandwidth.Overflow
    children["bandwidth-limits"] = &autoBandwidth.BandwidthLimits
    children["adjustment-threshold"] = &autoBandwidth.AdjustmentThreshold
    return children
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["underflow-enable"] = autoBandwidth.UnderflowEnable
    leafs["enabled"] = autoBandwidth.Enabled
    leafs["application-frequency"] = autoBandwidth.ApplicationFrequency
    leafs["overflow-enable"] = autoBandwidth.OverflowEnable
    leafs["collection-only"] = autoBandwidth.CollectionOnly
    return leafs
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetYangName() string { return "auto-bandwidth" }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) SetParent(parent types.Entity) { autoBandwidth.parent = parent }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetParent() types.Entity { return autoBandwidth.parent }

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow
// Configuring the tunnel underflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an underflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    UnderflowThresholdPercent interface{}

    // Bandwidth change value to trigger an underflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    UnderflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    UnderflowThresholdLimit interface{}
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetFilter() yfilter.YFilter { return underflow.YFilter }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) SetFilter(yf yfilter.YFilter) { underflow.YFilter = yf }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetGoName(yname string) string {
    if yname == "underflow-threshold-percent" { return "UnderflowThresholdPercent" }
    if yname == "underflow-threshold-value" { return "UnderflowThresholdValue" }
    if yname == "underflow-threshold-limit" { return "UnderflowThresholdLimit" }
    return ""
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetSegmentPath() string {
    return "underflow"
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["underflow-threshold-percent"] = underflow.UnderflowThresholdPercent
    leafs["underflow-threshold-value"] = underflow.UnderflowThresholdValue
    leafs["underflow-threshold-limit"] = underflow.UnderflowThresholdLimit
    return leafs
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetBundleName() string { return "cisco_ios_xr" }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetYangName() string { return "underflow" }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) SetParent(parent types.Entity) { underflow.parent = parent }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetParent() types.Entity { return underflow.parent }

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetParentYangName() string { return "auto-bandwidth" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow
// Configuring the tunnel overflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an overflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    OverflowThresholdPercent interface{}

    // Bandwidth change value to trigger an overflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    OverflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    OverflowThresholdLimit interface{}
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetFilter() yfilter.YFilter { return overflow.YFilter }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) SetFilter(yf yfilter.YFilter) { overflow.YFilter = yf }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetGoName(yname string) string {
    if yname == "overflow-threshold-percent" { return "OverflowThresholdPercent" }
    if yname == "overflow-threshold-value" { return "OverflowThresholdValue" }
    if yname == "overflow-threshold-limit" { return "OverflowThresholdLimit" }
    return ""
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetSegmentPath() string {
    return "overflow"
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["overflow-threshold-percent"] = overflow.OverflowThresholdPercent
    leafs["overflow-threshold-value"] = overflow.OverflowThresholdValue
    leafs["overflow-threshold-limit"] = overflow.OverflowThresholdLimit
    return leafs
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetBundleName() string { return "cisco_ios_xr" }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetYangName() string { return "overflow" }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) SetParent(parent types.Entity) { overflow.parent = parent }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetParent() types.Entity { return overflow.parent }

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetParentYangName() string { return "auto-bandwidth" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits
// Set min/max bandwidth auto-bw can apply on a
// tunnel
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set minimum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMinLimit interface{}

    // Set maximum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMaxLimit interface{}
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetFilter() yfilter.YFilter { return bandwidthLimits.YFilter }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) SetFilter(yf yfilter.YFilter) { bandwidthLimits.YFilter = yf }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetGoName(yname string) string {
    if yname == "bandwidth-min-limit" { return "BandwidthMinLimit" }
    if yname == "bandwidth-max-limit" { return "BandwidthMaxLimit" }
    return ""
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetSegmentPath() string {
    return "bandwidth-limits"
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-min-limit"] = bandwidthLimits.BandwidthMinLimit
    leafs["bandwidth-max-limit"] = bandwidthLimits.BandwidthMaxLimit
    return leafs
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetYangName() string { return "bandwidth-limits" }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) SetParent(parent types.Entity) { bandwidthLimits.parent = parent }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetParent() types.Entity { return bandwidthLimits.parent }

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetParentYangName() string { return "auto-bandwidth" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold
// Set the bandwidth change threshold to trigger
// adjustment
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger adjustment. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    AdjustmentThresholdPercent interface{}

    // Bandwidth change value to trigger adjustment (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    AdjustmentThresholdValue interface{}
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetFilter() yfilter.YFilter { return adjustmentThreshold.YFilter }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) SetFilter(yf yfilter.YFilter) { adjustmentThreshold.YFilter = yf }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetGoName(yname string) string {
    if yname == "adjustment-threshold-percent" { return "AdjustmentThresholdPercent" }
    if yname == "adjustment-threshold-value" { return "AdjustmentThresholdValue" }
    return ""
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetSegmentPath() string {
    return "adjustment-threshold"
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjustment-threshold-percent"] = adjustmentThreshold.AdjustmentThresholdPercent
    leafs["adjustment-threshold-value"] = adjustmentThreshold.AdjustmentThresholdValue
    return leafs
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetYangName() string { return "adjustment-threshold" }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) SetParent(parent types.Entity) { adjustmentThreshold.parent = parent }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetParent() types.Entity { return adjustmentThreshold.parent }

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetParentYangName() string { return "auto-bandwidth" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetYangName() string { return "priority" }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetParent() types.Entity { return priority.parent }

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    LspSwitchOverChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Log tunnel record-route messages. The type is interface{}.
    RecordRouteMesssage interface{}

    // Enable BFD session state change alarm. The type is interface{}.
    BfdStateMessage interface{}

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetGoName(yname string) string {
    if yname == "lsp-switch-over-change-message" { return "LspSwitchOverChangeMessage" }
    if yname == "all" { return "All" }
    if yname == "record-route-messsage" { return "RecordRouteMesssage" }
    if yname == "bfd-state-message" { return "BfdStateMessage" }
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    return ""
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-switch-over-change-message"] = logging.LspSwitchOverChangeMessage
    leafs["all"] = logging.All
    leafs["record-route-messsage"] = logging.RecordRouteMesssage
    leafs["bfd-state-message"] = logging.BfdStateMessage
    leafs["bandwidth-change-message"] = logging.BandwidthChangeMessage
    leafs["reoptimize-attempts-message"] = logging.ReoptimizeAttemptsMessage
    leafs["reroute-messsage"] = logging.RerouteMesssage
    leafs["state-message"] = logging.StateMessage
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    leafs["reoptimized-message"] = logging.ReoptimizedMessage
    leafs["pcalc-failure-message"] = logging.PcalcFailureMessage
    return leafs
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetYangName() string { return "logging" }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetParent() types.Entity { return logging.parent }

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute
// Parameters for IGP routing over tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Announce tunnel to IGP.
    AutorouteAnnounce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce

    // Tunnel Autoroute Destination(s).
    Destinations InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetFilter() yfilter.YFilter { return autoroute.YFilter }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) SetFilter(yf yfilter.YFilter) { autoroute.YFilter = yf }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetGoName(yname string) string {
    if yname == "autoroute-announce" { return "AutorouteAnnounce" }
    if yname == "destinations" { return "Destinations" }
    return ""
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetSegmentPath() string {
    return "autoroute"
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "autoroute-announce" {
        return &autoroute.AutorouteAnnounce
    }
    if childYangName == "destinations" {
        return &autoroute.Destinations
    }
    return nil
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["autoroute-announce"] = &autoroute.AutorouteAnnounce
    children["destinations"] = &autoroute.Destinations
    return children
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetBundleName() string { return "cisco_ios_xr" }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetYangName() string { return "autoroute" }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) SetParent(parent types.Entity) { autoroute.parent = parent }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetParent() types.Entity { return autoroute.parent }

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce
// Announce tunnel to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable autoroute announce. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 autoroute announce also. The type
    // is interface{}.
    IncludeIpv6 interface{}

    // Exclude traffic on autorouted tunnel.
    ExcludeTraffic InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic

    // Specify MPLS tunnel metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetFilter() yfilter.YFilter { return autorouteAnnounce.YFilter }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) SetFilter(yf yfilter.YFilter) { autorouteAnnounce.YFilter = yf }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "include-ipv6" { return "IncludeIpv6" }
    if yname == "exclude-traffic" { return "ExcludeTraffic" }
    if yname == "metric" { return "Metric" }
    return ""
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetSegmentPath() string {
    return "autoroute-announce"
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-traffic" {
        return &autorouteAnnounce.ExcludeTraffic
    }
    if childYangName == "metric" {
        return &autorouteAnnounce.Metric
    }
    return nil
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["exclude-traffic"] = &autorouteAnnounce.ExcludeTraffic
    children["metric"] = &autorouteAnnounce.Metric
    return children
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = autorouteAnnounce.Enable
    leafs["include-ipv6"] = autorouteAnnounce.IncludeIpv6
    return leafs
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetBundleName() string { return "cisco_ios_xr" }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetYangName() string { return "autoroute-announce" }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) SetParent(parent types.Entity) { autorouteAnnounce.parent = parent }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetParent() types.Entity { return autorouteAnnounce.parent }

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetParentYangName() string { return "autoroute" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic
// Exclude traffic on autorouted tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude tunnel in IGP for SR prefixes. The type is interface{}.
    SegmentRouting interface{}
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetFilter() yfilter.YFilter { return excludeTraffic.YFilter }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) SetFilter(yf yfilter.YFilter) { excludeTraffic.YFilter = yf }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetGoName(yname string) string {
    if yname == "segment-routing" { return "SegmentRouting" }
    return ""
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetSegmentPath() string {
    return "exclude-traffic"
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["segment-routing"] = excludeTraffic.SegmentRouting
    return leafs
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetBundleName() string { return "cisco_ios_xr" }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetYangName() string { return "exclude-traffic" }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) SetParent(parent types.Entity) { excludeTraffic.parent = parent }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetParent() types.Entity { return excludeTraffic.parent }

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetParentYangName() string { return "autoroute-announce" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
// Specify MPLS tunnel metric
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autoroute tunnel metric type. The type is MplsTeAutorouteMetric.
    MetricType interface{}

    // The absolute metric value. The type is interface{} with range:
    // 1..2147483647.
    AbsoluteMetric interface{}

    // The value of the adjustment. The type is interface{} with range: -10..10.
    RelativeMetric interface{}

    // The constant metric value. The type is interface{} with range:
    // 1..2147483647.
    ConstantMetric interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetFilter() yfilter.YFilter { return metric.YFilter }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) SetFilter(yf yfilter.YFilter) { metric.YFilter = yf }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetGoName(yname string) string {
    if yname == "metric-type" { return "MetricType" }
    if yname == "absolute-metric" { return "AbsoluteMetric" }
    if yname == "relative-metric" { return "RelativeMetric" }
    if yname == "constant-metric" { return "ConstantMetric" }
    return ""
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetSegmentPath() string {
    return "metric"
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["metric-type"] = metric.MetricType
    leafs["absolute-metric"] = metric.AbsoluteMetric
    leafs["relative-metric"] = metric.RelativeMetric
    leafs["constant-metric"] = metric.ConstantMetric
    return leafs
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetBundleName() string { return "cisco_ios_xr" }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetYangName() string { return "metric" }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) SetParent(parent types.Entity) { metric.parent = parent }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetParent() types.Entity { return metric.parent }

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetParentYangName() string { return "autoroute-announce" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
// Tunnel Autoroute Destination(s)
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address to add in RIB. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination.
    Destination []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetFilter() yfilter.YFilter { return destinations.YFilter }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) SetFilter(yf yfilter.YFilter) { destinations.YFilter = yf }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetGoName(yname string) string {
    if yname == "destination" { return "Destination" }
    return ""
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetSegmentPath() string {
    return "destinations"
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination" {
        for _, c := range destinations.Destination {
            if destinations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination{}
        destinations.Destination = append(destinations.Destination, child)
        return &destinations.Destination[len(destinations.Destination)-1]
    }
    return nil
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destinations.Destination {
        children[destinations.Destination[i].GetSegmentPath()] = &destinations.Destination[i]
    }
    return children
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetBundleName() string { return "cisco_ios_xr" }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetYangName() string { return "destinations" }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) SetParent(parent types.Entity) { destinations.parent = parent }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetParent() types.Entity { return destinations.parent }

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetParentYangName() string { return "autoroute" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
// Destination address to add in RIB
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address of destination. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetSegmentPath() string {
    return "destination" + "[destination-address='" + fmt.Sprintf("%v", destination.DestinationAddress) + "']"
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = destination.DestinationAddress
    return leafs
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetYangName() string { return "destination" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetParent() types.Entity { return destination.parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetParentYangName() string { return "destinations" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses
// Policy classes for PBTS
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of Policy class. The type is slice of interface{} with range: 1..8.
    PolicyClass []interface{}
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetFilter() yfilter.YFilter { return policyClasses.YFilter }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) SetFilter(yf yfilter.YFilter) { policyClasses.YFilter = yf }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetGoName(yname string) string {
    if yname == "policy-class" { return "PolicyClass" }
    return ""
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetSegmentPath() string {
    return "policy-classes"
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policy-class"] = policyClasses.PolicyClass
    return leafs
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetBundleName() string { return "cisco_ios_xr" }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetYangName() string { return "policy-classes" }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) SetParent(parent types.Entity) { policyClasses.parent = parent }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetParent() types.Entity { return policyClasses.parent }

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetGoName(yname string) string {
    if yname == "bandwidth-protection" { return "BandwidthProtection" }
    if yname == "node-protection" { return "NodeProtection" }
    return ""
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-protection"] = fastReroute.BandwidthProtection
    leafs["node-protection"] = fastReroute.NodeProtection
    return leafs
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetParentYangName() string { return "tunnel-te-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel
// MPLS-TP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Transport profile node identifier in IPv4 address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Configure BFD parameters.
    Bfd InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd

    // Working LSP.
    WorkingLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp

    // Node identifier and optional global identifier and tunnel identifier at
    // destination.
    Destination InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination

    // Fault management.
    Fault InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault

    // Protect LSP.
    ProtectLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetFilter() yfilter.YFilter { return transportProfileTunnel.YFilter }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) SetFilter(yf yfilter.YFilter) { transportProfileTunnel.YFilter = yf }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "bfd" { return "Bfd" }
    if yname == "working-lsp" { return "WorkingLsp" }
    if yname == "destination" { return "Destination" }
    if yname == "fault" { return "Fault" }
    if yname == "protect-lsp" { return "ProtectLsp" }
    return ""
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd" {
        return &transportProfileTunnel.Bfd
    }
    if childYangName == "working-lsp" {
        return &transportProfileTunnel.WorkingLsp
    }
    if childYangName == "destination" {
        return &transportProfileTunnel.Destination
    }
    if childYangName == "fault" {
        return &transportProfileTunnel.Fault
    }
    if childYangName == "protect-lsp" {
        return &transportProfileTunnel.ProtectLsp
    }
    return nil
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd"] = &transportProfileTunnel.Bfd
    children["working-lsp"] = &transportProfileTunnel.WorkingLsp
    children["destination"] = &transportProfileTunnel.Destination
    children["fault"] = &transportProfileTunnel.Fault
    children["protect-lsp"] = &transportProfileTunnel.ProtectLsp
    return children
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = transportProfileTunnel.Source
    return leafs
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetYangName() string { return "transport-profile-tunnel" }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) SetParent(parent types.Entity) { transportProfileTunnel.parent = parent }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetParent() types.Entity { return transportProfileTunnel.parent }

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd
// Configure BFD parameters
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..10.
    DetectionMultiplier interface{}

    // Configure BFD parameters. The type is interface{}.
    Enable interface{}

    // Detect multiplier for standby transport profile LSP. The type is
    // interface{} with range: 2..10.
    MultiplierStandby interface{}

    // Hello interval, either in milli-seconds or in micro-seconds.
    MinInterval InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval

    // Hello interval for standby transport profile LSP, either in milli-seconds
    // or in micro-seconds.
    MinIntervalStandby InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "enable" { return "Enable" }
    if yname == "multiplier-standby" { return "MultiplierStandby" }
    if yname == "min-interval" { return "MinInterval" }
    if yname == "min-interval-standby" { return "MinIntervalStandby" }
    return ""
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-interval" {
        return &bfd.MinInterval
    }
    if childYangName == "min-interval-standby" {
        return &bfd.MinIntervalStandby
    }
    return nil
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-interval"] = &bfd.MinInterval
    children["min-interval-standby"] = &bfd.MinIntervalStandby
    return children
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["enable"] = bfd.Enable
    leafs["multiplier-standby"] = bfd.MultiplierStandby
    return leafs
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetYangName() string { return "bfd" }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetParentYangName() string { return "transport-profile-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval
// Hello interval, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalUs interface{}
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetFilter() yfilter.YFilter { return minInterval.YFilter }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) SetFilter(yf yfilter.YFilter) { minInterval.YFilter = yf }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetGoName(yname string) string {
    if yname == "interval-ms" { return "IntervalMs" }
    if yname == "interval-us" { return "IntervalUs" }
    return ""
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetSegmentPath() string {
    return "min-interval"
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval-ms"] = minInterval.IntervalMs
    leafs["interval-us"] = minInterval.IntervalUs
    return leafs
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetBundleName() string { return "cisco_ios_xr" }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetYangName() string { return "min-interval" }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) SetParent(parent types.Entity) { minInterval.parent = parent }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetParent() types.Entity { return minInterval.parent }

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetParentYangName() string { return "bfd" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
// Hello interval for standby transport profile
// LSP, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalStandbyMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalStandbyUs interface{}
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetFilter() yfilter.YFilter { return minIntervalStandby.YFilter }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) SetFilter(yf yfilter.YFilter) { minIntervalStandby.YFilter = yf }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetGoName(yname string) string {
    if yname == "interval-standby-ms" { return "IntervalStandbyMs" }
    if yname == "interval-standby-us" { return "IntervalStandbyUs" }
    return ""
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetSegmentPath() string {
    return "min-interval-standby"
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval-standby-ms"] = minIntervalStandby.IntervalStandbyMs
    leafs["interval-standby-us"] = minIntervalStandby.IntervalStandbyUs
    return leafs
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetBundleName() string { return "cisco_ios_xr" }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetYangName() string { return "min-interval-standby" }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) SetParent(parent types.Entity) { minIntervalStandby.parent = parent }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetParent() types.Entity { return minIntervalStandby.parent }

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetParentYangName() string { return "bfd" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp
// Working LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Incoming MPLS label of the working LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of working LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the working LSP. The type is interface{} with range:
    // 0..65535. The default value is 0.
    LspId interface{}

    // Outgoing MPLS label of the working LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetFilter() yfilter.YFilter { return workingLsp.YFilter }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) SetFilter(yf yfilter.YFilter) { workingLsp.YFilter = yf }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetGoName(yname string) string {
    if yname == "in-label" { return "InLabel" }
    if yname == "lockout" { return "Lockout" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetSegmentPath() string {
    return "working-lsp"
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "out-label" {
        return &workingLsp.OutLabel
    }
    return nil
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["out-label"] = &workingLsp.OutLabel
    return children
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-label"] = workingLsp.InLabel
    leafs["lockout"] = workingLsp.Lockout
    leafs["lsp-id"] = workingLsp.LspId
    return leafs
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetBundleName() string { return "cisco_ios_xr" }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetYangName() string { return "working-lsp" }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) SetParent(parent types.Entity) { workingLsp.parent = parent }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetParent() types.Entity { return workingLsp.parent }

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetParentYangName() string { return "transport-profile-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
// Outgoing MPLS label of the working LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetFilter() yfilter.YFilter { return outLabel.YFilter }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) SetFilter(yf yfilter.YFilter) { outLabel.YFilter = yf }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "link" { return "Link" }
    return ""
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetSegmentPath() string {
    return "out-label"
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = outLabel.Label
    leafs["link"] = outLabel.Link
    return leafs
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetBundleName() string { return "cisco_ios_xr" }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetYangName() string { return "out-label" }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) SetParent(parent types.Entity) { outLabel.parent = parent }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetParent() types.Entity { return outLabel.parent }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetParentYangName() string { return "working-lsp" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination
// Node identifier and optional global identifier
// and tunnel identifier at destination
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node identifier in IPv4 address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // Numeric global identifier. The type is interface{} with range: 1..65535.
    GlobalId interface{}

    // Numeric tunnel identifier. The type is interface{} with range: 0..65535.
    TunnelId interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "global-id" { return "GlobalId" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetSegmentPath() string {
    return "destination"
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = destination.NodeId
    leafs["global-id"] = destination.GlobalId
    leafs["tunnel-id"] = destination.TunnelId
    return leafs
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetYangName() string { return "destination" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetParent() types.Entity { return destination.parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetParentYangName() string { return "transport-profile-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault
// Fault management
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter transport profile tunnel fault configuration. The type is
    // interface{}.
    Enable interface{}

    // OAM events that trigger protection switching.
    ProtectionTrigger InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetFilter() yfilter.YFilter { return fault.YFilter }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) SetFilter(yf yfilter.YFilter) { fault.YFilter = yf }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "protection-trigger" { return "ProtectionTrigger" }
    return ""
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetSegmentPath() string {
    return "fault"
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protection-trigger" {
        return &fault.ProtectionTrigger
    }
    return nil
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protection-trigger"] = &fault.ProtectionTrigger
    return children
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = fault.Enable
    return leafs
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetBundleName() string { return "cisco_ios_xr" }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetYangName() string { return "fault" }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) SetParent(parent types.Entity) { fault.parent = parent }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetParent() types.Entity { return fault.parent }

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetParentYangName() string { return "transport-profile-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
// OAM events that trigger protection switching
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable protection switching due to LDI event. The type is bool.
    Ldi interface{}

    // Enable protection switching due to AIS event. The type is bool.
    Ais interface{}

    // Enable protection switching due to LKR event. The type is bool.
    Lkr interface{}
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetFilter() yfilter.YFilter { return protectionTrigger.YFilter }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) SetFilter(yf yfilter.YFilter) { protectionTrigger.YFilter = yf }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetGoName(yname string) string {
    if yname == "ldi" { return "Ldi" }
    if yname == "ais" { return "Ais" }
    if yname == "lkr" { return "Lkr" }
    return ""
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetSegmentPath() string {
    return "protection-trigger"
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldi"] = protectionTrigger.Ldi
    leafs["ais"] = protectionTrigger.Ais
    leafs["lkr"] = protectionTrigger.Lkr
    return leafs
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetBundleName() string { return "cisco_ios_xr" }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetYangName() string { return "protection-trigger" }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) SetParent(parent types.Entity) { protectionTrigger.parent = parent }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetParent() types.Entity { return protectionTrigger.parent }

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetParentYangName() string { return "fault" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
// Protect LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Incoming MPLS label of the protect LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of protect LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the protect LSP. The type is interface{} with range:
    // 0..65535. The default value is 1.
    LspId interface{}

    // Outgoing MPLS label of the protect LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetFilter() yfilter.YFilter { return protectLsp.YFilter }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) SetFilter(yf yfilter.YFilter) { protectLsp.YFilter = yf }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetGoName(yname string) string {
    if yname == "in-label" { return "InLabel" }
    if yname == "lockout" { return "Lockout" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetSegmentPath() string {
    return "protect-lsp"
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "out-label" {
        return &protectLsp.OutLabel
    }
    return nil
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["out-label"] = &protectLsp.OutLabel
    return children
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-label"] = protectLsp.InLabel
    leafs["lockout"] = protectLsp.Lockout
    leafs["lsp-id"] = protectLsp.LspId
    return leafs
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetBundleName() string { return "cisco_ios_xr" }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetYangName() string { return "protect-lsp" }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) SetParent(parent types.Entity) { protectLsp.parent = parent }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetParent() types.Entity { return protectLsp.parent }

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetParentYangName() string { return "transport-profile-tunnel" }

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
// Outgoing MPLS label of the protect LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetFilter() yfilter.YFilter { return outLabel.YFilter }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) SetFilter(yf yfilter.YFilter) { outLabel.YFilter = yf }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "link" { return "Link" }
    return ""
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetSegmentPath() string {
    return "out-label"
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = outLabel.Label
    leafs["link"] = outLabel.Link
    return leafs
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetBundleName() string { return "cisco_ios_xr" }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetYangName() string { return "out-label" }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) SetParent(parent types.Entity) { outLabel.parent = parent }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetParent() types.Entity { return outLabel.parent }

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetParentYangName() string { return "protect-lsp" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes
// MPLS P2MP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Record route used by individual P2MP S2L(s). The type is interface{}.
    RecordRoute interface{}

    // The name of the P2MP tunnel to be included in signalling messages. The type
    // is string with length: 1..254.
    SignalledName interface{}

    // Path selection configuration for this specific tunnel. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // P2MP tunnel ipv6 signalled payload. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    SignalledPayload interface{}

    // Specify P2MP tunnel can be fast-rerouted. The type is interface{}.
    FastReroute interface{}

    // Impose an explicit null bellow the TE label. The type is interface{}.
    ImposeExplicitNull interface{}

    // P2MP destination table.
    DestinationLeafs InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs

    // P2MP tunnel setup and hold priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority

    // P2MP tunnel new style affinity attributes table.
    NewStyleAffinities InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities

    // P2MP tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth

    // P2MP tunnel affinity and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetFilter() yfilter.YFilter { return mteTunnelAttributes.YFilter }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) SetFilter(yf yfilter.YFilter) { mteTunnelAttributes.YFilter = yf }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetGoName(yname string) string {
    if yname == "record-route" { return "RecordRoute" }
    if yname == "signalled-name" { return "SignalledName" }
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "signalled-payload" { return "SignalledPayload" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "impose-explicit-null" { return "ImposeExplicitNull" }
    if yname == "destination-leafs" { return "DestinationLeafs" }
    if yname == "priority" { return "Priority" }
    if yname == "new-style-affinities" { return "NewStyleAffinities" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "logging" { return "Logging" }
    return ""
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-leafs" {
        return &mteTunnelAttributes.DestinationLeafs
    }
    if childYangName == "priority" {
        return &mteTunnelAttributes.Priority
    }
    if childYangName == "new-style-affinities" {
        return &mteTunnelAttributes.NewStyleAffinities
    }
    if childYangName == "bandwidth" {
        return &mteTunnelAttributes.Bandwidth
    }
    if childYangName == "affinity-mask" {
        return &mteTunnelAttributes.AffinityMask
    }
    if childYangName == "logging" {
        return &mteTunnelAttributes.Logging
    }
    return nil
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-leafs"] = &mteTunnelAttributes.DestinationLeafs
    children["priority"] = &mteTunnelAttributes.Priority
    children["new-style-affinities"] = &mteTunnelAttributes.NewStyleAffinities
    children["bandwidth"] = &mteTunnelAttributes.Bandwidth
    children["affinity-mask"] = &mteTunnelAttributes.AffinityMask
    children["logging"] = &mteTunnelAttributes.Logging
    return children
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["record-route"] = mteTunnelAttributes.RecordRoute
    leafs["signalled-name"] = mteTunnelAttributes.SignalledName
    leafs["path-selection-metric"] = mteTunnelAttributes.PathSelectionMetric
    leafs["signalled-payload"] = mteTunnelAttributes.SignalledPayload
    leafs["fast-reroute"] = mteTunnelAttributes.FastReroute
    leafs["impose-explicit-null"] = mteTunnelAttributes.ImposeExplicitNull
    return leafs
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetYangName() string { return "mte-tunnel-attributes" }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) SetParent(parent types.Entity) { mteTunnelAttributes.parent = parent }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetParent() types.Entity { return mteTunnelAttributes.parent }

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs
// P2MP destination table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // P2MP destination leaf. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf.
    DestinationLeaf []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetFilter() yfilter.YFilter { return destinationLeafs.YFilter }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) SetFilter(yf yfilter.YFilter) { destinationLeafs.YFilter = yf }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetGoName(yname string) string {
    if yname == "destination-leaf" { return "DestinationLeaf" }
    return ""
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetSegmentPath() string {
    return "destination-leafs"
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-leaf" {
        for _, c := range destinationLeafs.DestinationLeaf {
            if destinationLeafs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf{}
        destinationLeafs.DestinationLeaf = append(destinationLeafs.DestinationLeaf, child)
        return &destinationLeafs.DestinationLeaf[len(destinationLeafs.DestinationLeaf)-1]
    }
    return nil
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destinationLeafs.DestinationLeaf {
        children[destinationLeafs.DestinationLeaf[i].GetSegmentPath()] = &destinationLeafs.DestinationLeaf[i]
    }
    return children
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetBundleName() string { return "cisco_ios_xr" }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetYangName() string { return "destination-leafs" }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) SetParent(parent types.Entity) { destinationLeafs.parent = parent }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetParent() types.Entity { return destinationLeafs.parent }

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
// P2MP destination leaf
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of P2MP destination. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Disables P2MP destination. The type is interface{}.
    DestinationDisable interface{}

    // Always set to true. The type is interface{}.
    Destination interface{}

    // Log tunnel destination s2l messages.
    S2LLogging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging

    // P2MP destination path-options attributes table.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetFilter() yfilter.YFilter { return destinationLeaf.YFilter }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) SetFilter(yf yfilter.YFilter) { destinationLeaf.YFilter = yf }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "destination-disable" { return "DestinationDisable" }
    if yname == "destination" { return "Destination" }
    if yname == "s2l-logging" { return "S2LLogging" }
    if yname == "path-options" { return "PathOptions" }
    return ""
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetSegmentPath() string {
    return "destination-leaf" + "[address='" + fmt.Sprintf("%v", destinationLeaf.Address) + "']"
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "s2l-logging" {
        return &destinationLeaf.S2LLogging
    }
    if childYangName == "path-options" {
        return &destinationLeaf.PathOptions
    }
    return nil
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["s2l-logging"] = &destinationLeaf.S2LLogging
    children["path-options"] = &destinationLeaf.PathOptions
    return children
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destinationLeaf.Address
    leafs["destination-disable"] = destinationLeaf.DestinationDisable
    leafs["destination"] = destinationLeaf.Destination
    return leafs
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetBundleName() string { return "cisco_ios_xr" }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetYangName() string { return "destination-leaf" }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) SetParent(parent types.Entity) { destinationLeaf.parent = parent }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetParent() types.Entity { return destinationLeaf.parent }

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetParentYangName() string { return "destination-leafs" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging
// Log tunnel destination s2l messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel destination s2l rereoute messages. The type is interface{}.
    S2LRerouteMesssage interface{}

    // Log tunnel destination s2l insufficient BW messages. The type is
    // interface{}.
    S2LInsufficientBwMesssage interface{}

    // Enable logging for destination s2l path-calculation failures. The type is
    // interface{}.
    S2LPcalcFailureMessage interface{}

    // Log tunnel destination s2l state messages. The type is interface{}.
    S2LStateMessage interface{}
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetFilter() yfilter.YFilter { return s2LLogging.YFilter }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) SetFilter(yf yfilter.YFilter) { s2LLogging.YFilter = yf }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetGoName(yname string) string {
    if yname == "s2l-reroute-messsage" { return "S2LRerouteMesssage" }
    if yname == "s2l-insufficient-bw-messsage" { return "S2LInsufficientBwMesssage" }
    if yname == "s2l-pcalc-failure-message" { return "S2LPcalcFailureMessage" }
    if yname == "s2l-state-message" { return "S2LStateMessage" }
    return ""
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetSegmentPath() string {
    return "s2l-logging"
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-reroute-messsage"] = s2LLogging.S2LRerouteMesssage
    leafs["s2l-insufficient-bw-messsage"] = s2LLogging.S2LInsufficientBwMesssage
    leafs["s2l-pcalc-failure-message"] = s2LLogging.S2LPcalcFailureMessage
    leafs["s2l-state-message"] = s2LLogging.S2LStateMessage
    return leafs
}

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetBundleName() string { return "cisco_ios_xr" }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetYangName() string { return "s2l-logging" }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) SetParent(parent types.Entity) { s2LLogging.parent = parent }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetParent() types.Entity { return s2LLogging.parent }

func (s2LLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2LLogging) GetParentYangName() string { return "destination-leaf" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
// P2MP destination path-options attributes
// table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // P2MP destination path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption.
    PathOption []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetFilter() yfilter.YFilter { return pathOptions.YFilter }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) SetFilter(yf yfilter.YFilter) { pathOptions.YFilter = yf }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetGoName(yname string) string {
    if yname == "path-option" { return "PathOption" }
    return ""
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetSegmentPath() string {
    return "path-options"
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option" {
        for _, c := range pathOptions.PathOption {
            if pathOptions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption{}
        pathOptions.PathOption = append(pathOptions.PathOption, child)
        return &pathOptions.PathOption[len(pathOptions.PathOption)-1]
    }
    return nil
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptions.PathOption {
        children[pathOptions.PathOption[i].GetSegmentPath()] = &pathOptions.PathOption[i]
    }
    return children
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetYangName() string { return "path-options" }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) SetParent(parent types.Entity) { pathOptions.parent = parent }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetParent() types.Entity { return pathOptions.parent }

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetParentYangName() string { return "destination-leaf" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
// P2MP destination path option
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Lockdown interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Verbatim interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetFilter() yfilter.YFilter { return pathOption.YFilter }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) SetFilter(yf yfilter.YFilter) { pathOption.YFilter = yf }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetGoName(yname string) string {
    if yname == "preference-level" { return "PreferenceLevel" }
    if yname == "path-type" { return "PathType" }
    if yname == "path-id" { return "PathId" }
    if yname == "path-name" { return "PathName" }
    if yname == "lockdown" { return "Lockdown" }
    if yname == "verbatim" { return "Verbatim" }
    return ""
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetSegmentPath() string {
    return "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["preference-level"] = pathOption.PreferenceLevel
    leafs["path-type"] = pathOption.PathType
    leafs["path-id"] = pathOption.PathId
    leafs["path-name"] = pathOption.PathName
    leafs["lockdown"] = pathOption.Lockdown
    leafs["verbatim"] = pathOption.Verbatim
    return leafs
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetBundleName() string { return "cisco_ios_xr" }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetYangName() string { return "path-option" }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) SetParent(parent types.Entity) { pathOption.parent = parent }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetParent() types.Entity { return pathOption.parent }

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetParentYangName() string { return "path-options" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority
// P2MP tunnel setup and hold priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetYangName() string { return "priority" }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetParent() types.Entity { return priority.parent }

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities
// P2MP tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity.
    NewStyleAffinity []InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetFilter() yfilter.YFilter { return newStyleAffinities.YFilter }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) SetFilter(yf yfilter.YFilter) { newStyleAffinities.YFilter = yf }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetGoName(yname string) string {
    if yname == "new-style-affinity" { return "NewStyleAffinity" }
    return ""
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetSegmentPath() string {
    return "new-style-affinities"
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity" {
        for _, c := range newStyleAffinities.NewStyleAffinity {
            if newStyleAffinities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity{}
        newStyleAffinities.NewStyleAffinity = append(newStyleAffinities.NewStyleAffinity, child)
        return &newStyleAffinities.NewStyleAffinity[len(newStyleAffinities.NewStyleAffinity)-1]
    }
    return nil
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinities.NewStyleAffinity {
        children[newStyleAffinities.NewStyleAffinity[i].GetSegmentPath()] = &newStyleAffinities.NewStyleAffinity[i]
    }
    return children
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetYangName() string { return "new-style-affinities" }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) SetParent(parent types.Entity) { newStyleAffinities.parent = parent }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetParent() types.Entity { return newStyleAffinities.parent }

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetFilter() yfilter.YFilter { return newStyleAffinity.YFilter }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) SetFilter(yf yfilter.YFilter) { newStyleAffinity.YFilter = yf }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetSegmentPath() string {
    return "new-style-affinity" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinity.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinity.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinity.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinity.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinity.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinity.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinity.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinity.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinity.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinity.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinity.Affinity10) + "']"
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinity.AffinityType
    leafs["affinity1"] = newStyleAffinity.Affinity1
    leafs["affinity2"] = newStyleAffinity.Affinity2
    leafs["affinity3"] = newStyleAffinity.Affinity3
    leafs["affinity4"] = newStyleAffinity.Affinity4
    leafs["affinity5"] = newStyleAffinity.Affinity5
    leafs["affinity6"] = newStyleAffinity.Affinity6
    leafs["affinity7"] = newStyleAffinity.Affinity7
    leafs["affinity8"] = newStyleAffinity.Affinity8
    leafs["affinity9"] = newStyleAffinity.Affinity9
    leafs["affinity10"] = newStyleAffinity.Affinity10
    return leafs
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetYangName() string { return "new-style-affinity" }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) SetParent(parent types.Entity) { newStyleAffinity.parent = parent }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetParent() types.Entity { return newStyleAffinity.parent }

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetParentYangName() string { return "new-style-affinities" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth
// P2MP tunnel bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask
// P2MP tunnel affinity and mask
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Log tunnel bandwidth change messages. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log all tunnel sub-LSP state messages. The type is interface{}.
    SubLspStateMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetGoName(yname string) string {
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "all" { return "All" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "sub-lsp-state-message" { return "SubLspStateMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    return ""
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    leafs["reoptimized-message"] = logging.ReoptimizedMessage
    leafs["bandwidth-change-message"] = logging.BandwidthChangeMessage
    leafs["all"] = logging.All
    leafs["pcalc-failure-message"] = logging.PcalcFailureMessage
    leafs["state-message"] = logging.StateMessage
    leafs["reoptimize-attempts-message"] = logging.ReoptimizeAttemptsMessage
    leafs["sub-lsp-state-message"] = logging.SubLspStateMessage
    leafs["reroute-messsage"] = logging.RerouteMesssage
    return leafs
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetYangName() string { return "logging" }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetParent() types.Entity { return logging.parent }

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetParentYangName() string { return "mte-tunnel-attributes" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization
// Frequency Synchronization interface
// configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable SSM on this source. The type is interface{}.
    SsmDisable interface{}

    // Set the time-of-day priority of this source. The type is interface{} with
    // range: 1..254. The default value is 100.
    TimeOfDayPriority interface{}

    // Assign this source as a selection input. The type is interface{}.
    SelectionInput interface{}

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}

    // Set the priority of this source. The type is interface{} with range:
    // 1..254. The default value is 100.
    Priority interface{}

    // Set the wait-to-restore time for this source. The type is interface{} with
    // range: 0..12. The default value is 5.
    WaitToRestoreTime interface{}

    // Set the input quality level.
    InputQualityLevel InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel

    // Set the output quality level.
    OutputQualityLevel InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetFilter() yfilter.YFilter { return ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.YFilter }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) SetFilter(yf yfilter.YFilter) { ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.YFilter = yf }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetGoName(yname string) string {
    if yname == "ssm-disable" { return "SsmDisable" }
    if yname == "time-of-day-priority" { return "TimeOfDayPriority" }
    if yname == "selection-input" { return "SelectionInput" }
    if yname == "enable" { return "Enable" }
    if yname == "priority" { return "Priority" }
    if yname == "wait-to-restore-time" { return "WaitToRestoreTime" }
    if yname == "input-quality-level" { return "InputQualityLevel" }
    if yname == "output-quality-level" { return "OutputQualityLevel" }
    return ""
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetSegmentPath() string {
    return "Cisco-IOS-XR-ncs4k-freqsync-cfg:frequency-synchronization"
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input-quality-level" {
        return &ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.InputQualityLevel
    }
    if childYangName == "output-quality-level" {
        return &ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.OutputQualityLevel
    }
    return nil
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input-quality-level"] = &ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.InputQualityLevel
    children["output-quality-level"] = &ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.OutputQualityLevel
    return children
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ssm-disable"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.SsmDisable
    leafs["time-of-day-priority"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.TimeOfDayPriority
    leafs["selection-input"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.SelectionInput
    leafs["enable"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.Enable
    leafs["priority"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.Priority
    leafs["wait-to-restore-time"] = ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.WaitToRestoreTime
    return leafs
}

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetYangName() string { return "frequency-synchronization" }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) SetParent(parent types.Entity) { ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.parent = parent }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetParent() types.Entity { return ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization.parent }

func (ciscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel
// Set the input quality level
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetFilter() yfilter.YFilter { return inputQualityLevel.YFilter }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) SetFilter(yf yfilter.YFilter) { inputQualityLevel.YFilter = yf }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetGoName(yname string) string {
    if yname == "quality-level-option" { return "QualityLevelOption" }
    if yname == "exact-quality-level-value" { return "ExactQualityLevelValue" }
    if yname == "min-quality-level-value" { return "MinQualityLevelValue" }
    if yname == "max-quality-level-value" { return "MaxQualityLevelValue" }
    return ""
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetSegmentPath() string {
    return "input-quality-level"
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quality-level-option"] = inputQualityLevel.QualityLevelOption
    leafs["exact-quality-level-value"] = inputQualityLevel.ExactQualityLevelValue
    leafs["min-quality-level-value"] = inputQualityLevel.MinQualityLevelValue
    leafs["max-quality-level-value"] = inputQualityLevel.MaxQualityLevelValue
    return leafs
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetBundleName() string { return "cisco_ios_xr" }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetYangName() string { return "input-quality-level" }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) SetParent(parent types.Entity) { inputQualityLevel.parent = parent }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetParent() types.Entity { return inputQualityLevel.parent }

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_InputQualityLevel) GetParentYangName() string { return "frequency-synchronization" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel
// Set the output quality level
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetFilter() yfilter.YFilter { return outputQualityLevel.YFilter }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) SetFilter(yf yfilter.YFilter) { outputQualityLevel.YFilter = yf }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetGoName(yname string) string {
    if yname == "quality-level-option" { return "QualityLevelOption" }
    if yname == "exact-quality-level-value" { return "ExactQualityLevelValue" }
    if yname == "min-quality-level-value" { return "MinQualityLevelValue" }
    if yname == "max-quality-level-value" { return "MaxQualityLevelValue" }
    return ""
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetSegmentPath() string {
    return "output-quality-level"
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["quality-level-option"] = outputQualityLevel.QualityLevelOption
    leafs["exact-quality-level-value"] = outputQualityLevel.ExactQualityLevelValue
    leafs["min-quality-level-value"] = outputQualityLevel.MinQualityLevelValue
    leafs["max-quality-level-value"] = outputQualityLevel.MaxQualityLevelValue
    return leafs
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetBundleName() string { return "cisco_ios_xr" }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetYangName() string { return "output-quality-level" }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) SetParent(parent types.Entity) { outputQualityLevel.parent = parent }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetParent() types.Entity { return outputQualityLevel.parent }

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRNcs4KFreqsyncCfgFrequencySynchronization_OutputQualityLevel) GetParentYangName() string { return "frequency-synchronization" }

// InterfaceConfigurations_InterfaceConfiguration_Portmode
// Configure through port-mode
type InterfaceConfigurations_InterfaceConfiguration_Portmode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Select speed. The type is SpeedSel.
    SpeedSel interface{}

    // Select Fec. The type is FecSel.
    FecSel interface{}

    // Select Diff. The type is DiffSel.
    DiffSel interface{}
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetFilter() yfilter.YFilter { return portmode.YFilter }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) SetFilter(yf yfilter.YFilter) { portmode.YFilter = yf }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetGoName(yname string) string {
    if yname == "speed-sel" { return "SpeedSel" }
    if yname == "fec-sel" { return "FecSel" }
    if yname == "diff-sel" { return "DiffSel" }
    return ""
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetSegmentPath() string {
    return "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["speed-sel"] = portmode.SpeedSel
    leafs["fec-sel"] = portmode.FecSel
    leafs["diff-sel"] = portmode.DiffSel
    return leafs
}

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetBundleName() string { return "cisco_ios_xr" }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetYangName() string { return "portmode" }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) SetParent(parent types.Entity) { portmode.parent = parent }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetParent() types.Entity { return portmode.parent }

func (portmode *InterfaceConfigurations_InterfaceConfiguration_Portmode) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Pbr
// Interface PBR configuration
type InterfaceConfigurations_InterfaceConfiguration_Pbr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Class for subscriber ingress policy. The type is string.
    ServicePolicyIn interface{}

    // PBR service policy configuration.
    ServicePolicy InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetFilter() yfilter.YFilter { return pbr.YFilter }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) SetFilter(yf yfilter.YFilter) { pbr.YFilter = yf }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetGoName(yname string) string {
    if yname == "service-policy-in" { return "ServicePolicyIn" }
    if yname == "service-policy" { return "ServicePolicy" }
    return ""
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetSegmentPath() string {
    return "Cisco-IOS-XR-pbr-cfg:pbr"
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        return &pbr.ServicePolicy
    }
    return nil
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["service-policy"] = &pbr.ServicePolicy
    return children
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-in"] = pbr.ServicePolicyIn
    return leafs
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetBundleName() string { return "cisco_ios_xr" }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetYangName() string { return "pbr" }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) SetParent(parent types.Entity) { pbr.parent = parent }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetParent() types.Entity { return pbr.parent }

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy
// PBR service policy configuration
type InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ingress service policy. The type is string.
    Input interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetSegmentPath() string {
    return "service-policy"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["input"] = servicePolicy.Input
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicy) GetParentYangName() string { return "pbr" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement
// Configure pm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set STM threshold.
    StmHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24

    // set opr min threshold.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp

    // set Sonet threshold.
    SonetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15

    // Configure pm parameters of gfp 24 hour interval.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp

    // Configure pm parameters of 24 hour interval.
    EthernetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24

    // set opr min threshold.
    Minute15OtnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms

    // set Oc threshold.
    OcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24

    // set opr min threshold.
    EthernetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15

    // set HO_VC threshold.
    HoVcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24

    // Configure optics performance monitoring for 30 sec.
    Second30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30

    // Configure pm parameters of tcm's 24 hour interval.
    Hour24OtnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms

    // set STS threshold.
    StsMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15

    // Configure pm parameters of 24 hour interval.
    Hour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24

    // set HO_VC threshold.
    HoVcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15

    // set STS threshold.
    StsHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24

    // set STM threshold.
    StmMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15

    // set Sonet threshold.
    SonetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24

    // set opr min threshold.
    Minute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path

    // set OC threshold.
    OcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15

    // Configure ethernet performance monitoring for 30 sec.
    EthernetSecond30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30

    // Configure pm parameters of pathmonitor 24 hour interval.
    Hour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path

    // set opr min threshold.
    Minute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetFilter() yfilter.YFilter { return performanceManagement.YFilter }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) SetFilter(yf yfilter.YFilter) { performanceManagement.YFilter = yf }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetGoName(yname string) string {
    if yname == "stm-hour24" { return "StmHour24" }
    if yname == "minute15-gfp" { return "Minute15Gfp" }
    if yname == "sonet-minute15" { return "SonetMinute15" }
    if yname == "hour24-gfp" { return "Hour24Gfp" }
    if yname == "ethernet-hour24" { return "EthernetHour24" }
    if yname == "minute15otn-tcms" { return "Minute15OtnTcms" }
    if yname == "oc-hour24" { return "OcHour24" }
    if yname == "ethernet-minute15" { return "EthernetMinute15" }
    if yname == "ho-vc-hour24" { return "HoVcHour24" }
    if yname == "second30" { return "Second30" }
    if yname == "hour24otn-tcms" { return "Hour24OtnTcms" }
    if yname == "sts-minute15" { return "StsMinute15" }
    if yname == "hour24" { return "Hour24" }
    if yname == "ho-vc-minute15" { return "HoVcMinute15" }
    if yname == "sts-hour24" { return "StsHour24" }
    if yname == "stm-minute15" { return "StmMinute15" }
    if yname == "sonet-hour24" { return "SonetHour24" }
    if yname == "minute15-path" { return "Minute15Path" }
    if yname == "oc-minute15" { return "OcMinute15" }
    if yname == "ethernet-second30" { return "EthernetSecond30" }
    if yname == "hour24-path" { return "Hour24Path" }
    if yname == "minute15" { return "Minute15" }
    return ""
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetSegmentPath() string {
    return "Cisco-IOS-XR-pmengine-cfg:performance-management"
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-hour24" {
        return &performanceManagement.StmHour24
    }
    if childYangName == "minute15-gfp" {
        return &performanceManagement.Minute15Gfp
    }
    if childYangName == "sonet-minute15" {
        return &performanceManagement.SonetMinute15
    }
    if childYangName == "hour24-gfp" {
        return &performanceManagement.Hour24Gfp
    }
    if childYangName == "ethernet-hour24" {
        return &performanceManagement.EthernetHour24
    }
    if childYangName == "minute15otn-tcms" {
        return &performanceManagement.Minute15OtnTcms
    }
    if childYangName == "oc-hour24" {
        return &performanceManagement.OcHour24
    }
    if childYangName == "ethernet-minute15" {
        return &performanceManagement.EthernetMinute15
    }
    if childYangName == "ho-vc-hour24" {
        return &performanceManagement.HoVcHour24
    }
    if childYangName == "second30" {
        return &performanceManagement.Second30
    }
    if childYangName == "hour24otn-tcms" {
        return &performanceManagement.Hour24OtnTcms
    }
    if childYangName == "sts-minute15" {
        return &performanceManagement.StsMinute15
    }
    if childYangName == "hour24" {
        return &performanceManagement.Hour24
    }
    if childYangName == "ho-vc-minute15" {
        return &performanceManagement.HoVcMinute15
    }
    if childYangName == "sts-hour24" {
        return &performanceManagement.StsHour24
    }
    if childYangName == "stm-minute15" {
        return &performanceManagement.StmMinute15
    }
    if childYangName == "sonet-hour24" {
        return &performanceManagement.SonetHour24
    }
    if childYangName == "minute15-path" {
        return &performanceManagement.Minute15Path
    }
    if childYangName == "oc-minute15" {
        return &performanceManagement.OcMinute15
    }
    if childYangName == "ethernet-second30" {
        return &performanceManagement.EthernetSecond30
    }
    if childYangName == "hour24-path" {
        return &performanceManagement.Hour24Path
    }
    if childYangName == "minute15" {
        return &performanceManagement.Minute15
    }
    return nil
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stm-hour24"] = &performanceManagement.StmHour24
    children["minute15-gfp"] = &performanceManagement.Minute15Gfp
    children["sonet-minute15"] = &performanceManagement.SonetMinute15
    children["hour24-gfp"] = &performanceManagement.Hour24Gfp
    children["ethernet-hour24"] = &performanceManagement.EthernetHour24
    children["minute15otn-tcms"] = &performanceManagement.Minute15OtnTcms
    children["oc-hour24"] = &performanceManagement.OcHour24
    children["ethernet-minute15"] = &performanceManagement.EthernetMinute15
    children["ho-vc-hour24"] = &performanceManagement.HoVcHour24
    children["second30"] = &performanceManagement.Second30
    children["hour24otn-tcms"] = &performanceManagement.Hour24OtnTcms
    children["sts-minute15"] = &performanceManagement.StsMinute15
    children["hour24"] = &performanceManagement.Hour24
    children["ho-vc-minute15"] = &performanceManagement.HoVcMinute15
    children["sts-hour24"] = &performanceManagement.StsHour24
    children["stm-minute15"] = &performanceManagement.StmMinute15
    children["sonet-hour24"] = &performanceManagement.SonetHour24
    children["minute15-path"] = &performanceManagement.Minute15Path
    children["oc-minute15"] = &performanceManagement.OcMinute15
    children["ethernet-second30"] = &performanceManagement.EthernetSecond30
    children["hour24-path"] = &performanceManagement.Hour24Path
    children["minute15"] = &performanceManagement.Minute15
    return children
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetBundleName() string { return "cisco_ios_xr" }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetYangName() string { return "performance-management" }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) SetParent(parent types.Entity) { performanceManagement.parent = parent }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetParent() types.Entity { return performanceManagement.parent }

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmHour24Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetFilter() yfilter.YFilter { return stmHour24.YFilter }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) SetFilter(yf yfilter.YFilter) { stmHour24.YFilter = yf }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetGoName(yname string) string {
    if yname == "stm-hour24-stm" { return "StmHour24Stm" }
    return ""
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetSegmentPath() string {
    return "stm-hour24"
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-hour24-stm" {
        return &stmHour24.StmHour24Stm
    }
    return nil
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stm-hour24-stm"] = &stmHour24.StmHour24Stm
    return children
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetYangName() string { return "stm-hour24" }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) SetParent(parent types.Entity) { stmHour24.parent = parent }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetParent() types.Entity { return stmHour24.parent }

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmHour24StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports

    // Configure threshold on stm parameters.
    StmHour24StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetFilter() yfilter.YFilter { return stmHour24Stm.YFilter }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) SetFilter(yf yfilter.YFilter) { stmHour24Stm.YFilter = yf }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetGoName(yname string) string {
    if yname == "stm-hour24-stm-reports" { return "StmHour24StmReports" }
    if yname == "stm-hour24-stm-thresholds" { return "StmHour24StmThresholds" }
    return ""
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetSegmentPath() string {
    return "stm-hour24-stm"
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-hour24-stm-reports" {
        return &stmHour24Stm.StmHour24StmReports
    }
    if childYangName == "stm-hour24-stm-thresholds" {
        return &stmHour24Stm.StmHour24StmThresholds
    }
    return nil
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stm-hour24-stm-reports"] = &stmHour24Stm.StmHour24StmReports
    children["stm-hour24-stm-thresholds"] = &stmHour24Stm.StmHour24StmThresholds
    return children
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetYangName() string { return "stm-hour24-stm" }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) SetParent(parent types.Entity) { stmHour24Stm.parent = parent }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetParent() types.Entity { return stmHour24Stm.parent }

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetParentYangName() string { return "stm-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport.
    StmHour24StmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetFilter() yfilter.YFilter { return stmHour24StmReports.YFilter }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) SetFilter(yf yfilter.YFilter) { stmHour24StmReports.YFilter = yf }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetGoName(yname string) string {
    if yname == "stm-hour24-stm-report" { return "StmHour24StmReport" }
    return ""
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetSegmentPath() string {
    return "stm-hour24-stm-reports"
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-hour24-stm-report" {
        for _, c := range stmHour24StmReports.StmHour24StmReport {
            if stmHour24StmReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport{}
        stmHour24StmReports.StmHour24StmReport = append(stmHour24StmReports.StmHour24StmReport, child)
        return &stmHour24StmReports.StmHour24StmReport[len(stmHour24StmReports.StmHour24StmReport)-1]
    }
    return nil
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stmHour24StmReports.StmHour24StmReport {
        children[stmHour24StmReports.StmHour24StmReport[i].GetSegmentPath()] = &stmHour24StmReports.StmHour24StmReport[i]
    }
    return children
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetYangName() string { return "stm-hour24-stm-reports" }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) SetParent(parent types.Entity) { stmHour24StmReports.parent = parent }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetParent() types.Entity { return stmHour24StmReports.parent }

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetParentYangName() string { return "stm-hour24-stm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetFilter() yfilter.YFilter { return stmHour24StmReport.YFilter }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) SetFilter(yf yfilter.YFilter) { stmHour24StmReport.YFilter = yf }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetGoName(yname string) string {
    if yname == "stm-report" { return "StmReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetSegmentPath() string {
    return "stm-hour24-stm-report" + "[stm-report='" + fmt.Sprintf("%v", stmHour24StmReport.StmReport) + "']"
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stm-report"] = stmHour24StmReport.StmReport
    leafs["enable"] = stmHour24StmReport.Enable
    return leafs
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetYangName() string { return "stm-hour24-stm-report" }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) SetParent(parent types.Entity) { stmHour24StmReport.parent = parent }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetParent() types.Entity { return stmHour24StmReport.parent }

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetParentYangName() string { return "stm-hour24-stm-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold.
    StmHour24StmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetFilter() yfilter.YFilter { return stmHour24StmThresholds.YFilter }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) SetFilter(yf yfilter.YFilter) { stmHour24StmThresholds.YFilter = yf }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetGoName(yname string) string {
    if yname == "stm-hour24-stm-threshold" { return "StmHour24StmThreshold" }
    return ""
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetSegmentPath() string {
    return "stm-hour24-stm-thresholds"
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-hour24-stm-threshold" {
        for _, c := range stmHour24StmThresholds.StmHour24StmThreshold {
            if stmHour24StmThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold{}
        stmHour24StmThresholds.StmHour24StmThreshold = append(stmHour24StmThresholds.StmHour24StmThreshold, child)
        return &stmHour24StmThresholds.StmHour24StmThreshold[len(stmHour24StmThresholds.StmHour24StmThreshold)-1]
    }
    return nil
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stmHour24StmThresholds.StmHour24StmThreshold {
        children[stmHour24StmThresholds.StmHour24StmThreshold[i].GetSegmentPath()] = &stmHour24StmThresholds.StmHour24StmThreshold[i]
    }
    return children
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetYangName() string { return "stm-hour24-stm-thresholds" }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) SetParent(parent types.Entity) { stmHour24StmThresholds.parent = parent }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetParent() types.Entity { return stmHour24StmThresholds.parent }

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetParentYangName() string { return "stm-hour24-stm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetFilter() yfilter.YFilter { return stmHour24StmThreshold.YFilter }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) SetFilter(yf yfilter.YFilter) { stmHour24StmThreshold.YFilter = yf }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetGoName(yname string) string {
    if yname == "stm-threshold" { return "StmThreshold" }
    if yname == "stm-threshold-value" { return "StmThresholdValue" }
    return ""
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetSegmentPath() string {
    return "stm-hour24-stm-threshold" + "[stm-threshold='" + fmt.Sprintf("%v", stmHour24StmThreshold.StmThreshold) + "']"
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stm-threshold"] = stmHour24StmThreshold.StmThreshold
    leafs["stm-threshold-value"] = stmHour24StmThreshold.StmThresholdValue
    return leafs
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetYangName() string { return "stm-hour24-stm-threshold" }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) SetParent(parent types.Entity) { stmHour24StmThreshold.parent = parent }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetParent() types.Entity { return stmHour24StmThreshold.parent }

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetParentYangName() string { return "stm-hour24-stm-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetFilter() yfilter.YFilter { return minute15Gfp.YFilter }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) SetFilter(yf yfilter.YFilter) { minute15Gfp.YFilter = yf }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetGoName(yname string) string {
    if yname == "minute15-gfp" { return "Minute15Gfp" }
    return ""
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetSegmentPath() string {
    return "minute15-gfp"
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-gfp" {
        return &minute15Gfp.Minute15Gfp
    }
    return nil
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-gfp"] = &minute15Gfp.Minute15Gfp
    return children
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetYangName() string { return "minute15-gfp" }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) SetParent(parent types.Entity) { minute15Gfp.parent = parent }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetParent() types.Entity { return minute15Gfp.parent }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Minute15GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports

    // Configure threshold on gfp parameters.
    Minute15GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetFilter() yfilter.YFilter { return minute15Gfp.YFilter }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) SetFilter(yf yfilter.YFilter) { minute15Gfp.YFilter = yf }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetGoName(yname string) string {
    if yname == "minute15-gfp-reports" { return "Minute15GfpReports" }
    if yname == "minute15-gfp-thresholds" { return "Minute15GfpThresholds" }
    return ""
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetSegmentPath() string {
    return "minute15-gfp"
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-gfp-reports" {
        return &minute15Gfp.Minute15GfpReports
    }
    if childYangName == "minute15-gfp-thresholds" {
        return &minute15Gfp.Minute15GfpThresholds
    }
    return nil
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-gfp-reports"] = &minute15Gfp.Minute15GfpReports
    children["minute15-gfp-thresholds"] = &minute15Gfp.Minute15GfpThresholds
    return children
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetYangName() string { return "minute15-gfp" }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) SetParent(parent types.Entity) { minute15Gfp.parent = parent }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetParent() types.Entity { return minute15Gfp.parent }

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetParentYangName() string { return "minute15-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport.
    Minute15GfpReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetFilter() yfilter.YFilter { return minute15GfpReports.YFilter }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) SetFilter(yf yfilter.YFilter) { minute15GfpReports.YFilter = yf }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetGoName(yname string) string {
    if yname == "minute15-gfp-report" { return "Minute15GfpReport" }
    return ""
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetSegmentPath() string {
    return "minute15-gfp-reports"
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-gfp-report" {
        for _, c := range minute15GfpReports.Minute15GfpReport {
            if minute15GfpReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport{}
        minute15GfpReports.Minute15GfpReport = append(minute15GfpReports.Minute15GfpReport, child)
        return &minute15GfpReports.Minute15GfpReport[len(minute15GfpReports.Minute15GfpReport)-1]
    }
    return nil
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15GfpReports.Minute15GfpReport {
        children[minute15GfpReports.Minute15GfpReport[i].GetSegmentPath()] = &minute15GfpReports.Minute15GfpReport[i]
    }
    return children
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetYangName() string { return "minute15-gfp-reports" }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) SetParent(parent types.Entity) { minute15GfpReports.parent = parent }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetParent() types.Entity { return minute15GfpReports.parent }

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetParentYangName() string { return "minute15-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetFilter() yfilter.YFilter { return minute15GfpReport.YFilter }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) SetFilter(yf yfilter.YFilter) { minute15GfpReport.YFilter = yf }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetGoName(yname string) string {
    if yname == "gfp-report" { return "GfpReport" }
    return ""
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetSegmentPath() string {
    return "minute15-gfp-report" + "[gfp-report='" + fmt.Sprintf("%v", minute15GfpReport.GfpReport) + "']"
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gfp-report"] = minute15GfpReport.GfpReport
    return leafs
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetYangName() string { return "minute15-gfp-report" }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) SetParent(parent types.Entity) { minute15GfpReport.parent = parent }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetParent() types.Entity { return minute15GfpReport.parent }

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetParentYangName() string { return "minute15-gfp-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold.
    Minute15GfpThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetFilter() yfilter.YFilter { return minute15GfpThresholds.YFilter }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) SetFilter(yf yfilter.YFilter) { minute15GfpThresholds.YFilter = yf }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetGoName(yname string) string {
    if yname == "minute15-gfp-threshold" { return "Minute15GfpThreshold" }
    return ""
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetSegmentPath() string {
    return "minute15-gfp-thresholds"
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-gfp-threshold" {
        for _, c := range minute15GfpThresholds.Minute15GfpThreshold {
            if minute15GfpThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold{}
        minute15GfpThresholds.Minute15GfpThreshold = append(minute15GfpThresholds.Minute15GfpThreshold, child)
        return &minute15GfpThresholds.Minute15GfpThreshold[len(minute15GfpThresholds.Minute15GfpThreshold)-1]
    }
    return nil
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15GfpThresholds.Minute15GfpThreshold {
        children[minute15GfpThresholds.Minute15GfpThreshold[i].GetSegmentPath()] = &minute15GfpThresholds.Minute15GfpThreshold[i]
    }
    return children
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetYangName() string { return "minute15-gfp-thresholds" }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) SetParent(parent types.Entity) { minute15GfpThresholds.parent = parent }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetParent() types.Entity { return minute15GfpThresholds.parent }

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetParentYangName() string { return "minute15-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    GfpThresholdValue interface{}
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetFilter() yfilter.YFilter { return minute15GfpThreshold.YFilter }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) SetFilter(yf yfilter.YFilter) { minute15GfpThreshold.YFilter = yf }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetGoName(yname string) string {
    if yname == "gfp-threshold" { return "GfpThreshold" }
    if yname == "gfp-threshold-value" { return "GfpThresholdValue" }
    return ""
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetSegmentPath() string {
    return "minute15-gfp-threshold" + "[gfp-threshold='" + fmt.Sprintf("%v", minute15GfpThreshold.GfpThreshold) + "']"
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gfp-threshold"] = minute15GfpThreshold.GfpThreshold
    leafs["gfp-threshold-value"] = minute15GfpThreshold.GfpThresholdValue
    return leafs
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetYangName() string { return "minute15-gfp-threshold" }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) SetParent(parent types.Entity) { minute15GfpThreshold.parent = parent }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetParent() types.Entity { return minute15GfpThreshold.parent }

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetParentYangName() string { return "minute15-gfp-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path

    // Configure ocn performance monitoring.
    SonetMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetFilter() yfilter.YFilter { return sonetMinute15.YFilter }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) SetFilter(yf yfilter.YFilter) { sonetMinute15.YFilter = yf }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetGoName(yname string) string {
    if yname == "sonet-minute15-path" { return "SonetMinute15Path" }
    if yname == "sonet-minute15-ocn" { return "SonetMinute15Ocn" }
    return ""
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetSegmentPath() string {
    return "sonet-minute15"
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-path" {
        return &sonetMinute15.SonetMinute15Path
    }
    if childYangName == "sonet-minute15-ocn" {
        return &sonetMinute15.SonetMinute15Ocn
    }
    return nil
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-minute15-path"] = &sonetMinute15.SonetMinute15Path
    children["sonet-minute15-ocn"] = &sonetMinute15.SonetMinute15Ocn
    return children
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetYangName() string { return "sonet-minute15" }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) SetParent(parent types.Entity) { sonetMinute15.parent = parent }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetParent() types.Entity { return sonetMinute15.parent }

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    SonetMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports

    // Configure threshold on Path parameters.
    SonetMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetFilter() yfilter.YFilter { return sonetMinute15Path.YFilter }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) SetFilter(yf yfilter.YFilter) { sonetMinute15Path.YFilter = yf }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetGoName(yname string) string {
    if yname == "sonet-minute15-path-reports" { return "SonetMinute15PathReports" }
    if yname == "sonet-minute15-path-thresholds" { return "SonetMinute15PathThresholds" }
    return ""
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetSegmentPath() string {
    return "sonet-minute15-path"
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-path-reports" {
        return &sonetMinute15Path.SonetMinute15PathReports
    }
    if childYangName == "sonet-minute15-path-thresholds" {
        return &sonetMinute15Path.SonetMinute15PathThresholds
    }
    return nil
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-minute15-path-reports"] = &sonetMinute15Path.SonetMinute15PathReports
    children["sonet-minute15-path-thresholds"] = &sonetMinute15Path.SonetMinute15PathThresholds
    return children
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetYangName() string { return "sonet-minute15-path" }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) SetParent(parent types.Entity) { sonetMinute15Path.parent = parent }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetParent() types.Entity { return sonetMinute15Path.parent }

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetParentYangName() string { return "sonet-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport.
    SonetMinute15PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetFilter() yfilter.YFilter { return sonetMinute15PathReports.YFilter }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) SetFilter(yf yfilter.YFilter) { sonetMinute15PathReports.YFilter = yf }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetGoName(yname string) string {
    if yname == "sonet-minute15-path-report" { return "SonetMinute15PathReport" }
    return ""
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetSegmentPath() string {
    return "sonet-minute15-path-reports"
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-path-report" {
        for _, c := range sonetMinute15PathReports.SonetMinute15PathReport {
            if sonetMinute15PathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport{}
        sonetMinute15PathReports.SonetMinute15PathReport = append(sonetMinute15PathReports.SonetMinute15PathReport, child)
        return &sonetMinute15PathReports.SonetMinute15PathReport[len(sonetMinute15PathReports.SonetMinute15PathReport)-1]
    }
    return nil
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetMinute15PathReports.SonetMinute15PathReport {
        children[sonetMinute15PathReports.SonetMinute15PathReport[i].GetSegmentPath()] = &sonetMinute15PathReports.SonetMinute15PathReport[i]
    }
    return children
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetYangName() string { return "sonet-minute15-path-reports" }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) SetParent(parent types.Entity) { sonetMinute15PathReports.parent = parent }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetParent() types.Entity { return sonetMinute15PathReports.parent }

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetParentYangName() string { return "sonet-minute15-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetFilter() yfilter.YFilter { return sonetMinute15PathReport.YFilter }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) SetFilter(yf yfilter.YFilter) { sonetMinute15PathReport.YFilter = yf }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetGoName(yname string) string {
    if yname == "path-report" { return "PathReport" }
    return ""
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetSegmentPath() string {
    return "sonet-minute15-path-report" + "[path-report='" + fmt.Sprintf("%v", sonetMinute15PathReport.PathReport) + "']"
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-report"] = sonetMinute15PathReport.PathReport
    return leafs
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetYangName() string { return "sonet-minute15-path-report" }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) SetParent(parent types.Entity) { sonetMinute15PathReport.parent = parent }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetParent() types.Entity { return sonetMinute15PathReport.parent }

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetParentYangName() string { return "sonet-minute15-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold.
    SonetMinute15PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetFilter() yfilter.YFilter { return sonetMinute15PathThresholds.YFilter }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) SetFilter(yf yfilter.YFilter) { sonetMinute15PathThresholds.YFilter = yf }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetGoName(yname string) string {
    if yname == "sonet-minute15-path-threshold" { return "SonetMinute15PathThreshold" }
    return ""
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetSegmentPath() string {
    return "sonet-minute15-path-thresholds"
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-path-threshold" {
        for _, c := range sonetMinute15PathThresholds.SonetMinute15PathThreshold {
            if sonetMinute15PathThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold{}
        sonetMinute15PathThresholds.SonetMinute15PathThreshold = append(sonetMinute15PathThresholds.SonetMinute15PathThreshold, child)
        return &sonetMinute15PathThresholds.SonetMinute15PathThreshold[len(sonetMinute15PathThresholds.SonetMinute15PathThreshold)-1]
    }
    return nil
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetMinute15PathThresholds.SonetMinute15PathThreshold {
        children[sonetMinute15PathThresholds.SonetMinute15PathThreshold[i].GetSegmentPath()] = &sonetMinute15PathThresholds.SonetMinute15PathThreshold[i]
    }
    return children
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetYangName() string { return "sonet-minute15-path-thresholds" }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) SetParent(parent types.Entity) { sonetMinute15PathThresholds.parent = parent }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetParent() types.Entity { return sonetMinute15PathThresholds.parent }

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetParentYangName() string { return "sonet-minute15-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetFilter() yfilter.YFilter { return sonetMinute15PathThreshold.YFilter }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) SetFilter(yf yfilter.YFilter) { sonetMinute15PathThreshold.YFilter = yf }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetGoName(yname string) string {
    if yname == "path-threshold" { return "PathThreshold" }
    if yname == "path-threshold-value" { return "PathThresholdValue" }
    return ""
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetSegmentPath() string {
    return "sonet-minute15-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", sonetMinute15PathThreshold.PathThreshold) + "']"
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-threshold"] = sonetMinute15PathThreshold.PathThreshold
    leafs["path-threshold-value"] = sonetMinute15PathThreshold.PathThresholdValue
    return leafs
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetYangName() string { return "sonet-minute15-path-threshold" }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) SetParent(parent types.Entity) { sonetMinute15PathThreshold.parent = parent }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetParent() types.Entity { return sonetMinute15PathThreshold.parent }

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetParentYangName() string { return "sonet-minute15-path-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    SonetMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports

    // Configure threshold on ocn parameters.
    SonetMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetFilter() yfilter.YFilter { return sonetMinute15Ocn.YFilter }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) SetFilter(yf yfilter.YFilter) { sonetMinute15Ocn.YFilter = yf }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetGoName(yname string) string {
    if yname == "sonet-minute15-ocn-reports" { return "SonetMinute15OcnReports" }
    if yname == "sonet-minute15-ocn-thresholds" { return "SonetMinute15OcnThresholds" }
    return ""
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetSegmentPath() string {
    return "sonet-minute15-ocn"
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-ocn-reports" {
        return &sonetMinute15Ocn.SonetMinute15OcnReports
    }
    if childYangName == "sonet-minute15-ocn-thresholds" {
        return &sonetMinute15Ocn.SonetMinute15OcnThresholds
    }
    return nil
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-minute15-ocn-reports"] = &sonetMinute15Ocn.SonetMinute15OcnReports
    children["sonet-minute15-ocn-thresholds"] = &sonetMinute15Ocn.SonetMinute15OcnThresholds
    return children
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetYangName() string { return "sonet-minute15-ocn" }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) SetParent(parent types.Entity) { sonetMinute15Ocn.parent = parent }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetParent() types.Entity { return sonetMinute15Ocn.parent }

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetParentYangName() string { return "sonet-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport.
    SonetMinute15OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetFilter() yfilter.YFilter { return sonetMinute15OcnReports.YFilter }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) SetFilter(yf yfilter.YFilter) { sonetMinute15OcnReports.YFilter = yf }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetGoName(yname string) string {
    if yname == "sonet-minute15-ocn-report" { return "SonetMinute15OcnReport" }
    return ""
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetSegmentPath() string {
    return "sonet-minute15-ocn-reports"
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-ocn-report" {
        for _, c := range sonetMinute15OcnReports.SonetMinute15OcnReport {
            if sonetMinute15OcnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport{}
        sonetMinute15OcnReports.SonetMinute15OcnReport = append(sonetMinute15OcnReports.SonetMinute15OcnReport, child)
        return &sonetMinute15OcnReports.SonetMinute15OcnReport[len(sonetMinute15OcnReports.SonetMinute15OcnReport)-1]
    }
    return nil
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetMinute15OcnReports.SonetMinute15OcnReport {
        children[sonetMinute15OcnReports.SonetMinute15OcnReport[i].GetSegmentPath()] = &sonetMinute15OcnReports.SonetMinute15OcnReport[i]
    }
    return children
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetYangName() string { return "sonet-minute15-ocn-reports" }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) SetParent(parent types.Entity) { sonetMinute15OcnReports.parent = parent }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetParent() types.Entity { return sonetMinute15OcnReports.parent }

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetParentYangName() string { return "sonet-minute15-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetFilter() yfilter.YFilter { return sonetMinute15OcnReport.YFilter }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) SetFilter(yf yfilter.YFilter) { sonetMinute15OcnReport.YFilter = yf }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetGoName(yname string) string {
    if yname == "ocn-report" { return "OcnReport" }
    return ""
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetSegmentPath() string {
    return "sonet-minute15-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", sonetMinute15OcnReport.OcnReport) + "']"
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-report"] = sonetMinute15OcnReport.OcnReport
    return leafs
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetYangName() string { return "sonet-minute15-ocn-report" }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) SetParent(parent types.Entity) { sonetMinute15OcnReport.parent = parent }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetParent() types.Entity { return sonetMinute15OcnReport.parent }

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetParentYangName() string { return "sonet-minute15-ocn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold.
    SonetMinute15OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetFilter() yfilter.YFilter { return sonetMinute15OcnThresholds.YFilter }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) SetFilter(yf yfilter.YFilter) { sonetMinute15OcnThresholds.YFilter = yf }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetGoName(yname string) string {
    if yname == "sonet-minute15-ocn-threshold" { return "SonetMinute15OcnThreshold" }
    return ""
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetSegmentPath() string {
    return "sonet-minute15-ocn-thresholds"
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-minute15-ocn-threshold" {
        for _, c := range sonetMinute15OcnThresholds.SonetMinute15OcnThreshold {
            if sonetMinute15OcnThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold{}
        sonetMinute15OcnThresholds.SonetMinute15OcnThreshold = append(sonetMinute15OcnThresholds.SonetMinute15OcnThreshold, child)
        return &sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[len(sonetMinute15OcnThresholds.SonetMinute15OcnThreshold)-1]
    }
    return nil
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetMinute15OcnThresholds.SonetMinute15OcnThreshold {
        children[sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i].GetSegmentPath()] = &sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i]
    }
    return children
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetYangName() string { return "sonet-minute15-ocn-thresholds" }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) SetParent(parent types.Entity) { sonetMinute15OcnThresholds.parent = parent }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetParent() types.Entity { return sonetMinute15OcnThresholds.parent }

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetParentYangName() string { return "sonet-minute15-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetFilter() yfilter.YFilter { return sonetMinute15OcnThreshold.YFilter }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) SetFilter(yf yfilter.YFilter) { sonetMinute15OcnThreshold.YFilter = yf }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetGoName(yname string) string {
    if yname == "ocn-threshold" { return "OcnThreshold" }
    if yname == "ocn-threshold-value" { return "OcnThresholdValue" }
    return ""
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetSegmentPath() string {
    return "sonet-minute15-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", sonetMinute15OcnThreshold.OcnThreshold) + "']"
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-threshold"] = sonetMinute15OcnThreshold.OcnThreshold
    leafs["ocn-threshold-value"] = sonetMinute15OcnThreshold.OcnThresholdValue
    return leafs
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetYangName() string { return "sonet-minute15-ocn-threshold" }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) SetParent(parent types.Entity) { sonetMinute15OcnThreshold.parent = parent }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetParent() types.Entity { return sonetMinute15OcnThreshold.parent }

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetParentYangName() string { return "sonet-minute15-ocn-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp
// Configure pm parameters of gfp 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetFilter() yfilter.YFilter { return hour24Gfp.YFilter }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) SetFilter(yf yfilter.YFilter) { hour24Gfp.YFilter = yf }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetGoName(yname string) string {
    if yname == "hour24-gfp" { return "Hour24Gfp" }
    return ""
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetSegmentPath() string {
    return "hour24-gfp"
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-gfp" {
        return &hour24Gfp.Hour24Gfp
    }
    return nil
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24-gfp"] = &hour24Gfp.Hour24Gfp
    return children
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetYangName() string { return "hour24-gfp" }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) SetParent(parent types.Entity) { hour24Gfp.parent = parent }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetParent() types.Entity { return hour24Gfp.parent }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Hour24GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports

    // Configure threshold on gfp parameters.
    Hour24GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetFilter() yfilter.YFilter { return hour24Gfp.YFilter }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) SetFilter(yf yfilter.YFilter) { hour24Gfp.YFilter = yf }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetGoName(yname string) string {
    if yname == "hour24-gfp-reports" { return "Hour24GfpReports" }
    if yname == "hour24-gfp-thresholds" { return "Hour24GfpThresholds" }
    return ""
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetSegmentPath() string {
    return "hour24-gfp"
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-gfp-reports" {
        return &hour24Gfp.Hour24GfpReports
    }
    if childYangName == "hour24-gfp-thresholds" {
        return &hour24Gfp.Hour24GfpThresholds
    }
    return nil
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24-gfp-reports"] = &hour24Gfp.Hour24GfpReports
    children["hour24-gfp-thresholds"] = &hour24Gfp.Hour24GfpThresholds
    return children
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetYangName() string { return "hour24-gfp" }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) SetParent(parent types.Entity) { hour24Gfp.parent = parent }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetParent() types.Entity { return hour24Gfp.parent }

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetParentYangName() string { return "hour24-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport.
    Hour24GfpReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetFilter() yfilter.YFilter { return hour24GfpReports.YFilter }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) SetFilter(yf yfilter.YFilter) { hour24GfpReports.YFilter = yf }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetGoName(yname string) string {
    if yname == "hour24-gfp-report" { return "Hour24GfpReport" }
    return ""
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetSegmentPath() string {
    return "hour24-gfp-reports"
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-gfp-report" {
        for _, c := range hour24GfpReports.Hour24GfpReport {
            if hour24GfpReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport{}
        hour24GfpReports.Hour24GfpReport = append(hour24GfpReports.Hour24GfpReport, child)
        return &hour24GfpReports.Hour24GfpReport[len(hour24GfpReports.Hour24GfpReport)-1]
    }
    return nil
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24GfpReports.Hour24GfpReport {
        children[hour24GfpReports.Hour24GfpReport[i].GetSegmentPath()] = &hour24GfpReports.Hour24GfpReport[i]
    }
    return children
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetYangName() string { return "hour24-gfp-reports" }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) SetParent(parent types.Entity) { hour24GfpReports.parent = parent }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetParent() types.Entity { return hour24GfpReports.parent }

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetParentYangName() string { return "hour24-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetFilter() yfilter.YFilter { return hour24GfpReport.YFilter }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) SetFilter(yf yfilter.YFilter) { hour24GfpReport.YFilter = yf }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetGoName(yname string) string {
    if yname == "gfp-report" { return "GfpReport" }
    return ""
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetSegmentPath() string {
    return "hour24-gfp-report" + "[gfp-report='" + fmt.Sprintf("%v", hour24GfpReport.GfpReport) + "']"
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gfp-report"] = hour24GfpReport.GfpReport
    return leafs
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetYangName() string { return "hour24-gfp-report" }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) SetParent(parent types.Entity) { hour24GfpReport.parent = parent }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetParent() types.Entity { return hour24GfpReport.parent }

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetParentYangName() string { return "hour24-gfp-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold.
    Hour24GfpThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetFilter() yfilter.YFilter { return hour24GfpThresholds.YFilter }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) SetFilter(yf yfilter.YFilter) { hour24GfpThresholds.YFilter = yf }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetGoName(yname string) string {
    if yname == "hour24-gfp-threshold" { return "Hour24GfpThreshold" }
    return ""
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetSegmentPath() string {
    return "hour24-gfp-thresholds"
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-gfp-threshold" {
        for _, c := range hour24GfpThresholds.Hour24GfpThreshold {
            if hour24GfpThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold{}
        hour24GfpThresholds.Hour24GfpThreshold = append(hour24GfpThresholds.Hour24GfpThreshold, child)
        return &hour24GfpThresholds.Hour24GfpThreshold[len(hour24GfpThresholds.Hour24GfpThreshold)-1]
    }
    return nil
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24GfpThresholds.Hour24GfpThreshold {
        children[hour24GfpThresholds.Hour24GfpThreshold[i].GetSegmentPath()] = &hour24GfpThresholds.Hour24GfpThreshold[i]
    }
    return children
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetYangName() string { return "hour24-gfp-thresholds" }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) SetParent(parent types.Entity) { hour24GfpThresholds.parent = parent }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetParent() types.Entity { return hour24GfpThresholds.parent }

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetParentYangName() string { return "hour24-gfp" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    GfpThresholdValue interface{}
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetFilter() yfilter.YFilter { return hour24GfpThreshold.YFilter }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) SetFilter(yf yfilter.YFilter) { hour24GfpThreshold.YFilter = yf }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetGoName(yname string) string {
    if yname == "gfp-threshold" { return "GfpThreshold" }
    if yname == "gfp-threshold-value" { return "GfpThresholdValue" }
    return ""
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetSegmentPath() string {
    return "hour24-gfp-threshold" + "[gfp-threshold='" + fmt.Sprintf("%v", hour24GfpThreshold.GfpThreshold) + "']"
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gfp-threshold"] = hour24GfpThreshold.GfpThreshold
    leafs["gfp-threshold-value"] = hour24GfpThreshold.GfpThresholdValue
    return leafs
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetYangName() string { return "hour24-gfp-threshold" }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) SetParent(parent types.Entity) { hour24GfpThreshold.parent = parent }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetParent() types.Entity { return hour24GfpThreshold.parent }

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetParentYangName() string { return "hour24-gfp-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Hour24Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetFilter() yfilter.YFilter { return ethernetHour24.YFilter }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) SetFilter(yf yfilter.YFilter) { ethernetHour24.YFilter = yf }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetGoName(yname string) string {
    if yname == "hour24-ether" { return "Hour24Ether" }
    return ""
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetSegmentPath() string {
    return "ethernet-hour24"
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-ether" {
        return &ethernetHour24.Hour24Ether
    }
    return nil
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24-ether"] = &ethernetHour24.Hour24Ether
    return children
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetYangName() string { return "ethernet-hour24" }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) SetParent(parent types.Entity) { ethernetHour24.parent = parent }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetParent() types.Entity { return ethernetHour24.parent }

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Hour24EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds

    // set ether TCA reporting status.
    Hour24EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetFilter() yfilter.YFilter { return hour24Ether.YFilter }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) SetFilter(yf yfilter.YFilter) { hour24Ether.YFilter = yf }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetGoName(yname string) string {
    if yname == "hour24-ether-thresholds" { return "Hour24EtherThresholds" }
    if yname == "hour24-ether-reports" { return "Hour24EtherReports" }
    return ""
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetSegmentPath() string {
    return "hour24-ether"
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-ether-thresholds" {
        return &hour24Ether.Hour24EtherThresholds
    }
    if childYangName == "hour24-ether-reports" {
        return &hour24Ether.Hour24EtherReports
    }
    return nil
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24-ether-thresholds"] = &hour24Ether.Hour24EtherThresholds
    children["hour24-ether-reports"] = &hour24Ether.Hour24EtherReports
    return children
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetYangName() string { return "hour24-ether" }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) SetParent(parent types.Entity) { hour24Ether.parent = parent }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetParent() types.Entity { return hour24Ether.parent }

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetParentYangName() string { return "ethernet-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold.
    Hour24EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetFilter() yfilter.YFilter { return hour24EtherThresholds.YFilter }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) SetFilter(yf yfilter.YFilter) { hour24EtherThresholds.YFilter = yf }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetGoName(yname string) string {
    if yname == "hour24-ether-threshold" { return "Hour24EtherThreshold" }
    return ""
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetSegmentPath() string {
    return "hour24-ether-thresholds"
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-ether-threshold" {
        for _, c := range hour24EtherThresholds.Hour24EtherThreshold {
            if hour24EtherThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold{}
        hour24EtherThresholds.Hour24EtherThreshold = append(hour24EtherThresholds.Hour24EtherThreshold, child)
        return &hour24EtherThresholds.Hour24EtherThreshold[len(hour24EtherThresholds.Hour24EtherThreshold)-1]
    }
    return nil
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24EtherThresholds.Hour24EtherThreshold {
        children[hour24EtherThresholds.Hour24EtherThreshold[i].GetSegmentPath()] = &hour24EtherThresholds.Hour24EtherThreshold[i]
    }
    return children
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetYangName() string { return "hour24-ether-thresholds" }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) SetParent(parent types.Entity) { hour24EtherThresholds.parent = parent }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetParent() types.Entity { return hour24EtherThresholds.parent }

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetParentYangName() string { return "hour24-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetFilter() yfilter.YFilter { return hour24EtherThreshold.YFilter }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) SetFilter(yf yfilter.YFilter) { hour24EtherThreshold.YFilter = yf }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetGoName(yname string) string {
    if yname == "ether-threshold" { return "EtherThreshold" }
    if yname == "ether-threshold-value" { return "EtherThresholdValue" }
    return ""
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetSegmentPath() string {
    return "hour24-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", hour24EtherThreshold.EtherThreshold) + "']"
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-threshold"] = hour24EtherThreshold.EtherThreshold
    leafs["ether-threshold-value"] = hour24EtherThreshold.EtherThresholdValue
    return leafs
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetYangName() string { return "hour24-ether-threshold" }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) SetParent(parent types.Entity) { hour24EtherThreshold.parent = parent }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetParent() types.Entity { return hour24EtherThreshold.parent }

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetParentYangName() string { return "hour24-ether-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport.
    Hour24EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetFilter() yfilter.YFilter { return hour24EtherReports.YFilter }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) SetFilter(yf yfilter.YFilter) { hour24EtherReports.YFilter = yf }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetGoName(yname string) string {
    if yname == "hour24-ether-report" { return "Hour24EtherReport" }
    return ""
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetSegmentPath() string {
    return "hour24-ether-reports"
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-ether-report" {
        for _, c := range hour24EtherReports.Hour24EtherReport {
            if hour24EtherReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport{}
        hour24EtherReports.Hour24EtherReport = append(hour24EtherReports.Hour24EtherReport, child)
        return &hour24EtherReports.Hour24EtherReport[len(hour24EtherReports.Hour24EtherReport)-1]
    }
    return nil
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24EtherReports.Hour24EtherReport {
        children[hour24EtherReports.Hour24EtherReport[i].GetSegmentPath()] = &hour24EtherReports.Hour24EtherReport[i]
    }
    return children
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetYangName() string { return "hour24-ether-reports" }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) SetParent(parent types.Entity) { hour24EtherReports.parent = parent }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetParent() types.Entity { return hour24EtherReports.parent }

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetParentYangName() string { return "hour24-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetFilter() yfilter.YFilter { return hour24EtherReport.YFilter }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) SetFilter(yf yfilter.YFilter) { hour24EtherReport.YFilter = yf }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetGoName(yname string) string {
    if yname == "ether-report" { return "EtherReport" }
    return ""
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetSegmentPath() string {
    return "hour24-ether-report" + "[ether-report='" + fmt.Sprintf("%v", hour24EtherReport.EtherReport) + "']"
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-report"] = hour24EtherReport.EtherReport
    return leafs
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetYangName() string { return "hour24-ether-report" }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) SetParent(parent types.Entity) { hour24EtherReport.parent = parent }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetParent() types.Entity { return hour24EtherReport.parent }

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetParentYangName() string { return "hour24-ether-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm.
    Minute15OtnTcm []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetFilter() yfilter.YFilter { return minute15OtnTcms.YFilter }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) SetFilter(yf yfilter.YFilter) { minute15OtnTcms.YFilter = yf }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetGoName(yname string) string {
    if yname == "minute15otn-tcm" { return "Minute15OtnTcm" }
    return ""
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetSegmentPath() string {
    return "minute15otn-tcms"
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-tcm" {
        for _, c := range minute15OtnTcms.Minute15OtnTcm {
            if minute15OtnTcms.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm{}
        minute15OtnTcms.Minute15OtnTcm = append(minute15OtnTcms.Minute15OtnTcm, child)
        return &minute15OtnTcms.Minute15OtnTcm[len(minute15OtnTcms.Minute15OtnTcm)-1]
    }
    return nil
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OtnTcms.Minute15OtnTcm {
        children[minute15OtnTcms.Minute15OtnTcm[i].GetSegmentPath()] = &minute15OtnTcms.Minute15OtnTcm[i]
    }
    return children
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetYangName() string { return "minute15otn-tcms" }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) SetParent(parent types.Entity) { minute15OtnTcms.parent = parent }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetParent() types.Entity { return minute15OtnTcms.parent }

func (minute15OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. TCM number. The type is interface{} with range:
    // -2147483648..2147483647.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Min15OtnTcmThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes

    // set otn TCA reporting status.
    Minute15OtnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetFilter() yfilter.YFilter { return minute15OtnTcm.YFilter }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) SetFilter(yf yfilter.YFilter) { minute15OtnTcm.YFilter = yf }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetGoName(yname string) string {
    if yname == "tcm-number" { return "TcmNumber" }
    if yname == "min15-otn-tcm-threshes" { return "Min15OtnTcmThreshes" }
    if yname == "minute15otn-tcm-reports" { return "Minute15OtnTcmReports" }
    return ""
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetSegmentPath() string {
    return "minute15otn-tcm" + "[tcm-number='" + fmt.Sprintf("%v", minute15OtnTcm.TcmNumber) + "']"
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min15-otn-tcm-threshes" {
        return &minute15OtnTcm.Min15OtnTcmThreshes
    }
    if childYangName == "minute15otn-tcm-reports" {
        return &minute15OtnTcm.Minute15OtnTcmReports
    }
    return nil
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min15-otn-tcm-threshes"] = &minute15OtnTcm.Min15OtnTcmThreshes
    children["minute15otn-tcm-reports"] = &minute15OtnTcm.Minute15OtnTcmReports
    return children
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcm-number"] = minute15OtnTcm.TcmNumber
    return leafs
}

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetYangName() string { return "minute15otn-tcm" }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) SetParent(parent types.Entity) { minute15OtnTcm.parent = parent }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetParent() types.Entity { return minute15OtnTcm.parent }

func (minute15OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm) GetParentYangName() string { return "minute15otn-tcms" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh.
    Min15OtnTcmThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetFilter() yfilter.YFilter { return min15OtnTcmThreshes.YFilter }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) SetFilter(yf yfilter.YFilter) { min15OtnTcmThreshes.YFilter = yf }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetGoName(yname string) string {
    if yname == "min15-otn-tcm-thresh" { return "Min15OtnTcmThresh" }
    return ""
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetSegmentPath() string {
    return "min15-otn-tcm-threshes"
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min15-otn-tcm-thresh" {
        for _, c := range min15OtnTcmThreshes.Min15OtnTcmThresh {
            if min15OtnTcmThreshes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh{}
        min15OtnTcmThreshes.Min15OtnTcmThresh = append(min15OtnTcmThreshes.Min15OtnTcmThresh, child)
        return &min15OtnTcmThreshes.Min15OtnTcmThresh[len(min15OtnTcmThreshes.Min15OtnTcmThresh)-1]
    }
    return nil
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range min15OtnTcmThreshes.Min15OtnTcmThresh {
        children[min15OtnTcmThreshes.Min15OtnTcmThresh[i].GetSegmentPath()] = &min15OtnTcmThreshes.Min15OtnTcmThresh[i]
    }
    return children
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetYangName() string { return "min15-otn-tcm-threshes" }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) SetParent(parent types.Entity) { min15OtnTcmThreshes.parent = parent }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetParent() types.Entity { return min15OtnTcmThreshes.parent }

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes) GetParentYangName() string { return "minute15otn-tcm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetFilter() yfilter.YFilter { return min15OtnTcmThresh.YFilter }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) SetFilter(yf yfilter.YFilter) { min15OtnTcmThresh.YFilter = yf }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetSegmentPath() string {
    return "min15-otn-tcm-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnTcmThresh.OtnThreshold) + "']"
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = min15OtnTcmThresh.OtnThreshold
    leafs["otn-threshold-value"] = min15OtnTcmThresh.OtnThresholdValue
    return leafs
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetYangName() string { return "min15-otn-tcm-thresh" }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) SetParent(parent types.Entity) { min15OtnTcmThresh.parent = parent }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetParent() types.Entity { return min15OtnTcmThresh.parent }

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetParentYangName() string { return "min15-otn-tcm-threshes" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport.
    Minute15OtnTcmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetFilter() yfilter.YFilter { return minute15OtnTcmReports.YFilter }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) SetFilter(yf yfilter.YFilter) { minute15OtnTcmReports.YFilter = yf }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetGoName(yname string) string {
    if yname == "minute15otn-tcm-report" { return "Minute15OtnTcmReport" }
    return ""
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetSegmentPath() string {
    return "minute15otn-tcm-reports"
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-tcm-report" {
        for _, c := range minute15OtnTcmReports.Minute15OtnTcmReport {
            if minute15OtnTcmReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport{}
        minute15OtnTcmReports.Minute15OtnTcmReport = append(minute15OtnTcmReports.Minute15OtnTcmReport, child)
        return &minute15OtnTcmReports.Minute15OtnTcmReport[len(minute15OtnTcmReports.Minute15OtnTcmReport)-1]
    }
    return nil
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OtnTcmReports.Minute15OtnTcmReport {
        children[minute15OtnTcmReports.Minute15OtnTcmReport[i].GetSegmentPath()] = &minute15OtnTcmReports.Minute15OtnTcmReport[i]
    }
    return children
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetYangName() string { return "minute15otn-tcm-reports" }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) SetParent(parent types.Entity) { minute15OtnTcmReports.parent = parent }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetParent() types.Entity { return minute15OtnTcmReports.parent }

func (minute15OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports) GetParentYangName() string { return "minute15otn-tcm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetFilter() yfilter.YFilter { return minute15OtnTcmReport.YFilter }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) SetFilter(yf yfilter.YFilter) { minute15OtnTcmReport.YFilter = yf }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetSegmentPath() string {
    return "minute15otn-tcm-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnTcmReport.OtnReport) + "']"
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = minute15OtnTcmReport.OtnReport
    leafs["enable"] = minute15OtnTcmReport.Enable
    return leafs
}

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetYangName() string { return "minute15otn-tcm-report" }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) SetParent(parent types.Entity) { minute15OtnTcmReport.parent = parent }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetParent() types.Entity { return minute15OtnTcmReport.parent }

func (minute15OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15OtnTcms_Minute15OtnTcm_Minute15OtnTcmReports_Minute15OtnTcmReport) GetParentYangName() string { return "minute15otn-tcm-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24
// set Oc threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetFilter() yfilter.YFilter { return ocHour24.YFilter }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) SetFilter(yf yfilter.YFilter) { ocHour24.YFilter = yf }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetGoName(yname string) string {
    if yname == "oc-hour24-ocn" { return "OcHour24Ocn" }
    return ""
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetSegmentPath() string {
    return "oc-hour24"
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-hour24-ocn" {
        return &ocHour24.OcHour24Ocn
    }
    return nil
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["oc-hour24-ocn"] = &ocHour24.OcHour24Ocn
    return children
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetYangName() string { return "oc-hour24" }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) SetParent(parent types.Entity) { ocHour24.parent = parent }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetParent() types.Entity { return ocHour24.parent }

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports

    // Configure threshold on ocn parameters.
    OcHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetFilter() yfilter.YFilter { return ocHour24Ocn.YFilter }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) SetFilter(yf yfilter.YFilter) { ocHour24Ocn.YFilter = yf }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetGoName(yname string) string {
    if yname == "oc-hour24-ocn-reports" { return "OcHour24OcnReports" }
    if yname == "oc-hour24-ocn-thresholds" { return "OcHour24OcnThresholds" }
    return ""
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetSegmentPath() string {
    return "oc-hour24-ocn"
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-hour24-ocn-reports" {
        return &ocHour24Ocn.OcHour24OcnReports
    }
    if childYangName == "oc-hour24-ocn-thresholds" {
        return &ocHour24Ocn.OcHour24OcnThresholds
    }
    return nil
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["oc-hour24-ocn-reports"] = &ocHour24Ocn.OcHour24OcnReports
    children["oc-hour24-ocn-thresholds"] = &ocHour24Ocn.OcHour24OcnThresholds
    return children
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetYangName() string { return "oc-hour24-ocn" }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) SetParent(parent types.Entity) { ocHour24Ocn.parent = parent }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetParent() types.Entity { return ocHour24Ocn.parent }

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetParentYangName() string { return "oc-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport.
    OcHour24OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetFilter() yfilter.YFilter { return ocHour24OcnReports.YFilter }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) SetFilter(yf yfilter.YFilter) { ocHour24OcnReports.YFilter = yf }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetGoName(yname string) string {
    if yname == "oc-hour24-ocn-report" { return "OcHour24OcnReport" }
    return ""
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetSegmentPath() string {
    return "oc-hour24-ocn-reports"
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-hour24-ocn-report" {
        for _, c := range ocHour24OcnReports.OcHour24OcnReport {
            if ocHour24OcnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport{}
        ocHour24OcnReports.OcHour24OcnReport = append(ocHour24OcnReports.OcHour24OcnReport, child)
        return &ocHour24OcnReports.OcHour24OcnReport[len(ocHour24OcnReports.OcHour24OcnReport)-1]
    }
    return nil
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ocHour24OcnReports.OcHour24OcnReport {
        children[ocHour24OcnReports.OcHour24OcnReport[i].GetSegmentPath()] = &ocHour24OcnReports.OcHour24OcnReport[i]
    }
    return children
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetYangName() string { return "oc-hour24-ocn-reports" }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) SetParent(parent types.Entity) { ocHour24OcnReports.parent = parent }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetParent() types.Entity { return ocHour24OcnReports.parent }

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetParentYangName() string { return "oc-hour24-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetFilter() yfilter.YFilter { return ocHour24OcnReport.YFilter }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) SetFilter(yf yfilter.YFilter) { ocHour24OcnReport.YFilter = yf }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetGoName(yname string) string {
    if yname == "ocn-report" { return "OcnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetSegmentPath() string {
    return "oc-hour24-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", ocHour24OcnReport.OcnReport) + "']"
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-report"] = ocHour24OcnReport.OcnReport
    leafs["enable"] = ocHour24OcnReport.Enable
    return leafs
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetYangName() string { return "oc-hour24-ocn-report" }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) SetParent(parent types.Entity) { ocHour24OcnReport.parent = parent }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetParent() types.Entity { return ocHour24OcnReport.parent }

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetParentYangName() string { return "oc-hour24-ocn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold.
    OcHour24OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetFilter() yfilter.YFilter { return ocHour24OcnThresholds.YFilter }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) SetFilter(yf yfilter.YFilter) { ocHour24OcnThresholds.YFilter = yf }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetGoName(yname string) string {
    if yname == "oc-hour24-ocn-threshold" { return "OcHour24OcnThreshold" }
    return ""
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetSegmentPath() string {
    return "oc-hour24-ocn-thresholds"
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-hour24-ocn-threshold" {
        for _, c := range ocHour24OcnThresholds.OcHour24OcnThreshold {
            if ocHour24OcnThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold{}
        ocHour24OcnThresholds.OcHour24OcnThreshold = append(ocHour24OcnThresholds.OcHour24OcnThreshold, child)
        return &ocHour24OcnThresholds.OcHour24OcnThreshold[len(ocHour24OcnThresholds.OcHour24OcnThreshold)-1]
    }
    return nil
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ocHour24OcnThresholds.OcHour24OcnThreshold {
        children[ocHour24OcnThresholds.OcHour24OcnThreshold[i].GetSegmentPath()] = &ocHour24OcnThresholds.OcHour24OcnThreshold[i]
    }
    return children
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetYangName() string { return "oc-hour24-ocn-thresholds" }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) SetParent(parent types.Entity) { ocHour24OcnThresholds.parent = parent }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetParent() types.Entity { return ocHour24OcnThresholds.parent }

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetParentYangName() string { return "oc-hour24-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetFilter() yfilter.YFilter { return ocHour24OcnThreshold.YFilter }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) SetFilter(yf yfilter.YFilter) { ocHour24OcnThreshold.YFilter = yf }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetGoName(yname string) string {
    if yname == "ocn-threshold" { return "OcnThreshold" }
    if yname == "ocn-threshold-value" { return "OcnThresholdValue" }
    return ""
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetSegmentPath() string {
    return "oc-hour24-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", ocHour24OcnThreshold.OcnThreshold) + "']"
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-threshold"] = ocHour24OcnThreshold.OcnThreshold
    leafs["ocn-threshold-value"] = ocHour24OcnThreshold.OcnThresholdValue
    return leafs
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetYangName() string { return "oc-hour24-ocn-threshold" }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) SetParent(parent types.Entity) { ocHour24OcnThreshold.parent = parent }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetParent() types.Entity { return ocHour24OcnThreshold.parent }

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetParentYangName() string { return "oc-hour24-ocn-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Minute15Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetFilter() yfilter.YFilter { return ethernetMinute15.YFilter }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) SetFilter(yf yfilter.YFilter) { ethernetMinute15.YFilter = yf }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetGoName(yname string) string {
    if yname == "minute15-ether" { return "Minute15Ether" }
    return ""
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetSegmentPath() string {
    return "ethernet-minute15"
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-ether" {
        return &ethernetMinute15.Minute15Ether
    }
    return nil
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-ether"] = &ethernetMinute15.Minute15Ether
    return children
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetYangName() string { return "ethernet-minute15" }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) SetParent(parent types.Entity) { ethernetMinute15.parent = parent }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetParent() types.Entity { return ethernetMinute15.parent }

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Minute15EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds

    // set ether TCA reporting status.
    Minute15EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetFilter() yfilter.YFilter { return minute15Ether.YFilter }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) SetFilter(yf yfilter.YFilter) { minute15Ether.YFilter = yf }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetGoName(yname string) string {
    if yname == "minute15-ether-thresholds" { return "Minute15EtherThresholds" }
    if yname == "minute15-ether-reports" { return "Minute15EtherReports" }
    return ""
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetSegmentPath() string {
    return "minute15-ether"
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-ether-thresholds" {
        return &minute15Ether.Minute15EtherThresholds
    }
    if childYangName == "minute15-ether-reports" {
        return &minute15Ether.Minute15EtherReports
    }
    return nil
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-ether-thresholds"] = &minute15Ether.Minute15EtherThresholds
    children["minute15-ether-reports"] = &minute15Ether.Minute15EtherReports
    return children
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetYangName() string { return "minute15-ether" }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) SetParent(parent types.Entity) { minute15Ether.parent = parent }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetParent() types.Entity { return minute15Ether.parent }

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetParentYangName() string { return "ethernet-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold.
    Minute15EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetFilter() yfilter.YFilter { return minute15EtherThresholds.YFilter }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) SetFilter(yf yfilter.YFilter) { minute15EtherThresholds.YFilter = yf }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetGoName(yname string) string {
    if yname == "minute15-ether-threshold" { return "Minute15EtherThreshold" }
    return ""
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetSegmentPath() string {
    return "minute15-ether-thresholds"
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-ether-threshold" {
        for _, c := range minute15EtherThresholds.Minute15EtherThreshold {
            if minute15EtherThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold{}
        minute15EtherThresholds.Minute15EtherThreshold = append(minute15EtherThresholds.Minute15EtherThreshold, child)
        return &minute15EtherThresholds.Minute15EtherThreshold[len(minute15EtherThresholds.Minute15EtherThreshold)-1]
    }
    return nil
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15EtherThresholds.Minute15EtherThreshold {
        children[minute15EtherThresholds.Minute15EtherThreshold[i].GetSegmentPath()] = &minute15EtherThresholds.Minute15EtherThreshold[i]
    }
    return children
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetYangName() string { return "minute15-ether-thresholds" }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) SetParent(parent types.Entity) { minute15EtherThresholds.parent = parent }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetParent() types.Entity { return minute15EtherThresholds.parent }

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetParentYangName() string { return "minute15-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetFilter() yfilter.YFilter { return minute15EtherThreshold.YFilter }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) SetFilter(yf yfilter.YFilter) { minute15EtherThreshold.YFilter = yf }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetGoName(yname string) string {
    if yname == "ether-threshold" { return "EtherThreshold" }
    if yname == "ether-threshold-value" { return "EtherThresholdValue" }
    return ""
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetSegmentPath() string {
    return "minute15-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", minute15EtherThreshold.EtherThreshold) + "']"
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-threshold"] = minute15EtherThreshold.EtherThreshold
    leafs["ether-threshold-value"] = minute15EtherThreshold.EtherThresholdValue
    return leafs
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetYangName() string { return "minute15-ether-threshold" }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) SetParent(parent types.Entity) { minute15EtherThreshold.parent = parent }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetParent() types.Entity { return minute15EtherThreshold.parent }

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetParentYangName() string { return "minute15-ether-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport.
    Minute15EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetFilter() yfilter.YFilter { return minute15EtherReports.YFilter }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) SetFilter(yf yfilter.YFilter) { minute15EtherReports.YFilter = yf }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetGoName(yname string) string {
    if yname == "minute15-ether-report" { return "Minute15EtherReport" }
    return ""
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetSegmentPath() string {
    return "minute15-ether-reports"
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-ether-report" {
        for _, c := range minute15EtherReports.Minute15EtherReport {
            if minute15EtherReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport{}
        minute15EtherReports.Minute15EtherReport = append(minute15EtherReports.Minute15EtherReport, child)
        return &minute15EtherReports.Minute15EtherReport[len(minute15EtherReports.Minute15EtherReport)-1]
    }
    return nil
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15EtherReports.Minute15EtherReport {
        children[minute15EtherReports.Minute15EtherReport[i].GetSegmentPath()] = &minute15EtherReports.Minute15EtherReport[i]
    }
    return children
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetYangName() string { return "minute15-ether-reports" }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) SetParent(parent types.Entity) { minute15EtherReports.parent = parent }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetParent() types.Entity { return minute15EtherReports.parent }

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetParentYangName() string { return "minute15-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetFilter() yfilter.YFilter { return minute15EtherReport.YFilter }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) SetFilter(yf yfilter.YFilter) { minute15EtherReport.YFilter = yf }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetGoName(yname string) string {
    if yname == "ether-report" { return "EtherReport" }
    return ""
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetSegmentPath() string {
    return "minute15-ether-report" + "[ether-report='" + fmt.Sprintf("%v", minute15EtherReport.EtherReport) + "']"
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-report"] = minute15EtherReport.EtherReport
    return leafs
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetYangName() string { return "minute15-ether-report" }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) SetParent(parent types.Entity) { minute15EtherReport.parent = parent }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetParent() types.Entity { return minute15EtherReport.parent }

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetParentYangName() string { return "minute15-ether-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcHour24HoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetFilter() yfilter.YFilter { return hoVcHour24.YFilter }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) SetFilter(yf yfilter.YFilter) { hoVcHour24.YFilter = yf }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetGoName(yname string) string {
    if yname == "ho-vc-hour24ho-vc" { return "HoVcHour24HoVc" }
    return ""
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetSegmentPath() string {
    return "ho-vc-hour24"
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-hour24ho-vc" {
        return &hoVcHour24.HoVcHour24HoVc
    }
    return nil
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ho-vc-hour24ho-vc"] = &hoVcHour24.HoVcHour24HoVc
    return children
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetYangName() string { return "ho-vc-hour24" }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) SetParent(parent types.Entity) { hoVcHour24.parent = parent }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetParent() types.Entity { return hoVcHour24.parent }

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcHour24HoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcHour24HoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetFilter() yfilter.YFilter { return hoVcHour24HoVc.YFilter }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) SetFilter(yf yfilter.YFilter) { hoVcHour24HoVc.YFilter = yf }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetGoName(yname string) string {
    if yname == "ho-vc-hour24ho-vc-reports" { return "HoVcHour24HoVcReports" }
    if yname == "ho-vc-hour24ho-vc-thresholds" { return "HoVcHour24HoVcThresholds" }
    return ""
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetSegmentPath() string {
    return "ho-vc-hour24ho-vc"
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-hour24ho-vc-reports" {
        return &hoVcHour24HoVc.HoVcHour24HoVcReports
    }
    if childYangName == "ho-vc-hour24ho-vc-thresholds" {
        return &hoVcHour24HoVc.HoVcHour24HoVcThresholds
    }
    return nil
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ho-vc-hour24ho-vc-reports"] = &hoVcHour24HoVc.HoVcHour24HoVcReports
    children["ho-vc-hour24ho-vc-thresholds"] = &hoVcHour24HoVc.HoVcHour24HoVcThresholds
    return children
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetYangName() string { return "ho-vc-hour24ho-vc" }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) SetParent(parent types.Entity) { hoVcHour24HoVc.parent = parent }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetParent() types.Entity { return hoVcHour24HoVc.parent }

func (hoVcHour24HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc) GetParentYangName() string { return "ho-vc-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport.
    HoVcHour24HoVcReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetFilter() yfilter.YFilter { return hoVcHour24HoVcReports.YFilter }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) SetFilter(yf yfilter.YFilter) { hoVcHour24HoVcReports.YFilter = yf }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetGoName(yname string) string {
    if yname == "ho-vc-hour24ho-vc-report" { return "HoVcHour24HoVcReport" }
    return ""
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetSegmentPath() string {
    return "ho-vc-hour24ho-vc-reports"
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-hour24ho-vc-report" {
        for _, c := range hoVcHour24HoVcReports.HoVcHour24HoVcReport {
            if hoVcHour24HoVcReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport{}
        hoVcHour24HoVcReports.HoVcHour24HoVcReport = append(hoVcHour24HoVcReports.HoVcHour24HoVcReport, child)
        return &hoVcHour24HoVcReports.HoVcHour24HoVcReport[len(hoVcHour24HoVcReports.HoVcHour24HoVcReport)-1]
    }
    return nil
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hoVcHour24HoVcReports.HoVcHour24HoVcReport {
        children[hoVcHour24HoVcReports.HoVcHour24HoVcReport[i].GetSegmentPath()] = &hoVcHour24HoVcReports.HoVcHour24HoVcReport[i]
    }
    return children
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetYangName() string { return "ho-vc-hour24ho-vc-reports" }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) SetParent(parent types.Entity) { hoVcHour24HoVcReports.parent = parent }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetParent() types.Entity { return hoVcHour24HoVcReports.parent }

func (hoVcHour24HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports) GetParentYangName() string { return "ho-vc-hour24ho-vc" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetFilter() yfilter.YFilter { return hoVcHour24HoVcReport.YFilter }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) SetFilter(yf yfilter.YFilter) { hoVcHour24HoVcReport.YFilter = yf }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetGoName(yname string) string {
    if yname == "ho-vc-report" { return "HoVcReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetSegmentPath() string {
    return "ho-vc-hour24ho-vc-report" + "[ho-vc-report='" + fmt.Sprintf("%v", hoVcHour24HoVcReport.HoVcReport) + "']"
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ho-vc-report"] = hoVcHour24HoVcReport.HoVcReport
    leafs["enable"] = hoVcHour24HoVcReport.Enable
    return leafs
}

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetYangName() string { return "ho-vc-hour24ho-vc-report" }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) SetParent(parent types.Entity) { hoVcHour24HoVcReport.parent = parent }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetParent() types.Entity { return hoVcHour24HoVcReport.parent }

func (hoVcHour24HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcReports_HoVcHour24HoVcReport) GetParentYangName() string { return "ho-vc-hour24ho-vc-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold.
    HoVcHour24HoVcThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetFilter() yfilter.YFilter { return hoVcHour24HoVcThresholds.YFilter }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) SetFilter(yf yfilter.YFilter) { hoVcHour24HoVcThresholds.YFilter = yf }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetGoName(yname string) string {
    if yname == "ho-vc-hour24ho-vc-threshold" { return "HoVcHour24HoVcThreshold" }
    return ""
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetSegmentPath() string {
    return "ho-vc-hour24ho-vc-thresholds"
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-hour24ho-vc-threshold" {
        for _, c := range hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold {
            if hoVcHour24HoVcThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold{}
        hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold = append(hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold, child)
        return &hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold[len(hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold)-1]
    }
    return nil
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold {
        children[hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold[i].GetSegmentPath()] = &hoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold[i]
    }
    return children
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetYangName() string { return "ho-vc-hour24ho-vc-thresholds" }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) SetParent(parent types.Entity) { hoVcHour24HoVcThresholds.parent = parent }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetParent() types.Entity { return hoVcHour24HoVcThresholds.parent }

func (hoVcHour24HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds) GetParentYangName() string { return "ho-vc-hour24ho-vc" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetFilter() yfilter.YFilter { return hoVcHour24HoVcThreshold.YFilter }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) SetFilter(yf yfilter.YFilter) { hoVcHour24HoVcThreshold.YFilter = yf }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetGoName(yname string) string {
    if yname == "ho-vc-threshold" { return "HoVcThreshold" }
    if yname == "ho-vc-threshold-value" { return "HoVcThresholdValue" }
    return ""
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetSegmentPath() string {
    return "ho-vc-hour24ho-vc-threshold" + "[ho-vc-threshold='" + fmt.Sprintf("%v", hoVcHour24HoVcThreshold.HoVcThreshold) + "']"
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ho-vc-threshold"] = hoVcHour24HoVcThreshold.HoVcThreshold
    leafs["ho-vc-threshold-value"] = hoVcHour24HoVcThreshold.HoVcThresholdValue
    return leafs
}

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetYangName() string { return "ho-vc-hour24ho-vc-threshold" }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) SetParent(parent types.Entity) { hoVcHour24HoVcThreshold.parent = parent }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetParent() types.Entity { return hoVcHour24HoVcThreshold.parent }

func (hoVcHour24HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24HoVc_HoVcHour24HoVcThresholds_HoVcHour24HoVcThreshold) GetParentYangName() string { return "ho-vc-hour24ho-vc-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30
// Configure optics performance monitoring for 30
// sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure fec g709 performance monitoring.
    Second30Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec

    // Configure optics performance monitoring.
    Second30Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics

    // Configure secy-if performance monitoring.
    Second30Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif

    // Configure secy-rx performance monitoring.
    Second30Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx

    // configure otn g709 performance monitoring.
    Second30Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn

    // Configure secy-tx performance monitoring.
    Second30Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetFilter() yfilter.YFilter { return second30.YFilter }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) SetFilter(yf yfilter.YFilter) { second30.YFilter = yf }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetGoName(yname string) string {
    if yname == "second30fec" { return "Second30Fec" }
    if yname == "second30-optics" { return "Second30Optics" }
    if yname == "second30secyif" { return "Second30Secyif" }
    if yname == "second30secyrx" { return "Second30Secyrx" }
    if yname == "second30otn" { return "Second30Otn" }
    if yname == "second30secytx" { return "Second30Secytx" }
    return ""
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetSegmentPath() string {
    return "second30"
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30fec" {
        return &second30.Second30Fec
    }
    if childYangName == "second30-optics" {
        return &second30.Second30Optics
    }
    if childYangName == "second30secyif" {
        return &second30.Second30Secyif
    }
    if childYangName == "second30secyrx" {
        return &second30.Second30Secyrx
    }
    if childYangName == "second30otn" {
        return &second30.Second30Otn
    }
    if childYangName == "second30secytx" {
        return &second30.Second30Secytx
    }
    return nil
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30fec"] = &second30.Second30Fec
    children["second30-optics"] = &second30.Second30Optics
    children["second30secyif"] = &second30.Second30Secyif
    children["second30secyrx"] = &second30.Second30Secyrx
    children["second30otn"] = &second30.Second30Otn
    children["second30secytx"] = &second30.Second30Secytx
    return children
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetBundleName() string { return "cisco_ios_xr" }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetYangName() string { return "second30" }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) SetParent(parent types.Entity) { second30.parent = parent }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetParent() types.Entity { return second30.parent }

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Second30FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds

    // set fec TCA reporting status.
    Second30FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetFilter() yfilter.YFilter { return second30Fec.YFilter }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) SetFilter(yf yfilter.YFilter) { second30Fec.YFilter = yf }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetGoName(yname string) string {
    if yname == "second30fec-thresholds" { return "Second30FecThresholds" }
    if yname == "second30fec-reports" { return "Second30FecReports" }
    return ""
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetSegmentPath() string {
    return "second30fec"
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30fec-thresholds" {
        return &second30Fec.Second30FecThresholds
    }
    if childYangName == "second30fec-reports" {
        return &second30Fec.Second30FecReports
    }
    return nil
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30fec-thresholds"] = &second30Fec.Second30FecThresholds
    children["second30fec-reports"] = &second30Fec.Second30FecReports
    return children
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetBundleName() string { return "cisco_ios_xr" }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetYangName() string { return "second30fec" }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) SetParent(parent types.Entity) { second30Fec.parent = parent }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetParent() types.Entity { return second30Fec.parent }

func (second30Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold.
    Second30FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetFilter() yfilter.YFilter { return second30FecThresholds.YFilter }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) SetFilter(yf yfilter.YFilter) { second30FecThresholds.YFilter = yf }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetGoName(yname string) string {
    if yname == "second30fec-threshold" { return "Second30FecThreshold" }
    return ""
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetSegmentPath() string {
    return "second30fec-thresholds"
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30fec-threshold" {
        for _, c := range second30FecThresholds.Second30FecThreshold {
            if second30FecThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold{}
        second30FecThresholds.Second30FecThreshold = append(second30FecThresholds.Second30FecThreshold, child)
        return &second30FecThresholds.Second30FecThreshold[len(second30FecThresholds.Second30FecThreshold)-1]
    }
    return nil
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30FecThresholds.Second30FecThreshold {
        children[second30FecThresholds.Second30FecThreshold[i].GetSegmentPath()] = &second30FecThresholds.Second30FecThreshold[i]
    }
    return children
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetYangName() string { return "second30fec-thresholds" }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) SetParent(parent types.Entity) { second30FecThresholds.parent = parent }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetParent() types.Entity { return second30FecThresholds.parent }

func (second30FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds) GetParentYangName() string { return "second30fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..16. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetFilter() yfilter.YFilter { return second30FecThreshold.YFilter }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) SetFilter(yf yfilter.YFilter) { second30FecThreshold.YFilter = yf }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetGoName(yname string) string {
    if yname == "fec-threshold" { return "FecThreshold" }
    if yname == "fec-threshold-value" { return "FecThresholdValue" }
    return ""
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetSegmentPath() string {
    return "second30fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", second30FecThreshold.FecThreshold) + "']"
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-threshold"] = second30FecThreshold.FecThreshold
    leafs["fec-threshold-value"] = second30FecThreshold.FecThresholdValue
    return leafs
}

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetYangName() string { return "second30fec-threshold" }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) SetParent(parent types.Entity) { second30FecThreshold.parent = parent }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetParent() types.Entity { return second30FecThreshold.parent }

func (second30FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecThresholds_Second30FecThreshold) GetParentYangName() string { return "second30fec-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport.
    Second30FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetFilter() yfilter.YFilter { return second30FecReports.YFilter }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) SetFilter(yf yfilter.YFilter) { second30FecReports.YFilter = yf }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetGoName(yname string) string {
    if yname == "second30fec-report" { return "Second30FecReport" }
    return ""
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetSegmentPath() string {
    return "second30fec-reports"
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30fec-report" {
        for _, c := range second30FecReports.Second30FecReport {
            if second30FecReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport{}
        second30FecReports.Second30FecReport = append(second30FecReports.Second30FecReport, child)
        return &second30FecReports.Second30FecReport[len(second30FecReports.Second30FecReport)-1]
    }
    return nil
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30FecReports.Second30FecReport {
        children[second30FecReports.Second30FecReport[i].GetSegmentPath()] = &second30FecReports.Second30FecReport[i]
    }
    return children
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetYangName() string { return "second30fec-reports" }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) SetParent(parent types.Entity) { second30FecReports.parent = parent }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetParent() types.Entity { return second30FecReports.parent }

func (second30FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports) GetParentYangName() string { return "second30fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetFilter() yfilter.YFilter { return second30FecReport.YFilter }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) SetFilter(yf yfilter.YFilter) { second30FecReport.YFilter = yf }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetGoName(yname string) string {
    if yname == "fec-report" { return "FecReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetSegmentPath() string {
    return "second30fec-report" + "[fec-report='" + fmt.Sprintf("%v", second30FecReport.FecReport) + "']"
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-report"] = second30FecReport.FecReport
    leafs["enable"] = second30FecReport.Enable
    return leafs
}

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetYangName() string { return "second30fec-report" }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) SetParent(parent types.Entity) { second30FecReport.parent = parent }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetParent() types.Entity { return second30FecReport.parent }

func (second30FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Fec_Second30FecReports_Second30FecReport) GetParentYangName() string { return "second30fec-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set optics TCA reporting status.
    Second30OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports

    // Configure threshold on optics parameters.
    Second30OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetFilter() yfilter.YFilter { return second30Optics.YFilter }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) SetFilter(yf yfilter.YFilter) { second30Optics.YFilter = yf }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetGoName(yname string) string {
    if yname == "second30-optics-reports" { return "Second30OpticsReports" }
    if yname == "second30-optics-thresholds" { return "Second30OpticsThresholds" }
    return ""
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetSegmentPath() string {
    return "second30-optics"
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-optics-reports" {
        return &second30Optics.Second30OpticsReports
    }
    if childYangName == "second30-optics-thresholds" {
        return &second30Optics.Second30OpticsThresholds
    }
    return nil
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30-optics-reports"] = &second30Optics.Second30OpticsReports
    children["second30-optics-thresholds"] = &second30Optics.Second30OpticsThresholds
    return children
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetBundleName() string { return "cisco_ios_xr" }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetYangName() string { return "second30-optics" }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) SetParent(parent types.Entity) { second30Optics.parent = parent }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetParent() types.Entity { return second30Optics.parent }

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport.
    Second30OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetFilter() yfilter.YFilter { return second30OpticsReports.YFilter }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) SetFilter(yf yfilter.YFilter) { second30OpticsReports.YFilter = yf }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetGoName(yname string) string {
    if yname == "second30-optics-report" { return "Second30OpticsReport" }
    return ""
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetSegmentPath() string {
    return "second30-optics-reports"
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-optics-report" {
        for _, c := range second30OpticsReports.Second30OpticsReport {
            if second30OpticsReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport{}
        second30OpticsReports.Second30OpticsReport = append(second30OpticsReports.Second30OpticsReport, child)
        return &second30OpticsReports.Second30OpticsReport[len(second30OpticsReports.Second30OpticsReport)-1]
    }
    return nil
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30OpticsReports.Second30OpticsReport {
        children[second30OpticsReports.Second30OpticsReport[i].GetSegmentPath()] = &second30OpticsReports.Second30OpticsReport[i]
    }
    return children
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetYangName() string { return "second30-optics-reports" }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) SetParent(parent types.Entity) { second30OpticsReports.parent = parent }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetParent() types.Entity { return second30OpticsReports.parent }

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetParentYangName() string { return "second30-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetFilter() yfilter.YFilter { return second30OpticsReport.YFilter }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) SetFilter(yf yfilter.YFilter) { second30OpticsReport.YFilter = yf }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetGoName(yname string) string {
    if yname == "optics-report" { return "OpticsReport" }
    return ""
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetSegmentPath() string {
    return "second30-optics-report" + "[optics-report='" + fmt.Sprintf("%v", second30OpticsReport.OpticsReport) + "']"
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-report"] = second30OpticsReport.OpticsReport
    return leafs
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetYangName() string { return "second30-optics-report" }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) SetParent(parent types.Entity) { second30OpticsReport.parent = parent }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetParent() types.Entity { return second30OpticsReport.parent }

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetParentYangName() string { return "second30-optics-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold.
    Second30OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetFilter() yfilter.YFilter { return second30OpticsThresholds.YFilter }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) SetFilter(yf yfilter.YFilter) { second30OpticsThresholds.YFilter = yf }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetGoName(yname string) string {
    if yname == "second30-optics-threshold" { return "Second30OpticsThreshold" }
    return ""
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetSegmentPath() string {
    return "second30-optics-thresholds"
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-optics-threshold" {
        for _, c := range second30OpticsThresholds.Second30OpticsThreshold {
            if second30OpticsThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold{}
        second30OpticsThresholds.Second30OpticsThreshold = append(second30OpticsThresholds.Second30OpticsThreshold, child)
        return &second30OpticsThresholds.Second30OpticsThreshold[len(second30OpticsThresholds.Second30OpticsThreshold)-1]
    }
    return nil
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30OpticsThresholds.Second30OpticsThreshold {
        children[second30OpticsThresholds.Second30OpticsThreshold[i].GetSegmentPath()] = &second30OpticsThresholds.Second30OpticsThreshold[i]
    }
    return children
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetYangName() string { return "second30-optics-thresholds" }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) SetParent(parent types.Entity) { second30OpticsThresholds.parent = parent }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetParent() types.Entity { return second30OpticsThresholds.parent }

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetParentYangName() string { return "second30-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetFilter() yfilter.YFilter { return second30OpticsThreshold.YFilter }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) SetFilter(yf yfilter.YFilter) { second30OpticsThreshold.YFilter = yf }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetGoName(yname string) string {
    if yname == "optics-threshold" { return "OpticsThreshold" }
    if yname == "optics-threshold-value" { return "OpticsThresholdValue" }
    if yname == "dbm" { return "Dbm" }
    return ""
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetSegmentPath() string {
    return "second30-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", second30OpticsThreshold.OpticsThreshold) + "']"
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-threshold"] = second30OpticsThreshold.OpticsThreshold
    leafs["optics-threshold-value"] = second30OpticsThreshold.OpticsThresholdValue
    leafs["dbm"] = second30OpticsThreshold.Dbm
    return leafs
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetYangName() string { return "second30-optics-threshold" }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) SetParent(parent types.Entity) { second30OpticsThreshold.parent = parent }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetParent() types.Entity { return second30OpticsThreshold.parent }

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetParentYangName() string { return "second30-optics-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on secyif parameters.
    Second30SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds

    // set secyif TCA reporting status.
    Second30SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetFilter() yfilter.YFilter { return second30Secyif.YFilter }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) SetFilter(yf yfilter.YFilter) { second30Secyif.YFilter = yf }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetGoName(yname string) string {
    if yname == "second30secyif-thresholds" { return "Second30SecyifThresholds" }
    if yname == "second30secyif-reports" { return "Second30SecyifReports" }
    return ""
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetSegmentPath() string {
    return "second30secyif"
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyif-thresholds" {
        return &second30Secyif.Second30SecyifThresholds
    }
    if childYangName == "second30secyif-reports" {
        return &second30Secyif.Second30SecyifReports
    }
    return nil
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30secyif-thresholds"] = &second30Secyif.Second30SecyifThresholds
    children["second30secyif-reports"] = &second30Secyif.Second30SecyifReports
    return children
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetBundleName() string { return "cisco_ios_xr" }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetYangName() string { return "second30secyif" }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) SetParent(parent types.Entity) { second30Secyif.parent = parent }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetParent() types.Entity { return second30Secyif.parent }

func (second30Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold.
    Second30SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetFilter() yfilter.YFilter { return second30SecyifThresholds.YFilter }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) SetFilter(yf yfilter.YFilter) { second30SecyifThresholds.YFilter = yf }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetGoName(yname string) string {
    if yname == "second30secyif-threshold" { return "Second30SecyifThreshold" }
    return ""
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetSegmentPath() string {
    return "second30secyif-thresholds"
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyif-threshold" {
        for _, c := range second30SecyifThresholds.Second30SecyifThreshold {
            if second30SecyifThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold{}
        second30SecyifThresholds.Second30SecyifThreshold = append(second30SecyifThresholds.Second30SecyifThreshold, child)
        return &second30SecyifThresholds.Second30SecyifThreshold[len(second30SecyifThresholds.Second30SecyifThreshold)-1]
    }
    return nil
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecyifThresholds.Second30SecyifThreshold {
        children[second30SecyifThresholds.Second30SecyifThreshold[i].GetSegmentPath()] = &second30SecyifThresholds.Second30SecyifThreshold[i]
    }
    return children
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetYangName() string { return "second30secyif-thresholds" }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) SetParent(parent types.Entity) { second30SecyifThresholds.parent = parent }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetParent() types.Entity { return second30SecyifThresholds.parent }

func (second30SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds) GetParentYangName() string { return "second30secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetFilter() yfilter.YFilter { return second30SecyifThreshold.YFilter }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) SetFilter(yf yfilter.YFilter) { second30SecyifThreshold.YFilter = yf }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetGoName(yname string) string {
    if yname == "secyif-threshold" { return "SecyifThreshold" }
    if yname == "secyif-threshold-value" { return "SecyifThresholdValue" }
    return ""
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetSegmentPath() string {
    return "second30secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", second30SecyifThreshold.SecyifThreshold) + "']"
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-threshold"] = second30SecyifThreshold.SecyifThreshold
    leafs["secyif-threshold-value"] = second30SecyifThreshold.SecyifThresholdValue
    return leafs
}

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetYangName() string { return "second30secyif-threshold" }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) SetParent(parent types.Entity) { second30SecyifThreshold.parent = parent }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetParent() types.Entity { return second30SecyifThreshold.parent }

func (second30SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifThresholds_Second30SecyifThreshold) GetParentYangName() string { return "second30secyif-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport.
    Second30SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetFilter() yfilter.YFilter { return second30SecyifReports.YFilter }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) SetFilter(yf yfilter.YFilter) { second30SecyifReports.YFilter = yf }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetGoName(yname string) string {
    if yname == "second30secyif-report" { return "Second30SecyifReport" }
    return ""
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetSegmentPath() string {
    return "second30secyif-reports"
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyif-report" {
        for _, c := range second30SecyifReports.Second30SecyifReport {
            if second30SecyifReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport{}
        second30SecyifReports.Second30SecyifReport = append(second30SecyifReports.Second30SecyifReport, child)
        return &second30SecyifReports.Second30SecyifReport[len(second30SecyifReports.Second30SecyifReport)-1]
    }
    return nil
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecyifReports.Second30SecyifReport {
        children[second30SecyifReports.Second30SecyifReport[i].GetSegmentPath()] = &second30SecyifReports.Second30SecyifReport[i]
    }
    return children
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetYangName() string { return "second30secyif-reports" }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) SetParent(parent types.Entity) { second30SecyifReports.parent = parent }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetParent() types.Entity { return second30SecyifReports.parent }

func (second30SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports) GetParentYangName() string { return "second30secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetFilter() yfilter.YFilter { return second30SecyifReport.YFilter }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) SetFilter(yf yfilter.YFilter) { second30SecyifReport.YFilter = yf }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetGoName(yname string) string {
    if yname == "secyif-report" { return "SecyifReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetSegmentPath() string {
    return "second30secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", second30SecyifReport.SecyifReport) + "']"
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-report"] = second30SecyifReport.SecyifReport
    leafs["enable"] = second30SecyifReport.Enable
    return leafs
}

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetYangName() string { return "second30secyif-report" }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) SetParent(parent types.Entity) { second30SecyifReport.parent = parent }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetParent() types.Entity { return second30SecyifReport.parent }

func (second30SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyif_Second30SecyifReports_Second30SecyifReport) GetParentYangName() string { return "second30secyif-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on secyrx parameters.
    Second30SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds

    // set secyrx TCA reporting status.
    Second30SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetFilter() yfilter.YFilter { return second30Secyrx.YFilter }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) SetFilter(yf yfilter.YFilter) { second30Secyrx.YFilter = yf }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetGoName(yname string) string {
    if yname == "second30secyrx-thresholds" { return "Second30SecyrxThresholds" }
    if yname == "second30secyrx-reports" { return "Second30SecyrxReports" }
    return ""
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetSegmentPath() string {
    return "second30secyrx"
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyrx-thresholds" {
        return &second30Secyrx.Second30SecyrxThresholds
    }
    if childYangName == "second30secyrx-reports" {
        return &second30Secyrx.Second30SecyrxReports
    }
    return nil
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30secyrx-thresholds"] = &second30Secyrx.Second30SecyrxThresholds
    children["second30secyrx-reports"] = &second30Secyrx.Second30SecyrxReports
    return children
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetBundleName() string { return "cisco_ios_xr" }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetYangName() string { return "second30secyrx" }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) SetParent(parent types.Entity) { second30Secyrx.parent = parent }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetParent() types.Entity { return second30Secyrx.parent }

func (second30Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold.
    Second30SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetFilter() yfilter.YFilter { return second30SecyrxThresholds.YFilter }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) SetFilter(yf yfilter.YFilter) { second30SecyrxThresholds.YFilter = yf }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetGoName(yname string) string {
    if yname == "second30secyrx-threshold" { return "Second30SecyrxThreshold" }
    return ""
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetSegmentPath() string {
    return "second30secyrx-thresholds"
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyrx-threshold" {
        for _, c := range second30SecyrxThresholds.Second30SecyrxThreshold {
            if second30SecyrxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold{}
        second30SecyrxThresholds.Second30SecyrxThreshold = append(second30SecyrxThresholds.Second30SecyrxThreshold, child)
        return &second30SecyrxThresholds.Second30SecyrxThreshold[len(second30SecyrxThresholds.Second30SecyrxThreshold)-1]
    }
    return nil
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecyrxThresholds.Second30SecyrxThreshold {
        children[second30SecyrxThresholds.Second30SecyrxThreshold[i].GetSegmentPath()] = &second30SecyrxThresholds.Second30SecyrxThreshold[i]
    }
    return children
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetYangName() string { return "second30secyrx-thresholds" }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) SetParent(parent types.Entity) { second30SecyrxThresholds.parent = parent }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetParent() types.Entity { return second30SecyrxThresholds.parent }

func (second30SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds) GetParentYangName() string { return "second30secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetFilter() yfilter.YFilter { return second30SecyrxThreshold.YFilter }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) SetFilter(yf yfilter.YFilter) { second30SecyrxThreshold.YFilter = yf }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetGoName(yname string) string {
    if yname == "secyrx-threshold" { return "SecyrxThreshold" }
    if yname == "secyrx-threshold-value" { return "SecyrxThresholdValue" }
    return ""
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetSegmentPath() string {
    return "second30secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", second30SecyrxThreshold.SecyrxThreshold) + "']"
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-threshold"] = second30SecyrxThreshold.SecyrxThreshold
    leafs["secyrx-threshold-value"] = second30SecyrxThreshold.SecyrxThresholdValue
    return leafs
}

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetYangName() string { return "second30secyrx-threshold" }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) SetParent(parent types.Entity) { second30SecyrxThreshold.parent = parent }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetParent() types.Entity { return second30SecyrxThreshold.parent }

func (second30SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxThresholds_Second30SecyrxThreshold) GetParentYangName() string { return "second30secyrx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport.
    Second30SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetFilter() yfilter.YFilter { return second30SecyrxReports.YFilter }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) SetFilter(yf yfilter.YFilter) { second30SecyrxReports.YFilter = yf }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetGoName(yname string) string {
    if yname == "second30secyrx-report" { return "Second30SecyrxReport" }
    return ""
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetSegmentPath() string {
    return "second30secyrx-reports"
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secyrx-report" {
        for _, c := range second30SecyrxReports.Second30SecyrxReport {
            if second30SecyrxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport{}
        second30SecyrxReports.Second30SecyrxReport = append(second30SecyrxReports.Second30SecyrxReport, child)
        return &second30SecyrxReports.Second30SecyrxReport[len(second30SecyrxReports.Second30SecyrxReport)-1]
    }
    return nil
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecyrxReports.Second30SecyrxReport {
        children[second30SecyrxReports.Second30SecyrxReport[i].GetSegmentPath()] = &second30SecyrxReports.Second30SecyrxReport[i]
    }
    return children
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetYangName() string { return "second30secyrx-reports" }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) SetParent(parent types.Entity) { second30SecyrxReports.parent = parent }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetParent() types.Entity { return second30SecyrxReports.parent }

func (second30SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports) GetParentYangName() string { return "second30secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetFilter() yfilter.YFilter { return second30SecyrxReport.YFilter }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) SetFilter(yf yfilter.YFilter) { second30SecyrxReport.YFilter = yf }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetGoName(yname string) string {
    if yname == "secyrx-report" { return "SecyrxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetSegmentPath() string {
    return "second30secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", second30SecyrxReport.SecyrxReport) + "']"
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-report"] = second30SecyrxReport.SecyrxReport
    leafs["enable"] = second30SecyrxReport.Enable
    return leafs
}

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetYangName() string { return "second30secyrx-report" }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) SetParent(parent types.Entity) { second30SecyrxReport.parent = parent }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetParent() types.Entity { return second30SecyrxReport.parent }

func (second30SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secyrx_Second30SecyrxReports_Second30SecyrxReport) GetParentYangName() string { return "second30secyrx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Second30OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes

    // set otn TCA reporting status.
    Second30OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetFilter() yfilter.YFilter { return second30Otn.YFilter }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) SetFilter(yf yfilter.YFilter) { second30Otn.YFilter = yf }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetGoName(yname string) string {
    if yname == "second30-otn-threshes" { return "Second30OtnThreshes" }
    if yname == "second30otn-reports" { return "Second30OtnReports" }
    return ""
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetSegmentPath() string {
    return "second30otn"
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-otn-threshes" {
        return &second30Otn.Second30OtnThreshes
    }
    if childYangName == "second30otn-reports" {
        return &second30Otn.Second30OtnReports
    }
    return nil
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30-otn-threshes"] = &second30Otn.Second30OtnThreshes
    children["second30otn-reports"] = &second30Otn.Second30OtnReports
    return children
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetBundleName() string { return "cisco_ios_xr" }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetYangName() string { return "second30otn" }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) SetParent(parent types.Entity) { second30Otn.parent = parent }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetParent() types.Entity { return second30Otn.parent }

func (second30Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh.
    Second30OtnThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetFilter() yfilter.YFilter { return second30OtnThreshes.YFilter }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) SetFilter(yf yfilter.YFilter) { second30OtnThreshes.YFilter = yf }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetGoName(yname string) string {
    if yname == "second30-otn-thresh" { return "Second30OtnThresh" }
    return ""
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetSegmentPath() string {
    return "second30-otn-threshes"
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-otn-thresh" {
        for _, c := range second30OtnThreshes.Second30OtnThresh {
            if second30OtnThreshes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh{}
        second30OtnThreshes.Second30OtnThresh = append(second30OtnThreshes.Second30OtnThresh, child)
        return &second30OtnThreshes.Second30OtnThresh[len(second30OtnThreshes.Second30OtnThresh)-1]
    }
    return nil
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30OtnThreshes.Second30OtnThresh {
        children[second30OtnThreshes.Second30OtnThresh[i].GetSegmentPath()] = &second30OtnThreshes.Second30OtnThresh[i]
    }
    return children
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetBundleName() string { return "cisco_ios_xr" }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetYangName() string { return "second30-otn-threshes" }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) SetParent(parent types.Entity) { second30OtnThreshes.parent = parent }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetParent() types.Entity { return second30OtnThreshes.parent }

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes) GetParentYangName() string { return "second30otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetFilter() yfilter.YFilter { return second30OtnThresh.YFilter }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) SetFilter(yf yfilter.YFilter) { second30OtnThresh.YFilter = yf }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetSegmentPath() string {
    return "second30-otn-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", second30OtnThresh.OtnThreshold) + "']"
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = second30OtnThresh.OtnThreshold
    leafs["otn-threshold-value"] = second30OtnThresh.OtnThresholdValue
    return leafs
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetBundleName() string { return "cisco_ios_xr" }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetYangName() string { return "second30-otn-thresh" }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) SetParent(parent types.Entity) { second30OtnThresh.parent = parent }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetParent() types.Entity { return second30OtnThresh.parent }

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnThreshes_Second30OtnThresh) GetParentYangName() string { return "second30-otn-threshes" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport.
    Second30OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetFilter() yfilter.YFilter { return second30OtnReports.YFilter }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) SetFilter(yf yfilter.YFilter) { second30OtnReports.YFilter = yf }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetGoName(yname string) string {
    if yname == "second30otn-report" { return "Second30OtnReport" }
    return ""
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetSegmentPath() string {
    return "second30otn-reports"
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30otn-report" {
        for _, c := range second30OtnReports.Second30OtnReport {
            if second30OtnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport{}
        second30OtnReports.Second30OtnReport = append(second30OtnReports.Second30OtnReport, child)
        return &second30OtnReports.Second30OtnReport[len(second30OtnReports.Second30OtnReport)-1]
    }
    return nil
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30OtnReports.Second30OtnReport {
        children[second30OtnReports.Second30OtnReport[i].GetSegmentPath()] = &second30OtnReports.Second30OtnReport[i]
    }
    return children
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetYangName() string { return "second30otn-reports" }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) SetParent(parent types.Entity) { second30OtnReports.parent = parent }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetParent() types.Entity { return second30OtnReports.parent }

func (second30OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports) GetParentYangName() string { return "second30otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetFilter() yfilter.YFilter { return second30OtnReport.YFilter }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) SetFilter(yf yfilter.YFilter) { second30OtnReport.YFilter = yf }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetSegmentPath() string {
    return "second30otn-report" + "[otn-report='" + fmt.Sprintf("%v", second30OtnReport.OtnReport) + "']"
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = second30OtnReport.OtnReport
    leafs["enable"] = second30OtnReport.Enable
    return leafs
}

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetYangName() string { return "second30otn-report" }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) SetParent(parent types.Entity) { second30OtnReport.parent = parent }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetParent() types.Entity { return second30OtnReport.parent }

func (second30OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Otn_Second30OtnReports_Second30OtnReport) GetParentYangName() string { return "second30otn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on secytx parameters.
    Second30SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds

    // set secytx TCA reporting status.
    Second30SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetFilter() yfilter.YFilter { return second30Secytx.YFilter }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) SetFilter(yf yfilter.YFilter) { second30Secytx.YFilter = yf }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetGoName(yname string) string {
    if yname == "second30secytx-thresholds" { return "Second30SecytxThresholds" }
    if yname == "second30secytx-reports" { return "Second30SecytxReports" }
    return ""
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetSegmentPath() string {
    return "second30secytx"
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secytx-thresholds" {
        return &second30Secytx.Second30SecytxThresholds
    }
    if childYangName == "second30secytx-reports" {
        return &second30Secytx.Second30SecytxReports
    }
    return nil
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30secytx-thresholds"] = &second30Secytx.Second30SecytxThresholds
    children["second30secytx-reports"] = &second30Secytx.Second30SecytxReports
    return children
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetBundleName() string { return "cisco_ios_xr" }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetYangName() string { return "second30secytx" }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) SetParent(parent types.Entity) { second30Secytx.parent = parent }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetParent() types.Entity { return second30Secytx.parent }

func (second30Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx) GetParentYangName() string { return "second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold.
    Second30SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetFilter() yfilter.YFilter { return second30SecytxThresholds.YFilter }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) SetFilter(yf yfilter.YFilter) { second30SecytxThresholds.YFilter = yf }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetGoName(yname string) string {
    if yname == "second30secytx-threshold" { return "Second30SecytxThreshold" }
    return ""
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetSegmentPath() string {
    return "second30secytx-thresholds"
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secytx-threshold" {
        for _, c := range second30SecytxThresholds.Second30SecytxThreshold {
            if second30SecytxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold{}
        second30SecytxThresholds.Second30SecytxThreshold = append(second30SecytxThresholds.Second30SecytxThreshold, child)
        return &second30SecytxThresholds.Second30SecytxThreshold[len(second30SecytxThresholds.Second30SecytxThreshold)-1]
    }
    return nil
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecytxThresholds.Second30SecytxThreshold {
        children[second30SecytxThresholds.Second30SecytxThreshold[i].GetSegmentPath()] = &second30SecytxThresholds.Second30SecytxThreshold[i]
    }
    return children
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetYangName() string { return "second30secytx-thresholds" }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) SetParent(parent types.Entity) { second30SecytxThresholds.parent = parent }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetParent() types.Entity { return second30SecytxThresholds.parent }

func (second30SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds) GetParentYangName() string { return "second30secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetFilter() yfilter.YFilter { return second30SecytxThreshold.YFilter }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) SetFilter(yf yfilter.YFilter) { second30SecytxThreshold.YFilter = yf }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetGoName(yname string) string {
    if yname == "secytx-threshold" { return "SecytxThreshold" }
    if yname == "secytx-threshold-value" { return "SecytxThresholdValue" }
    return ""
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetSegmentPath() string {
    return "second30secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", second30SecytxThreshold.SecytxThreshold) + "']"
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-threshold"] = second30SecytxThreshold.SecytxThreshold
    leafs["secytx-threshold-value"] = second30SecytxThreshold.SecytxThresholdValue
    return leafs
}

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetYangName() string { return "second30secytx-threshold" }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) SetParent(parent types.Entity) { second30SecytxThreshold.parent = parent }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetParent() types.Entity { return second30SecytxThreshold.parent }

func (second30SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxThresholds_Second30SecytxThreshold) GetParentYangName() string { return "second30secytx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport.
    Second30SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetFilter() yfilter.YFilter { return second30SecytxReports.YFilter }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) SetFilter(yf yfilter.YFilter) { second30SecytxReports.YFilter = yf }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetGoName(yname string) string {
    if yname == "second30secytx-report" { return "Second30SecytxReport" }
    return ""
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetSegmentPath() string {
    return "second30secytx-reports"
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30secytx-report" {
        for _, c := range second30SecytxReports.Second30SecytxReport {
            if second30SecytxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport{}
        second30SecytxReports.Second30SecytxReport = append(second30SecytxReports.Second30SecytxReport, child)
        return &second30SecytxReports.Second30SecytxReport[len(second30SecytxReports.Second30SecytxReport)-1]
    }
    return nil
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30SecytxReports.Second30SecytxReport {
        children[second30SecytxReports.Second30SecytxReport[i].GetSegmentPath()] = &second30SecytxReports.Second30SecytxReport[i]
    }
    return children
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetYangName() string { return "second30secytx-reports" }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) SetParent(parent types.Entity) { second30SecytxReports.parent = parent }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetParent() types.Entity { return second30SecytxReports.parent }

func (second30SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports) GetParentYangName() string { return "second30secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetFilter() yfilter.YFilter { return second30SecytxReport.YFilter }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) SetFilter(yf yfilter.YFilter) { second30SecytxReport.YFilter = yf }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetGoName(yname string) string {
    if yname == "secytx-report" { return "SecytxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetSegmentPath() string {
    return "second30secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", second30SecytxReport.SecytxReport) + "']"
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-report"] = second30SecytxReport.SecytxReport
    leafs["enable"] = second30SecytxReport.Enable
    return leafs
}

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetYangName() string { return "second30secytx-report" }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) SetParent(parent types.Entity) { second30SecytxReport.parent = parent }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetParent() types.Entity { return second30SecytxReport.parent }

func (second30SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Secytx_Second30SecytxReports_Second30SecytxReport) GetParentYangName() string { return "second30secytx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms
// Configure pm parameters of tcm's 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm.
    Hour24OtnTcm []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetFilter() yfilter.YFilter { return hour24OtnTcms.YFilter }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) SetFilter(yf yfilter.YFilter) { hour24OtnTcms.YFilter = yf }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetGoName(yname string) string {
    if yname == "hour24otn-tcm" { return "Hour24OtnTcm" }
    return ""
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetSegmentPath() string {
    return "hour24otn-tcms"
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-tcm" {
        for _, c := range hour24OtnTcms.Hour24OtnTcm {
            if hour24OtnTcms.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm{}
        hour24OtnTcms.Hour24OtnTcm = append(hour24OtnTcms.Hour24OtnTcm, child)
        return &hour24OtnTcms.Hour24OtnTcm[len(hour24OtnTcms.Hour24OtnTcm)-1]
    }
    return nil
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnTcms.Hour24OtnTcm {
        children[hour24OtnTcms.Hour24OtnTcm[i].GetSegmentPath()] = &hour24OtnTcms.Hour24OtnTcm[i]
    }
    return children
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetYangName() string { return "hour24otn-tcms" }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) SetParent(parent types.Entity) { hour24OtnTcms.parent = parent }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetParent() types.Entity { return hour24OtnTcms.parent }

func (hour24OtnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. TCM number. The type is interface{} with range:
    // -2147483648..2147483647.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Hour24OtnTcmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds

    // set otn TCA reporting status.
    Hour24OtnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetFilter() yfilter.YFilter { return hour24OtnTcm.YFilter }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) SetFilter(yf yfilter.YFilter) { hour24OtnTcm.YFilter = yf }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetGoName(yname string) string {
    if yname == "tcm-number" { return "TcmNumber" }
    if yname == "hour24otn-tcm-thresholds" { return "Hour24OtnTcmThresholds" }
    if yname == "hour24otn-tcm-reports" { return "Hour24OtnTcmReports" }
    return ""
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetSegmentPath() string {
    return "hour24otn-tcm" + "[tcm-number='" + fmt.Sprintf("%v", hour24OtnTcm.TcmNumber) + "']"
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-tcm-thresholds" {
        return &hour24OtnTcm.Hour24OtnTcmThresholds
    }
    if childYangName == "hour24otn-tcm-reports" {
        return &hour24OtnTcm.Hour24OtnTcmReports
    }
    return nil
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24otn-tcm-thresholds"] = &hour24OtnTcm.Hour24OtnTcmThresholds
    children["hour24otn-tcm-reports"] = &hour24OtnTcm.Hour24OtnTcmReports
    return children
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcm-number"] = hour24OtnTcm.TcmNumber
    return leafs
}

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetYangName() string { return "hour24otn-tcm" }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) SetParent(parent types.Entity) { hour24OtnTcm.parent = parent }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetParent() types.Entity { return hour24OtnTcm.parent }

func (hour24OtnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm) GetParentYangName() string { return "hour24otn-tcms" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold.
    Hour24OtnTcmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetFilter() yfilter.YFilter { return hour24OtnTcmThresholds.YFilter }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) SetFilter(yf yfilter.YFilter) { hour24OtnTcmThresholds.YFilter = yf }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetGoName(yname string) string {
    if yname == "hour24otn-tcm-threshold" { return "Hour24OtnTcmThreshold" }
    return ""
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetSegmentPath() string {
    return "hour24otn-tcm-thresholds"
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-tcm-threshold" {
        for _, c := range hour24OtnTcmThresholds.Hour24OtnTcmThreshold {
            if hour24OtnTcmThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold{}
        hour24OtnTcmThresholds.Hour24OtnTcmThreshold = append(hour24OtnTcmThresholds.Hour24OtnTcmThreshold, child)
        return &hour24OtnTcmThresholds.Hour24OtnTcmThreshold[len(hour24OtnTcmThresholds.Hour24OtnTcmThreshold)-1]
    }
    return nil
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnTcmThresholds.Hour24OtnTcmThreshold {
        children[hour24OtnTcmThresholds.Hour24OtnTcmThreshold[i].GetSegmentPath()] = &hour24OtnTcmThresholds.Hour24OtnTcmThreshold[i]
    }
    return children
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetYangName() string { return "hour24otn-tcm-thresholds" }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) SetParent(parent types.Entity) { hour24OtnTcmThresholds.parent = parent }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetParent() types.Entity { return hour24OtnTcmThresholds.parent }

func (hour24OtnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds) GetParentYangName() string { return "hour24otn-tcm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetFilter() yfilter.YFilter { return hour24OtnTcmThreshold.YFilter }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) SetFilter(yf yfilter.YFilter) { hour24OtnTcmThreshold.YFilter = yf }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetSegmentPath() string {
    return "hour24otn-tcm-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnTcmThreshold.OtnThreshold) + "']"
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = hour24OtnTcmThreshold.OtnThreshold
    leafs["otn-threshold-value"] = hour24OtnTcmThreshold.OtnThresholdValue
    return leafs
}

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetYangName() string { return "hour24otn-tcm-threshold" }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) SetParent(parent types.Entity) { hour24OtnTcmThreshold.parent = parent }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetParent() types.Entity { return hour24OtnTcmThreshold.parent }

func (hour24OtnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmThresholds_Hour24OtnTcmThreshold) GetParentYangName() string { return "hour24otn-tcm-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport.
    Hour24OtnTcmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetFilter() yfilter.YFilter { return hour24OtnTcmReports.YFilter }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) SetFilter(yf yfilter.YFilter) { hour24OtnTcmReports.YFilter = yf }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetGoName(yname string) string {
    if yname == "hour24otn-tcm-report" { return "Hour24OtnTcmReport" }
    return ""
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetSegmentPath() string {
    return "hour24otn-tcm-reports"
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-tcm-report" {
        for _, c := range hour24OtnTcmReports.Hour24OtnTcmReport {
            if hour24OtnTcmReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport{}
        hour24OtnTcmReports.Hour24OtnTcmReport = append(hour24OtnTcmReports.Hour24OtnTcmReport, child)
        return &hour24OtnTcmReports.Hour24OtnTcmReport[len(hour24OtnTcmReports.Hour24OtnTcmReport)-1]
    }
    return nil
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnTcmReports.Hour24OtnTcmReport {
        children[hour24OtnTcmReports.Hour24OtnTcmReport[i].GetSegmentPath()] = &hour24OtnTcmReports.Hour24OtnTcmReport[i]
    }
    return children
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetYangName() string { return "hour24otn-tcm-reports" }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) SetParent(parent types.Entity) { hour24OtnTcmReports.parent = parent }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetParent() types.Entity { return hour24OtnTcmReports.parent }

func (hour24OtnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports) GetParentYangName() string { return "hour24otn-tcm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetFilter() yfilter.YFilter { return hour24OtnTcmReport.YFilter }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) SetFilter(yf yfilter.YFilter) { hour24OtnTcmReport.YFilter = yf }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetSegmentPath() string {
    return "hour24otn-tcm-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnTcmReport.OtnReport) + "']"
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = hour24OtnTcmReport.OtnReport
    leafs["enable"] = hour24OtnTcmReport.Enable
    return leafs
}

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetYangName() string { return "hour24otn-tcm-report" }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) SetParent(parent types.Entity) { hour24OtnTcmReport.parent = parent }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetParent() types.Entity { return hour24OtnTcmReport.parent }

func (hour24OtnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24OtnTcms_Hour24OtnTcm_Hour24OtnTcmReports_Hour24OtnTcmReport) GetParentYangName() string { return "hour24otn-tcm-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetFilter() yfilter.YFilter { return stsMinute15.YFilter }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) SetFilter(yf yfilter.YFilter) { stsMinute15.YFilter = yf }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetGoName(yname string) string {
    if yname == "sts-minute15-path" { return "StsMinute15Path" }
    return ""
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetSegmentPath() string {
    return "sts-minute15"
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-minute15-path" {
        return &stsMinute15.StsMinute15Path
    }
    return nil
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sts-minute15-path"] = &stsMinute15.StsMinute15Path
    return children
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetYangName() string { return "sts-minute15" }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) SetParent(parent types.Entity) { stsMinute15.parent = parent }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetParent() types.Entity { return stsMinute15.parent }

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    StsMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports

    // Configure threshold on Path parameters.
    StsMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetFilter() yfilter.YFilter { return stsMinute15Path.YFilter }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) SetFilter(yf yfilter.YFilter) { stsMinute15Path.YFilter = yf }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetGoName(yname string) string {
    if yname == "sts-minute15-path-reports" { return "StsMinute15PathReports" }
    if yname == "sts-minute15-path-thresholds" { return "StsMinute15PathThresholds" }
    return ""
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetSegmentPath() string {
    return "sts-minute15-path"
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-minute15-path-reports" {
        return &stsMinute15Path.StsMinute15PathReports
    }
    if childYangName == "sts-minute15-path-thresholds" {
        return &stsMinute15Path.StsMinute15PathThresholds
    }
    return nil
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sts-minute15-path-reports"] = &stsMinute15Path.StsMinute15PathReports
    children["sts-minute15-path-thresholds"] = &stsMinute15Path.StsMinute15PathThresholds
    return children
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetYangName() string { return "sts-minute15-path" }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) SetParent(parent types.Entity) { stsMinute15Path.parent = parent }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetParent() types.Entity { return stsMinute15Path.parent }

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetParentYangName() string { return "sts-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport.
    StsMinute15PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetFilter() yfilter.YFilter { return stsMinute15PathReports.YFilter }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) SetFilter(yf yfilter.YFilter) { stsMinute15PathReports.YFilter = yf }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetGoName(yname string) string {
    if yname == "sts-minute15-path-report" { return "StsMinute15PathReport" }
    return ""
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetSegmentPath() string {
    return "sts-minute15-path-reports"
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-minute15-path-report" {
        for _, c := range stsMinute15PathReports.StsMinute15PathReport {
            if stsMinute15PathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport{}
        stsMinute15PathReports.StsMinute15PathReport = append(stsMinute15PathReports.StsMinute15PathReport, child)
        return &stsMinute15PathReports.StsMinute15PathReport[len(stsMinute15PathReports.StsMinute15PathReport)-1]
    }
    return nil
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stsMinute15PathReports.StsMinute15PathReport {
        children[stsMinute15PathReports.StsMinute15PathReport[i].GetSegmentPath()] = &stsMinute15PathReports.StsMinute15PathReport[i]
    }
    return children
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetYangName() string { return "sts-minute15-path-reports" }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) SetParent(parent types.Entity) { stsMinute15PathReports.parent = parent }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetParent() types.Entity { return stsMinute15PathReports.parent }

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetParentYangName() string { return "sts-minute15-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetFilter() yfilter.YFilter { return stsMinute15PathReport.YFilter }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) SetFilter(yf yfilter.YFilter) { stsMinute15PathReport.YFilter = yf }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetGoName(yname string) string {
    if yname == "path-report" { return "PathReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetSegmentPath() string {
    return "sts-minute15-path-report" + "[path-report='" + fmt.Sprintf("%v", stsMinute15PathReport.PathReport) + "']"
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-report"] = stsMinute15PathReport.PathReport
    leafs["enable"] = stsMinute15PathReport.Enable
    return leafs
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetYangName() string { return "sts-minute15-path-report" }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) SetParent(parent types.Entity) { stsMinute15PathReport.parent = parent }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetParent() types.Entity { return stsMinute15PathReport.parent }

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetParentYangName() string { return "sts-minute15-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold.
    StsMinute15PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetFilter() yfilter.YFilter { return stsMinute15PathThresholds.YFilter }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) SetFilter(yf yfilter.YFilter) { stsMinute15PathThresholds.YFilter = yf }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetGoName(yname string) string {
    if yname == "sts-minute15-path-threshold" { return "StsMinute15PathThreshold" }
    return ""
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetSegmentPath() string {
    return "sts-minute15-path-thresholds"
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-minute15-path-threshold" {
        for _, c := range stsMinute15PathThresholds.StsMinute15PathThreshold {
            if stsMinute15PathThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold{}
        stsMinute15PathThresholds.StsMinute15PathThreshold = append(stsMinute15PathThresholds.StsMinute15PathThreshold, child)
        return &stsMinute15PathThresholds.StsMinute15PathThreshold[len(stsMinute15PathThresholds.StsMinute15PathThreshold)-1]
    }
    return nil
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stsMinute15PathThresholds.StsMinute15PathThreshold {
        children[stsMinute15PathThresholds.StsMinute15PathThreshold[i].GetSegmentPath()] = &stsMinute15PathThresholds.StsMinute15PathThreshold[i]
    }
    return children
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetYangName() string { return "sts-minute15-path-thresholds" }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) SetParent(parent types.Entity) { stsMinute15PathThresholds.parent = parent }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetParent() types.Entity { return stsMinute15PathThresholds.parent }

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetParentYangName() string { return "sts-minute15-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetFilter() yfilter.YFilter { return stsMinute15PathThreshold.YFilter }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) SetFilter(yf yfilter.YFilter) { stsMinute15PathThreshold.YFilter = yf }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetGoName(yname string) string {
    if yname == "path-threshold" { return "PathThreshold" }
    if yname == "path-threshold-value" { return "PathThresholdValue" }
    return ""
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetSegmentPath() string {
    return "sts-minute15-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", stsMinute15PathThreshold.PathThreshold) + "']"
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-threshold"] = stsMinute15PathThreshold.PathThreshold
    leafs["path-threshold-value"] = stsMinute15PathThreshold.PathThresholdValue
    return leafs
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetYangName() string { return "sts-minute15-path-threshold" }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) SetParent(parent types.Entity) { stsMinute15PathThreshold.parent = parent }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetParent() types.Entity { return stsMinute15PathThreshold.parent }

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetParentYangName() string { return "sts-minute15-path-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn

    // Configure optics performance monitoring.
    Hour24Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics

    // Configure fec g709 performance monitoring.
    Hour24Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec

    // Configure secy-if performance monitoring.
    Hour24Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif

    // Configure secy-rx performance monitoring.
    Hour24Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx

    // Configure secy-tx performance monitoring.
    Hour24Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetFilter() yfilter.YFilter { return hour24.YFilter }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) SetFilter(yf yfilter.YFilter) { hour24.YFilter = yf }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetGoName(yname string) string {
    if yname == "hour24otn" { return "Hour24Otn" }
    if yname == "hour24-optics" { return "Hour24Optics" }
    if yname == "hour24fec" { return "Hour24Fec" }
    if yname == "hour24secyif" { return "Hour24Secyif" }
    if yname == "hour24secyrx" { return "Hour24Secyrx" }
    if yname == "hour24secytx" { return "Hour24Secytx" }
    return ""
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetSegmentPath() string {
    return "hour24"
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn" {
        return &hour24.Hour24Otn
    }
    if childYangName == "hour24-optics" {
        return &hour24.Hour24Optics
    }
    if childYangName == "hour24fec" {
        return &hour24.Hour24Fec
    }
    if childYangName == "hour24secyif" {
        return &hour24.Hour24Secyif
    }
    if childYangName == "hour24secyrx" {
        return &hour24.Hour24Secyrx
    }
    if childYangName == "hour24secytx" {
        return &hour24.Hour24Secytx
    }
    return nil
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24otn"] = &hour24.Hour24Otn
    children["hour24-optics"] = &hour24.Hour24Optics
    children["hour24fec"] = &hour24.Hour24Fec
    children["hour24secyif"] = &hour24.Hour24Secyif
    children["hour24secyrx"] = &hour24.Hour24Secyrx
    children["hour24secytx"] = &hour24.Hour24Secytx
    return children
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetBundleName() string { return "cisco_ios_xr" }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetYangName() string { return "hour24" }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) SetParent(parent types.Entity) { hour24.parent = parent }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetParent() types.Entity { return hour24.parent }

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Hour24OtnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds

    // set otn TCA reporting status.
    Hour24OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetFilter() yfilter.YFilter { return hour24Otn.YFilter }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) SetFilter(yf yfilter.YFilter) { hour24Otn.YFilter = yf }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetGoName(yname string) string {
    if yname == "hour24otn-thresholds" { return "Hour24OtnThresholds" }
    if yname == "hour24otn-reports" { return "Hour24OtnReports" }
    return ""
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetSegmentPath() string {
    return "hour24otn"
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-thresholds" {
        return &hour24Otn.Hour24OtnThresholds
    }
    if childYangName == "hour24otn-reports" {
        return &hour24Otn.Hour24OtnReports
    }
    return nil
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24otn-thresholds"] = &hour24Otn.Hour24OtnThresholds
    children["hour24otn-reports"] = &hour24Otn.Hour24OtnReports
    return children
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetYangName() string { return "hour24otn" }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) SetParent(parent types.Entity) { hour24Otn.parent = parent }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetParent() types.Entity { return hour24Otn.parent }

func (hour24Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold.
    Hour24OtnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetFilter() yfilter.YFilter { return hour24OtnThresholds.YFilter }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) SetFilter(yf yfilter.YFilter) { hour24OtnThresholds.YFilter = yf }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetGoName(yname string) string {
    if yname == "hour24otn-threshold" { return "Hour24OtnThreshold" }
    return ""
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetSegmentPath() string {
    return "hour24otn-thresholds"
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-threshold" {
        for _, c := range hour24OtnThresholds.Hour24OtnThreshold {
            if hour24OtnThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold{}
        hour24OtnThresholds.Hour24OtnThreshold = append(hour24OtnThresholds.Hour24OtnThreshold, child)
        return &hour24OtnThresholds.Hour24OtnThreshold[len(hour24OtnThresholds.Hour24OtnThreshold)-1]
    }
    return nil
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnThresholds.Hour24OtnThreshold {
        children[hour24OtnThresholds.Hour24OtnThreshold[i].GetSegmentPath()] = &hour24OtnThresholds.Hour24OtnThreshold[i]
    }
    return children
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetYangName() string { return "hour24otn-thresholds" }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) SetParent(parent types.Entity) { hour24OtnThresholds.parent = parent }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetParent() types.Entity { return hour24OtnThresholds.parent }

func (hour24OtnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds) GetParentYangName() string { return "hour24otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetFilter() yfilter.YFilter { return hour24OtnThreshold.YFilter }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) SetFilter(yf yfilter.YFilter) { hour24OtnThreshold.YFilter = yf }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetSegmentPath() string {
    return "hour24otn-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnThreshold.OtnThreshold) + "']"
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = hour24OtnThreshold.OtnThreshold
    leafs["otn-threshold-value"] = hour24OtnThreshold.OtnThresholdValue
    return leafs
}

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetYangName() string { return "hour24otn-threshold" }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) SetParent(parent types.Entity) { hour24OtnThreshold.parent = parent }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetParent() types.Entity { return hour24OtnThreshold.parent }

func (hour24OtnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnThresholds_Hour24OtnThreshold) GetParentYangName() string { return "hour24otn-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport.
    Hour24OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetFilter() yfilter.YFilter { return hour24OtnReports.YFilter }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) SetFilter(yf yfilter.YFilter) { hour24OtnReports.YFilter = yf }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetGoName(yname string) string {
    if yname == "hour24otn-report" { return "Hour24OtnReport" }
    return ""
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetSegmentPath() string {
    return "hour24otn-reports"
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-report" {
        for _, c := range hour24OtnReports.Hour24OtnReport {
            if hour24OtnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport{}
        hour24OtnReports.Hour24OtnReport = append(hour24OtnReports.Hour24OtnReport, child)
        return &hour24OtnReports.Hour24OtnReport[len(hour24OtnReports.Hour24OtnReport)-1]
    }
    return nil
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnReports.Hour24OtnReport {
        children[hour24OtnReports.Hour24OtnReport[i].GetSegmentPath()] = &hour24OtnReports.Hour24OtnReport[i]
    }
    return children
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetYangName() string { return "hour24otn-reports" }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) SetParent(parent types.Entity) { hour24OtnReports.parent = parent }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetParent() types.Entity { return hour24OtnReports.parent }

func (hour24OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports) GetParentYangName() string { return "hour24otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetFilter() yfilter.YFilter { return hour24OtnReport.YFilter }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) SetFilter(yf yfilter.YFilter) { hour24OtnReport.YFilter = yf }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetSegmentPath() string {
    return "hour24otn-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnReport.OtnReport) + "']"
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = hour24OtnReport.OtnReport
    leafs["enable"] = hour24OtnReport.Enable
    return leafs
}

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetYangName() string { return "hour24otn-report" }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) SetParent(parent types.Entity) { hour24OtnReport.parent = parent }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetParent() types.Entity { return hour24OtnReport.parent }

func (hour24OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Otn_Hour24OtnReports_Hour24OtnReport) GetParentYangName() string { return "hour24otn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Hour24OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds

    // set optics TCA reporting status.
    Hour24OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetFilter() yfilter.YFilter { return hour24Optics.YFilter }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) SetFilter(yf yfilter.YFilter) { hour24Optics.YFilter = yf }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetGoName(yname string) string {
    if yname == "hour24-optics-thresholds" { return "Hour24OpticsThresholds" }
    if yname == "hour24-optics-reports" { return "Hour24OpticsReports" }
    return ""
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetSegmentPath() string {
    return "hour24-optics"
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-optics-thresholds" {
        return &hour24Optics.Hour24OpticsThresholds
    }
    if childYangName == "hour24-optics-reports" {
        return &hour24Optics.Hour24OpticsReports
    }
    return nil
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24-optics-thresholds"] = &hour24Optics.Hour24OpticsThresholds
    children["hour24-optics-reports"] = &hour24Optics.Hour24OpticsReports
    return children
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetYangName() string { return "hour24-optics" }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) SetParent(parent types.Entity) { hour24Optics.parent = parent }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetParent() types.Entity { return hour24Optics.parent }

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold.
    Hour24OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetFilter() yfilter.YFilter { return hour24OpticsThresholds.YFilter }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) SetFilter(yf yfilter.YFilter) { hour24OpticsThresholds.YFilter = yf }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetGoName(yname string) string {
    if yname == "hour24-optics-threshold" { return "Hour24OpticsThreshold" }
    return ""
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetSegmentPath() string {
    return "hour24-optics-thresholds"
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-optics-threshold" {
        for _, c := range hour24OpticsThresholds.Hour24OpticsThreshold {
            if hour24OpticsThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold{}
        hour24OpticsThresholds.Hour24OpticsThreshold = append(hour24OpticsThresholds.Hour24OpticsThreshold, child)
        return &hour24OpticsThresholds.Hour24OpticsThreshold[len(hour24OpticsThresholds.Hour24OpticsThreshold)-1]
    }
    return nil
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OpticsThresholds.Hour24OpticsThreshold {
        children[hour24OpticsThresholds.Hour24OpticsThreshold[i].GetSegmentPath()] = &hour24OpticsThresholds.Hour24OpticsThreshold[i]
    }
    return children
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetYangName() string { return "hour24-optics-thresholds" }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) SetParent(parent types.Entity) { hour24OpticsThresholds.parent = parent }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetParent() types.Entity { return hour24OpticsThresholds.parent }

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetParentYangName() string { return "hour24-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetFilter() yfilter.YFilter { return hour24OpticsThreshold.YFilter }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) SetFilter(yf yfilter.YFilter) { hour24OpticsThreshold.YFilter = yf }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetGoName(yname string) string {
    if yname == "optics-threshold" { return "OpticsThreshold" }
    if yname == "optics-threshold-value" { return "OpticsThresholdValue" }
    if yname == "dbm" { return "Dbm" }
    return ""
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetSegmentPath() string {
    return "hour24-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", hour24OpticsThreshold.OpticsThreshold) + "']"
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-threshold"] = hour24OpticsThreshold.OpticsThreshold
    leafs["optics-threshold-value"] = hour24OpticsThreshold.OpticsThresholdValue
    leafs["dbm"] = hour24OpticsThreshold.Dbm
    return leafs
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetYangName() string { return "hour24-optics-threshold" }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) SetParent(parent types.Entity) { hour24OpticsThreshold.parent = parent }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetParent() types.Entity { return hour24OpticsThreshold.parent }

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetParentYangName() string { return "hour24-optics-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport.
    Hour24OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetFilter() yfilter.YFilter { return hour24OpticsReports.YFilter }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) SetFilter(yf yfilter.YFilter) { hour24OpticsReports.YFilter = yf }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetGoName(yname string) string {
    if yname == "hour24-optics-report" { return "Hour24OpticsReport" }
    return ""
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetSegmentPath() string {
    return "hour24-optics-reports"
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24-optics-report" {
        for _, c := range hour24OpticsReports.Hour24OpticsReport {
            if hour24OpticsReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport{}
        hour24OpticsReports.Hour24OpticsReport = append(hour24OpticsReports.Hour24OpticsReport, child)
        return &hour24OpticsReports.Hour24OpticsReport[len(hour24OpticsReports.Hour24OpticsReport)-1]
    }
    return nil
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OpticsReports.Hour24OpticsReport {
        children[hour24OpticsReports.Hour24OpticsReport[i].GetSegmentPath()] = &hour24OpticsReports.Hour24OpticsReport[i]
    }
    return children
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetYangName() string { return "hour24-optics-reports" }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) SetParent(parent types.Entity) { hour24OpticsReports.parent = parent }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetParent() types.Entity { return hour24OpticsReports.parent }

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetParentYangName() string { return "hour24-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetFilter() yfilter.YFilter { return hour24OpticsReport.YFilter }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) SetFilter(yf yfilter.YFilter) { hour24OpticsReport.YFilter = yf }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetGoName(yname string) string {
    if yname == "optics-report" { return "OpticsReport" }
    return ""
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetSegmentPath() string {
    return "hour24-optics-report" + "[optics-report='" + fmt.Sprintf("%v", hour24OpticsReport.OpticsReport) + "']"
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-report"] = hour24OpticsReport.OpticsReport
    return leafs
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetYangName() string { return "hour24-optics-report" }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) SetParent(parent types.Entity) { hour24OpticsReport.parent = parent }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetParent() types.Entity { return hour24OpticsReport.parent }

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetParentYangName() string { return "hour24-optics-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Hour24FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds

    // set fec TCA reporting status.
    Hour24FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetFilter() yfilter.YFilter { return hour24Fec.YFilter }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) SetFilter(yf yfilter.YFilter) { hour24Fec.YFilter = yf }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetGoName(yname string) string {
    if yname == "hour24fec-thresholds" { return "Hour24FecThresholds" }
    if yname == "hour24fec-reports" { return "Hour24FecReports" }
    return ""
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetSegmentPath() string {
    return "hour24fec"
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24fec-thresholds" {
        return &hour24Fec.Hour24FecThresholds
    }
    if childYangName == "hour24fec-reports" {
        return &hour24Fec.Hour24FecReports
    }
    return nil
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24fec-thresholds"] = &hour24Fec.Hour24FecThresholds
    children["hour24fec-reports"] = &hour24Fec.Hour24FecReports
    return children
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetYangName() string { return "hour24fec" }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) SetParent(parent types.Entity) { hour24Fec.parent = parent }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetParent() types.Entity { return hour24Fec.parent }

func (hour24Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold.
    Hour24FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetFilter() yfilter.YFilter { return hour24FecThresholds.YFilter }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) SetFilter(yf yfilter.YFilter) { hour24FecThresholds.YFilter = yf }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetGoName(yname string) string {
    if yname == "hour24fec-threshold" { return "Hour24FecThreshold" }
    return ""
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetSegmentPath() string {
    return "hour24fec-thresholds"
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24fec-threshold" {
        for _, c := range hour24FecThresholds.Hour24FecThreshold {
            if hour24FecThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold{}
        hour24FecThresholds.Hour24FecThreshold = append(hour24FecThresholds.Hour24FecThreshold, child)
        return &hour24FecThresholds.Hour24FecThreshold[len(hour24FecThresholds.Hour24FecThreshold)-1]
    }
    return nil
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24FecThresholds.Hour24FecThreshold {
        children[hour24FecThresholds.Hour24FecThreshold[i].GetSegmentPath()] = &hour24FecThresholds.Hour24FecThreshold[i]
    }
    return children
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetYangName() string { return "hour24fec-thresholds" }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) SetParent(parent types.Entity) { hour24FecThresholds.parent = parent }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetParent() types.Entity { return hour24FecThresholds.parent }

func (hour24FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds) GetParentYangName() string { return "hour24fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec threshold value. The type is string with length: 1..16. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetFilter() yfilter.YFilter { return hour24FecThreshold.YFilter }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) SetFilter(yf yfilter.YFilter) { hour24FecThreshold.YFilter = yf }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetGoName(yname string) string {
    if yname == "fec-threshold" { return "FecThreshold" }
    if yname == "fec-threshold-value" { return "FecThresholdValue" }
    return ""
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetSegmentPath() string {
    return "hour24fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", hour24FecThreshold.FecThreshold) + "']"
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-threshold"] = hour24FecThreshold.FecThreshold
    leafs["fec-threshold-value"] = hour24FecThreshold.FecThresholdValue
    return leafs
}

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetYangName() string { return "hour24fec-threshold" }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) SetParent(parent types.Entity) { hour24FecThreshold.parent = parent }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetParent() types.Entity { return hour24FecThreshold.parent }

func (hour24FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecThresholds_Hour24FecThreshold) GetParentYangName() string { return "hour24fec-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport.
    Hour24FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetFilter() yfilter.YFilter { return hour24FecReports.YFilter }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) SetFilter(yf yfilter.YFilter) { hour24FecReports.YFilter = yf }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetGoName(yname string) string {
    if yname == "hour24fec-report" { return "Hour24FecReport" }
    return ""
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetSegmentPath() string {
    return "hour24fec-reports"
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24fec-report" {
        for _, c := range hour24FecReports.Hour24FecReport {
            if hour24FecReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport{}
        hour24FecReports.Hour24FecReport = append(hour24FecReports.Hour24FecReport, child)
        return &hour24FecReports.Hour24FecReport[len(hour24FecReports.Hour24FecReport)-1]
    }
    return nil
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24FecReports.Hour24FecReport {
        children[hour24FecReports.Hour24FecReport[i].GetSegmentPath()] = &hour24FecReports.Hour24FecReport[i]
    }
    return children
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetYangName() string { return "hour24fec-reports" }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) SetParent(parent types.Entity) { hour24FecReports.parent = parent }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetParent() types.Entity { return hour24FecReports.parent }

func (hour24FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports) GetParentYangName() string { return "hour24fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetFilter() yfilter.YFilter { return hour24FecReport.YFilter }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) SetFilter(yf yfilter.YFilter) { hour24FecReport.YFilter = yf }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetGoName(yname string) string {
    if yname == "fec-report" { return "FecReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetSegmentPath() string {
    return "hour24fec-report" + "[fec-report='" + fmt.Sprintf("%v", hour24FecReport.FecReport) + "']"
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-report"] = hour24FecReport.FecReport
    leafs["enable"] = hour24FecReport.Enable
    return leafs
}

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetYangName() string { return "hour24fec-report" }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) SetParent(parent types.Entity) { hour24FecReport.parent = parent }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetParent() types.Entity { return hour24FecReport.parent }

func (hour24FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Fec_Hour24FecReports_Hour24FecReport) GetParentYangName() string { return "hour24fec-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Hour24SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports

    // Configure secyif threshold.
    Hour24SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetFilter() yfilter.YFilter { return hour24Secyif.YFilter }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) SetFilter(yf yfilter.YFilter) { hour24Secyif.YFilter = yf }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetGoName(yname string) string {
    if yname == "hour24secyif-reports" { return "Hour24SecyifReports" }
    if yname == "hour24secyif-thresholds" { return "Hour24SecyifThresholds" }
    return ""
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetSegmentPath() string {
    return "hour24secyif"
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyif-reports" {
        return &hour24Secyif.Hour24SecyifReports
    }
    if childYangName == "hour24secyif-thresholds" {
        return &hour24Secyif.Hour24SecyifThresholds
    }
    return nil
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24secyif-reports"] = &hour24Secyif.Hour24SecyifReports
    children["hour24secyif-thresholds"] = &hour24Secyif.Hour24SecyifThresholds
    return children
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetYangName() string { return "hour24secyif" }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) SetParent(parent types.Entity) { hour24Secyif.parent = parent }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetParent() types.Entity { return hour24Secyif.parent }

func (hour24Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport.
    Hour24SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetFilter() yfilter.YFilter { return hour24SecyifReports.YFilter }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) SetFilter(yf yfilter.YFilter) { hour24SecyifReports.YFilter = yf }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetGoName(yname string) string {
    if yname == "hour24secyif-report" { return "Hour24SecyifReport" }
    return ""
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetSegmentPath() string {
    return "hour24secyif-reports"
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyif-report" {
        for _, c := range hour24SecyifReports.Hour24SecyifReport {
            if hour24SecyifReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport{}
        hour24SecyifReports.Hour24SecyifReport = append(hour24SecyifReports.Hour24SecyifReport, child)
        return &hour24SecyifReports.Hour24SecyifReport[len(hour24SecyifReports.Hour24SecyifReport)-1]
    }
    return nil
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecyifReports.Hour24SecyifReport {
        children[hour24SecyifReports.Hour24SecyifReport[i].GetSegmentPath()] = &hour24SecyifReports.Hour24SecyifReport[i]
    }
    return children
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetYangName() string { return "hour24secyif-reports" }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) SetParent(parent types.Entity) { hour24SecyifReports.parent = parent }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetParent() types.Entity { return hour24SecyifReports.parent }

func (hour24SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports) GetParentYangName() string { return "hour24secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report type. The type is SecyifReport.
    SecyifReport interface{}

    // Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetFilter() yfilter.YFilter { return hour24SecyifReport.YFilter }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) SetFilter(yf yfilter.YFilter) { hour24SecyifReport.YFilter = yf }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetGoName(yname string) string {
    if yname == "secyif-report" { return "SecyifReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetSegmentPath() string {
    return "hour24secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", hour24SecyifReport.SecyifReport) + "']"
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-report"] = hour24SecyifReport.SecyifReport
    leafs["enable"] = hour24SecyifReport.Enable
    return leafs
}

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetYangName() string { return "hour24secyif-report" }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) SetParent(parent types.Entity) { hour24SecyifReport.parent = parent }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetParent() types.Entity { return hour24SecyifReport.parent }

func (hour24SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifReports_Hour24SecyifReport) GetParentYangName() string { return "hour24secyif-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds
// Configure secyif threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold.
    Hour24SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetFilter() yfilter.YFilter { return hour24SecyifThresholds.YFilter }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) SetFilter(yf yfilter.YFilter) { hour24SecyifThresholds.YFilter = yf }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetGoName(yname string) string {
    if yname == "hour24secyif-threshold" { return "Hour24SecyifThreshold" }
    return ""
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetSegmentPath() string {
    return "hour24secyif-thresholds"
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyif-threshold" {
        for _, c := range hour24SecyifThresholds.Hour24SecyifThreshold {
            if hour24SecyifThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold{}
        hour24SecyifThresholds.Hour24SecyifThreshold = append(hour24SecyifThresholds.Hour24SecyifThreshold, child)
        return &hour24SecyifThresholds.Hour24SecyifThreshold[len(hour24SecyifThresholds.Hour24SecyifThreshold)-1]
    }
    return nil
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecyifThresholds.Hour24SecyifThreshold {
        children[hour24SecyifThresholds.Hour24SecyifThreshold[i].GetSegmentPath()] = &hour24SecyifThresholds.Hour24SecyifThreshold[i]
    }
    return children
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetYangName() string { return "hour24secyif-thresholds" }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) SetParent(parent types.Entity) { hour24SecyifThresholds.parent = parent }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetParent() types.Entity { return hour24SecyifThresholds.parent }

func (hour24SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds) GetParentYangName() string { return "hour24secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetFilter() yfilter.YFilter { return hour24SecyifThreshold.YFilter }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) SetFilter(yf yfilter.YFilter) { hour24SecyifThreshold.YFilter = yf }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetGoName(yname string) string {
    if yname == "secyif-threshold" { return "SecyifThreshold" }
    if yname == "secyif-threshold-value" { return "SecyifThresholdValue" }
    return ""
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetSegmentPath() string {
    return "hour24secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", hour24SecyifThreshold.SecyifThreshold) + "']"
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-threshold"] = hour24SecyifThreshold.SecyifThreshold
    leafs["secyif-threshold-value"] = hour24SecyifThreshold.SecyifThresholdValue
    return leafs
}

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetYangName() string { return "hour24secyif-threshold" }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) SetParent(parent types.Entity) { hour24SecyifThreshold.parent = parent }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetParent() types.Entity { return hour24SecyifThreshold.parent }

func (hour24SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyif_Hour24SecyifThresholds_Hour24SecyifThreshold) GetParentYangName() string { return "hour24secyif-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Hour24SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports

    // Configure secyrx threshold.
    Hour24SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetFilter() yfilter.YFilter { return hour24Secyrx.YFilter }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) SetFilter(yf yfilter.YFilter) { hour24Secyrx.YFilter = yf }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetGoName(yname string) string {
    if yname == "hour24secyrx-reports" { return "Hour24SecyrxReports" }
    if yname == "hour24secyrx-thresholds" { return "Hour24SecyrxThresholds" }
    return ""
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetSegmentPath() string {
    return "hour24secyrx"
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyrx-reports" {
        return &hour24Secyrx.Hour24SecyrxReports
    }
    if childYangName == "hour24secyrx-thresholds" {
        return &hour24Secyrx.Hour24SecyrxThresholds
    }
    return nil
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24secyrx-reports"] = &hour24Secyrx.Hour24SecyrxReports
    children["hour24secyrx-thresholds"] = &hour24Secyrx.Hour24SecyrxThresholds
    return children
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetYangName() string { return "hour24secyrx" }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) SetParent(parent types.Entity) { hour24Secyrx.parent = parent }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetParent() types.Entity { return hour24Secyrx.parent }

func (hour24Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport.
    Hour24SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetFilter() yfilter.YFilter { return hour24SecyrxReports.YFilter }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) SetFilter(yf yfilter.YFilter) { hour24SecyrxReports.YFilter = yf }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetGoName(yname string) string {
    if yname == "hour24secyrx-report" { return "Hour24SecyrxReport" }
    return ""
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetSegmentPath() string {
    return "hour24secyrx-reports"
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyrx-report" {
        for _, c := range hour24SecyrxReports.Hour24SecyrxReport {
            if hour24SecyrxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport{}
        hour24SecyrxReports.Hour24SecyrxReport = append(hour24SecyrxReports.Hour24SecyrxReport, child)
        return &hour24SecyrxReports.Hour24SecyrxReport[len(hour24SecyrxReports.Hour24SecyrxReport)-1]
    }
    return nil
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecyrxReports.Hour24SecyrxReport {
        children[hour24SecyrxReports.Hour24SecyrxReport[i].GetSegmentPath()] = &hour24SecyrxReports.Hour24SecyrxReport[i]
    }
    return children
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetYangName() string { return "hour24secyrx-reports" }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) SetParent(parent types.Entity) { hour24SecyrxReports.parent = parent }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetParent() types.Entity { return hour24SecyrxReports.parent }

func (hour24SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports) GetParentYangName() string { return "hour24secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetFilter() yfilter.YFilter { return hour24SecyrxReport.YFilter }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) SetFilter(yf yfilter.YFilter) { hour24SecyrxReport.YFilter = yf }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetGoName(yname string) string {
    if yname == "secyrx-report" { return "SecyrxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetSegmentPath() string {
    return "hour24secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", hour24SecyrxReport.SecyrxReport) + "']"
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-report"] = hour24SecyrxReport.SecyrxReport
    leafs["enable"] = hour24SecyrxReport.Enable
    return leafs
}

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetYangName() string { return "hour24secyrx-report" }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) SetParent(parent types.Entity) { hour24SecyrxReport.parent = parent }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetParent() types.Entity { return hour24SecyrxReport.parent }

func (hour24SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxReports_Hour24SecyrxReport) GetParentYangName() string { return "hour24secyrx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds
// Configure secyrx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold.
    Hour24SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetFilter() yfilter.YFilter { return hour24SecyrxThresholds.YFilter }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) SetFilter(yf yfilter.YFilter) { hour24SecyrxThresholds.YFilter = yf }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetGoName(yname string) string {
    if yname == "hour24secyrx-threshold" { return "Hour24SecyrxThreshold" }
    return ""
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetSegmentPath() string {
    return "hour24secyrx-thresholds"
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secyrx-threshold" {
        for _, c := range hour24SecyrxThresholds.Hour24SecyrxThreshold {
            if hour24SecyrxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold{}
        hour24SecyrxThresholds.Hour24SecyrxThreshold = append(hour24SecyrxThresholds.Hour24SecyrxThreshold, child)
        return &hour24SecyrxThresholds.Hour24SecyrxThreshold[len(hour24SecyrxThresholds.Hour24SecyrxThreshold)-1]
    }
    return nil
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecyrxThresholds.Hour24SecyrxThreshold {
        children[hour24SecyrxThresholds.Hour24SecyrxThreshold[i].GetSegmentPath()] = &hour24SecyrxThresholds.Hour24SecyrxThreshold[i]
    }
    return children
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetYangName() string { return "hour24secyrx-thresholds" }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) SetParent(parent types.Entity) { hour24SecyrxThresholds.parent = parent }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetParent() types.Entity { return hour24SecyrxThresholds.parent }

func (hour24SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds) GetParentYangName() string { return "hour24secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetFilter() yfilter.YFilter { return hour24SecyrxThreshold.YFilter }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) SetFilter(yf yfilter.YFilter) { hour24SecyrxThreshold.YFilter = yf }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetGoName(yname string) string {
    if yname == "secyrx-threshold" { return "SecyrxThreshold" }
    if yname == "secyrx-threshold-value" { return "SecyrxThresholdValue" }
    return ""
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetSegmentPath() string {
    return "hour24secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", hour24SecyrxThreshold.SecyrxThreshold) + "']"
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-threshold"] = hour24SecyrxThreshold.SecyrxThreshold
    leafs["secyrx-threshold-value"] = hour24SecyrxThreshold.SecyrxThresholdValue
    return leafs
}

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetYangName() string { return "hour24secyrx-threshold" }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) SetParent(parent types.Entity) { hour24SecyrxThreshold.parent = parent }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetParent() types.Entity { return hour24SecyrxThreshold.parent }

func (hour24SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secyrx_Hour24SecyrxThresholds_Hour24SecyrxThreshold) GetParentYangName() string { return "hour24secyrx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure secytx threshold.
    Hour24SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds

    // set secytx TCA reporting status.
    Hour24SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetFilter() yfilter.YFilter { return hour24Secytx.YFilter }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) SetFilter(yf yfilter.YFilter) { hour24Secytx.YFilter = yf }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetGoName(yname string) string {
    if yname == "hour24secytx-thresholds" { return "Hour24SecytxThresholds" }
    if yname == "hour24secytx-reports" { return "Hour24SecytxReports" }
    return ""
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetSegmentPath() string {
    return "hour24secytx"
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secytx-thresholds" {
        return &hour24Secytx.Hour24SecytxThresholds
    }
    if childYangName == "hour24secytx-reports" {
        return &hour24Secytx.Hour24SecytxReports
    }
    return nil
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24secytx-thresholds"] = &hour24Secytx.Hour24SecytxThresholds
    children["hour24secytx-reports"] = &hour24Secytx.Hour24SecytxReports
    return children
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetYangName() string { return "hour24secytx" }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) SetParent(parent types.Entity) { hour24Secytx.parent = parent }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetParent() types.Entity { return hour24Secytx.parent }

func (hour24Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx) GetParentYangName() string { return "hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds
// Configure secytx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold.
    Hour24SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetFilter() yfilter.YFilter { return hour24SecytxThresholds.YFilter }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) SetFilter(yf yfilter.YFilter) { hour24SecytxThresholds.YFilter = yf }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetGoName(yname string) string {
    if yname == "hour24secytx-threshold" { return "Hour24SecytxThreshold" }
    return ""
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetSegmentPath() string {
    return "hour24secytx-thresholds"
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secytx-threshold" {
        for _, c := range hour24SecytxThresholds.Hour24SecytxThreshold {
            if hour24SecytxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold{}
        hour24SecytxThresholds.Hour24SecytxThreshold = append(hour24SecytxThresholds.Hour24SecytxThreshold, child)
        return &hour24SecytxThresholds.Hour24SecytxThreshold[len(hour24SecytxThresholds.Hour24SecytxThreshold)-1]
    }
    return nil
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecytxThresholds.Hour24SecytxThreshold {
        children[hour24SecytxThresholds.Hour24SecytxThreshold[i].GetSegmentPath()] = &hour24SecytxThresholds.Hour24SecytxThreshold[i]
    }
    return children
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetYangName() string { return "hour24secytx-thresholds" }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) SetParent(parent types.Entity) { hour24SecytxThresholds.parent = parent }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetParent() types.Entity { return hour24SecytxThresholds.parent }

func (hour24SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds) GetParentYangName() string { return "hour24secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx threshold value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetFilter() yfilter.YFilter { return hour24SecytxThreshold.YFilter }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) SetFilter(yf yfilter.YFilter) { hour24SecytxThreshold.YFilter = yf }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetGoName(yname string) string {
    if yname == "secytx-threshold" { return "SecytxThreshold" }
    if yname == "secytx-threshold-value" { return "SecytxThresholdValue" }
    return ""
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetSegmentPath() string {
    return "hour24secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", hour24SecytxThreshold.SecytxThreshold) + "']"
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-threshold"] = hour24SecytxThreshold.SecytxThreshold
    leafs["secytx-threshold-value"] = hour24SecytxThreshold.SecytxThresholdValue
    return leafs
}

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetYangName() string { return "hour24secytx-threshold" }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) SetParent(parent types.Entity) { hour24SecytxThreshold.parent = parent }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetParent() types.Entity { return hour24SecytxThreshold.parent }

func (hour24SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxThresholds_Hour24SecytxThreshold) GetParentYangName() string { return "hour24secytx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport.
    Hour24SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetFilter() yfilter.YFilter { return hour24SecytxReports.YFilter }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) SetFilter(yf yfilter.YFilter) { hour24SecytxReports.YFilter = yf }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetGoName(yname string) string {
    if yname == "hour24secytx-report" { return "Hour24SecytxReport" }
    return ""
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetSegmentPath() string {
    return "hour24secytx-reports"
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24secytx-report" {
        for _, c := range hour24SecytxReports.Hour24SecytxReport {
            if hour24SecytxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport{}
        hour24SecytxReports.Hour24SecytxReport = append(hour24SecytxReports.Hour24SecytxReport, child)
        return &hour24SecytxReports.Hour24SecytxReport[len(hour24SecytxReports.Hour24SecytxReport)-1]
    }
    return nil
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24SecytxReports.Hour24SecytxReport {
        children[hour24SecytxReports.Hour24SecytxReport[i].GetSegmentPath()] = &hour24SecytxReports.Hour24SecytxReport[i]
    }
    return children
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetYangName() string { return "hour24secytx-reports" }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) SetParent(parent types.Entity) { hour24SecytxReports.parent = parent }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetParent() types.Entity { return hour24SecytxReports.parent }

func (hour24SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports) GetParentYangName() string { return "hour24secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report type. The type is SecytxReport.
    SecytxReport interface{}

    // Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetFilter() yfilter.YFilter { return hour24SecytxReport.YFilter }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) SetFilter(yf yfilter.YFilter) { hour24SecytxReport.YFilter = yf }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetGoName(yname string) string {
    if yname == "secytx-report" { return "SecytxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetSegmentPath() string {
    return "hour24secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", hour24SecytxReport.SecytxReport) + "']"
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-report"] = hour24SecytxReport.SecytxReport
    leafs["enable"] = hour24SecytxReport.Enable
    return leafs
}

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetYangName() string { return "hour24secytx-report" }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) SetParent(parent types.Entity) { hour24SecytxReport.parent = parent }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetParent() types.Entity { return hour24SecytxReport.parent }

func (hour24SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Secytx_Hour24SecytxReports_Hour24SecytxReport) GetParentYangName() string { return "hour24secytx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcMinute15HoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetFilter() yfilter.YFilter { return hoVcMinute15.YFilter }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) SetFilter(yf yfilter.YFilter) { hoVcMinute15.YFilter = yf }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetGoName(yname string) string {
    if yname == "ho-vc-minute15ho-vc" { return "HoVcMinute15HoVc" }
    return ""
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetSegmentPath() string {
    return "ho-vc-minute15"
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-minute15ho-vc" {
        return &hoVcMinute15.HoVcMinute15HoVc
    }
    return nil
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ho-vc-minute15ho-vc"] = &hoVcMinute15.HoVcMinute15HoVc
    return children
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetYangName() string { return "ho-vc-minute15" }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) SetParent(parent types.Entity) { hoVcMinute15.parent = parent }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetParent() types.Entity { return hoVcMinute15.parent }

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcMinute15HoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcMinute15HoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetFilter() yfilter.YFilter { return hoVcMinute15HoVc.YFilter }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) SetFilter(yf yfilter.YFilter) { hoVcMinute15HoVc.YFilter = yf }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetGoName(yname string) string {
    if yname == "ho-vc-minute15ho-vc-reports" { return "HoVcMinute15HoVcReports" }
    if yname == "ho-vc-minute15ho-vc-thresholds" { return "HoVcMinute15HoVcThresholds" }
    return ""
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetSegmentPath() string {
    return "ho-vc-minute15ho-vc"
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-minute15ho-vc-reports" {
        return &hoVcMinute15HoVc.HoVcMinute15HoVcReports
    }
    if childYangName == "ho-vc-minute15ho-vc-thresholds" {
        return &hoVcMinute15HoVc.HoVcMinute15HoVcThresholds
    }
    return nil
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ho-vc-minute15ho-vc-reports"] = &hoVcMinute15HoVc.HoVcMinute15HoVcReports
    children["ho-vc-minute15ho-vc-thresholds"] = &hoVcMinute15HoVc.HoVcMinute15HoVcThresholds
    return children
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetYangName() string { return "ho-vc-minute15ho-vc" }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) SetParent(parent types.Entity) { hoVcMinute15HoVc.parent = parent }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetParent() types.Entity { return hoVcMinute15HoVc.parent }

func (hoVcMinute15HoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc) GetParentYangName() string { return "ho-vc-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport.
    HoVcMinute15HoVcReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetFilter() yfilter.YFilter { return hoVcMinute15HoVcReports.YFilter }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) SetFilter(yf yfilter.YFilter) { hoVcMinute15HoVcReports.YFilter = yf }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetGoName(yname string) string {
    if yname == "ho-vc-minute15ho-vc-report" { return "HoVcMinute15HoVcReport" }
    return ""
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetSegmentPath() string {
    return "ho-vc-minute15ho-vc-reports"
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-minute15ho-vc-report" {
        for _, c := range hoVcMinute15HoVcReports.HoVcMinute15HoVcReport {
            if hoVcMinute15HoVcReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport{}
        hoVcMinute15HoVcReports.HoVcMinute15HoVcReport = append(hoVcMinute15HoVcReports.HoVcMinute15HoVcReport, child)
        return &hoVcMinute15HoVcReports.HoVcMinute15HoVcReport[len(hoVcMinute15HoVcReports.HoVcMinute15HoVcReport)-1]
    }
    return nil
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hoVcMinute15HoVcReports.HoVcMinute15HoVcReport {
        children[hoVcMinute15HoVcReports.HoVcMinute15HoVcReport[i].GetSegmentPath()] = &hoVcMinute15HoVcReports.HoVcMinute15HoVcReport[i]
    }
    return children
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetYangName() string { return "ho-vc-minute15ho-vc-reports" }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) SetParent(parent types.Entity) { hoVcMinute15HoVcReports.parent = parent }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetParent() types.Entity { return hoVcMinute15HoVcReports.parent }

func (hoVcMinute15HoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports) GetParentYangName() string { return "ho-vc-minute15ho-vc" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetFilter() yfilter.YFilter { return hoVcMinute15HoVcReport.YFilter }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) SetFilter(yf yfilter.YFilter) { hoVcMinute15HoVcReport.YFilter = yf }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetGoName(yname string) string {
    if yname == "ho-vc-report" { return "HoVcReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetSegmentPath() string {
    return "ho-vc-minute15ho-vc-report" + "[ho-vc-report='" + fmt.Sprintf("%v", hoVcMinute15HoVcReport.HoVcReport) + "']"
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ho-vc-report"] = hoVcMinute15HoVcReport.HoVcReport
    leafs["enable"] = hoVcMinute15HoVcReport.Enable
    return leafs
}

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetYangName() string { return "ho-vc-minute15ho-vc-report" }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) SetParent(parent types.Entity) { hoVcMinute15HoVcReport.parent = parent }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetParent() types.Entity { return hoVcMinute15HoVcReport.parent }

func (hoVcMinute15HoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcReports_HoVcMinute15HoVcReport) GetParentYangName() string { return "ho-vc-minute15ho-vc-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold.
    HoVcMinute15HoVcThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetFilter() yfilter.YFilter { return hoVcMinute15HoVcThresholds.YFilter }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) SetFilter(yf yfilter.YFilter) { hoVcMinute15HoVcThresholds.YFilter = yf }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetGoName(yname string) string {
    if yname == "ho-vc-minute15ho-vc-threshold" { return "HoVcMinute15HoVcThreshold" }
    return ""
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetSegmentPath() string {
    return "ho-vc-minute15ho-vc-thresholds"
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ho-vc-minute15ho-vc-threshold" {
        for _, c := range hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold {
            if hoVcMinute15HoVcThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold{}
        hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold = append(hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold, child)
        return &hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold[len(hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold)-1]
    }
    return nil
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold {
        children[hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold[i].GetSegmentPath()] = &hoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold[i]
    }
    return children
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetYangName() string { return "ho-vc-minute15ho-vc-thresholds" }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) SetParent(parent types.Entity) { hoVcMinute15HoVcThresholds.parent = parent }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetParent() types.Entity { return hoVcMinute15HoVcThresholds.parent }

func (hoVcMinute15HoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds) GetParentYangName() string { return "ho-vc-minute15ho-vc" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetFilter() yfilter.YFilter { return hoVcMinute15HoVcThreshold.YFilter }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) SetFilter(yf yfilter.YFilter) { hoVcMinute15HoVcThreshold.YFilter = yf }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetGoName(yname string) string {
    if yname == "ho-vc-threshold" { return "HoVcThreshold" }
    if yname == "ho-vc-threshold-value" { return "HoVcThresholdValue" }
    return ""
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetSegmentPath() string {
    return "ho-vc-minute15ho-vc-threshold" + "[ho-vc-threshold='" + fmt.Sprintf("%v", hoVcMinute15HoVcThreshold.HoVcThreshold) + "']"
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ho-vc-threshold"] = hoVcMinute15HoVcThreshold.HoVcThreshold
    leafs["ho-vc-threshold-value"] = hoVcMinute15HoVcThreshold.HoVcThresholdValue
    return leafs
}

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetYangName() string { return "ho-vc-minute15ho-vc-threshold" }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) SetParent(parent types.Entity) { hoVcMinute15HoVcThreshold.parent = parent }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetParent() types.Entity { return hoVcMinute15HoVcThreshold.parent }

func (hoVcMinute15HoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15HoVc_HoVcMinute15HoVcThresholds_HoVcMinute15HoVcThreshold) GetParentYangName() string { return "ho-vc-minute15ho-vc-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetFilter() yfilter.YFilter { return stsHour24.YFilter }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) SetFilter(yf yfilter.YFilter) { stsHour24.YFilter = yf }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetGoName(yname string) string {
    if yname == "sts-hour24-path" { return "StsHour24Path" }
    return ""
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetSegmentPath() string {
    return "sts-hour24"
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-hour24-path" {
        return &stsHour24.StsHour24Path
    }
    return nil
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sts-hour24-path"] = &stsHour24.StsHour24Path
    return children
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetYangName() string { return "sts-hour24" }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) SetParent(parent types.Entity) { stsHour24.parent = parent }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetParent() types.Entity { return stsHour24.parent }

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    StsHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds

    // set Path TCA reporting status.
    StsHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetFilter() yfilter.YFilter { return stsHour24Path.YFilter }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) SetFilter(yf yfilter.YFilter) { stsHour24Path.YFilter = yf }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetGoName(yname string) string {
    if yname == "sts-hour24-path-thresholds" { return "StsHour24PathThresholds" }
    if yname == "sts-hour24-path-reports" { return "StsHour24PathReports" }
    return ""
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetSegmentPath() string {
    return "sts-hour24-path"
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-hour24-path-thresholds" {
        return &stsHour24Path.StsHour24PathThresholds
    }
    if childYangName == "sts-hour24-path-reports" {
        return &stsHour24Path.StsHour24PathReports
    }
    return nil
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sts-hour24-path-thresholds"] = &stsHour24Path.StsHour24PathThresholds
    children["sts-hour24-path-reports"] = &stsHour24Path.StsHour24PathReports
    return children
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetYangName() string { return "sts-hour24-path" }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) SetParent(parent types.Entity) { stsHour24Path.parent = parent }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetParent() types.Entity { return stsHour24Path.parent }

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetParentYangName() string { return "sts-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold.
    StsHour24PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetFilter() yfilter.YFilter { return stsHour24PathThresholds.YFilter }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) SetFilter(yf yfilter.YFilter) { stsHour24PathThresholds.YFilter = yf }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetGoName(yname string) string {
    if yname == "sts-hour24-path-threshold" { return "StsHour24PathThreshold" }
    return ""
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetSegmentPath() string {
    return "sts-hour24-path-thresholds"
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-hour24-path-threshold" {
        for _, c := range stsHour24PathThresholds.StsHour24PathThreshold {
            if stsHour24PathThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold{}
        stsHour24PathThresholds.StsHour24PathThreshold = append(stsHour24PathThresholds.StsHour24PathThreshold, child)
        return &stsHour24PathThresholds.StsHour24PathThreshold[len(stsHour24PathThresholds.StsHour24PathThreshold)-1]
    }
    return nil
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stsHour24PathThresholds.StsHour24PathThreshold {
        children[stsHour24PathThresholds.StsHour24PathThreshold[i].GetSegmentPath()] = &stsHour24PathThresholds.StsHour24PathThreshold[i]
    }
    return children
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetYangName() string { return "sts-hour24-path-thresholds" }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) SetParent(parent types.Entity) { stsHour24PathThresholds.parent = parent }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetParent() types.Entity { return stsHour24PathThresholds.parent }

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetParentYangName() string { return "sts-hour24-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetFilter() yfilter.YFilter { return stsHour24PathThreshold.YFilter }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) SetFilter(yf yfilter.YFilter) { stsHour24PathThreshold.YFilter = yf }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetGoName(yname string) string {
    if yname == "path-threshold" { return "PathThreshold" }
    if yname == "path-threshold-value" { return "PathThresholdValue" }
    return ""
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetSegmentPath() string {
    return "sts-hour24-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", stsHour24PathThreshold.PathThreshold) + "']"
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-threshold"] = stsHour24PathThreshold.PathThreshold
    leafs["path-threshold-value"] = stsHour24PathThreshold.PathThresholdValue
    return leafs
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetYangName() string { return "sts-hour24-path-threshold" }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) SetParent(parent types.Entity) { stsHour24PathThreshold.parent = parent }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetParent() types.Entity { return stsHour24PathThreshold.parent }

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetParentYangName() string { return "sts-hour24-path-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport.
    StsHour24PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetFilter() yfilter.YFilter { return stsHour24PathReports.YFilter }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) SetFilter(yf yfilter.YFilter) { stsHour24PathReports.YFilter = yf }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetGoName(yname string) string {
    if yname == "sts-hour24-path-report" { return "StsHour24PathReport" }
    return ""
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetSegmentPath() string {
    return "sts-hour24-path-reports"
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sts-hour24-path-report" {
        for _, c := range stsHour24PathReports.StsHour24PathReport {
            if stsHour24PathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport{}
        stsHour24PathReports.StsHour24PathReport = append(stsHour24PathReports.StsHour24PathReport, child)
        return &stsHour24PathReports.StsHour24PathReport[len(stsHour24PathReports.StsHour24PathReport)-1]
    }
    return nil
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stsHour24PathReports.StsHour24PathReport {
        children[stsHour24PathReports.StsHour24PathReport[i].GetSegmentPath()] = &stsHour24PathReports.StsHour24PathReport[i]
    }
    return children
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetYangName() string { return "sts-hour24-path-reports" }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) SetParent(parent types.Entity) { stsHour24PathReports.parent = parent }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetParent() types.Entity { return stsHour24PathReports.parent }

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetParentYangName() string { return "sts-hour24-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetFilter() yfilter.YFilter { return stsHour24PathReport.YFilter }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) SetFilter(yf yfilter.YFilter) { stsHour24PathReport.YFilter = yf }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetGoName(yname string) string {
    if yname == "path-report" { return "PathReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetSegmentPath() string {
    return "sts-hour24-path-report" + "[path-report='" + fmt.Sprintf("%v", stsHour24PathReport.PathReport) + "']"
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-report"] = stsHour24PathReport.PathReport
    leafs["enable"] = stsHour24PathReport.Enable
    return leafs
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetBundleName() string { return "cisco_ios_xr" }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetYangName() string { return "sts-hour24-path-report" }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) SetParent(parent types.Entity) { stsHour24PathReport.parent = parent }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetParent() types.Entity { return stsHour24PathReport.parent }

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetParentYangName() string { return "sts-hour24-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmMinute15Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetFilter() yfilter.YFilter { return stmMinute15.YFilter }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) SetFilter(yf yfilter.YFilter) { stmMinute15.YFilter = yf }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetGoName(yname string) string {
    if yname == "stm-minute15-stm" { return "StmMinute15Stm" }
    return ""
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetSegmentPath() string {
    return "stm-minute15"
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-minute15-stm" {
        return &stmMinute15.StmMinute15Stm
    }
    return nil
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stm-minute15-stm"] = &stmMinute15.StmMinute15Stm
    return children
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetYangName() string { return "stm-minute15" }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) SetParent(parent types.Entity) { stmMinute15.parent = parent }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetParent() types.Entity { return stmMinute15.parent }

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmMinute15StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports

    // Configure threshold on stm parameters.
    StmMinute15StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetFilter() yfilter.YFilter { return stmMinute15Stm.YFilter }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) SetFilter(yf yfilter.YFilter) { stmMinute15Stm.YFilter = yf }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetGoName(yname string) string {
    if yname == "stm-minute15-stm-reports" { return "StmMinute15StmReports" }
    if yname == "stm-minute15-stm-thresholds" { return "StmMinute15StmThresholds" }
    return ""
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetSegmentPath() string {
    return "stm-minute15-stm"
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-minute15-stm-reports" {
        return &stmMinute15Stm.StmMinute15StmReports
    }
    if childYangName == "stm-minute15-stm-thresholds" {
        return &stmMinute15Stm.StmMinute15StmThresholds
    }
    return nil
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stm-minute15-stm-reports"] = &stmMinute15Stm.StmMinute15StmReports
    children["stm-minute15-stm-thresholds"] = &stmMinute15Stm.StmMinute15StmThresholds
    return children
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetYangName() string { return "stm-minute15-stm" }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) SetParent(parent types.Entity) { stmMinute15Stm.parent = parent }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetParent() types.Entity { return stmMinute15Stm.parent }

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetParentYangName() string { return "stm-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport.
    StmMinute15StmReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetFilter() yfilter.YFilter { return stmMinute15StmReports.YFilter }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) SetFilter(yf yfilter.YFilter) { stmMinute15StmReports.YFilter = yf }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetGoName(yname string) string {
    if yname == "stm-minute15-stm-report" { return "StmMinute15StmReport" }
    return ""
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetSegmentPath() string {
    return "stm-minute15-stm-reports"
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-minute15-stm-report" {
        for _, c := range stmMinute15StmReports.StmMinute15StmReport {
            if stmMinute15StmReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport{}
        stmMinute15StmReports.StmMinute15StmReport = append(stmMinute15StmReports.StmMinute15StmReport, child)
        return &stmMinute15StmReports.StmMinute15StmReport[len(stmMinute15StmReports.StmMinute15StmReport)-1]
    }
    return nil
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stmMinute15StmReports.StmMinute15StmReport {
        children[stmMinute15StmReports.StmMinute15StmReport[i].GetSegmentPath()] = &stmMinute15StmReports.StmMinute15StmReport[i]
    }
    return children
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetYangName() string { return "stm-minute15-stm-reports" }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) SetParent(parent types.Entity) { stmMinute15StmReports.parent = parent }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetParent() types.Entity { return stmMinute15StmReports.parent }

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetParentYangName() string { return "stm-minute15-stm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetFilter() yfilter.YFilter { return stmMinute15StmReport.YFilter }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) SetFilter(yf yfilter.YFilter) { stmMinute15StmReport.YFilter = yf }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetGoName(yname string) string {
    if yname == "stm-report" { return "StmReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetSegmentPath() string {
    return "stm-minute15-stm-report" + "[stm-report='" + fmt.Sprintf("%v", stmMinute15StmReport.StmReport) + "']"
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stm-report"] = stmMinute15StmReport.StmReport
    leafs["enable"] = stmMinute15StmReport.Enable
    return leafs
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetYangName() string { return "stm-minute15-stm-report" }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) SetParent(parent types.Entity) { stmMinute15StmReport.parent = parent }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetParent() types.Entity { return stmMinute15StmReport.parent }

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetParentYangName() string { return "stm-minute15-stm-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold.
    StmMinute15StmThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetFilter() yfilter.YFilter { return stmMinute15StmThresholds.YFilter }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) SetFilter(yf yfilter.YFilter) { stmMinute15StmThresholds.YFilter = yf }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetGoName(yname string) string {
    if yname == "stm-minute15-stm-threshold" { return "StmMinute15StmThreshold" }
    return ""
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetSegmentPath() string {
    return "stm-minute15-stm-thresholds"
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stm-minute15-stm-threshold" {
        for _, c := range stmMinute15StmThresholds.StmMinute15StmThreshold {
            if stmMinute15StmThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold{}
        stmMinute15StmThresholds.StmMinute15StmThreshold = append(stmMinute15StmThresholds.StmMinute15StmThreshold, child)
        return &stmMinute15StmThresholds.StmMinute15StmThreshold[len(stmMinute15StmThresholds.StmMinute15StmThreshold)-1]
    }
    return nil
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range stmMinute15StmThresholds.StmMinute15StmThreshold {
        children[stmMinute15StmThresholds.StmMinute15StmThreshold[i].GetSegmentPath()] = &stmMinute15StmThresholds.StmMinute15StmThreshold[i]
    }
    return children
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetYangName() string { return "stm-minute15-stm-thresholds" }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) SetParent(parent types.Entity) { stmMinute15StmThresholds.parent = parent }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetParent() types.Entity { return stmMinute15StmThresholds.parent }

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetParentYangName() string { return "stm-minute15-stm" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetFilter() yfilter.YFilter { return stmMinute15StmThreshold.YFilter }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) SetFilter(yf yfilter.YFilter) { stmMinute15StmThreshold.YFilter = yf }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetGoName(yname string) string {
    if yname == "stm-threshold" { return "StmThreshold" }
    if yname == "stm-threshold-value" { return "StmThresholdValue" }
    return ""
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetSegmentPath() string {
    return "stm-minute15-stm-threshold" + "[stm-threshold='" + fmt.Sprintf("%v", stmMinute15StmThreshold.StmThreshold) + "']"
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stm-threshold"] = stmMinute15StmThreshold.StmThreshold
    leafs["stm-threshold-value"] = stmMinute15StmThreshold.StmThresholdValue
    return leafs
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetYangName() string { return "stm-minute15-stm-threshold" }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) SetParent(parent types.Entity) { stmMinute15StmThreshold.parent = parent }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetParent() types.Entity { return stmMinute15StmThreshold.parent }

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetParentYangName() string { return "stm-minute15-stm-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path

    // Configure ocn performance monitoring.
    SonetHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetFilter() yfilter.YFilter { return sonetHour24.YFilter }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) SetFilter(yf yfilter.YFilter) { sonetHour24.YFilter = yf }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetGoName(yname string) string {
    if yname == "sonet-hour24-path" { return "SonetHour24Path" }
    if yname == "sonet-hour24-ocn" { return "SonetHour24Ocn" }
    return ""
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetSegmentPath() string {
    return "sonet-hour24"
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-path" {
        return &sonetHour24.SonetHour24Path
    }
    if childYangName == "sonet-hour24-ocn" {
        return &sonetHour24.SonetHour24Ocn
    }
    return nil
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-hour24-path"] = &sonetHour24.SonetHour24Path
    children["sonet-hour24-ocn"] = &sonetHour24.SonetHour24Ocn
    return children
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetYangName() string { return "sonet-hour24" }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) SetParent(parent types.Entity) { sonetHour24.parent = parent }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetParent() types.Entity { return sonetHour24.parent }

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    SonetHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds

    // set Path TCA reporting status.
    SonetHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetFilter() yfilter.YFilter { return sonetHour24Path.YFilter }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) SetFilter(yf yfilter.YFilter) { sonetHour24Path.YFilter = yf }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetGoName(yname string) string {
    if yname == "sonet-hour24-path-thresholds" { return "SonetHour24PathThresholds" }
    if yname == "sonet-hour24-path-reports" { return "SonetHour24PathReports" }
    return ""
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetSegmentPath() string {
    return "sonet-hour24-path"
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-path-thresholds" {
        return &sonetHour24Path.SonetHour24PathThresholds
    }
    if childYangName == "sonet-hour24-path-reports" {
        return &sonetHour24Path.SonetHour24PathReports
    }
    return nil
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-hour24-path-thresholds"] = &sonetHour24Path.SonetHour24PathThresholds
    children["sonet-hour24-path-reports"] = &sonetHour24Path.SonetHour24PathReports
    return children
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetYangName() string { return "sonet-hour24-path" }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) SetParent(parent types.Entity) { sonetHour24Path.parent = parent }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetParent() types.Entity { return sonetHour24Path.parent }

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetParentYangName() string { return "sonet-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold.
    SonetHour24PathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetFilter() yfilter.YFilter { return sonetHour24PathThresholds.YFilter }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) SetFilter(yf yfilter.YFilter) { sonetHour24PathThresholds.YFilter = yf }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetGoName(yname string) string {
    if yname == "sonet-hour24-path-threshold" { return "SonetHour24PathThreshold" }
    return ""
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetSegmentPath() string {
    return "sonet-hour24-path-thresholds"
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-path-threshold" {
        for _, c := range sonetHour24PathThresholds.SonetHour24PathThreshold {
            if sonetHour24PathThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold{}
        sonetHour24PathThresholds.SonetHour24PathThreshold = append(sonetHour24PathThresholds.SonetHour24PathThreshold, child)
        return &sonetHour24PathThresholds.SonetHour24PathThreshold[len(sonetHour24PathThresholds.SonetHour24PathThreshold)-1]
    }
    return nil
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetHour24PathThresholds.SonetHour24PathThreshold {
        children[sonetHour24PathThresholds.SonetHour24PathThreshold[i].GetSegmentPath()] = &sonetHour24PathThresholds.SonetHour24PathThreshold[i]
    }
    return children
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetYangName() string { return "sonet-hour24-path-thresholds" }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) SetParent(parent types.Entity) { sonetHour24PathThresholds.parent = parent }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetParent() types.Entity { return sonetHour24PathThresholds.parent }

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetParentYangName() string { return "sonet-hour24-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetFilter() yfilter.YFilter { return sonetHour24PathThreshold.YFilter }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) SetFilter(yf yfilter.YFilter) { sonetHour24PathThreshold.YFilter = yf }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetGoName(yname string) string {
    if yname == "path-threshold" { return "PathThreshold" }
    if yname == "path-threshold-value" { return "PathThresholdValue" }
    return ""
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetSegmentPath() string {
    return "sonet-hour24-path-threshold" + "[path-threshold='" + fmt.Sprintf("%v", sonetHour24PathThreshold.PathThreshold) + "']"
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-threshold"] = sonetHour24PathThreshold.PathThreshold
    leafs["path-threshold-value"] = sonetHour24PathThreshold.PathThresholdValue
    return leafs
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetYangName() string { return "sonet-hour24-path-threshold" }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) SetParent(parent types.Entity) { sonetHour24PathThreshold.parent = parent }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetParent() types.Entity { return sonetHour24PathThreshold.parent }

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetParentYangName() string { return "sonet-hour24-path-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport.
    SonetHour24PathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetFilter() yfilter.YFilter { return sonetHour24PathReports.YFilter }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) SetFilter(yf yfilter.YFilter) { sonetHour24PathReports.YFilter = yf }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetGoName(yname string) string {
    if yname == "sonet-hour24-path-report" { return "SonetHour24PathReport" }
    return ""
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetSegmentPath() string {
    return "sonet-hour24-path-reports"
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-path-report" {
        for _, c := range sonetHour24PathReports.SonetHour24PathReport {
            if sonetHour24PathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport{}
        sonetHour24PathReports.SonetHour24PathReport = append(sonetHour24PathReports.SonetHour24PathReport, child)
        return &sonetHour24PathReports.SonetHour24PathReport[len(sonetHour24PathReports.SonetHour24PathReport)-1]
    }
    return nil
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetHour24PathReports.SonetHour24PathReport {
        children[sonetHour24PathReports.SonetHour24PathReport[i].GetSegmentPath()] = &sonetHour24PathReports.SonetHour24PathReport[i]
    }
    return children
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetYangName() string { return "sonet-hour24-path-reports" }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) SetParent(parent types.Entity) { sonetHour24PathReports.parent = parent }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetParent() types.Entity { return sonetHour24PathReports.parent }

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetParentYangName() string { return "sonet-hour24-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetFilter() yfilter.YFilter { return sonetHour24PathReport.YFilter }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) SetFilter(yf yfilter.YFilter) { sonetHour24PathReport.YFilter = yf }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetGoName(yname string) string {
    if yname == "path-report" { return "PathReport" }
    return ""
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetSegmentPath() string {
    return "sonet-hour24-path-report" + "[path-report='" + fmt.Sprintf("%v", sonetHour24PathReport.PathReport) + "']"
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-report"] = sonetHour24PathReport.PathReport
    return leafs
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetYangName() string { return "sonet-hour24-path-report" }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) SetParent(parent types.Entity) { sonetHour24PathReport.parent = parent }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetParent() types.Entity { return sonetHour24PathReport.parent }

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetParentYangName() string { return "sonet-hour24-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on ocn parameters.
    SonetHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds

    // set ocn TCA reporting status.
    SonetHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetFilter() yfilter.YFilter { return sonetHour24Ocn.YFilter }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) SetFilter(yf yfilter.YFilter) { sonetHour24Ocn.YFilter = yf }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetGoName(yname string) string {
    if yname == "sonet-hour24-ocn-thresholds" { return "SonetHour24OcnThresholds" }
    if yname == "sonet-hour24-ocn-reports" { return "SonetHour24OcnReports" }
    return ""
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetSegmentPath() string {
    return "sonet-hour24-ocn"
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-ocn-thresholds" {
        return &sonetHour24Ocn.SonetHour24OcnThresholds
    }
    if childYangName == "sonet-hour24-ocn-reports" {
        return &sonetHour24Ocn.SonetHour24OcnReports
    }
    return nil
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sonet-hour24-ocn-thresholds"] = &sonetHour24Ocn.SonetHour24OcnThresholds
    children["sonet-hour24-ocn-reports"] = &sonetHour24Ocn.SonetHour24OcnReports
    return children
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetYangName() string { return "sonet-hour24-ocn" }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) SetParent(parent types.Entity) { sonetHour24Ocn.parent = parent }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetParent() types.Entity { return sonetHour24Ocn.parent }

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetParentYangName() string { return "sonet-hour24" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold.
    SonetHour24OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetFilter() yfilter.YFilter { return sonetHour24OcnThresholds.YFilter }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) SetFilter(yf yfilter.YFilter) { sonetHour24OcnThresholds.YFilter = yf }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetGoName(yname string) string {
    if yname == "sonet-hour24-ocn-threshold" { return "SonetHour24OcnThreshold" }
    return ""
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetSegmentPath() string {
    return "sonet-hour24-ocn-thresholds"
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-ocn-threshold" {
        for _, c := range sonetHour24OcnThresholds.SonetHour24OcnThreshold {
            if sonetHour24OcnThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold{}
        sonetHour24OcnThresholds.SonetHour24OcnThreshold = append(sonetHour24OcnThresholds.SonetHour24OcnThreshold, child)
        return &sonetHour24OcnThresholds.SonetHour24OcnThreshold[len(sonetHour24OcnThresholds.SonetHour24OcnThreshold)-1]
    }
    return nil
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetHour24OcnThresholds.SonetHour24OcnThreshold {
        children[sonetHour24OcnThresholds.SonetHour24OcnThreshold[i].GetSegmentPath()] = &sonetHour24OcnThresholds.SonetHour24OcnThreshold[i]
    }
    return children
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetYangName() string { return "sonet-hour24-ocn-thresholds" }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) SetParent(parent types.Entity) { sonetHour24OcnThresholds.parent = parent }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetParent() types.Entity { return sonetHour24OcnThresholds.parent }

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetParentYangName() string { return "sonet-hour24-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetFilter() yfilter.YFilter { return sonetHour24OcnThreshold.YFilter }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) SetFilter(yf yfilter.YFilter) { sonetHour24OcnThreshold.YFilter = yf }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetGoName(yname string) string {
    if yname == "ocn-threshold" { return "OcnThreshold" }
    if yname == "ocn-threshold-value" { return "OcnThresholdValue" }
    return ""
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetSegmentPath() string {
    return "sonet-hour24-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", sonetHour24OcnThreshold.OcnThreshold) + "']"
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-threshold"] = sonetHour24OcnThreshold.OcnThreshold
    leafs["ocn-threshold-value"] = sonetHour24OcnThreshold.OcnThresholdValue
    return leafs
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetYangName() string { return "sonet-hour24-ocn-threshold" }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) SetParent(parent types.Entity) { sonetHour24OcnThreshold.parent = parent }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetParent() types.Entity { return sonetHour24OcnThreshold.parent }

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetParentYangName() string { return "sonet-hour24-ocn-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport.
    SonetHour24OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetFilter() yfilter.YFilter { return sonetHour24OcnReports.YFilter }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) SetFilter(yf yfilter.YFilter) { sonetHour24OcnReports.YFilter = yf }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetGoName(yname string) string {
    if yname == "sonet-hour24-ocn-report" { return "SonetHour24OcnReport" }
    return ""
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetSegmentPath() string {
    return "sonet-hour24-ocn-reports"
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sonet-hour24-ocn-report" {
        for _, c := range sonetHour24OcnReports.SonetHour24OcnReport {
            if sonetHour24OcnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport{}
        sonetHour24OcnReports.SonetHour24OcnReport = append(sonetHour24OcnReports.SonetHour24OcnReport, child)
        return &sonetHour24OcnReports.SonetHour24OcnReport[len(sonetHour24OcnReports.SonetHour24OcnReport)-1]
    }
    return nil
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sonetHour24OcnReports.SonetHour24OcnReport {
        children[sonetHour24OcnReports.SonetHour24OcnReport[i].GetSegmentPath()] = &sonetHour24OcnReports.SonetHour24OcnReport[i]
    }
    return children
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetYangName() string { return "sonet-hour24-ocn-reports" }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) SetParent(parent types.Entity) { sonetHour24OcnReports.parent = parent }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetParent() types.Entity { return sonetHour24OcnReports.parent }

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetParentYangName() string { return "sonet-hour24-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetFilter() yfilter.YFilter { return sonetHour24OcnReport.YFilter }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) SetFilter(yf yfilter.YFilter) { sonetHour24OcnReport.YFilter = yf }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetGoName(yname string) string {
    if yname == "ocn-report" { return "OcnReport" }
    return ""
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetSegmentPath() string {
    return "sonet-hour24-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", sonetHour24OcnReport.OcnReport) + "']"
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-report"] = sonetHour24OcnReport.OcnReport
    return leafs
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetBundleName() string { return "cisco_ios_xr" }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetYangName() string { return "sonet-hour24-ocn-report" }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) SetParent(parent types.Entity) { sonetHour24OcnReport.parent = parent }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetParent() types.Entity { return sonetHour24OcnReport.parent }

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetParentYangName() string { return "sonet-hour24-ocn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Minute15OtnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetFilter() yfilter.YFilter { return minute15Path.YFilter }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) SetFilter(yf yfilter.YFilter) { minute15Path.YFilter = yf }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetGoName(yname string) string {
    if yname == "minute15otn-path" { return "Minute15OtnPath" }
    return ""
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetSegmentPath() string {
    return "minute15-path"
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-path" {
        return &minute15Path.Minute15OtnPath
    }
    return nil
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15otn-path"] = &minute15Path.Minute15OtnPath
    return children
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetYangName() string { return "minute15-path" }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) SetParent(parent types.Entity) { minute15Path.parent = parent }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetParent() types.Entity { return minute15Path.parent }

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Minute15OtnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports

    // Configure threshold on otn parameters.
    Min15OtnPathThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetFilter() yfilter.YFilter { return minute15OtnPath.YFilter }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) SetFilter(yf yfilter.YFilter) { minute15OtnPath.YFilter = yf }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetGoName(yname string) string {
    if yname == "minute15otn-path-reports" { return "Minute15OtnPathReports" }
    if yname == "min15-otn-path-threshes" { return "Min15OtnPathThreshes" }
    return ""
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetSegmentPath() string {
    return "minute15otn-path"
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-path-reports" {
        return &minute15OtnPath.Minute15OtnPathReports
    }
    if childYangName == "min15-otn-path-threshes" {
        return &minute15OtnPath.Min15OtnPathThreshes
    }
    return nil
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15otn-path-reports"] = &minute15OtnPath.Minute15OtnPathReports
    children["min15-otn-path-threshes"] = &minute15OtnPath.Min15OtnPathThreshes
    return children
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetYangName() string { return "minute15otn-path" }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) SetParent(parent types.Entity) { minute15OtnPath.parent = parent }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetParent() types.Entity { return minute15OtnPath.parent }

func (minute15OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath) GetParentYangName() string { return "minute15-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport.
    Minute15OtnPathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetFilter() yfilter.YFilter { return minute15OtnPathReports.YFilter }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) SetFilter(yf yfilter.YFilter) { minute15OtnPathReports.YFilter = yf }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetGoName(yname string) string {
    if yname == "minute15otn-path-report" { return "Minute15OtnPathReport" }
    return ""
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetSegmentPath() string {
    return "minute15otn-path-reports"
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-path-report" {
        for _, c := range minute15OtnPathReports.Minute15OtnPathReport {
            if minute15OtnPathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport{}
        minute15OtnPathReports.Minute15OtnPathReport = append(minute15OtnPathReports.Minute15OtnPathReport, child)
        return &minute15OtnPathReports.Minute15OtnPathReport[len(minute15OtnPathReports.Minute15OtnPathReport)-1]
    }
    return nil
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OtnPathReports.Minute15OtnPathReport {
        children[minute15OtnPathReports.Minute15OtnPathReport[i].GetSegmentPath()] = &minute15OtnPathReports.Minute15OtnPathReport[i]
    }
    return children
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetYangName() string { return "minute15otn-path-reports" }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) SetParent(parent types.Entity) { minute15OtnPathReports.parent = parent }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetParent() types.Entity { return minute15OtnPathReports.parent }

func (minute15OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports) GetParentYangName() string { return "minute15otn-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetFilter() yfilter.YFilter { return minute15OtnPathReport.YFilter }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) SetFilter(yf yfilter.YFilter) { minute15OtnPathReport.YFilter = yf }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetSegmentPath() string {
    return "minute15otn-path-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnPathReport.OtnReport) + "']"
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = minute15OtnPathReport.OtnReport
    leafs["enable"] = minute15OtnPathReport.Enable
    return leafs
}

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetYangName() string { return "minute15otn-path-report" }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) SetParent(parent types.Entity) { minute15OtnPathReport.parent = parent }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetParent() types.Entity { return minute15OtnPathReport.parent }

func (minute15OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Minute15OtnPathReports_Minute15OtnPathReport) GetParentYangName() string { return "minute15otn-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh.
    Min15OtnPathThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetFilter() yfilter.YFilter { return min15OtnPathThreshes.YFilter }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) SetFilter(yf yfilter.YFilter) { min15OtnPathThreshes.YFilter = yf }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetGoName(yname string) string {
    if yname == "min15-otn-path-thresh" { return "Min15OtnPathThresh" }
    return ""
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetSegmentPath() string {
    return "min15-otn-path-threshes"
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min15-otn-path-thresh" {
        for _, c := range min15OtnPathThreshes.Min15OtnPathThresh {
            if min15OtnPathThreshes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh{}
        min15OtnPathThreshes.Min15OtnPathThresh = append(min15OtnPathThreshes.Min15OtnPathThresh, child)
        return &min15OtnPathThreshes.Min15OtnPathThresh[len(min15OtnPathThreshes.Min15OtnPathThresh)-1]
    }
    return nil
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range min15OtnPathThreshes.Min15OtnPathThresh {
        children[min15OtnPathThreshes.Min15OtnPathThresh[i].GetSegmentPath()] = &min15OtnPathThreshes.Min15OtnPathThresh[i]
    }
    return children
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetYangName() string { return "min15-otn-path-threshes" }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) SetParent(parent types.Entity) { min15OtnPathThreshes.parent = parent }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetParent() types.Entity { return min15OtnPathThreshes.parent }

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes) GetParentYangName() string { return "minute15otn-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetFilter() yfilter.YFilter { return min15OtnPathThresh.YFilter }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) SetFilter(yf yfilter.YFilter) { min15OtnPathThresh.YFilter = yf }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetSegmentPath() string {
    return "min15-otn-path-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnPathThresh.OtnThreshold) + "']"
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = min15OtnPathThresh.OtnThreshold
    leafs["otn-threshold-value"] = min15OtnPathThresh.OtnThresholdValue
    return leafs
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetYangName() string { return "min15-otn-path-thresh" }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) SetParent(parent types.Entity) { min15OtnPathThresh.parent = parent }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetParent() types.Entity { return min15OtnPathThresh.parent }

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15OtnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetParentYangName() string { return "min15-otn-path-threshes" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15
// set OC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetFilter() yfilter.YFilter { return ocMinute15.YFilter }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) SetFilter(yf yfilter.YFilter) { ocMinute15.YFilter = yf }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetGoName(yname string) string {
    if yname == "oc-minute15-ocn" { return "OcMinute15Ocn" }
    return ""
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetSegmentPath() string {
    return "oc-minute15"
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-minute15-ocn" {
        return &ocMinute15.OcMinute15Ocn
    }
    return nil
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["oc-minute15-ocn"] = &ocMinute15.OcMinute15Ocn
    return children
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetYangName() string { return "oc-minute15" }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) SetParent(parent types.Entity) { ocMinute15.parent = parent }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetParent() types.Entity { return ocMinute15.parent }

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports

    // Configure threshold on ocn parameters.
    OcMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetFilter() yfilter.YFilter { return ocMinute15Ocn.YFilter }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) SetFilter(yf yfilter.YFilter) { ocMinute15Ocn.YFilter = yf }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetGoName(yname string) string {
    if yname == "oc-minute15-ocn-reports" { return "OcMinute15OcnReports" }
    if yname == "oc-minute15-ocn-thresholds" { return "OcMinute15OcnThresholds" }
    return ""
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetSegmentPath() string {
    return "oc-minute15-ocn"
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-minute15-ocn-reports" {
        return &ocMinute15Ocn.OcMinute15OcnReports
    }
    if childYangName == "oc-minute15-ocn-thresholds" {
        return &ocMinute15Ocn.OcMinute15OcnThresholds
    }
    return nil
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["oc-minute15-ocn-reports"] = &ocMinute15Ocn.OcMinute15OcnReports
    children["oc-minute15-ocn-thresholds"] = &ocMinute15Ocn.OcMinute15OcnThresholds
    return children
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetYangName() string { return "oc-minute15-ocn" }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) SetParent(parent types.Entity) { ocMinute15Ocn.parent = parent }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetParent() types.Entity { return ocMinute15Ocn.parent }

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetParentYangName() string { return "oc-minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport.
    OcMinute15OcnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetFilter() yfilter.YFilter { return ocMinute15OcnReports.YFilter }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) SetFilter(yf yfilter.YFilter) { ocMinute15OcnReports.YFilter = yf }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetGoName(yname string) string {
    if yname == "oc-minute15-ocn-report" { return "OcMinute15OcnReport" }
    return ""
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetSegmentPath() string {
    return "oc-minute15-ocn-reports"
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-minute15-ocn-report" {
        for _, c := range ocMinute15OcnReports.OcMinute15OcnReport {
            if ocMinute15OcnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport{}
        ocMinute15OcnReports.OcMinute15OcnReport = append(ocMinute15OcnReports.OcMinute15OcnReport, child)
        return &ocMinute15OcnReports.OcMinute15OcnReport[len(ocMinute15OcnReports.OcMinute15OcnReport)-1]
    }
    return nil
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ocMinute15OcnReports.OcMinute15OcnReport {
        children[ocMinute15OcnReports.OcMinute15OcnReport[i].GetSegmentPath()] = &ocMinute15OcnReports.OcMinute15OcnReport[i]
    }
    return children
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetYangName() string { return "oc-minute15-ocn-reports" }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) SetParent(parent types.Entity) { ocMinute15OcnReports.parent = parent }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetParent() types.Entity { return ocMinute15OcnReports.parent }

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetParentYangName() string { return "oc-minute15-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetFilter() yfilter.YFilter { return ocMinute15OcnReport.YFilter }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) SetFilter(yf yfilter.YFilter) { ocMinute15OcnReport.YFilter = yf }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetGoName(yname string) string {
    if yname == "ocn-report" { return "OcnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetSegmentPath() string {
    return "oc-minute15-ocn-report" + "[ocn-report='" + fmt.Sprintf("%v", ocMinute15OcnReport.OcnReport) + "']"
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-report"] = ocMinute15OcnReport.OcnReport
    leafs["enable"] = ocMinute15OcnReport.Enable
    return leafs
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetYangName() string { return "oc-minute15-ocn-report" }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) SetParent(parent types.Entity) { ocMinute15OcnReport.parent = parent }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetParent() types.Entity { return ocMinute15OcnReport.parent }

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetParentYangName() string { return "oc-minute15-ocn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold.
    OcMinute15OcnThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetFilter() yfilter.YFilter { return ocMinute15OcnThresholds.YFilter }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) SetFilter(yf yfilter.YFilter) { ocMinute15OcnThresholds.YFilter = yf }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetGoName(yname string) string {
    if yname == "oc-minute15-ocn-threshold" { return "OcMinute15OcnThreshold" }
    return ""
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetSegmentPath() string {
    return "oc-minute15-ocn-thresholds"
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oc-minute15-ocn-threshold" {
        for _, c := range ocMinute15OcnThresholds.OcMinute15OcnThreshold {
            if ocMinute15OcnThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold{}
        ocMinute15OcnThresholds.OcMinute15OcnThreshold = append(ocMinute15OcnThresholds.OcMinute15OcnThreshold, child)
        return &ocMinute15OcnThresholds.OcMinute15OcnThreshold[len(ocMinute15OcnThresholds.OcMinute15OcnThreshold)-1]
    }
    return nil
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ocMinute15OcnThresholds.OcMinute15OcnThreshold {
        children[ocMinute15OcnThresholds.OcMinute15OcnThreshold[i].GetSegmentPath()] = &ocMinute15OcnThresholds.OcMinute15OcnThreshold[i]
    }
    return children
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetYangName() string { return "oc-minute15-ocn-thresholds" }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) SetParent(parent types.Entity) { ocMinute15OcnThresholds.parent = parent }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetParent() types.Entity { return ocMinute15OcnThresholds.parent }

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetParentYangName() string { return "oc-minute15-ocn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetFilter() yfilter.YFilter { return ocMinute15OcnThreshold.YFilter }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) SetFilter(yf yfilter.YFilter) { ocMinute15OcnThreshold.YFilter = yf }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetGoName(yname string) string {
    if yname == "ocn-threshold" { return "OcnThreshold" }
    if yname == "ocn-threshold-value" { return "OcnThresholdValue" }
    return ""
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetSegmentPath() string {
    return "oc-minute15-ocn-threshold" + "[ocn-threshold='" + fmt.Sprintf("%v", ocMinute15OcnThreshold.OcnThreshold) + "']"
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ocn-threshold"] = ocMinute15OcnThreshold.OcnThreshold
    leafs["ocn-threshold-value"] = ocMinute15OcnThreshold.OcnThresholdValue
    return leafs
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetYangName() string { return "oc-minute15-ocn-threshold" }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) SetParent(parent types.Entity) { ocMinute15OcnThreshold.parent = parent }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetParent() types.Entity { return ocMinute15OcnThreshold.parent }

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetParentYangName() string { return "oc-minute15-ocn-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30
// Configure ethernet performance monitoring for
// 30 sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Second30Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetFilter() yfilter.YFilter { return ethernetSecond30.YFilter }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) SetFilter(yf yfilter.YFilter) { ethernetSecond30.YFilter = yf }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetGoName(yname string) string {
    if yname == "second30-ether" { return "Second30Ether" }
    return ""
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetSegmentPath() string {
    return "ethernet-second30"
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-ether" {
        return &ethernetSecond30.Second30Ether
    }
    return nil
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30-ether"] = &ethernetSecond30.Second30Ether
    return children
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetYangName() string { return "ethernet-second30" }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) SetParent(parent types.Entity) { ethernetSecond30.parent = parent }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetParent() types.Entity { return ethernetSecond30.parent }

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Second30EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds

    // set ether TCA reporting status.
    Second30EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetFilter() yfilter.YFilter { return second30Ether.YFilter }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) SetFilter(yf yfilter.YFilter) { second30Ether.YFilter = yf }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetGoName(yname string) string {
    if yname == "second30-ether-thresholds" { return "Second30EtherThresholds" }
    if yname == "second30-ether-reports" { return "Second30EtherReports" }
    return ""
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetSegmentPath() string {
    return "second30-ether"
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-ether-thresholds" {
        return &second30Ether.Second30EtherThresholds
    }
    if childYangName == "second30-ether-reports" {
        return &second30Ether.Second30EtherReports
    }
    return nil
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["second30-ether-thresholds"] = &second30Ether.Second30EtherThresholds
    children["second30-ether-reports"] = &second30Ether.Second30EtherReports
    return children
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetBundleName() string { return "cisco_ios_xr" }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetYangName() string { return "second30-ether" }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) SetParent(parent types.Entity) { second30Ether.parent = parent }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetParent() types.Entity { return second30Ether.parent }

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetParentYangName() string { return "ethernet-second30" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold.
    Second30EtherThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetFilter() yfilter.YFilter { return second30EtherThresholds.YFilter }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) SetFilter(yf yfilter.YFilter) { second30EtherThresholds.YFilter = yf }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetGoName(yname string) string {
    if yname == "second30-ether-threshold" { return "Second30EtherThreshold" }
    return ""
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetSegmentPath() string {
    return "second30-ether-thresholds"
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-ether-threshold" {
        for _, c := range second30EtherThresholds.Second30EtherThreshold {
            if second30EtherThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold{}
        second30EtherThresholds.Second30EtherThreshold = append(second30EtherThresholds.Second30EtherThreshold, child)
        return &second30EtherThresholds.Second30EtherThreshold[len(second30EtherThresholds.Second30EtherThreshold)-1]
    }
    return nil
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30EtherThresholds.Second30EtherThreshold {
        children[second30EtherThresholds.Second30EtherThreshold[i].GetSegmentPath()] = &second30EtherThresholds.Second30EtherThreshold[i]
    }
    return children
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetYangName() string { return "second30-ether-thresholds" }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) SetParent(parent types.Entity) { second30EtherThresholds.parent = parent }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetParent() types.Entity { return second30EtherThresholds.parent }

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetParentYangName() string { return "second30-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetFilter() yfilter.YFilter { return second30EtherThreshold.YFilter }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) SetFilter(yf yfilter.YFilter) { second30EtherThreshold.YFilter = yf }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetGoName(yname string) string {
    if yname == "ether-threshold" { return "EtherThreshold" }
    if yname == "ether-threshold-value" { return "EtherThresholdValue" }
    return ""
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetSegmentPath() string {
    return "second30-ether-threshold" + "[ether-threshold='" + fmt.Sprintf("%v", second30EtherThreshold.EtherThreshold) + "']"
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-threshold"] = second30EtherThreshold.EtherThreshold
    leafs["ether-threshold-value"] = second30EtherThreshold.EtherThresholdValue
    return leafs
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetYangName() string { return "second30-ether-threshold" }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) SetParent(parent types.Entity) { second30EtherThreshold.parent = parent }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetParent() types.Entity { return second30EtherThreshold.parent }

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetParentYangName() string { return "second30-ether-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport.
    Second30EtherReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetFilter() yfilter.YFilter { return second30EtherReports.YFilter }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) SetFilter(yf yfilter.YFilter) { second30EtherReports.YFilter = yf }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetGoName(yname string) string {
    if yname == "second30-ether-report" { return "Second30EtherReport" }
    return ""
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetSegmentPath() string {
    return "second30-ether-reports"
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "second30-ether-report" {
        for _, c := range second30EtherReports.Second30EtherReport {
            if second30EtherReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport{}
        second30EtherReports.Second30EtherReport = append(second30EtherReports.Second30EtherReport, child)
        return &second30EtherReports.Second30EtherReport[len(second30EtherReports.Second30EtherReport)-1]
    }
    return nil
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range second30EtherReports.Second30EtherReport {
        children[second30EtherReports.Second30EtherReport[i].GetSegmentPath()] = &second30EtherReports.Second30EtherReport[i]
    }
    return children
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetBundleName() string { return "cisco_ios_xr" }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetYangName() string { return "second30-ether-reports" }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) SetParent(parent types.Entity) { second30EtherReports.parent = parent }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetParent() types.Entity { return second30EtherReports.parent }

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetParentYangName() string { return "second30-ether" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetFilter() yfilter.YFilter { return second30EtherReport.YFilter }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) SetFilter(yf yfilter.YFilter) { second30EtherReport.YFilter = yf }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetGoName(yname string) string {
    if yname == "ether-report" { return "EtherReport" }
    return ""
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetSegmentPath() string {
    return "second30-ether-report" + "[ether-report='" + fmt.Sprintf("%v", second30EtherReport.EtherReport) + "']"
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ether-report"] = second30EtherReport.EtherReport
    return leafs
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetBundleName() string { return "cisco_ios_xr" }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetYangName() string { return "second30-ether-report" }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) SetParent(parent types.Entity) { second30EtherReport.parent = parent }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetParent() types.Entity { return second30EtherReport.parent }

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetParentYangName() string { return "second30-ether-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path
// Configure pm parameters of pathmonitor 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24OtnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetFilter() yfilter.YFilter { return hour24Path.YFilter }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) SetFilter(yf yfilter.YFilter) { hour24Path.YFilter = yf }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetGoName(yname string) string {
    if yname == "hour24otn-path" { return "Hour24OtnPath" }
    return ""
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetSegmentPath() string {
    return "hour24-path"
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-path" {
        return &hour24Path.Hour24OtnPath
    }
    return nil
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24otn-path"] = &hour24Path.Hour24OtnPath
    return children
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetBundleName() string { return "cisco_ios_xr" }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetYangName() string { return "hour24-path" }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) SetParent(parent types.Entity) { hour24Path.parent = parent }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetParent() types.Entity { return hour24Path.parent }

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Hour24OtnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports

    // Configure threshold on otn parameters.
    Hour24OtnPathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetFilter() yfilter.YFilter { return hour24OtnPath.YFilter }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) SetFilter(yf yfilter.YFilter) { hour24OtnPath.YFilter = yf }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetGoName(yname string) string {
    if yname == "hour24otn-path-reports" { return "Hour24OtnPathReports" }
    if yname == "hour24otn-path-thresholds" { return "Hour24OtnPathThresholds" }
    return ""
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetSegmentPath() string {
    return "hour24otn-path"
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-path-reports" {
        return &hour24OtnPath.Hour24OtnPathReports
    }
    if childYangName == "hour24otn-path-thresholds" {
        return &hour24OtnPath.Hour24OtnPathThresholds
    }
    return nil
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["hour24otn-path-reports"] = &hour24OtnPath.Hour24OtnPathReports
    children["hour24otn-path-thresholds"] = &hour24OtnPath.Hour24OtnPathThresholds
    return children
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetYangName() string { return "hour24otn-path" }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) SetParent(parent types.Entity) { hour24OtnPath.parent = parent }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetParent() types.Entity { return hour24OtnPath.parent }

func (hour24OtnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath) GetParentYangName() string { return "hour24-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport.
    Hour24OtnPathReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetFilter() yfilter.YFilter { return hour24OtnPathReports.YFilter }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) SetFilter(yf yfilter.YFilter) { hour24OtnPathReports.YFilter = yf }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetGoName(yname string) string {
    if yname == "hour24otn-path-report" { return "Hour24OtnPathReport" }
    return ""
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetSegmentPath() string {
    return "hour24otn-path-reports"
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-path-report" {
        for _, c := range hour24OtnPathReports.Hour24OtnPathReport {
            if hour24OtnPathReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport{}
        hour24OtnPathReports.Hour24OtnPathReport = append(hour24OtnPathReports.Hour24OtnPathReport, child)
        return &hour24OtnPathReports.Hour24OtnPathReport[len(hour24OtnPathReports.Hour24OtnPathReport)-1]
    }
    return nil
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnPathReports.Hour24OtnPathReport {
        children[hour24OtnPathReports.Hour24OtnPathReport[i].GetSegmentPath()] = &hour24OtnPathReports.Hour24OtnPathReport[i]
    }
    return children
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetYangName() string { return "hour24otn-path-reports" }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) SetParent(parent types.Entity) { hour24OtnPathReports.parent = parent }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetParent() types.Entity { return hour24OtnPathReports.parent }

func (hour24OtnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports) GetParentYangName() string { return "hour24otn-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetFilter() yfilter.YFilter { return hour24OtnPathReport.YFilter }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) SetFilter(yf yfilter.YFilter) { hour24OtnPathReport.YFilter = yf }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetSegmentPath() string {
    return "hour24otn-path-report" + "[otn-report='" + fmt.Sprintf("%v", hour24OtnPathReport.OtnReport) + "']"
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = hour24OtnPathReport.OtnReport
    leafs["enable"] = hour24OtnPathReport.Enable
    return leafs
}

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetYangName() string { return "hour24otn-path-report" }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) SetParent(parent types.Entity) { hour24OtnPathReport.parent = parent }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetParent() types.Entity { return hour24OtnPathReport.parent }

func (hour24OtnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathReports_Hour24OtnPathReport) GetParentYangName() string { return "hour24otn-path-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold.
    Hour24OtnPathThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetFilter() yfilter.YFilter { return hour24OtnPathThresholds.YFilter }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) SetFilter(yf yfilter.YFilter) { hour24OtnPathThresholds.YFilter = yf }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetGoName(yname string) string {
    if yname == "hour24otn-path-threshold" { return "Hour24OtnPathThreshold" }
    return ""
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetSegmentPath() string {
    return "hour24otn-path-thresholds"
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hour24otn-path-threshold" {
        for _, c := range hour24OtnPathThresholds.Hour24OtnPathThreshold {
            if hour24OtnPathThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold{}
        hour24OtnPathThresholds.Hour24OtnPathThreshold = append(hour24OtnPathThresholds.Hour24OtnPathThreshold, child)
        return &hour24OtnPathThresholds.Hour24OtnPathThreshold[len(hour24OtnPathThresholds.Hour24OtnPathThreshold)-1]
    }
    return nil
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range hour24OtnPathThresholds.Hour24OtnPathThreshold {
        children[hour24OtnPathThresholds.Hour24OtnPathThreshold[i].GetSegmentPath()] = &hour24OtnPathThresholds.Hour24OtnPathThreshold[i]
    }
    return children
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetYangName() string { return "hour24otn-path-thresholds" }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) SetParent(parent types.Entity) { hour24OtnPathThresholds.parent = parent }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetParent() types.Entity { return hour24OtnPathThresholds.parent }

func (hour24OtnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds) GetParentYangName() string { return "hour24otn-path" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetFilter() yfilter.YFilter { return hour24OtnPathThreshold.YFilter }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) SetFilter(yf yfilter.YFilter) { hour24OtnPathThreshold.YFilter = yf }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetSegmentPath() string {
    return "hour24otn-path-threshold" + "[otn-threshold='" + fmt.Sprintf("%v", hour24OtnPathThreshold.OtnThreshold) + "']"
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = hour24OtnPathThreshold.OtnThreshold
    leafs["otn-threshold-value"] = hour24OtnPathThreshold.OtnThresholdValue
    return leafs
}

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetYangName() string { return "hour24otn-path-threshold" }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) SetParent(parent types.Entity) { hour24OtnPathThreshold.parent = parent }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetParent() types.Entity { return hour24OtnPathThreshold.parent }

func (hour24OtnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24OtnPath_Hour24OtnPathThresholds_Hour24OtnPathThreshold) GetParentYangName() string { return "hour24otn-path-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure optics performance monitoring.
    Minute15Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics

    // Configure secy-if performance monitoring.
    Minute15Secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif

    // Configure secy-rx performance monitoring.
    Minute15Secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx

    // Configure fec g709 performance monitoring.
    Minute15Fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec

    // Configure secy-tx performance monitoring.
    Minute15Secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx

    // configure otn g709 performance monitoring.
    Minute15Otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetFilter() yfilter.YFilter { return minute15.YFilter }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) SetFilter(yf yfilter.YFilter) { minute15.YFilter = yf }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetGoName(yname string) string {
    if yname == "minute15-optics" { return "Minute15Optics" }
    if yname == "minute15secyif" { return "Minute15Secyif" }
    if yname == "minute15secyrx" { return "Minute15Secyrx" }
    if yname == "minute15fec" { return "Minute15Fec" }
    if yname == "minute15secytx" { return "Minute15Secytx" }
    if yname == "minute15otn" { return "Minute15Otn" }
    return ""
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetSegmentPath() string {
    return "minute15"
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-optics" {
        return &minute15.Minute15Optics
    }
    if childYangName == "minute15secyif" {
        return &minute15.Minute15Secyif
    }
    if childYangName == "minute15secyrx" {
        return &minute15.Minute15Secyrx
    }
    if childYangName == "minute15fec" {
        return &minute15.Minute15Fec
    }
    if childYangName == "minute15secytx" {
        return &minute15.Minute15Secytx
    }
    if childYangName == "minute15otn" {
        return &minute15.Minute15Otn
    }
    return nil
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-optics"] = &minute15.Minute15Optics
    children["minute15secyif"] = &minute15.Minute15Secyif
    children["minute15secyrx"] = &minute15.Minute15Secyrx
    children["minute15fec"] = &minute15.Minute15Fec
    children["minute15secytx"] = &minute15.Minute15Secytx
    children["minute15otn"] = &minute15.Minute15Otn
    return children
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetBundleName() string { return "cisco_ios_xr" }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetYangName() string { return "minute15" }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) SetParent(parent types.Entity) { minute15.parent = parent }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetParent() types.Entity { return minute15.parent }

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetParentYangName() string { return "performance-management" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Minute15OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds

    // set optics TCA reporting status.
    Minute15OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetFilter() yfilter.YFilter { return minute15Optics.YFilter }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) SetFilter(yf yfilter.YFilter) { minute15Optics.YFilter = yf }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetGoName(yname string) string {
    if yname == "minute15-optics-thresholds" { return "Minute15OpticsThresholds" }
    if yname == "minute15-optics-reports" { return "Minute15OpticsReports" }
    return ""
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetSegmentPath() string {
    return "minute15-optics"
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-optics-thresholds" {
        return &minute15Optics.Minute15OpticsThresholds
    }
    if childYangName == "minute15-optics-reports" {
        return &minute15Optics.Minute15OpticsReports
    }
    return nil
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15-optics-thresholds"] = &minute15Optics.Minute15OpticsThresholds
    children["minute15-optics-reports"] = &minute15Optics.Minute15OpticsReports
    return children
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetYangName() string { return "minute15-optics" }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) SetParent(parent types.Entity) { minute15Optics.parent = parent }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetParent() types.Entity { return minute15Optics.parent }

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold.
    Minute15OpticsThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetFilter() yfilter.YFilter { return minute15OpticsThresholds.YFilter }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) SetFilter(yf yfilter.YFilter) { minute15OpticsThresholds.YFilter = yf }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetGoName(yname string) string {
    if yname == "minute15-optics-threshold" { return "Minute15OpticsThreshold" }
    return ""
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetSegmentPath() string {
    return "minute15-optics-thresholds"
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-optics-threshold" {
        for _, c := range minute15OpticsThresholds.Minute15OpticsThreshold {
            if minute15OpticsThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold{}
        minute15OpticsThresholds.Minute15OpticsThreshold = append(minute15OpticsThresholds.Minute15OpticsThreshold, child)
        return &minute15OpticsThresholds.Minute15OpticsThreshold[len(minute15OpticsThresholds.Minute15OpticsThreshold)-1]
    }
    return nil
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OpticsThresholds.Minute15OpticsThreshold {
        children[minute15OpticsThresholds.Minute15OpticsThreshold[i].GetSegmentPath()] = &minute15OpticsThresholds.Minute15OpticsThreshold[i]
    }
    return children
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetYangName() string { return "minute15-optics-thresholds" }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) SetParent(parent types.Entity) { minute15OpticsThresholds.parent = parent }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetParent() types.Entity { return minute15OpticsThresholds.parent }

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetParentYangName() string { return "minute15-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    Dbm interface{}
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetFilter() yfilter.YFilter { return minute15OpticsThreshold.YFilter }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) SetFilter(yf yfilter.YFilter) { minute15OpticsThreshold.YFilter = yf }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetGoName(yname string) string {
    if yname == "optics-threshold" { return "OpticsThreshold" }
    if yname == "optics-threshold-value" { return "OpticsThresholdValue" }
    if yname == "dbm" { return "Dbm" }
    return ""
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetSegmentPath() string {
    return "minute15-optics-threshold" + "[optics-threshold='" + fmt.Sprintf("%v", minute15OpticsThreshold.OpticsThreshold) + "']"
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-threshold"] = minute15OpticsThreshold.OpticsThreshold
    leafs["optics-threshold-value"] = minute15OpticsThreshold.OpticsThresholdValue
    leafs["dbm"] = minute15OpticsThreshold.Dbm
    return leafs
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetYangName() string { return "minute15-optics-threshold" }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) SetParent(parent types.Entity) { minute15OpticsThreshold.parent = parent }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetParent() types.Entity { return minute15OpticsThreshold.parent }

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetParentYangName() string { return "minute15-optics-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport.
    Minute15OpticsReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetFilter() yfilter.YFilter { return minute15OpticsReports.YFilter }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) SetFilter(yf yfilter.YFilter) { minute15OpticsReports.YFilter = yf }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetGoName(yname string) string {
    if yname == "minute15-optics-report" { return "Minute15OpticsReport" }
    return ""
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetSegmentPath() string {
    return "minute15-optics-reports"
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15-optics-report" {
        for _, c := range minute15OpticsReports.Minute15OpticsReport {
            if minute15OpticsReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport{}
        minute15OpticsReports.Minute15OpticsReport = append(minute15OpticsReports.Minute15OpticsReport, child)
        return &minute15OpticsReports.Minute15OpticsReport[len(minute15OpticsReports.Minute15OpticsReport)-1]
    }
    return nil
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OpticsReports.Minute15OpticsReport {
        children[minute15OpticsReports.Minute15OpticsReport[i].GetSegmentPath()] = &minute15OpticsReports.Minute15OpticsReport[i]
    }
    return children
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetYangName() string { return "minute15-optics-reports" }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) SetParent(parent types.Entity) { minute15OpticsReports.parent = parent }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetParent() types.Entity { return minute15OpticsReports.parent }

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetParentYangName() string { return "minute15-optics" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetFilter() yfilter.YFilter { return minute15OpticsReport.YFilter }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) SetFilter(yf yfilter.YFilter) { minute15OpticsReport.YFilter = yf }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetGoName(yname string) string {
    if yname == "optics-report" { return "OpticsReport" }
    return ""
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetSegmentPath() string {
    return "minute15-optics-report" + "[optics-report='" + fmt.Sprintf("%v", minute15OpticsReport.OpticsReport) + "']"
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["optics-report"] = minute15OpticsReport.OpticsReport
    return leafs
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetYangName() string { return "minute15-optics-report" }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) SetParent(parent types.Entity) { minute15OpticsReport.parent = parent }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetParent() types.Entity { return minute15OpticsReport.parent }

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetParentYangName() string { return "minute15-optics-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Minute15SecyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports

    // Configure threshold on secyif parameters.
    Minute15SecyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetFilter() yfilter.YFilter { return minute15Secyif.YFilter }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) SetFilter(yf yfilter.YFilter) { minute15Secyif.YFilter = yf }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetGoName(yname string) string {
    if yname == "minute15secyif-reports" { return "Minute15SecyifReports" }
    if yname == "minute15secyif-thresholds" { return "Minute15SecyifThresholds" }
    return ""
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetSegmentPath() string {
    return "minute15secyif"
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyif-reports" {
        return &minute15Secyif.Minute15SecyifReports
    }
    if childYangName == "minute15secyif-thresholds" {
        return &minute15Secyif.Minute15SecyifThresholds
    }
    return nil
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15secyif-reports"] = &minute15Secyif.Minute15SecyifReports
    children["minute15secyif-thresholds"] = &minute15Secyif.Minute15SecyifThresholds
    return children
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetYangName() string { return "minute15secyif" }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) SetParent(parent types.Entity) { minute15Secyif.parent = parent }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetParent() types.Entity { return minute15Secyif.parent }

func (minute15Secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport.
    Minute15SecyifReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetFilter() yfilter.YFilter { return minute15SecyifReports.YFilter }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) SetFilter(yf yfilter.YFilter) { minute15SecyifReports.YFilter = yf }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetGoName(yname string) string {
    if yname == "minute15secyif-report" { return "Minute15SecyifReport" }
    return ""
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetSegmentPath() string {
    return "minute15secyif-reports"
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyif-report" {
        for _, c := range minute15SecyifReports.Minute15SecyifReport {
            if minute15SecyifReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport{}
        minute15SecyifReports.Minute15SecyifReport = append(minute15SecyifReports.Minute15SecyifReport, child)
        return &minute15SecyifReports.Minute15SecyifReport[len(minute15SecyifReports.Minute15SecyifReport)-1]
    }
    return nil
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecyifReports.Minute15SecyifReport {
        children[minute15SecyifReports.Minute15SecyifReport[i].GetSegmentPath()] = &minute15SecyifReports.Minute15SecyifReport[i]
    }
    return children
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetYangName() string { return "minute15secyif-reports" }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) SetParent(parent types.Entity) { minute15SecyifReports.parent = parent }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetParent() types.Entity { return minute15SecyifReports.parent }

func (minute15SecyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports) GetParentYangName() string { return "minute15secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetFilter() yfilter.YFilter { return minute15SecyifReport.YFilter }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) SetFilter(yf yfilter.YFilter) { minute15SecyifReport.YFilter = yf }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetGoName(yname string) string {
    if yname == "secyif-report" { return "SecyifReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetSegmentPath() string {
    return "minute15secyif-report" + "[secyif-report='" + fmt.Sprintf("%v", minute15SecyifReport.SecyifReport) + "']"
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-report"] = minute15SecyifReport.SecyifReport
    leafs["enable"] = minute15SecyifReport.Enable
    return leafs
}

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetYangName() string { return "minute15secyif-report" }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) SetParent(parent types.Entity) { minute15SecyifReport.parent = parent }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetParent() types.Entity { return minute15SecyifReport.parent }

func (minute15SecyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifReports_Minute15SecyifReport) GetParentYangName() string { return "minute15secyif-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold.
    Minute15SecyifThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetFilter() yfilter.YFilter { return minute15SecyifThresholds.YFilter }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) SetFilter(yf yfilter.YFilter) { minute15SecyifThresholds.YFilter = yf }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetGoName(yname string) string {
    if yname == "minute15secyif-threshold" { return "Minute15SecyifThreshold" }
    return ""
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetSegmentPath() string {
    return "minute15secyif-thresholds"
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyif-threshold" {
        for _, c := range minute15SecyifThresholds.Minute15SecyifThreshold {
            if minute15SecyifThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold{}
        minute15SecyifThresholds.Minute15SecyifThreshold = append(minute15SecyifThresholds.Minute15SecyifThreshold, child)
        return &minute15SecyifThresholds.Minute15SecyifThreshold[len(minute15SecyifThresholds.Minute15SecyifThreshold)-1]
    }
    return nil
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecyifThresholds.Minute15SecyifThreshold {
        children[minute15SecyifThresholds.Minute15SecyifThreshold[i].GetSegmentPath()] = &minute15SecyifThresholds.Minute15SecyifThreshold[i]
    }
    return children
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetYangName() string { return "minute15secyif-thresholds" }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) SetParent(parent types.Entity) { minute15SecyifThresholds.parent = parent }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetParent() types.Entity { return minute15SecyifThresholds.parent }

func (minute15SecyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds) GetParentYangName() string { return "minute15secyif" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetFilter() yfilter.YFilter { return minute15SecyifThreshold.YFilter }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) SetFilter(yf yfilter.YFilter) { minute15SecyifThreshold.YFilter = yf }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetGoName(yname string) string {
    if yname == "secyif-threshold" { return "SecyifThreshold" }
    if yname == "secyif-threshold-value" { return "SecyifThresholdValue" }
    return ""
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetSegmentPath() string {
    return "minute15secyif-threshold" + "[secyif-threshold='" + fmt.Sprintf("%v", minute15SecyifThreshold.SecyifThreshold) + "']"
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyif-threshold"] = minute15SecyifThreshold.SecyifThreshold
    leafs["secyif-threshold-value"] = minute15SecyifThreshold.SecyifThresholdValue
    return leafs
}

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetYangName() string { return "minute15secyif-threshold" }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) SetParent(parent types.Entity) { minute15SecyifThreshold.parent = parent }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetParent() types.Entity { return minute15SecyifThreshold.parent }

func (minute15SecyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyif_Minute15SecyifThresholds_Minute15SecyifThreshold) GetParentYangName() string { return "minute15secyif-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Minute15SecyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports

    // Configure threshold on secyrx parameters.
    Minute15SecyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetFilter() yfilter.YFilter { return minute15Secyrx.YFilter }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) SetFilter(yf yfilter.YFilter) { minute15Secyrx.YFilter = yf }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetGoName(yname string) string {
    if yname == "minute15secyrx-reports" { return "Minute15SecyrxReports" }
    if yname == "minute15secyrx-thresholds" { return "Minute15SecyrxThresholds" }
    return ""
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetSegmentPath() string {
    return "minute15secyrx"
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyrx-reports" {
        return &minute15Secyrx.Minute15SecyrxReports
    }
    if childYangName == "minute15secyrx-thresholds" {
        return &minute15Secyrx.Minute15SecyrxThresholds
    }
    return nil
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15secyrx-reports"] = &minute15Secyrx.Minute15SecyrxReports
    children["minute15secyrx-thresholds"] = &minute15Secyrx.Minute15SecyrxThresholds
    return children
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetYangName() string { return "minute15secyrx" }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) SetParent(parent types.Entity) { minute15Secyrx.parent = parent }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetParent() types.Entity { return minute15Secyrx.parent }

func (minute15Secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport.
    Minute15SecyrxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetFilter() yfilter.YFilter { return minute15SecyrxReports.YFilter }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) SetFilter(yf yfilter.YFilter) { minute15SecyrxReports.YFilter = yf }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetGoName(yname string) string {
    if yname == "minute15secyrx-report" { return "Minute15SecyrxReport" }
    return ""
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetSegmentPath() string {
    return "minute15secyrx-reports"
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyrx-report" {
        for _, c := range minute15SecyrxReports.Minute15SecyrxReport {
            if minute15SecyrxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport{}
        minute15SecyrxReports.Minute15SecyrxReport = append(minute15SecyrxReports.Minute15SecyrxReport, child)
        return &minute15SecyrxReports.Minute15SecyrxReport[len(minute15SecyrxReports.Minute15SecyrxReport)-1]
    }
    return nil
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecyrxReports.Minute15SecyrxReport {
        children[minute15SecyrxReports.Minute15SecyrxReport[i].GetSegmentPath()] = &minute15SecyrxReports.Minute15SecyrxReport[i]
    }
    return children
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetYangName() string { return "minute15secyrx-reports" }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) SetParent(parent types.Entity) { minute15SecyrxReports.parent = parent }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetParent() types.Entity { return minute15SecyrxReports.parent }

func (minute15SecyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports) GetParentYangName() string { return "minute15secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetFilter() yfilter.YFilter { return minute15SecyrxReport.YFilter }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) SetFilter(yf yfilter.YFilter) { minute15SecyrxReport.YFilter = yf }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetGoName(yname string) string {
    if yname == "secyrx-report" { return "SecyrxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetSegmentPath() string {
    return "minute15secyrx-report" + "[secyrx-report='" + fmt.Sprintf("%v", minute15SecyrxReport.SecyrxReport) + "']"
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-report"] = minute15SecyrxReport.SecyrxReport
    leafs["enable"] = minute15SecyrxReport.Enable
    return leafs
}

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetYangName() string { return "minute15secyrx-report" }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) SetParent(parent types.Entity) { minute15SecyrxReport.parent = parent }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetParent() types.Entity { return minute15SecyrxReport.parent }

func (minute15SecyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxReports_Minute15SecyrxReport) GetParentYangName() string { return "minute15secyrx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold.
    Minute15SecyrxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetFilter() yfilter.YFilter { return minute15SecyrxThresholds.YFilter }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) SetFilter(yf yfilter.YFilter) { minute15SecyrxThresholds.YFilter = yf }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetGoName(yname string) string {
    if yname == "minute15secyrx-threshold" { return "Minute15SecyrxThreshold" }
    return ""
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetSegmentPath() string {
    return "minute15secyrx-thresholds"
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secyrx-threshold" {
        for _, c := range minute15SecyrxThresholds.Minute15SecyrxThreshold {
            if minute15SecyrxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold{}
        minute15SecyrxThresholds.Minute15SecyrxThreshold = append(minute15SecyrxThresholds.Minute15SecyrxThreshold, child)
        return &minute15SecyrxThresholds.Minute15SecyrxThreshold[len(minute15SecyrxThresholds.Minute15SecyrxThreshold)-1]
    }
    return nil
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecyrxThresholds.Minute15SecyrxThreshold {
        children[minute15SecyrxThresholds.Minute15SecyrxThreshold[i].GetSegmentPath()] = &minute15SecyrxThresholds.Minute15SecyrxThreshold[i]
    }
    return children
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetYangName() string { return "minute15secyrx-thresholds" }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) SetParent(parent types.Entity) { minute15SecyrxThresholds.parent = parent }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetParent() types.Entity { return minute15SecyrxThresholds.parent }

func (minute15SecyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds) GetParentYangName() string { return "minute15secyrx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetFilter() yfilter.YFilter { return minute15SecyrxThreshold.YFilter }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) SetFilter(yf yfilter.YFilter) { minute15SecyrxThreshold.YFilter = yf }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetGoName(yname string) string {
    if yname == "secyrx-threshold" { return "SecyrxThreshold" }
    if yname == "secyrx-threshold-value" { return "SecyrxThresholdValue" }
    return ""
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetSegmentPath() string {
    return "minute15secyrx-threshold" + "[secyrx-threshold='" + fmt.Sprintf("%v", minute15SecyrxThreshold.SecyrxThreshold) + "']"
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secyrx-threshold"] = minute15SecyrxThreshold.SecyrxThreshold
    leafs["secyrx-threshold-value"] = minute15SecyrxThreshold.SecyrxThresholdValue
    return leafs
}

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetYangName() string { return "minute15secyrx-threshold" }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) SetParent(parent types.Entity) { minute15SecyrxThreshold.parent = parent }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetParent() types.Entity { return minute15SecyrxThreshold.parent }

func (minute15SecyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secyrx_Minute15SecyrxThresholds_Minute15SecyrxThreshold) GetParentYangName() string { return "minute15secyrx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Minute15FecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds

    // set fec TCA reporting status.
    Minute15FecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetFilter() yfilter.YFilter { return minute15Fec.YFilter }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) SetFilter(yf yfilter.YFilter) { minute15Fec.YFilter = yf }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetGoName(yname string) string {
    if yname == "minute15fec-thresholds" { return "Minute15FecThresholds" }
    if yname == "minute15fec-reports" { return "Minute15FecReports" }
    return ""
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetSegmentPath() string {
    return "minute15fec"
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15fec-thresholds" {
        return &minute15Fec.Minute15FecThresholds
    }
    if childYangName == "minute15fec-reports" {
        return &minute15Fec.Minute15FecReports
    }
    return nil
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15fec-thresholds"] = &minute15Fec.Minute15FecThresholds
    children["minute15fec-reports"] = &minute15Fec.Minute15FecReports
    return children
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetYangName() string { return "minute15fec" }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) SetParent(parent types.Entity) { minute15Fec.parent = parent }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetParent() types.Entity { return minute15Fec.parent }

func (minute15Fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold.
    Minute15FecThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetFilter() yfilter.YFilter { return minute15FecThresholds.YFilter }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) SetFilter(yf yfilter.YFilter) { minute15FecThresholds.YFilter = yf }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetGoName(yname string) string {
    if yname == "minute15fec-threshold" { return "Minute15FecThreshold" }
    return ""
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetSegmentPath() string {
    return "minute15fec-thresholds"
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15fec-threshold" {
        for _, c := range minute15FecThresholds.Minute15FecThreshold {
            if minute15FecThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold{}
        minute15FecThresholds.Minute15FecThreshold = append(minute15FecThresholds.Minute15FecThreshold, child)
        return &minute15FecThresholds.Minute15FecThreshold[len(minute15FecThresholds.Minute15FecThreshold)-1]
    }
    return nil
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15FecThresholds.Minute15FecThreshold {
        children[minute15FecThresholds.Minute15FecThreshold[i].GetSegmentPath()] = &minute15FecThresholds.Minute15FecThreshold[i]
    }
    return children
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetYangName() string { return "minute15fec-thresholds" }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) SetParent(parent types.Entity) { minute15FecThresholds.parent = parent }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetParent() types.Entity { return minute15FecThresholds.parent }

func (minute15FecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds) GetParentYangName() string { return "minute15fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..16. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetFilter() yfilter.YFilter { return minute15FecThreshold.YFilter }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) SetFilter(yf yfilter.YFilter) { minute15FecThreshold.YFilter = yf }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetGoName(yname string) string {
    if yname == "fec-threshold" { return "FecThreshold" }
    if yname == "fec-threshold-value" { return "FecThresholdValue" }
    return ""
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetSegmentPath() string {
    return "minute15fec-threshold" + "[fec-threshold='" + fmt.Sprintf("%v", minute15FecThreshold.FecThreshold) + "']"
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-threshold"] = minute15FecThreshold.FecThreshold
    leafs["fec-threshold-value"] = minute15FecThreshold.FecThresholdValue
    return leafs
}

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetYangName() string { return "minute15fec-threshold" }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) SetParent(parent types.Entity) { minute15FecThreshold.parent = parent }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetParent() types.Entity { return minute15FecThreshold.parent }

func (minute15FecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecThresholds_Minute15FecThreshold) GetParentYangName() string { return "minute15fec-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport.
    Minute15FecReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetFilter() yfilter.YFilter { return minute15FecReports.YFilter }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) SetFilter(yf yfilter.YFilter) { minute15FecReports.YFilter = yf }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetGoName(yname string) string {
    if yname == "minute15fec-report" { return "Minute15FecReport" }
    return ""
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetSegmentPath() string {
    return "minute15fec-reports"
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15fec-report" {
        for _, c := range minute15FecReports.Minute15FecReport {
            if minute15FecReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport{}
        minute15FecReports.Minute15FecReport = append(minute15FecReports.Minute15FecReport, child)
        return &minute15FecReports.Minute15FecReport[len(minute15FecReports.Minute15FecReport)-1]
    }
    return nil
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15FecReports.Minute15FecReport {
        children[minute15FecReports.Minute15FecReport[i].GetSegmentPath()] = &minute15FecReports.Minute15FecReport[i]
    }
    return children
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetYangName() string { return "minute15fec-reports" }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) SetParent(parent types.Entity) { minute15FecReports.parent = parent }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetParent() types.Entity { return minute15FecReports.parent }

func (minute15FecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports) GetParentYangName() string { return "minute15fec" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetFilter() yfilter.YFilter { return minute15FecReport.YFilter }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) SetFilter(yf yfilter.YFilter) { minute15FecReport.YFilter = yf }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetGoName(yname string) string {
    if yname == "fec-report" { return "FecReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetSegmentPath() string {
    return "minute15fec-report" + "[fec-report='" + fmt.Sprintf("%v", minute15FecReport.FecReport) + "']"
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fec-report"] = minute15FecReport.FecReport
    leafs["enable"] = minute15FecReport.Enable
    return leafs
}

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetYangName() string { return "minute15fec-report" }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) SetParent(parent types.Entity) { minute15FecReport.parent = parent }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetParent() types.Entity { return minute15FecReport.parent }

func (minute15FecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Fec_Minute15FecReports_Minute15FecReport) GetParentYangName() string { return "minute15fec-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // set secytx TCA reporting status.
    Minute15SecytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports

    // Configure threshold on secytx parameters.
    Minute15SecytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetFilter() yfilter.YFilter { return minute15Secytx.YFilter }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) SetFilter(yf yfilter.YFilter) { minute15Secytx.YFilter = yf }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetGoName(yname string) string {
    if yname == "minute15secytx-reports" { return "Minute15SecytxReports" }
    if yname == "minute15secytx-thresholds" { return "Minute15SecytxThresholds" }
    return ""
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetSegmentPath() string {
    return "minute15secytx"
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secytx-reports" {
        return &minute15Secytx.Minute15SecytxReports
    }
    if childYangName == "minute15secytx-thresholds" {
        return &minute15Secytx.Minute15SecytxThresholds
    }
    return nil
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minute15secytx-reports"] = &minute15Secytx.Minute15SecytxReports
    children["minute15secytx-thresholds"] = &minute15Secytx.Minute15SecytxThresholds
    return children
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetYangName() string { return "minute15secytx" }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) SetParent(parent types.Entity) { minute15Secytx.parent = parent }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetParent() types.Entity { return minute15Secytx.parent }

func (minute15Secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport.
    Minute15SecytxReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetFilter() yfilter.YFilter { return minute15SecytxReports.YFilter }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) SetFilter(yf yfilter.YFilter) { minute15SecytxReports.YFilter = yf }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetGoName(yname string) string {
    if yname == "minute15secytx-report" { return "Minute15SecytxReport" }
    return ""
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetSegmentPath() string {
    return "minute15secytx-reports"
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secytx-report" {
        for _, c := range minute15SecytxReports.Minute15SecytxReport {
            if minute15SecytxReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport{}
        minute15SecytxReports.Minute15SecytxReport = append(minute15SecytxReports.Minute15SecytxReport, child)
        return &minute15SecytxReports.Minute15SecytxReport[len(minute15SecytxReports.Minute15SecytxReport)-1]
    }
    return nil
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecytxReports.Minute15SecytxReport {
        children[minute15SecytxReports.Minute15SecytxReport[i].GetSegmentPath()] = &minute15SecytxReports.Minute15SecytxReport[i]
    }
    return children
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetYangName() string { return "minute15secytx-reports" }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) SetParent(parent types.Entity) { minute15SecytxReports.parent = parent }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetParent() types.Entity { return minute15SecytxReports.parent }

func (minute15SecytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports) GetParentYangName() string { return "minute15secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetFilter() yfilter.YFilter { return minute15SecytxReport.YFilter }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) SetFilter(yf yfilter.YFilter) { minute15SecytxReport.YFilter = yf }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetGoName(yname string) string {
    if yname == "secytx-report" { return "SecytxReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetSegmentPath() string {
    return "minute15secytx-report" + "[secytx-report='" + fmt.Sprintf("%v", minute15SecytxReport.SecytxReport) + "']"
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-report"] = minute15SecytxReport.SecytxReport
    leafs["enable"] = minute15SecytxReport.Enable
    return leafs
}

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetYangName() string { return "minute15secytx-report" }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) SetParent(parent types.Entity) { minute15SecytxReport.parent = parent }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetParent() types.Entity { return minute15SecytxReport.parent }

func (minute15SecytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxReports_Minute15SecytxReport) GetParentYangName() string { return "minute15secytx-reports" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold.
    Minute15SecytxThreshold []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetFilter() yfilter.YFilter { return minute15SecytxThresholds.YFilter }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) SetFilter(yf yfilter.YFilter) { minute15SecytxThresholds.YFilter = yf }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetGoName(yname string) string {
    if yname == "minute15secytx-threshold" { return "Minute15SecytxThreshold" }
    return ""
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetSegmentPath() string {
    return "minute15secytx-thresholds"
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15secytx-threshold" {
        for _, c := range minute15SecytxThresholds.Minute15SecytxThreshold {
            if minute15SecytxThresholds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold{}
        minute15SecytxThresholds.Minute15SecytxThreshold = append(minute15SecytxThresholds.Minute15SecytxThreshold, child)
        return &minute15SecytxThresholds.Minute15SecytxThreshold[len(minute15SecytxThresholds.Minute15SecytxThreshold)-1]
    }
    return nil
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15SecytxThresholds.Minute15SecytxThreshold {
        children[minute15SecytxThresholds.Minute15SecytxThreshold[i].GetSegmentPath()] = &minute15SecytxThresholds.Minute15SecytxThreshold[i]
    }
    return children
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetYangName() string { return "minute15secytx-thresholds" }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) SetParent(parent types.Entity) { minute15SecytxThresholds.parent = parent }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetParent() types.Entity { return minute15SecytxThresholds.parent }

func (minute15SecytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds) GetParentYangName() string { return "minute15secytx" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetFilter() yfilter.YFilter { return minute15SecytxThreshold.YFilter }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) SetFilter(yf yfilter.YFilter) { minute15SecytxThreshold.YFilter = yf }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetGoName(yname string) string {
    if yname == "secytx-threshold" { return "SecytxThreshold" }
    if yname == "secytx-threshold-value" { return "SecytxThresholdValue" }
    return ""
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetSegmentPath() string {
    return "minute15secytx-threshold" + "[secytx-threshold='" + fmt.Sprintf("%v", minute15SecytxThreshold.SecytxThreshold) + "']"
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secytx-threshold"] = minute15SecytxThreshold.SecytxThreshold
    leafs["secytx-threshold-value"] = minute15SecytxThreshold.SecytxThresholdValue
    return leafs
}

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetYangName() string { return "minute15secytx-threshold" }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) SetParent(parent types.Entity) { minute15SecytxThreshold.parent = parent }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetParent() types.Entity { return minute15SecytxThreshold.parent }

func (minute15SecytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Secytx_Minute15SecytxThresholds_Minute15SecytxThreshold) GetParentYangName() string { return "minute15secytx-thresholds" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Min15OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes

    // set otn TCA reporting status.
    Minute15OtnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetFilter() yfilter.YFilter { return minute15Otn.YFilter }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) SetFilter(yf yfilter.YFilter) { minute15Otn.YFilter = yf }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetGoName(yname string) string {
    if yname == "min15-otn-threshes" { return "Min15OtnThreshes" }
    if yname == "minute15otn-reports" { return "Minute15OtnReports" }
    return ""
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetSegmentPath() string {
    return "minute15otn"
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min15-otn-threshes" {
        return &minute15Otn.Min15OtnThreshes
    }
    if childYangName == "minute15otn-reports" {
        return &minute15Otn.Minute15OtnReports
    }
    return nil
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min15-otn-threshes"] = &minute15Otn.Min15OtnThreshes
    children["minute15otn-reports"] = &minute15Otn.Minute15OtnReports
    return children
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetBundleName() string { return "cisco_ios_xr" }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetYangName() string { return "minute15otn" }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) SetParent(parent types.Entity) { minute15Otn.parent = parent }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetParent() types.Entity { return minute15Otn.parent }

func (minute15Otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn) GetParentYangName() string { return "minute15" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh.
    Min15OtnThresh []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetFilter() yfilter.YFilter { return min15OtnThreshes.YFilter }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) SetFilter(yf yfilter.YFilter) { min15OtnThreshes.YFilter = yf }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetGoName(yname string) string {
    if yname == "min15-otn-thresh" { return "Min15OtnThresh" }
    return ""
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetSegmentPath() string {
    return "min15-otn-threshes"
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min15-otn-thresh" {
        for _, c := range min15OtnThreshes.Min15OtnThresh {
            if min15OtnThreshes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh{}
        min15OtnThreshes.Min15OtnThresh = append(min15OtnThreshes.Min15OtnThresh, child)
        return &min15OtnThreshes.Min15OtnThresh[len(min15OtnThreshes.Min15OtnThresh)-1]
    }
    return nil
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range min15OtnThreshes.Min15OtnThresh {
        children[min15OtnThreshes.Min15OtnThresh[i].GetSegmentPath()] = &min15OtnThreshes.Min15OtnThresh[i]
    }
    return children
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetYangName() string { return "min15-otn-threshes" }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) SetParent(parent types.Entity) { min15OtnThreshes.parent = parent }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetParent() types.Entity { return min15OtnThreshes.parent }

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes) GetParentYangName() string { return "minute15otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647. This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetFilter() yfilter.YFilter { return min15OtnThresh.YFilter }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) SetFilter(yf yfilter.YFilter) { min15OtnThresh.YFilter = yf }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetGoName(yname string) string {
    if yname == "otn-threshold" { return "OtnThreshold" }
    if yname == "otn-threshold-value" { return "OtnThresholdValue" }
    return ""
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetSegmentPath() string {
    return "min15-otn-thresh" + "[otn-threshold='" + fmt.Sprintf("%v", min15OtnThresh.OtnThreshold) + "']"
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-threshold"] = min15OtnThresh.OtnThreshold
    leafs["otn-threshold-value"] = min15OtnThresh.OtnThresholdValue
    return leafs
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetBundleName() string { return "cisco_ios_xr" }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetYangName() string { return "min15-otn-thresh" }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) SetParent(parent types.Entity) { min15OtnThresh.parent = parent }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetParent() types.Entity { return min15OtnThresh.parent }

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Min15OtnThreshes_Min15OtnThresh) GetParentYangName() string { return "min15-otn-threshes" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport.
    Minute15OtnReport []InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetFilter() yfilter.YFilter { return minute15OtnReports.YFilter }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) SetFilter(yf yfilter.YFilter) { minute15OtnReports.YFilter = yf }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetGoName(yname string) string {
    if yname == "minute15otn-report" { return "Minute15OtnReport" }
    return ""
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetSegmentPath() string {
    return "minute15otn-reports"
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minute15otn-report" {
        for _, c := range minute15OtnReports.Minute15OtnReport {
            if minute15OtnReports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport{}
        minute15OtnReports.Minute15OtnReport = append(minute15OtnReports.Minute15OtnReport, child)
        return &minute15OtnReports.Minute15OtnReport[len(minute15OtnReports.Minute15OtnReport)-1]
    }
    return nil
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range minute15OtnReports.Minute15OtnReport {
        children[minute15OtnReports.Minute15OtnReport[i].GetSegmentPath()] = &minute15OtnReports.Minute15OtnReport[i]
    }
    return children
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetYangName() string { return "minute15otn-reports" }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) SetParent(parent types.Entity) { minute15OtnReports.parent = parent }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetParent() types.Entity { return minute15OtnReports.parent }

func (minute15OtnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports) GetParentYangName() string { return "minute15otn" }

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetFilter() yfilter.YFilter { return minute15OtnReport.YFilter }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) SetFilter(yf yfilter.YFilter) { minute15OtnReport.YFilter = yf }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetGoName(yname string) string {
    if yname == "otn-report" { return "OtnReport" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetSegmentPath() string {
    return "minute15otn-report" + "[otn-report='" + fmt.Sprintf("%v", minute15OtnReport.OtnReport) + "']"
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["otn-report"] = minute15OtnReport.OtnReport
    leafs["enable"] = minute15OtnReport.Enable
    return leafs
}

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetBundleName() string { return "cisco_ios_xr" }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetYangName() string { return "minute15otn-report" }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) SetParent(parent types.Entity) { minute15OtnReport.parent = parent }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetParent() types.Entity { return minute15OtnReport.parent }

func (minute15OtnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Otn_Minute15OtnReports_Minute15OtnReport) GetParentYangName() string { return "minute15otn-reports" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetFilter() yfilter.YFilter { return ciscoIOSXRPppMaCfgPpp.YFilter }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) SetFilter(yf yfilter.YFilter) { ciscoIOSXRPppMaCfgPpp.YFilter = yf }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetGoName(yname string) string {
    return ""
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-cfg:ppp"
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetYangName() string { return "ppp" }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) SetParent(parent types.Entity) { ciscoIOSXRPppMaCfgPpp.parent = parent }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetParent() types.Entity { return ciscoIOSXRPppMaCfgPpp.parent }

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPP FSM configuration data.
    Fsm InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetFilter() yfilter.YFilter { return ciscoIOSXRPppMaFsmCfgPpp.YFilter }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) SetFilter(yf yfilter.YFilter) { ciscoIOSXRPppMaFsmCfgPpp.YFilter = yf }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetGoName(yname string) string {
    if yname == "fsm" { return "Fsm" }
    return ""
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fsm" {
        return &ciscoIOSXRPppMaFsmCfgPpp.Fsm
    }
    return nil
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fsm"] = &ciscoIOSXRPppMaFsmCfgPpp.Fsm
    return children
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetYangName() string { return "ppp" }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) SetParent(parent types.Entity) { ciscoIOSXRPppMaFsmCfgPpp.parent = parent }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetParent() types.Entity { return ciscoIOSXRPppMaFsmCfgPpp.parent }

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
// PPP FSM configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies the maximum time to wait for a response during PPP
    // negotiation. The type is interface{} with range: 1..10. The default value
    // is 3.
    RetryTimeout interface{}

    // This specifies the maximum number of Term-Requests. The type is interface{}
    // with range: 2..10. The default value is 2.
    MaxUnacknowledgedTermRequests interface{}

    // This specifies the maximum number of consecutive Conf-Naks. The type is
    // interface{} with range: 2..10. The default value is 5.
    MaxConsecutiveConfNaks interface{}

    // This specifies the maximum number of unacknowledged Conf-Requests. The type
    // is interface{} with range: 4..20. The default value is 10.
    MaxUnacknowledgedConfRequests interface{}
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetFilter() yfilter.YFilter { return fsm.YFilter }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) SetFilter(yf yfilter.YFilter) { fsm.YFilter = yf }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetGoName(yname string) string {
    if yname == "retry-timeout" { return "RetryTimeout" }
    if yname == "max-unacknowledged-term-requests" { return "MaxUnacknowledgedTermRequests" }
    if yname == "max-consecutive-conf-naks" { return "MaxConsecutiveConfNaks" }
    if yname == "max-unacknowledged-conf-requests" { return "MaxUnacknowledgedConfRequests" }
    return ""
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetSegmentPath() string {
    return "fsm"
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["retry-timeout"] = fsm.RetryTimeout
    leafs["max-unacknowledged-term-requests"] = fsm.MaxUnacknowledgedTermRequests
    leafs["max-consecutive-conf-naks"] = fsm.MaxConsecutiveConfNaks
    leafs["max-unacknowledged-conf-requests"] = fsm.MaxUnacknowledgedConfRequests
    return leafs
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetBundleName() string { return "cisco_ios_xr" }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetYangName() string { return "fsm" }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) SetParent(parent types.Entity) { fsm.parent = parent }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetParent() types.Entity { return fsm.parent }

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetParentYangName() string { return "ppp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPP IPCP configuration data.
    Ipcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetFilter() yfilter.YFilter { return ciscoIOSXRPppMaIpcpCfgPpp.YFilter }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) SetFilter(yf yfilter.YFilter) { ciscoIOSXRPppMaIpcpCfgPpp.YFilter = yf }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetGoName(yname string) string {
    if yname == "ipcp" { return "Ipcp" }
    return ""
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipcp" {
        return &ciscoIOSXRPppMaIpcpCfgPpp.Ipcp
    }
    return nil
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipcp"] = &ciscoIOSXRPppMaIpcpCfgPpp.Ipcp
    return children
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetYangName() string { return "ppp" }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) SetParent(parent types.Entity) { ciscoIOSXRPppMaIpcpCfgPpp.parent = parent }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetParent() types.Entity { return ciscoIOSXRPppMaIpcpCfgPpp.parent }

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
// PPP IPCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable Neighbor Route installation. The type is interface{}.
    NeighborRouteDisable interface{}

    // IPCP address parameters.
    PeerAddress InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress

    // IPCP DNS parameters.
    Dns InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetFilter() yfilter.YFilter { return ipcp.YFilter }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) SetFilter(yf yfilter.YFilter) { ipcp.YFilter = yf }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetGoName(yname string) string {
    if yname == "neighbor-route-disable" { return "NeighborRouteDisable" }
    if yname == "peer-address" { return "PeerAddress" }
    if yname == "dns" { return "Dns" }
    return ""
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetSegmentPath() string {
    return "ipcp"
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer-address" {
        return &ipcp.PeerAddress
    }
    if childYangName == "dns" {
        return &ipcp.Dns
    }
    return nil
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peer-address"] = &ipcp.PeerAddress
    children["dns"] = &ipcp.Dns
    return children
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-route-disable"] = ipcp.NeighborRouteDisable
    return leafs
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetBundleName() string { return "cisco_ios_xr" }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetYangName() string { return "ipcp" }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) SetParent(parent types.Entity) { ipcp.parent = parent }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetParent() types.Entity { return ipcp.parent }

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetParentYangName() string { return "ppp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress
// IPCP address parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify an IP address to assign to peers through IPCP. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Default interface{}
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetFilter() yfilter.YFilter { return peerAddress.YFilter }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) SetFilter(yf yfilter.YFilter) { peerAddress.YFilter = yf }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetGoName(yname string) string {
    if yname == "default" { return "Default" }
    return ""
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetSegmentPath() string {
    return "peer-address"
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default"] = peerAddress.Default
    return leafs
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetBundleName() string { return "cisco_ios_xr" }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetYangName() string { return "peer-address" }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) SetParent(parent types.Entity) { peerAddress.parent = parent }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetParent() types.Entity { return peerAddress.parent }

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetParentYangName() string { return "ipcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
// IPCP DNS parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify DNS address(es) to provide.
    DnsAddresses InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetFilter() yfilter.YFilter { return dns.YFilter }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) SetFilter(yf yfilter.YFilter) { dns.YFilter = yf }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetGoName(yname string) string {
    if yname == "dns-addresses" { return "DnsAddresses" }
    return ""
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetSegmentPath() string {
    return "dns"
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dns-addresses" {
        return &dns.DnsAddresses
    }
    return nil
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dns-addresses"] = &dns.DnsAddresses
    return children
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetBundleName() string { return "cisco_ios_xr" }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetYangName() string { return "dns" }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) SetParent(parent types.Entity) { dns.parent = parent }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetParent() types.Entity { return dns.parent }

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetParentYangName() string { return "ipcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
// Specify DNS address(es) to provide
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary DNS IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Primary interface{}

    // Secondary DNS IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Secondary interface{}
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetFilter() yfilter.YFilter { return dnsAddresses.YFilter }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) SetFilter(yf yfilter.YFilter) { dnsAddresses.YFilter = yf }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetGoName(yname string) string {
    if yname == "primary" { return "Primary" }
    if yname == "secondary" { return "Secondary" }
    return ""
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetSegmentPath() string {
    return "dns-addresses"
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["primary"] = dnsAddresses.Primary
    leafs["secondary"] = dnsAddresses.Secondary
    return leafs
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetYangName() string { return "dns-addresses" }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) SetParent(parent types.Entity) { dnsAddresses.parent = parent }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetParent() types.Entity { return dnsAddresses.parent }

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetParentYangName() string { return "dns" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPP IPCPIW configuration data.
    Ipcpiw InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetFilter() yfilter.YFilter { return ciscoIOSXRPppMaIpcpiwCfgPpp.YFilter }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) SetFilter(yf yfilter.YFilter) { ciscoIOSXRPppMaIpcpiwCfgPpp.YFilter = yf }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetGoName(yname string) string {
    if yname == "ipcpiw" { return "Ipcpiw" }
    return ""
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipcpiw" {
        return &ciscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw
    }
    return nil
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipcpiw"] = &ciscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw
    return children
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetYangName() string { return "ppp" }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) SetParent(parent types.Entity) { ciscoIOSXRPppMaIpcpiwCfgPpp.parent = parent }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetParent() types.Entity { return ciscoIOSXRPppMaIpcpiwCfgPpp.parent }

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
// PPP IPCPIW configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify an IP address to publish to peers through IPCPIW. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProxyAddress interface{}
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetFilter() yfilter.YFilter { return ipcpiw.YFilter }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) SetFilter(yf yfilter.YFilter) { ipcpiw.YFilter = yf }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetGoName(yname string) string {
    if yname == "proxy-address" { return "ProxyAddress" }
    return ""
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetSegmentPath() string {
    return "ipcpiw"
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["proxy-address"] = ipcpiw.ProxyAddress
    return leafs
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetBundleName() string { return "cisco_ios_xr" }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetYangName() string { return "ipcpiw" }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) SetParent(parent types.Entity) { ipcpiw.parent = parent }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetParent() types.Entity { return ipcpiw.parent }

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetParentYangName() string { return "ppp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PPP Multiclass Multilink parameters.
    Mcmp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp

    // PPP LCP configuration data.
    Lcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetFilter() yfilter.YFilter { return ciscoIOSXRPppMaLcpCfgPpp.YFilter }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) SetFilter(yf yfilter.YFilter) { ciscoIOSXRPppMaLcpCfgPpp.YFilter = yf }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetGoName(yname string) string {
    if yname == "mcmp" { return "Mcmp" }
    if yname == "lcp" { return "Lcp" }
    return ""
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mcmp" {
        return &ciscoIOSXRPppMaLcpCfgPpp.Mcmp
    }
    if childYangName == "lcp" {
        return &ciscoIOSXRPppMaLcpCfgPpp.Lcp
    }
    return nil
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mcmp"] = &ciscoIOSXRPppMaLcpCfgPpp.Mcmp
    children["lcp"] = &ciscoIOSXRPppMaLcpCfgPpp.Lcp
    return children
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetBundleName() string { return "cisco_ios_xr" }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetYangName() string { return "ppp" }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) SetParent(parent types.Entity) { ciscoIOSXRPppMaLcpCfgPpp.parent = parent }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetParent() types.Entity { return ciscoIOSXRPppMaLcpCfgPpp.parent }

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp
// PPP Multiclass Multilink parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies that MCMP is enabled on this interface. The type is
    // interface{}.
    Enable interface{}

    // This specifies the MCMP options for the peer. The type is interface{} with
    // range: 1..16. The default value is 2.
    Remote interface{}

    // This specifies the MCMP options for the local host.
    Local InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetFilter() yfilter.YFilter { return mcmp.YFilter }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) SetFilter(yf yfilter.YFilter) { mcmp.YFilter = yf }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "remote" { return "Remote" }
    if yname == "local" { return "Local" }
    return ""
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetSegmentPath() string {
    return "mcmp"
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local" {
        return &mcmp.Local
    }
    return nil
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local"] = &mcmp.Local
    return children
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = mcmp.Enable
    leafs["remote"] = mcmp.Remote
    return leafs
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetBundleName() string { return "cisco_ios_xr" }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetYangName() string { return "mcmp" }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) SetParent(parent types.Entity) { mcmp.parent = parent }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetParent() types.Entity { return mcmp.parent }

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetParentYangName() string { return "ppp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
// This specifies the MCMP options for the local
// host
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Initial #classes. The type is interface{} with range: 1..16. The
    // default value is 2.
    Initial interface{}

    // Local Maximum #classes. The type is interface{} with range: 1..16. The
    // default value is 4.
    Maximum interface{}
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetGoName(yname string) string {
    if yname == "initial" { return "Initial" }
    if yname == "maximum" { return "Maximum" }
    return ""
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetSegmentPath() string {
    return "local"
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initial"] = local.Initial
    leafs["maximum"] = local.Maximum
    return leafs
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetYangName() string { return "local" }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetParent() types.Entity { return local.parent }

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetParentYangName() string { return "mcmp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
// PPP LCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: -2147483648..2147483647.
    ServiceType interface{}

    // Multilink configuration.
    Multilink InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink

    // Password Authentication Protocol (PAP) configuration data.
    Pap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap

    // Loopback configuration.
    LoopBack InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack

    // Microsoft Challenge Handshake Authentication Protocol (MS-CHAP)
    // configuration data.
    MsChap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap

    // PPP authentication parameters.
    Authentication InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication

    // Challenge Handshake Authentication Protocol (CHAP) configuration data.
    Chap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetFilter() yfilter.YFilter { return lcp.YFilter }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) SetFilter(yf yfilter.YFilter) { lcp.YFilter = yf }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetGoName(yname string) string {
    if yname == "service-type" { return "ServiceType" }
    if yname == "multilink" { return "Multilink" }
    if yname == "pap" { return "Pap" }
    if yname == "loop-back" { return "LoopBack" }
    if yname == "ms-chap" { return "MsChap" }
    if yname == "authentication" { return "Authentication" }
    if yname == "chap" { return "Chap" }
    return ""
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetSegmentPath() string {
    return "lcp"
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multilink" {
        return &lcp.Multilink
    }
    if childYangName == "pap" {
        return &lcp.Pap
    }
    if childYangName == "loop-back" {
        return &lcp.LoopBack
    }
    if childYangName == "ms-chap" {
        return &lcp.MsChap
    }
    if childYangName == "authentication" {
        return &lcp.Authentication
    }
    if childYangName == "chap" {
        return &lcp.Chap
    }
    return nil
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["multilink"] = &lcp.Multilink
    children["pap"] = &lcp.Pap
    children["loop-back"] = &lcp.LoopBack
    children["ms-chap"] = &lcp.MsChap
    children["authentication"] = &lcp.Authentication
    children["chap"] = &lcp.Chap
    return children
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-type"] = lcp.ServiceType
    return leafs
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetBundleName() string { return "cisco_ios_xr" }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetYangName() string { return "lcp" }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) SetParent(parent types.Entity) { lcp.parent = parent }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetParent() types.Entity { return lcp.parent }

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetParentYangName() string { return "ppp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink
// Multilink configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum criteria for the linestate of a Multilink PPPinterface to be
    // brought up.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetFilter() yfilter.YFilter { return multilink.YFilter }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) SetFilter(yf yfilter.YFilter) { multilink.YFilter = yf }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetGoName(yname string) string {
    if yname == "minimum-active" { return "MinimumActive" }
    return ""
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetSegmentPath() string {
    return "multilink"
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "minimum-active" {
        return &multilink.MinimumActive
    }
    return nil
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["minimum-active"] = &multilink.MinimumActive
    return children
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetBundleName() string { return "cisco_ios_xr" }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetYangName() string { return "multilink" }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) SetParent(parent types.Entity) { multilink.parent = parent }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetParent() types.Entity { return multilink.parent }

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
// Minimum criteria for the linestate of a
// Multilink PPPinterface to be brought up
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active links needed to bring up an MP interface. The type is
    // interface{} with range: 1..65535. The default value is 1.
    Links interface{}
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetFilter() yfilter.YFilter { return minimumActive.YFilter }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) SetFilter(yf yfilter.YFilter) { minimumActive.YFilter = yf }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    return ""
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetSegmentPath() string {
    return "minimum-active"
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = minimumActive.Links
    return leafs
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetBundleName() string { return "cisco_ios_xr" }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetYangName() string { return "minimum-active" }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) SetParent(parent types.Entity) { minimumActive.parent = parent }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetParent() types.Entity { return minimumActive.parent }

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetParentYangName() string { return "multilink" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap
// Password Authentication Protocol (PAP)
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies whether to refuse to authenticate using PAP. The type is
    // interface{}.
    Refuse interface{}

    // This specifies the outbound PAP username and password.
    SendUserInfo InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetFilter() yfilter.YFilter { return pap.YFilter }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) SetFilter(yf yfilter.YFilter) { pap.YFilter = yf }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetGoName(yname string) string {
    if yname == "refuse" { return "Refuse" }
    if yname == "send-user-info" { return "SendUserInfo" }
    return ""
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetSegmentPath() string {
    return "pap"
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "send-user-info" {
        return &pap.SendUserInfo
    }
    return nil
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["send-user-info"] = &pap.SendUserInfo
    return children
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["refuse"] = pap.Refuse
    return leafs
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetBundleName() string { return "cisco_ios_xr" }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetYangName() string { return "pap" }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) SetParent(parent types.Entity) { pap.parent = parent }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetParent() types.Entity { return pap.parent }

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
// This specifies the outbound PAP username and
// password
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound PAP username. The type is string.
    Username interface{}

    // Outbound PAP password. The type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetFilter() yfilter.YFilter { return sendUserInfo.YFilter }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) SetFilter(yf yfilter.YFilter) { sendUserInfo.YFilter = yf }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetGoName(yname string) string {
    if yname == "username" { return "Username" }
    if yname == "password" { return "Password" }
    return ""
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetSegmentPath() string {
    return "send-user-info"
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["username"] = sendUserInfo.Username
    leafs["password"] = sendUserInfo.Password
    return leafs
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetBundleName() string { return "cisco_ios_xr" }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetYangName() string { return "send-user-info" }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) SetParent(parent types.Entity) { sendUserInfo.parent = parent }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetParent() types.Entity { return sendUserInfo.parent }

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetParentYangName() string { return "pap" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack
// Loopback configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Allow magic numbers to be equal. The type is interface{}.
    Ignore interface{}
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetFilter() yfilter.YFilter { return loopBack.YFilter }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) SetFilter(yf yfilter.YFilter) { loopBack.YFilter = yf }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetGoName(yname string) string {
    if yname == "ignore" { return "Ignore" }
    return ""
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetSegmentPath() string {
    return "loop-back"
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ignore"] = loopBack.Ignore
    return leafs
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetBundleName() string { return "cisco_ios_xr" }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetYangName() string { return "loop-back" }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) SetParent(parent types.Entity) { loopBack.parent = parent }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetParent() types.Entity { return loopBack.parent }

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap
// Microsoft Challenge Handshake Authentication
// Protocol (MS-CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies the default MS-CHAP password. The type is string with
    // pattern: (!.+)|([^!].+).
    Password interface{}

    // This specifies the MS-CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using MS-CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetFilter() yfilter.YFilter { return msChap.YFilter }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) SetFilter(yf yfilter.YFilter) { msChap.YFilter = yf }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetGoName(yname string) string {
    if yname == "password" { return "Password" }
    if yname == "host-name" { return "HostName" }
    if yname == "refuse" { return "Refuse" }
    return ""
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetSegmentPath() string {
    return "ms-chap"
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password"] = msChap.Password
    leafs["host-name"] = msChap.HostName
    leafs["refuse"] = msChap.Refuse
    return leafs
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetBundleName() string { return "cisco_ios_xr" }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetYangName() string { return "ms-chap" }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) SetParent(parent types.Entity) { msChap.parent = parent }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetParent() types.Entity { return msChap.parent }

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication
// PPP authentication parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: 0..10.
    MaxAuthenticationFailures interface{}

    // Maximum time to wait for an authentication response. The type is
    // interface{} with range: 3..30. The default value is 10.
    Timeout interface{}

    // This specifies the PPP link authentication method.
    Method InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetGoName(yname string) string {
    if yname == "max-authentication-failures" { return "MaxAuthenticationFailures" }
    if yname == "timeout" { return "Timeout" }
    if yname == "method" { return "Method" }
    return ""
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "method" {
        return &authentication.Method
    }
    return nil
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["method"] = &authentication.Method
    return children
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-authentication-failures"] = authentication.MaxAuthenticationFailures
    leafs["timeout"] = authentication.Timeout
    return leafs
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetYangName() string { return "authentication" }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
// This specifies the PPP link authentication
// method
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use an authentication list with this name. The type is string.
    Name interface{}

    // Select between one and three authentication methods in order of preference.
    // The type is slice of PppAuthenticationMethod.
    Method []interface{}
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetFilter() yfilter.YFilter { return method.YFilter }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) SetFilter(yf yfilter.YFilter) { method.YFilter = yf }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "method" { return "Method" }
    return ""
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetSegmentPath() string {
    return "method"
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = method.Name
    leafs["method"] = method.Method
    return leafs
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetBundleName() string { return "cisco_ios_xr" }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetYangName() string { return "method" }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) SetParent(parent types.Entity) { method.parent = parent }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetParent() types.Entity { return method.parent }

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetParentYangName() string { return "authentication" }

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
// Challenge Handshake Authentication Protocol
// (CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies the default CHAP password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}

    // This specifies the CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetFilter() yfilter.YFilter { return chap.YFilter }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) SetFilter(yf yfilter.YFilter) { chap.YFilter = yf }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetGoName(yname string) string {
    if yname == "password" { return "Password" }
    if yname == "host-name" { return "HostName" }
    if yname == "refuse" { return "Refuse" }
    return ""
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetSegmentPath() string {
    return "chap"
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password"] = chap.Password
    leafs["host-name"] = chap.HostName
    leafs["refuse"] = chap.Refuse
    return leafs
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetBundleName() string { return "cisco_ios_xr" }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetYangName() string { return "chap" }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) SetParent(parent types.Entity) { chap.parent = parent }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetParent() types.Entity { return chap.parent }

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetParentYangName() string { return "lcp" }

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession
// SSRP Config
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This specifies the SSRP group and session-id.
    GroupId InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetFilter() yfilter.YFilter { return ssrpSession.YFilter }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) SetFilter(yf yfilter.YFilter) { ssrpSession.YFilter = yf }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetGoName(yname string) string {
    if yname == "group-id" { return "GroupId" }
    return ""
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetSegmentPath() string {
    return "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "group-id" {
        return &ssrpSession.GroupId
    }
    return nil
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["group-id"] = &ssrpSession.GroupId
    return children
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetBundleName() string { return "cisco_ios_xr" }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetYangName() string { return "ssrp-session" }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) SetParent(parent types.Entity) { ssrpSession.parent = parent }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetParent() types.Entity { return ssrpSession.parent }

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
// This specifies the SSRP group and session-id
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SSRP Group-ID. The type is interface{} with range: 1..65535.
    Group interface{}

    // SSRP Session-ID. The type is interface{} with range: 1..4294967295.
    Id interface{}
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetFilter() yfilter.YFilter { return groupId.YFilter }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) SetFilter(yf yfilter.YFilter) { groupId.YFilter = yf }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetGoName(yname string) string {
    if yname == "group" { return "Group" }
    if yname == "id" { return "Id" }
    return ""
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetSegmentPath() string {
    return "group-id"
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group"] = groupId.Group
    leafs["id"] = groupId.Id
    return leafs
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetBundleName() string { return "cisco_ios_xr" }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetYangName() string { return "group-id" }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) SetParent(parent types.Entity) { groupId.parent = parent }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetParent() types.Entity { return groupId.parent }

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetParentYangName() string { return "ssrp-session" }

// InterfaceConfigurations_InterfaceConfiguration_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_Qos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetFilter() yfilter.YFilter { return qos.YFilter }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) SetFilter(yf yfilter.YFilter) { qos.YFilter = yf }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetGoName(yname string) string {
    if yname == "output" { return "Output" }
    if yname == "input" { return "Input" }
    return ""
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetSegmentPath() string {
    return "Cisco-IOS-XR-qos-ma-cfg:qos"
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "output" {
        return &qos.Output
    }
    if childYangName == "input" {
        return &qos.Input
    }
    return nil
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["output"] = &qos.Output
    children["input"] = &qos.Input
    return children
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetBundleName() string { return "cisco_ios_xr" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetYangName() string { return "qos" }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) SetParent(parent types.Entity) { qos.parent = parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetParent() types.Entity { return qos.parent }

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetFilter() yfilter.YFilter { return output.YFilter }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) SetFilter(yf yfilter.YFilter) { output.YFilter = yf }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetSegmentPath() string {
    return "output"
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range output.ServicePolicy {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy{}
        output.ServicePolicy = append(output.ServicePolicy, child)
        return &output.ServicePolicy[len(output.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range output.ServicePolicyQos {
            if output.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos{}
        output.ServicePolicyQos = append(output.ServicePolicyQos, child)
        return &output.ServicePolicyQos[len(output.ServicePolicyQos)-1]
    }
    return nil
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range output.ServicePolicy {
        children[output.ServicePolicy[i].GetSegmentPath()] = &output.ServicePolicy[i]
    }
    for i := range output.ServicePolicyQos {
        children[output.ServicePolicyQos[i].GetSegmentPath()] = &output.ServicePolicyQos[i]
    }
    return children
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetBundleName() string { return "cisco_ios_xr" }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetYangName() string { return "output" }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) SetParent(parent types.Entity) { output.parent = parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetParent() types.Entity { return output.parent }

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetParentYangName() string { return "output" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy.
    ServicePolicy []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetGoName(yname string) string {
    if yname == "service-policy" { return "ServicePolicy" }
    if yname == "service-policy-qos" { return "ServicePolicyQos" }
    return ""
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetSegmentPath() string {
    return "input"
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-policy" {
        for _, c := range input.ServicePolicy {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy{}
        input.ServicePolicy = append(input.ServicePolicy, child)
        return &input.ServicePolicy[len(input.ServicePolicy)-1]
    }
    if childYangName == "service-policy-qos" {
        for _, c := range input.ServicePolicyQos {
            if input.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos{}
        input.ServicePolicyQos = append(input.ServicePolicyQos, child)
        return &input.ServicePolicyQos[len(input.ServicePolicyQos)-1]
    }
    return nil
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range input.ServicePolicy {
        children[input.ServicePolicy[i].GetSegmentPath()] = &input.ServicePolicy[i]
    }
    for i := range input.ServicePolicyQos {
        children[input.ServicePolicyQos[i].GetSegmentPath()] = &input.ServicePolicyQos[i]
    }
    return children
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetYangName() string { return "input" }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetParent() types.Entity { return input.parent }

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetParentYangName() string { return "qos" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetFilter() yfilter.YFilter { return servicePolicy.YFilter }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) SetFilter(yf yfilter.YFilter) { servicePolicy.YFilter = yf }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetSegmentPath() string {
    return "service-policy" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicy.ServicePolicyName) + "']"
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicy.ServicePolicyName
    leafs["account-type"] = servicePolicy.AccountType
    leafs["l1-user-defined"] = servicePolicy.L1UserDefined
    leafs["spi-name"] = servicePolicy.SpiName
    leafs["subscriber-parent-policy"] = servicePolicy.SubscriberParentPolicy
    leafs["resource-id"] = servicePolicy.ResourceId
    leafs["service-fragment-parent-policy"] = servicePolicy.ServiceFragmentParentPolicy
    return leafs
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetYangName() string { return "service-policy" }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) SetParent(parent types.Entity) { servicePolicy.parent = parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetParent() types.Entity { return servicePolicy.parent }

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetFilter() yfilter.YFilter { return servicePolicyQos.YFilter }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) SetFilter(yf yfilter.YFilter) { servicePolicyQos.YFilter = yf }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetGoName(yname string) string {
    if yname == "service-policy-name" { return "ServicePolicyName" }
    if yname == "subscriber-group-names" { return "SubscriberGroupNames" }
    if yname == "subscriber-parent" { return "SubscriberParent" }
    return ""
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetSegmentPath() string {
    return "service-policy-qos" + "[service-policy-name='" + fmt.Sprintf("%v", servicePolicyQos.ServicePolicyName) + "']"
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-names" {
        return &servicePolicyQos.SubscriberGroupNames
    }
    if childYangName == "subscriber-parent" {
        return &servicePolicyQos.SubscriberParent
    }
    return nil
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["subscriber-group-names"] = &servicePolicyQos.SubscriberGroupNames
    children["subscriber-parent"] = &servicePolicyQos.SubscriberParent
    return children
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service-policy-name"] = servicePolicyQos.ServicePolicyName
    return leafs
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetBundleName() string { return "cisco_ios_xr" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetYangName() string { return "service-policy-qos" }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) SetParent(parent types.Entity) { servicePolicyQos.parent = parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetParent() types.Entity { return servicePolicyQos.parent }

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetParentYangName() string { return "input" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetFilter() yfilter.YFilter { return subscriberGroupNames.YFilter }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetFilter(yf yfilter.YFilter) { subscriberGroupNames.YFilter = yf }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetGoName(yname string) string {
    if yname == "subscriber-group-name" { return "SubscriberGroupName" }
    return ""
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetSegmentPath() string {
    return "subscriber-group-names"
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "subscriber-group-name" {
        for _, c := range subscriberGroupNames.SubscriberGroupName {
            if subscriberGroupNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName{}
        subscriberGroupNames.SubscriberGroupName = append(subscriberGroupNames.SubscriberGroupName, child)
        return &subscriberGroupNames.SubscriberGroupName[len(subscriberGroupNames.SubscriberGroupName)-1]
    }
    return nil
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range subscriberGroupNames.SubscriberGroupName {
        children[subscriberGroupNames.SubscriberGroupName[i].GetSegmentPath()] = &subscriberGroupNames.SubscriberGroupName[i]
    }
    return children
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetYangName() string { return "subscriber-group-names" }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) SetParent(parent types.Entity) { subscriberGroupNames.parent = parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParent() types.Entity { return subscriberGroupNames.parent }

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetFilter() yfilter.YFilter { return subscriberGroupName.YFilter }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetFilter(yf yfilter.YFilter) { subscriberGroupName.YFilter = yf }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetGoName(yname string) string {
    if yname == "subscriber-group-string" { return "SubscriberGroupString" }
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetSegmentPath() string {
    return "subscriber-group-name" + "[subscriber-group-string='" + fmt.Sprintf("%v", subscriberGroupName.SubscriberGroupString) + "']"
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-group-string"] = subscriberGroupName.SubscriberGroupString
    leafs["account-type"] = subscriberGroupName.AccountType
    leafs["l1-user-defined"] = subscriberGroupName.L1UserDefined
    leafs["spi-name"] = subscriberGroupName.SpiName
    leafs["policy-merge"] = subscriberGroupName.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberGroupName.SubscriberParentPolicy
    leafs["resource-id"] = subscriberGroupName.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberGroupName.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetYangName() string { return "subscriber-group-name" }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) SetParent(parent types.Entity) { subscriberGroupName.parent = parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParent() types.Entity { return subscriberGroupName.parent }

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetParentYangName() string { return "subscriber-group-names" }

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetFilter() yfilter.YFilter { return subscriberParent.YFilter }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) SetFilter(yf yfilter.YFilter) { subscriberParent.YFilter = yf }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetGoName(yname string) string {
    if yname == "account-type" { return "AccountType" }
    if yname == "l1-user-defined" { return "L1UserDefined" }
    if yname == "spi-name" { return "SpiName" }
    if yname == "policy-merge" { return "PolicyMerge" }
    if yname == "subscriber-parent-policy" { return "SubscriberParentPolicy" }
    if yname == "resource-id" { return "ResourceId" }
    if yname == "service-fragment-parent-policy" { return "ServiceFragmentParentPolicy" }
    return ""
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetSegmentPath() string {
    return "subscriber-parent"
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["account-type"] = subscriberParent.AccountType
    leafs["l1-user-defined"] = subscriberParent.L1UserDefined
    leafs["spi-name"] = subscriberParent.SpiName
    leafs["policy-merge"] = subscriberParent.PolicyMerge
    leafs["subscriber-parent-policy"] = subscriberParent.SubscriberParentPolicy
    leafs["resource-id"] = subscriberParent.ResourceId
    leafs["service-fragment-parent-policy"] = subscriberParent.ServiceFragmentParentPolicy
    return leafs
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetYangName() string { return "subscriber-parent" }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) SetParent(parent types.Entity) { subscriberParent.parent = parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetParent() types.Entity { return subscriberParent.parent }

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetParentYangName() string { return "service-policy-qos" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber
// Subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP subscribers on interface.
    IpSubscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetFilter() yfilter.YFilter { return subscriber.YFilter }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) SetFilter(yf yfilter.YFilter) { subscriber.YFilter = yf }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetGoName(yname string) string {
    if yname == "ip-subscriber" { return "IpSubscriber" }
    return ""
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetSegmentPath() string {
    return "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-subscriber" {
        return &subscriber.IpSubscriber
    }
    return nil
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-subscriber"] = &subscriber.IpSubscriber
    return children
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetBundleName() string { return "cisco_ios_xr" }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetYangName() string { return "subscriber" }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) SetParent(parent types.Entity) { subscriber.parent = parent }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetParent() types.Entity { return subscriber.parent }

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
// IP subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable subscriber templates on this access interface. The type is
    // interface{} with range: 1..10. The default value is 10.
    SubscriberTemplates interface{}

    // Enable IP Static subscriber. The type is interface{}.
    Interface interface{}

    // IPv4 subscriber.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4

    // IP subscriber session limit.
    SessionLimit InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit

    // IPv6 subscriber.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetFilter() yfilter.YFilter { return ipSubscriber.YFilter }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) SetFilter(yf yfilter.YFilter) { ipSubscriber.YFilter = yf }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetGoName(yname string) string {
    if yname == "subscriber-templates" { return "SubscriberTemplates" }
    if yname == "interface" { return "Interface" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "session-limit" { return "SessionLimit" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetSegmentPath() string {
    return "ip-subscriber"
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &ipSubscriber.Ipv4
    }
    if childYangName == "session-limit" {
        return &ipSubscriber.SessionLimit
    }
    if childYangName == "ipv6" {
        return &ipSubscriber.Ipv6
    }
    return nil
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &ipSubscriber.Ipv4
    children["session-limit"] = &ipSubscriber.SessionLimit
    children["ipv6"] = &ipSubscriber.Ipv6
    return children
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["subscriber-templates"] = ipSubscriber.SubscriberTemplates
    leafs["interface"] = ipSubscriber.Interface
    return leafs
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetYangName() string { return "ip-subscriber" }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) SetParent(parent types.Entity) { ipSubscriber.parent = parent }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetParent() types.Entity { return ipSubscriber.parent }

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetParentYangName() string { return "subscriber" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4
// IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2 connected IPv4 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected

    // Routed IPv4 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetGoName(yname string) string {
    if yname == "l2-connected" { return "L2Connected" }
    if yname == "routed" { return "Routed" }
    return ""
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2-connected" {
        return &ipv4.L2Connected
    }
    if childYangName == "routed" {
        return &ipv4.Routed
    }
    return nil
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["l2-connected"] = &ipv4.L2Connected
    children["routed"] = &ipv4.Routed
    return children
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetParentYangName() string { return "ip-subscriber" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected
// L2 connected IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetFilter() yfilter.YFilter { return l2Connected.YFilter }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) SetFilter(yf yfilter.YFilter) { l2Connected.YFilter = yf }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetGoName(yname string) string {
    if yname == "initiator" { return "Initiator" }
    return ""
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetSegmentPath() string {
    return "l2-connected"
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "initiator" {
        return &l2Connected.Initiator
    }
    return nil
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["initiator"] = &l2Connected.Initiator
    return children
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetBundleName() string { return "cisco_ios_xr" }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetYangName() string { return "l2-connected" }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) SetParent(parent types.Entity) { l2Connected.parent = parent }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetParent() types.Entity { return l2Connected.parent }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetParentYangName() string { return "ipv4" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IP subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetFilter() yfilter.YFilter { return initiator.YFilter }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) SetFilter(yf yfilter.YFilter) { initiator.YFilter = yf }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetGoName(yname string) string {
    if yname == "dhcp" { return "Dhcp" }
    if yname == "unclassified-source-fsol" { return "UnclassifiedSourceFsol" }
    return ""
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetSegmentPath() string {
    return "initiator"
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unclassified-source-fsol" {
        return &initiator.UnclassifiedSourceFsol
    }
    return nil
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unclassified-source-fsol"] = &initiator.UnclassifiedSourceFsol
    return children
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dhcp"] = initiator.Dhcp
    return leafs
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetBundleName() string { return "cisco_ios_xr" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetYangName() string { return "initiator" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) SetParent(parent types.Entity) { initiator.parent = parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetParent() types.Entity { return initiator.parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetParentYangName() string { return "l2-connected" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetFilter() yfilter.YFilter { return unclassifiedSourceFsol.YFilter }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) SetFilter(yf yfilter.YFilter) { unclassifiedSourceFsol.YFilter = yf }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "address-unique" { return "AddressUnique" }
    return ""
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetSegmentPath() string {
    return "unclassified-source-fsol"
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = unclassifiedSourceFsol.Enable
    leafs["address-unique"] = unclassifiedSourceFsol.AddressUnique
    return leafs
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetBundleName() string { return "cisco_ios_xr" }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetYangName() string { return "unclassified-source-fsol" }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) SetParent(parent types.Entity) { unclassifiedSourceFsol.parent = parent }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetParent() types.Entity { return unclassifiedSourceFsol.parent }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetParentYangName() string { return "initiator" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
// Routed IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetFilter() yfilter.YFilter { return routed.YFilter }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) SetFilter(yf yfilter.YFilter) { routed.YFilter = yf }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetGoName(yname string) string {
    if yname == "initiator" { return "Initiator" }
    return ""
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetSegmentPath() string {
    return "routed"
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "initiator" {
        return &routed.Initiator
    }
    return nil
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["initiator"] = &routed.Initiator
    return children
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetBundleName() string { return "cisco_ios_xr" }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetYangName() string { return "routed" }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) SetParent(parent types.Entity) { routed.parent = parent }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetParent() types.Entity { return routed.parent }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetParentYangName() string { return "ipv4" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IPv4 subscriber unclassified source initiator. The type is
    // interface{}.
    UnclassifiedIp interface{}

    // Configure IPv4 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IPv4 subscriber DHCP Snoop initiator. The type is interface{}.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetFilter() yfilter.YFilter { return initiator.YFilter }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) SetFilter(yf yfilter.YFilter) { initiator.YFilter = yf }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetGoName(yname string) string {
    if yname == "unclassified-ip" { return "UnclassifiedIp" }
    if yname == "dhcp" { return "Dhcp" }
    if yname == "dhcp-snoop" { return "DhcpSnoop" }
    return ""
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetSegmentPath() string {
    return "initiator"
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unclassified-ip"] = initiator.UnclassifiedIp
    leafs["dhcp"] = initiator.Dhcp
    leafs["dhcp-snoop"] = initiator.DhcpSnoop
    return leafs
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetBundleName() string { return "cisco_ios_xr" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetYangName() string { return "initiator" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) SetParent(parent types.Entity) { initiator.parent = parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetParent() types.Entity { return initiator.parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetParentYangName() string { return "routed" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit
// IP subscriber session limit
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session limit for all sources.
    Total InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total

    // Session limit for unclassified sources.
    UnclassifiedSource InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetFilter() yfilter.YFilter { return sessionLimit.YFilter }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) SetFilter(yf yfilter.YFilter) { sessionLimit.YFilter = yf }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "unclassified-source" { return "UnclassifiedSource" }
    return ""
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetSegmentPath() string {
    return "session-limit"
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "total" {
        return &sessionLimit.Total
    }
    if childYangName == "unclassified-source" {
        return &sessionLimit.UnclassifiedSource
    }
    return nil
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["total"] = &sessionLimit.Total
    children["unclassified-source"] = &sessionLimit.UnclassifiedSource
    return children
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetBundleName() string { return "cisco_ios_xr" }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetYangName() string { return "session-limit" }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) SetParent(parent types.Entity) { sessionLimit.parent = parent }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetParent() types.Entity { return sessionLimit.parent }

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetParentYangName() string { return "ip-subscriber" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total
// Session limit for all sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for all sources. The type is interface{}
    // with range: -2147483648..2147483647. The default value is 0.
    PerVlan interface{}
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetGoName(yname string) string {
    if yname == "per-vlan" { return "PerVlan" }
    return ""
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetSegmentPath() string {
    return "total"
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["per-vlan"] = total.PerVlan
    return leafs
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetYangName() string { return "total" }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetParent() types.Entity { return total.parent }

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetParentYangName() string { return "session-limit" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
// Session limit for unclassified sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for unclassified sources. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    PerVlan interface{}
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetFilter() yfilter.YFilter { return unclassifiedSource.YFilter }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) SetFilter(yf yfilter.YFilter) { unclassifiedSource.YFilter = yf }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetGoName(yname string) string {
    if yname == "per-vlan" { return "PerVlan" }
    return ""
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetSegmentPath() string {
    return "unclassified-source"
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["per-vlan"] = unclassifiedSource.PerVlan
    return leafs
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetBundleName() string { return "cisco_ios_xr" }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetYangName() string { return "unclassified-source" }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) SetParent(parent types.Entity) { unclassifiedSource.parent = parent }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetParent() types.Entity { return unclassifiedSource.parent }

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetParentYangName() string { return "session-limit" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
// IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2 connected IPv6 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected

    // Routed IPv6 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetGoName(yname string) string {
    if yname == "l2-connected" { return "L2Connected" }
    if yname == "routed" { return "Routed" }
    return ""
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2-connected" {
        return &ipv6.L2Connected
    }
    if childYangName == "routed" {
        return &ipv6.Routed
    }
    return nil
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["l2-connected"] = &ipv6.L2Connected
    children["routed"] = &ipv6.Routed
    return children
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetParentYangName() string { return "ip-subscriber" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected
// L2 connected IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetFilter() yfilter.YFilter { return l2Connected.YFilter }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) SetFilter(yf yfilter.YFilter) { l2Connected.YFilter = yf }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetGoName(yname string) string {
    if yname == "initiator" { return "Initiator" }
    return ""
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetSegmentPath() string {
    return "l2-connected"
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "initiator" {
        return &l2Connected.Initiator
    }
    return nil
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["initiator"] = &l2Connected.Initiator
    return children
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetBundleName() string { return "cisco_ios_xr" }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetYangName() string { return "l2-connected" }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) SetParent(parent types.Entity) { l2Connected.parent = parent }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetParent() types.Entity { return l2Connected.parent }

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetParentYangName() string { return "ipv6" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
// Configure IPv6 subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetFilter() yfilter.YFilter { return initiator.YFilter }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) SetFilter(yf yfilter.YFilter) { initiator.YFilter = yf }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetGoName(yname string) string {
    if yname == "dhcp" { return "Dhcp" }
    if yname == "unclassified-source-fsol" { return "UnclassifiedSourceFsol" }
    return ""
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetSegmentPath() string {
    return "initiator"
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unclassified-source-fsol" {
        return &initiator.UnclassifiedSourceFsol
    }
    return nil
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unclassified-source-fsol"] = &initiator.UnclassifiedSourceFsol
    return children
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dhcp"] = initiator.Dhcp
    return leafs
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetBundleName() string { return "cisco_ios_xr" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetYangName() string { return "initiator" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) SetParent(parent types.Entity) { initiator.parent = parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetParent() types.Entity { return initiator.parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetParentYangName() string { return "l2-connected" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetFilter() yfilter.YFilter { return unclassifiedSourceFsol.YFilter }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) SetFilter(yf yfilter.YFilter) { unclassifiedSourceFsol.YFilter = yf }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "address-unique" { return "AddressUnique" }
    return ""
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetSegmentPath() string {
    return "unclassified-source-fsol"
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = unclassifiedSourceFsol.Enable
    leafs["address-unique"] = unclassifiedSourceFsol.AddressUnique
    return leafs
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetBundleName() string { return "cisco_ios_xr" }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetYangName() string { return "unclassified-source-fsol" }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) SetParent(parent types.Entity) { unclassifiedSourceFsol.parent = parent }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetParent() types.Entity { return unclassifiedSourceFsol.parent }

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetParentYangName() string { return "initiator" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
// Routed IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetFilter() yfilter.YFilter { return routed.YFilter }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) SetFilter(yf yfilter.YFilter) { routed.YFilter = yf }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetGoName(yname string) string {
    if yname == "initiator" { return "Initiator" }
    return ""
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetSegmentPath() string {
    return "routed"
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "initiator" {
        return &routed.Initiator
    }
    return nil
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["initiator"] = &routed.Initiator
    return children
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetBundleName() string { return "cisco_ios_xr" }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetYangName() string { return "routed" }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) SetParent(parent types.Entity) { routed.parent = parent }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetParent() types.Entity { return routed.parent }

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetParentYangName() string { return "ipv6" }

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure unclassified packets as first-sign-of-life for IPv6 subscriber.
    // The type is interface{} with range: 1..128. The default value is 128.
    UnclassifiedIp interface{}

    // Configure IPv6 subscriber DHCP initiator. The type is interface{} with
    // range: 1..128. The default value is 128.
    Dhcp interface{}

    // Configure IPv6 subscriber DHCP Snoop initiator. The type is interface{}
    // with range: 1..128. The default value is 128.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetFilter() yfilter.YFilter { return initiator.YFilter }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) SetFilter(yf yfilter.YFilter) { initiator.YFilter = yf }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetGoName(yname string) string {
    if yname == "unclassified-ip" { return "UnclassifiedIp" }
    if yname == "dhcp" { return "Dhcp" }
    if yname == "dhcp-snoop" { return "DhcpSnoop" }
    return ""
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetSegmentPath() string {
    return "initiator"
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unclassified-ip"] = initiator.UnclassifiedIp
    leafs["dhcp"] = initiator.Dhcp
    leafs["dhcp-snoop"] = initiator.DhcpSnoop
    return leafs
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetBundleName() string { return "cisco_ios_xr" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetYangName() string { return "initiator" }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) SetParent(parent types.Entity) { initiator.parent = parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetParent() types.Entity { return initiator.parent }

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetParentYangName() string { return "routed" }

// InterfaceConfigurations_InterfaceConfiguration_Pppoe
// Interface PPPoE configuration data
type InterfaceConfigurations_InterfaceConfiguration_Pppoe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use this BBA-Group to enable PPPoE on this interface.
    EnableBbaGroup InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetFilter() yfilter.YFilter { return pppoe.YFilter }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) SetFilter(yf yfilter.YFilter) { pppoe.YFilter = yf }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetGoName(yname string) string {
    if yname == "enable-bba-group" { return "EnableBbaGroup" }
    return ""
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetSegmentPath() string {
    return "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "enable-bba-group" {
        return &pppoe.EnableBbaGroup
    }
    return nil
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["enable-bba-group"] = &pppoe.EnableBbaGroup
    return children
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetBundleName() string { return "cisco_ios_xr" }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetYangName() string { return "pppoe" }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) SetParent(parent types.Entity) { pppoe.parent = parent }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetParent() types.Entity { return pppoe.parent }

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
// Use this BBA-Group to enable PPPoE on this
// interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable PPPoE on this interface. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // Name of the BBA-Group. The type is string.
    BbaGroupName interface{}
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetFilter() yfilter.YFilter { return enableBbaGroup.YFilter }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) SetFilter(yf yfilter.YFilter) { enableBbaGroup.YFilter = yf }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "bba-group-name" { return "BbaGroupName" }
    return ""
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetSegmentPath() string {
    return "enable-bba-group"
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = enableBbaGroup.Enable
    leafs["bba-group-name"] = enableBbaGroup.BbaGroupName
    return leafs
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetBundleName() string { return "cisco_ios_xr" }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetYangName() string { return "enable-bba-group" }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) SetParent(parent types.Entity) { enableBbaGroup.parent = parent }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetParent() types.Entity { return enableBbaGroup.parent }

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetParentYangName() string { return "pppoe" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow
// Interface netflow configuration
type InterfaceConfigurations_InterfaceConfiguration_NetFlow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure datalinkframesection netflow.
    DataLinkFrameSection InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection

    // Configure MPLS netflow.
    Mpls InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls

    // Configure IPv6 netflow.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6

    // Configure IPv4 netflow.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetFilter() yfilter.YFilter { return netFlow.YFilter }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) SetFilter(yf yfilter.YFilter) { netFlow.YFilter = yf }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetGoName(yname string) string {
    if yname == "data-link-frame-section" { return "DataLinkFrameSection" }
    if yname == "mpls" { return "Mpls" }
    if yname == "ipv6" { return "Ipv6" }
    if yname == "ipv4" { return "Ipv4" }
    return ""
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetSegmentPath() string {
    return "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data-link-frame-section" {
        return &netFlow.DataLinkFrameSection
    }
    if childYangName == "mpls" {
        return &netFlow.Mpls
    }
    if childYangName == "ipv6" {
        return &netFlow.Ipv6
    }
    if childYangName == "ipv4" {
        return &netFlow.Ipv4
    }
    return nil
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data-link-frame-section"] = &netFlow.DataLinkFrameSection
    children["mpls"] = &netFlow.Mpls
    children["ipv6"] = &netFlow.Ipv6
    children["ipv4"] = &netFlow.Ipv4
    return children
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetBundleName() string { return "cisco_ios_xr" }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetYangName() string { return "net-flow" }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) SetParent(parent types.Entity) { netFlow.parent = parent }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetParent() types.Entity { return netFlow.parent }

func (netFlow *InterfaceConfigurations_InterfaceConfiguration_NetFlow) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection
// Configure datalinkframesection netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetFilter() yfilter.YFilter { return dataLinkFrameSection.YFilter }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) SetFilter(yf yfilter.YFilter) { dataLinkFrameSection.YFilter = yf }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetGoName(yname string) string {
    if yname == "flow-monitor-map" { return "FlowMonitorMap" }
    return ""
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetSegmentPath() string {
    return "data-link-frame-section"
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-map" {
        return &dataLinkFrameSection.FlowMonitorMap
    }
    return nil
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-monitor-map"] = &dataLinkFrameSection.FlowMonitorMap
    return children
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetBundleName() string { return "cisco_ios_xr" }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetYangName() string { return "data-link-frame-section" }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) SetParent(parent types.Entity) { dataLinkFrameSection.parent = parent }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetParent() types.Entity { return dataLinkFrameSection.parent }

func (dataLinkFrameSection *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection) GetParentYangName() string { return "net-flow" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetFilter() yfilter.YFilter { return flowMonitorMap.YFilter }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) SetFilter(yf yfilter.YFilter) { flowMonitorMap.YFilter = yf }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetGoName(yname string) string {
    if yname == "ingress" { return "Ingress" }
    if yname == "egress" { return "Egress" }
    return ""
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetSegmentPath() string {
    return "flow-monitor-map"
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ingress" {
        return &flowMonitorMap.Ingress
    }
    if childYangName == "egress" {
        return &flowMonitorMap.Egress
    }
    return nil
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ingress"] = &flowMonitorMap.Ingress
    children["egress"] = &flowMonitorMap.Egress
    return children
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetYangName() string { return "flow-monitor-map" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) SetParent(parent types.Entity) { flowMonitorMap.parent = parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetParent() types.Entity { return flowMonitorMap.parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap) GetParentYangName() string { return "data-link-frame-section" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetFilter() yfilter.YFilter { return ingress.YFilter }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) SetFilter(yf yfilter.YFilter) { ingress.YFilter = yf }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetSegmentPath() string {
    return "ingress"
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range ingress.FlowMonitorName {
            if ingress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName{}
        ingress.FlowMonitorName = append(ingress.FlowMonitorName, child)
        return &ingress.FlowMonitorName[len(ingress.FlowMonitorName)-1]
    }
    return nil
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ingress.FlowMonitorName {
        children[ingress.FlowMonitorName[i].GetSegmentPath()] = &ingress.FlowMonitorName[i]
    }
    return children
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetBundleName() string { return "cisco_ios_xr" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetYangName() string { return "ingress" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) SetParent(parent types.Entity) { ingress.parent = parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetParent() types.Entity { return ingress.parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Ingress_FlowMonitorName) GetParentYangName() string { return "ingress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetFilter() yfilter.YFilter { return egress.YFilter }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) SetFilter(yf yfilter.YFilter) { egress.YFilter = yf }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetSegmentPath() string {
    return "egress"
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range egress.FlowMonitorName {
            if egress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName{}
        egress.FlowMonitorName = append(egress.FlowMonitorName, child)
        return &egress.FlowMonitorName[len(egress.FlowMonitorName)-1]
    }
    return nil
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range egress.FlowMonitorName {
        children[egress.FlowMonitorName[i].GetSegmentPath()] = &egress.FlowMonitorName[i]
    }
    return children
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetBundleName() string { return "cisco_ios_xr" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetYangName() string { return "egress" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) SetParent(parent types.Entity) { egress.parent = parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetParent() types.Entity { return egress.parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_DataLinkFrameSection_FlowMonitorMap_Egress_FlowMonitorName) GetParentYangName() string { return "egress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls
// Configure MPLS netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetFilter() yfilter.YFilter { return mpls.YFilter }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) SetFilter(yf yfilter.YFilter) { mpls.YFilter = yf }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetGoName(yname string) string {
    if yname == "flow-monitor-map" { return "FlowMonitorMap" }
    return ""
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetSegmentPath() string {
    return "mpls"
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-map" {
        return &mpls.FlowMonitorMap
    }
    return nil
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-monitor-map"] = &mpls.FlowMonitorMap
    return children
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetBundleName() string { return "cisco_ios_xr" }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetYangName() string { return "mpls" }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) SetParent(parent types.Entity) { mpls.parent = parent }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetParent() types.Entity { return mpls.parent }

func (mpls *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls) GetParentYangName() string { return "net-flow" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetFilter() yfilter.YFilter { return flowMonitorMap.YFilter }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) SetFilter(yf yfilter.YFilter) { flowMonitorMap.YFilter = yf }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetGoName(yname string) string {
    if yname == "ingress" { return "Ingress" }
    if yname == "egress" { return "Egress" }
    return ""
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetSegmentPath() string {
    return "flow-monitor-map"
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ingress" {
        return &flowMonitorMap.Ingress
    }
    if childYangName == "egress" {
        return &flowMonitorMap.Egress
    }
    return nil
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ingress"] = &flowMonitorMap.Ingress
    children["egress"] = &flowMonitorMap.Egress
    return children
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetYangName() string { return "flow-monitor-map" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) SetParent(parent types.Entity) { flowMonitorMap.parent = parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetParent() types.Entity { return flowMonitorMap.parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap) GetParentYangName() string { return "mpls" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetFilter() yfilter.YFilter { return ingress.YFilter }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) SetFilter(yf yfilter.YFilter) { ingress.YFilter = yf }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetSegmentPath() string {
    return "ingress"
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range ingress.FlowMonitorName {
            if ingress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName{}
        ingress.FlowMonitorName = append(ingress.FlowMonitorName, child)
        return &ingress.FlowMonitorName[len(ingress.FlowMonitorName)-1]
    }
    return nil
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ingress.FlowMonitorName {
        children[ingress.FlowMonitorName[i].GetSegmentPath()] = &ingress.FlowMonitorName[i]
    }
    return children
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetBundleName() string { return "cisco_ios_xr" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetYangName() string { return "ingress" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) SetParent(parent types.Entity) { ingress.parent = parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetParent() types.Entity { return ingress.parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Ingress_FlowMonitorName) GetParentYangName() string { return "ingress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetFilter() yfilter.YFilter { return egress.YFilter }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) SetFilter(yf yfilter.YFilter) { egress.YFilter = yf }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetSegmentPath() string {
    return "egress"
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range egress.FlowMonitorName {
            if egress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName{}
        egress.FlowMonitorName = append(egress.FlowMonitorName, child)
        return &egress.FlowMonitorName[len(egress.FlowMonitorName)-1]
    }
    return nil
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range egress.FlowMonitorName {
        children[egress.FlowMonitorName[i].GetSegmentPath()] = &egress.FlowMonitorName[i]
    }
    return children
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetBundleName() string { return "cisco_ios_xr" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetYangName() string { return "egress" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) SetParent(parent types.Entity) { egress.parent = parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetParent() types.Entity { return egress.parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Mpls_FlowMonitorMap_Egress_FlowMonitorName) GetParentYangName() string { return "egress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6
// Configure IPv6 netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetGoName(yname string) string {
    if yname == "flow-monitor-map" { return "FlowMonitorMap" }
    return ""
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-map" {
        return &ipv6.FlowMonitorMap
    }
    return nil
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-monitor-map"] = &ipv6.FlowMonitorMap
    return children
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6) GetParentYangName() string { return "net-flow" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetFilter() yfilter.YFilter { return flowMonitorMap.YFilter }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) SetFilter(yf yfilter.YFilter) { flowMonitorMap.YFilter = yf }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetGoName(yname string) string {
    if yname == "ingress" { return "Ingress" }
    if yname == "egress" { return "Egress" }
    return ""
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetSegmentPath() string {
    return "flow-monitor-map"
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ingress" {
        return &flowMonitorMap.Ingress
    }
    if childYangName == "egress" {
        return &flowMonitorMap.Egress
    }
    return nil
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ingress"] = &flowMonitorMap.Ingress
    children["egress"] = &flowMonitorMap.Egress
    return children
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetYangName() string { return "flow-monitor-map" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) SetParent(parent types.Entity) { flowMonitorMap.parent = parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetParent() types.Entity { return flowMonitorMap.parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap) GetParentYangName() string { return "ipv6" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetFilter() yfilter.YFilter { return ingress.YFilter }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) SetFilter(yf yfilter.YFilter) { ingress.YFilter = yf }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetSegmentPath() string {
    return "ingress"
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range ingress.FlowMonitorName {
            if ingress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName{}
        ingress.FlowMonitorName = append(ingress.FlowMonitorName, child)
        return &ingress.FlowMonitorName[len(ingress.FlowMonitorName)-1]
    }
    return nil
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ingress.FlowMonitorName {
        children[ingress.FlowMonitorName[i].GetSegmentPath()] = &ingress.FlowMonitorName[i]
    }
    return children
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetBundleName() string { return "cisco_ios_xr" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetYangName() string { return "ingress" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) SetParent(parent types.Entity) { ingress.parent = parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetParent() types.Entity { return ingress.parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Ingress_FlowMonitorName) GetParentYangName() string { return "ingress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetFilter() yfilter.YFilter { return egress.YFilter }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) SetFilter(yf yfilter.YFilter) { egress.YFilter = yf }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetSegmentPath() string {
    return "egress"
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range egress.FlowMonitorName {
            if egress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName{}
        egress.FlowMonitorName = append(egress.FlowMonitorName, child)
        return &egress.FlowMonitorName[len(egress.FlowMonitorName)-1]
    }
    return nil
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range egress.FlowMonitorName {
        children[egress.FlowMonitorName[i].GetSegmentPath()] = &egress.FlowMonitorName[i]
    }
    return children
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetBundleName() string { return "cisco_ios_xr" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetYangName() string { return "egress" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) SetParent(parent types.Entity) { egress.parent = parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetParent() types.Entity { return egress.parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv6_FlowMonitorMap_Egress_FlowMonitorName) GetParentYangName() string { return "egress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4
// Configure IPv4 netflow
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a flow monitor map.
    FlowMonitorMap InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetGoName(yname string) string {
    if yname == "flow-monitor-map" { return "FlowMonitorMap" }
    return ""
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-map" {
        return &ipv4.FlowMonitorMap
    }
    return nil
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-monitor-map"] = &ipv4.FlowMonitorMap
    return children
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4) GetParentYangName() string { return "net-flow" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap
// Configure a flow monitor map
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ingress monitoring direction.
    Ingress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress

    // Configure egress monitoring direction.
    Egress InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetFilter() yfilter.YFilter { return flowMonitorMap.YFilter }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) SetFilter(yf yfilter.YFilter) { flowMonitorMap.YFilter = yf }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetGoName(yname string) string {
    if yname == "ingress" { return "Ingress" }
    if yname == "egress" { return "Egress" }
    return ""
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetSegmentPath() string {
    return "flow-monitor-map"
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ingress" {
        return &flowMonitorMap.Ingress
    }
    if childYangName == "egress" {
        return &flowMonitorMap.Egress
    }
    return nil
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ingress"] = &flowMonitorMap.Ingress
    children["egress"] = &flowMonitorMap.Egress
    return children
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetYangName() string { return "flow-monitor-map" }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) SetParent(parent types.Entity) { flowMonitorMap.parent = parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetParent() types.Entity { return flowMonitorMap.parent }

func (flowMonitorMap *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap) GetParentYangName() string { return "ipv4" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress
// Configure ingress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetFilter() yfilter.YFilter { return ingress.YFilter }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) SetFilter(yf yfilter.YFilter) { ingress.YFilter = yf }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetSegmentPath() string {
    return "ingress"
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range ingress.FlowMonitorName {
            if ingress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName{}
        ingress.FlowMonitorName = append(ingress.FlowMonitorName, child)
        return &ingress.FlowMonitorName[len(ingress.FlowMonitorName)-1]
    }
    return nil
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ingress.FlowMonitorName {
        children[ingress.FlowMonitorName[i].GetSegmentPath()] = &ingress.FlowMonitorName[i]
    }
    return children
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetBundleName() string { return "cisco_ios_xr" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetYangName() string { return "ingress" }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) SetParent(parent types.Entity) { ingress.parent = parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetParent() types.Entity { return ingress.parent }

func (ingress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Ingress_FlowMonitorName) GetParentYangName() string { return "ingress" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress
// Configure egress monitoring direction
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName.
    FlowMonitorName []InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetFilter() yfilter.YFilter { return egress.YFilter }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) SetFilter(yf yfilter.YFilter) { egress.YFilter = yf }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetGoName(yname string) string {
    if yname == "flow-monitor-name" { return "FlowMonitorName" }
    return ""
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetSegmentPath() string {
    return "egress"
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-monitor-name" {
        for _, c := range egress.FlowMonitorName {
            if egress.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName{}
        egress.FlowMonitorName = append(egress.FlowMonitorName, child)
        return &egress.FlowMonitorName[len(egress.FlowMonitorName)-1]
    }
    return nil
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range egress.FlowMonitorName {
        children[egress.FlowMonitorName[i].GetSegmentPath()] = &egress.FlowMonitorName[i]
    }
    return children
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetBundleName() string { return "cisco_ios_xr" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetYangName() string { return "egress" }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) SetParent(parent types.Entity) { egress.parent = parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetParent() types.Entity { return egress.parent }

func (egress *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress) GetParentYangName() string { return "flow-monitor-map" }

// InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MonitorMapName interface{}

    // Sampler map name. The type is string. This attribute is mandatory.
    SamplerMapName interface{}
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetFilter() yfilter.YFilter { return flowMonitorName.YFilter }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) SetFilter(yf yfilter.YFilter) { flowMonitorName.YFilter = yf }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetGoName(yname string) string {
    if yname == "monitor-map-name" { return "MonitorMapName" }
    if yname == "sampler-map-name" { return "SamplerMapName" }
    return ""
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetSegmentPath() string {
    return "flow-monitor-name" + "[monitor-map-name='" + fmt.Sprintf("%v", flowMonitorName.MonitorMapName) + "']"
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor-map-name"] = flowMonitorName.MonitorMapName
    leafs["sampler-map-name"] = flowMonitorName.SamplerMapName
    return leafs
}

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetBundleName() string { return "cisco_ios_xr" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetYangName() string { return "flow-monitor-name" }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) SetParent(parent types.Entity) { flowMonitorName.parent = parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetParent() types.Entity { return flowMonitorName.parent }

func (flowMonitorName *InterfaceConfigurations_InterfaceConfiguration_NetFlow_Ipv4_FlowMonitorMap_Egress_FlowMonitorName) GetParentYangName() string { return "egress" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp
// IP over GRE encapsulation
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable flag bit to allow packets with GRE key. The type is interface{}.
    AllowKey interface{}

    // Configure the time-to-live for packets sent over this tunnel. The type is
    // interface{} with range: 1..255.
    Ttl interface{}

    // Tunnel vrf label name. The type is string with length: 1..32.
    TunnelVrf interface{}

    // Configure Type of Service bits for this tunnel. The type is interface{}
    // with range: 0..255.
    Tos interface{}

    // Disable DF bit (i.e. allow fragmentation). The type is interface{} with
    // range: -2147483648..2147483647.
    Disable interface{}

    // Tunnel encapsulation method.
    Mode InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode

    // Configure source of tunnel.
    Source InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source

    // Configure the key value for packets sent over this tunnel.
    Key InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key

    // Enable keepalive packets on this tunnel.
    Keepalive InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive

    // Configure destination of tunnel.
    Destination InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetFilter() yfilter.YFilter { return tunnelIp.YFilter }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) SetFilter(yf yfilter.YFilter) { tunnelIp.YFilter = yf }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetGoName(yname string) string {
    if yname == "allow-key" { return "AllowKey" }
    if yname == "ttl" { return "Ttl" }
    if yname == "tunnel-vrf" { return "TunnelVrf" }
    if yname == "tos" { return "Tos" }
    if yname == "disable" { return "Disable" }
    if yname == "mode" { return "Mode" }
    if yname == "source" { return "Source" }
    if yname == "key" { return "Key" }
    if yname == "keepalive" { return "Keepalive" }
    if yname == "destination" { return "Destination" }
    return ""
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetSegmentPath() string {
    return "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mode" {
        return &tunnelIp.Mode
    }
    if childYangName == "source" {
        return &tunnelIp.Source
    }
    if childYangName == "key" {
        return &tunnelIp.Key
    }
    if childYangName == "keepalive" {
        return &tunnelIp.Keepalive
    }
    if childYangName == "destination" {
        return &tunnelIp.Destination
    }
    return nil
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mode"] = &tunnelIp.Mode
    children["source"] = &tunnelIp.Source
    children["key"] = &tunnelIp.Key
    children["keepalive"] = &tunnelIp.Keepalive
    children["destination"] = &tunnelIp.Destination
    return children
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allow-key"] = tunnelIp.AllowKey
    leafs["ttl"] = tunnelIp.Ttl
    leafs["tunnel-vrf"] = tunnelIp.TunnelVrf
    leafs["tos"] = tunnelIp.Tos
    leafs["disable"] = tunnelIp.Disable
    return leafs
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetYangName() string { return "tunnel-ip" }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) SetParent(parent types.Entity) { tunnelIp.parent = parent }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetParent() types.Entity { return tunnelIp.parent }

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode
// Tunnel encapsulation method
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GRE IPV4 - 1, GRE IPV6 - 2, MGRE IPV4 - 3, MGRE IPV6 -4. IPV4 - 5, IPV6 -
    // 6. The type is interface{} with range: -2147483648..2147483647.
    Value interface{}

    // Tunnel Mode Direction. The type is TunnelModeDirection.
    ModeDirection interface{}
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetFilter() yfilter.YFilter { return mode.YFilter }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) SetFilter(yf yfilter.YFilter) { mode.YFilter = yf }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mode-direction" { return "ModeDirection" }
    return ""
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetSegmentPath() string {
    return "mode"
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = mode.Value
    leafs["mode-direction"] = mode.ModeDirection
    return leafs
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetBundleName() string { return "cisco_ios_xr" }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetYangName() string { return "mode" }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) SetParent(parent types.Entity) { mode.parent = parent }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetParent() types.Entity { return mode.parent }

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetParentYangName() string { return "tunnel-ip" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source
// Configure source of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // 1 for Interface Name, 2 for IPv4 Address, 3 for IPv6 Address. The type is
    // interface{} with range: -2147483648..2147483647.
    Type interface{}

    // IPV4 address of the tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Name of tunnel source interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // IPV6 address of the tunnel source. The type is string.
    Ipv6Address interface{}
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "address" { return "Address" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetSegmentPath() string {
    return "source"
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = source.Type
    leafs["address"] = source.Address
    leafs["interface-name"] = source.InterfaceName
    leafs["ipv6-address"] = source.Ipv6Address
    return leafs
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetYangName() string { return "source" }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetParent() types.Entity { return source.parent }

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetParentYangName() string { return "tunnel-ip" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key
// Configure the key value for packets sent over
// this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Entropy interface{}

    // Enter the KEY value. The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetFilter() yfilter.YFilter { return key.YFilter }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) SetFilter(yf yfilter.YFilter) { key.YFilter = yf }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetGoName(yname string) string {
    if yname == "entropy" { return "Entropy" }
    if yname == "value" { return "Value" }
    return ""
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetSegmentPath() string {
    return "key"
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entropy"] = key.Entropy
    leafs["value"] = key.Value
    return leafs
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetBundleName() string { return "cisco_ios_xr" }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetYangName() string { return "key" }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) SetParent(parent types.Entity) { key.parent = parent }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetParent() types.Entity { return key.parent }

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetParentYangName() string { return "tunnel-ip" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive
// Enable keepalive packets on this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive period in seconds (default 10 seconds). The type is interface{}
    // with range: 1..32767.
    KeepAlivePeriod interface{}

    // Number of retries (default 3). The type is interface{} with range: 1..255.
    KeepAliveRetries interface{}
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetFilter() yfilter.YFilter { return keepalive.YFilter }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) SetFilter(yf yfilter.YFilter) { keepalive.YFilter = yf }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetGoName(yname string) string {
    if yname == "keep-alive-period" { return "KeepAlivePeriod" }
    if yname == "keep-alive-retries" { return "KeepAliveRetries" }
    return ""
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetSegmentPath() string {
    return "keepalive"
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keep-alive-period"] = keepalive.KeepAlivePeriod
    leafs["keep-alive-retries"] = keepalive.KeepAliveRetries
    return leafs
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetBundleName() string { return "cisco_ios_xr" }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetYangName() string { return "keepalive" }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) SetParent(parent types.Entity) { keepalive.parent = parent }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetParent() types.Entity { return keepalive.parent }

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetParentYangName() string { return "tunnel-ip" }

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
// Configure destination of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // 1 for IPv4 Address, 2 for IPv6 Address. The type is interface{} with range:
    // -2147483648..2147483647.
    Type interface{}

    // IPV4 address of the tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IPV6 address of the tunnel destination. The type is string.
    Ipv6Address interface{}

    // IPv4 prefix length of the tunnel destination. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AddressMask interface{}

    // Prefix-list to validate destination's resolving prefix. The type is string
    // with length: 1..64.
    PrefixListName interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "address" { return "Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    if yname == "address-mask" { return "AddressMask" }
    if yname == "prefix-list-name" { return "PrefixListName" }
    return ""
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetSegmentPath() string {
    return "destination"
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = destination.Type
    leafs["address"] = destination.Address
    leafs["ipv6-address"] = destination.Ipv6Address
    leafs["address-mask"] = destination.AddressMask
    leafs["prefix-list-name"] = destination.PrefixListName
    return leafs
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetYangName() string { return "destination" }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetParent() types.Entity { return destination.parent }

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetParentYangName() string { return "tunnel-ip" }

// InterfaceConfigurations_InterfaceConfiguration_Nve
// NVE operational data
type InterfaceConfigurations_InterfaceConfiguration_Nve struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // UDP port number in VxLAN encapsulation. The type is VxlanUdpPortEnum. The
    // default value is ietf-udp-port.
    VxLanUdpPort interface{}

    // The Overlay Encapsulation for this NVE. The type is OverlayEncapEnum. The
    // default value is vx-lan-encapsulation.
    OverlayEncapsulation interface{}

    // Source Interface for this NVE. The type is string.
    SourceInterface interface{}

    // The Ingress Replication Protocol for this NVE. The type is IrProtocolEnum.
    IngressReplicationProtocol interface{}

    // Enable anycast mode for this NVE interface.
    Anycast InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast

    // Redundancy configuration for this NVE.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy

    // VNI configuration Table for this NVE.
    MemberVnis InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetFilter() yfilter.YFilter { return nve.YFilter }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) SetFilter(yf yfilter.YFilter) { nve.YFilter = yf }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetGoName(yname string) string {
    if yname == "vx-lan-udp-port" { return "VxLanUdpPort" }
    if yname == "overlay-encapsulation" { return "OverlayEncapsulation" }
    if yname == "source-interface" { return "SourceInterface" }
    if yname == "ingress-replication-protocol" { return "IngressReplicationProtocol" }
    if yname == "anycast" { return "Anycast" }
    if yname == "redundancy" { return "Redundancy" }
    if yname == "member-vnis" { return "MemberVnis" }
    return ""
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetSegmentPath() string {
    return "Cisco-IOS-XR-tunnel-nve-cfg:nve"
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "anycast" {
        return &nve.Anycast
    }
    if childYangName == "redundancy" {
        return &nve.Redundancy
    }
    if childYangName == "member-vnis" {
        return &nve.MemberVnis
    }
    return nil
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["anycast"] = &nve.Anycast
    children["redundancy"] = &nve.Redundancy
    children["member-vnis"] = &nve.MemberVnis
    return children
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vx-lan-udp-port"] = nve.VxLanUdpPort
    leafs["overlay-encapsulation"] = nve.OverlayEncapsulation
    leafs["source-interface"] = nve.SourceInterface
    leafs["ingress-replication-protocol"] = nve.IngressReplicationProtocol
    return leafs
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetBundleName() string { return "cisco_ios_xr" }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetYangName() string { return "nve" }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) SetParent(parent types.Entity) { nve.parent = parent }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetParent() types.Entity { return nve.parent }

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetParentYangName() string { return "interface-configuration" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast
// Enable anycast mode for this NVE interface
type InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Anycast mode source interface. The type is string.
    SourceInterface interface{}

    // MCast group for syncing between Anycast gateways. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SyncGroup interface{}
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetFilter() yfilter.YFilter { return anycast.YFilter }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) SetFilter(yf yfilter.YFilter) { anycast.YFilter = yf }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetGoName(yname string) string {
    if yname == "source-interface" { return "SourceInterface" }
    if yname == "sync-group" { return "SyncGroup" }
    return ""
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetSegmentPath() string {
    return "anycast"
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-interface"] = anycast.SourceInterface
    leafs["sync-group"] = anycast.SyncGroup
    return leafs
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetBundleName() string { return "cisco_ios_xr" }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetYangName() string { return "anycast" }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) SetParent(parent types.Entity) { anycast.parent = parent }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetParent() types.Entity { return anycast.parent }

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetParentYangName() string { return "nve" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy
// Redundancy configuration for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Redundancy. The type is interface{}.
    Enable interface{}

    // VXLAN backbone.
    BackboneVxLan InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan

    // MPLS backbone.
    BackboneMpls InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetFilter() yfilter.YFilter { return redundancy.YFilter }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) SetFilter(yf yfilter.YFilter) { redundancy.YFilter = yf }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "backbone-vx-lan" { return "BackboneVxLan" }
    if yname == "backbone-mpls" { return "BackboneMpls" }
    return ""
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetSegmentPath() string {
    return "redundancy"
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backbone-vx-lan" {
        return &redundancy.BackboneVxLan
    }
    if childYangName == "backbone-mpls" {
        return &redundancy.BackboneMpls
    }
    return nil
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backbone-vx-lan"] = &redundancy.BackboneVxLan
    children["backbone-mpls"] = &redundancy.BackboneMpls
    return children
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = redundancy.Enable
    return leafs
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetBundleName() string { return "cisco_ios_xr" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetYangName() string { return "redundancy" }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) SetParent(parent types.Entity) { redundancy.parent = parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetParent() types.Entity { return redundancy.parent }

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetParentYangName() string { return "nve" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan
// VXLAN backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Backbone VxLAN. The type is interface{}.
    Enable interface{}

    // VxLAN backbone ICCP group. The type is interface{} with range:
    // -2147483648..2147483647.
    BackboneVxLaniccp interface{}
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetFilter() yfilter.YFilter { return backboneVxLan.YFilter }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) SetFilter(yf yfilter.YFilter) { backboneVxLan.YFilter = yf }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "backbone-vx-laniccp" { return "BackboneVxLaniccp" }
    return ""
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetSegmentPath() string {
    return "backbone-vx-lan"
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = backboneVxLan.Enable
    leafs["backbone-vx-laniccp"] = backboneVxLan.BackboneVxLaniccp
    return leafs
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetBundleName() string { return "cisco_ios_xr" }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetYangName() string { return "backbone-vx-lan" }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) SetParent(parent types.Entity) { backboneVxLan.parent = parent }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetParent() types.Entity { return backboneVxLan.parent }

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetParentYangName() string { return "redundancy" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
// MPLS backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS backbone ICCP group. The type is interface{} with range:
    // -2147483648..2147483647.
    BackboneMplsiccp interface{}

    // Enable Backbone MPLS. The type is interface{}.
    Enable interface{}
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetFilter() yfilter.YFilter { return backboneMpls.YFilter }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) SetFilter(yf yfilter.YFilter) { backboneMpls.YFilter = yf }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetGoName(yname string) string {
    if yname == "backbone-mplsiccp" { return "BackboneMplsiccp" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetSegmentPath() string {
    return "backbone-mpls"
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backbone-mplsiccp"] = backboneMpls.BackboneMplsiccp
    leafs["enable"] = backboneMpls.Enable
    return leafs
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetBundleName() string { return "cisco_ios_xr" }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetYangName() string { return "backbone-mpls" }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) SetParent(parent types.Entity) { backboneMpls.parent = parent }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetParent() types.Entity { return backboneMpls.parent }

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetParentYangName() string { return "redundancy" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
// VNI configuration Table for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VNI member attributes. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni.
    MemberVni []InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetFilter() yfilter.YFilter { return memberVnis.YFilter }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) SetFilter(yf yfilter.YFilter) { memberVnis.YFilter = yf }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetGoName(yname string) string {
    if yname == "member-vni" { return "MemberVni" }
    return ""
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetSegmentPath() string {
    return "member-vnis"
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-vni" {
        for _, c := range memberVnis.MemberVni {
            if memberVnis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni{}
        memberVnis.MemberVni = append(memberVnis.MemberVni, child)
        return &memberVnis.MemberVni[len(memberVnis.MemberVni)-1]
    }
    return nil
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberVnis.MemberVni {
        children[memberVnis.MemberVni[i].GetSegmentPath()] = &memberVnis.MemberVni[i]
    }
    return children
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetBundleName() string { return "cisco_ios_xr" }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetYangName() string { return "member-vnis" }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) SetParent(parent types.Entity) { memberVnis.parent = parent }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetParent() types.Entity { return memberVnis.parent }

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetParentYangName() string { return "nve" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
// VNI member attributes
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Single VNI or Range Start. The type is interface{}
    // with range: 1..16777215.
    VniStart interface{}

    // This attribute is a key. Range End. The type is interface{} with range:
    // 1..16777215.
    VniEnd interface{}

    // Control protocol for VxLAN tunnel endpoint reachability. The type is
    // HostReachProtocol.
    HostReachability interface{}

    // VRF associated with the VxLAN segment. The type is string.
    Vrf interface{}

    // Suppression of unknown unicast flooding. The type is
    // UnknownUnicastFloodingEnum.
    UnknownUnicastFlooding interface{}

    // Per-evi load balance mode. The type is LoadBalanceEnum.
    LoadBalancePerEvi interface{}

    // Enable VNI. The type is interface{}.
    Enable interface{}

    // Mulitcast core group range associated with the VxLAN segment(s).
    Multicast InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetFilter() yfilter.YFilter { return memberVni.YFilter }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) SetFilter(yf yfilter.YFilter) { memberVni.YFilter = yf }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetGoName(yname string) string {
    if yname == "vni-start" { return "VniStart" }
    if yname == "vni-end" { return "VniEnd" }
    if yname == "host-reachability" { return "HostReachability" }
    if yname == "vrf" { return "Vrf" }
    if yname == "unknown-unicast-flooding" { return "UnknownUnicastFlooding" }
    if yname == "load-balance-per-evi" { return "LoadBalancePerEvi" }
    if yname == "enable" { return "Enable" }
    if yname == "multicast" { return "Multicast" }
    return ""
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetSegmentPath() string {
    return "member-vni" + "[vni-start='" + fmt.Sprintf("%v", memberVni.VniStart) + "']" + "[vni-end='" + fmt.Sprintf("%v", memberVni.VniEnd) + "']"
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multicast" {
        return &memberVni.Multicast
    }
    return nil
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["multicast"] = &memberVni.Multicast
    return children
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vni-start"] = memberVni.VniStart
    leafs["vni-end"] = memberVni.VniEnd
    leafs["host-reachability"] = memberVni.HostReachability
    leafs["vrf"] = memberVni.Vrf
    leafs["unknown-unicast-flooding"] = memberVni.UnknownUnicastFlooding
    leafs["load-balance-per-evi"] = memberVni.LoadBalancePerEvi
    leafs["enable"] = memberVni.Enable
    return leafs
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetBundleName() string { return "cisco_ios_xr" }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetYangName() string { return "member-vni" }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) SetParent(parent types.Entity) { memberVni.parent = parent }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetParent() types.Entity { return memberVni.parent }

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetParentYangName() string { return "member-vnis" }

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
// Mulitcast core group range associated with
// the VxLAN segment(s)
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV4 group address of the tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MulticastGroupMin interface{}

    // IPV4 group address MAX. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    MulticastGroupMax interface{}
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetFilter() yfilter.YFilter { return multicast.YFilter }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) SetFilter(yf yfilter.YFilter) { multicast.YFilter = yf }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetGoName(yname string) string {
    if yname == "multicast-group-min" { return "MulticastGroupMin" }
    if yname == "multicast-group-max" { return "MulticastGroupMax" }
    return ""
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetSegmentPath() string {
    return "multicast"
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multicast-group-min"] = multicast.MulticastGroupMin
    leafs["multicast-group-max"] = multicast.MulticastGroupMax
    return leafs
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetBundleName() string { return "cisco_ios_xr" }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetYangName() string { return "multicast" }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) SetParent(parent types.Entity) { multicast.parent = parent }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetParent() types.Entity { return multicast.parent }

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetParentYangName() string { return "member-vni" }

// InterfaceConfigurations_InterfaceConfiguration_Wanphy
// WANPHY port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Wanphy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure Path Remote Defect Indicator reporting. The type is interface{}.
    ReportPathRdi interface{}

    // Configure Loss Of Signal reporting. The type is interface{}.
    ReportLos interface{}

    // Configure Path Loss Of Code-Group Delineation reporting. The type is
    // interface{}.
    ReportPathLcd interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFePlm interface{}

    // Configure LAN Mode. The type is WanphyLanMode.
    LanMode interface{}

    // Configure Path Payload Label Mismatch reporting. The type is interface{}.
    ReportPathPlm interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFeAis interface{}

    // Configure Path Alarm Indication Signal reporting. The type is interface{}.
    ReportPathAis interface{}

    // Configure Line Alarm Indication Signal reporting. The type is interface{}.
    ReportLineAis interface{}

    // Configure Loss Of Frame reporting. The type is interface{}.
    ReportLof interface{}

    // Configure Loss Of Pointer reporting. The type is interface{}.
    ReportLop interface{}

    // Configure Remote Defect Indicator reporting. The type is interface{}.
    ReportRdi interface{}

    // Configure B2 BER in excess of SD threshold reporting. The type is
    // interface{}.
    ReportSdBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 6.
    ThresholdSdBer interface{}

    // Configure B2 BER in excess of SF threshold reporting. The type is
    // interface{}.
    ReportSfBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 3.
    ThresholdSfBer interface{}

    // Configure WAN Mode. The type is WanphyWanMode.
    WanMode interface{}
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetFilter() yfilter.YFilter { return wanphy.YFilter }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) SetFilter(yf yfilter.YFilter) { wanphy.YFilter = yf }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetGoName(yname string) string {
    if yname == "report-path-rdi" { return "ReportPathRdi" }
    if yname == "report-los" { return "ReportLos" }
    if yname == "report-path-lcd" { return "ReportPathLcd" }
    if yname == "report-path-fe-plm" { return "ReportPathFePlm" }
    if yname == "lan-mode" { return "LanMode" }
    if yname == "report-path-plm" { return "ReportPathPlm" }
    if yname == "report-path-fe-ais" { return "ReportPathFeAis" }
    if yname == "report-path-ais" { return "ReportPathAis" }
    if yname == "report-line-ais" { return "ReportLineAis" }
    if yname == "report-lof" { return "ReportLof" }
    if yname == "report-lop" { return "ReportLop" }
    if yname == "report-rdi" { return "ReportRdi" }
    if yname == "report-sd-ber" { return "ReportSdBer" }
    if yname == "threshold-sd-ber" { return "ThresholdSdBer" }
    if yname == "report-sf-ber" { return "ReportSfBer" }
    if yname == "threshold-sf-ber" { return "ThresholdSfBer" }
    if yname == "wan-mode" { return "WanMode" }
    return ""
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetSegmentPath() string {
    return "Cisco-IOS-XR-wanphy-ui-cfg:wanphy"
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["report-path-rdi"] = wanphy.ReportPathRdi
    leafs["report-los"] = wanphy.ReportLos
    leafs["report-path-lcd"] = wanphy.ReportPathLcd
    leafs["report-path-fe-plm"] = wanphy.ReportPathFePlm
    leafs["lan-mode"] = wanphy.LanMode
    leafs["report-path-plm"] = wanphy.ReportPathPlm
    leafs["report-path-fe-ais"] = wanphy.ReportPathFeAis
    leafs["report-path-ais"] = wanphy.ReportPathAis
    leafs["report-line-ais"] = wanphy.ReportLineAis
    leafs["report-lof"] = wanphy.ReportLof
    leafs["report-lop"] = wanphy.ReportLop
    leafs["report-rdi"] = wanphy.ReportRdi
    leafs["report-sd-ber"] = wanphy.ReportSdBer
    leafs["threshold-sd-ber"] = wanphy.ThresholdSdBer
    leafs["report-sf-ber"] = wanphy.ReportSfBer
    leafs["threshold-sf-ber"] = wanphy.ThresholdSfBer
    leafs["wan-mode"] = wanphy.WanMode
    return leafs
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetBundleName() string { return "cisco_ios_xr" }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetYangName() string { return "wanphy" }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) SetParent(parent types.Entity) { wanphy.parent = parent }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetParent() types.Entity { return wanphy.parent }

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetParentYangName() string { return "interface-configuration" }

