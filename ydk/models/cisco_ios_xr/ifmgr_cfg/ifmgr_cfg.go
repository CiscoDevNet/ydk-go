// This module contains a collection of YANG definitions
// for Cisco IOS-XR ifmgr package configuration.
// 
// This module contains definitions
// for the following management objects:
//   global-interface-configuration: Global scoped configuration
//     for interfaces
//   interface-configurations: interface configurations
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ifmgr_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ifmgr_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg global-interface-configuration}", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration", reflect.TypeOf(GlobalInterfaceConfiguration{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg interface-configurations}", reflect.TypeOf(InterfaceConfigurations{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ifmgr-cfg:interface-configurations", reflect.TypeOf(InterfaceConfigurations{}))
}

// InterfaceModeEnum represents Interface mode enum
type InterfaceModeEnum string

const (
    // Default Interface Mode
    InterfaceModeEnum_default_ InterfaceModeEnum = "default"

    // Point-to-Point Interface Mode
    InterfaceModeEnum_point_to_point InterfaceModeEnum = "point-to-point"

    // Multipoint Interface Mode
    InterfaceModeEnum_multipoint InterfaceModeEnum = "multipoint"

    // L2 Transport Interface Mode
    InterfaceModeEnum_l2_transport InterfaceModeEnum = "l2-transport"
)

// SecondaryAdminStateEnum represents Secondary admin state enum
type SecondaryAdminStateEnum string

const (
    // Normal Mode
    SecondaryAdminStateEnum_normal SecondaryAdminStateEnum = "normal"

    // Maintenance Mode
    SecondaryAdminStateEnum_maintenance SecondaryAdminStateEnum = "maintenance"
)

// LinkStatusEnum represents Link status enum
type LinkStatusEnum string

const (
    // Display link status messages for physical links
    LinkStatusEnum_default_ LinkStatusEnum = "default"

    // Disable link status messages
    LinkStatusEnum_disable LinkStatusEnum = "disable"

    // Display link status messages for all interfaces
    LinkStatusEnum_software_interfaces LinkStatusEnum = "software-interfaces"
)

// GlobalInterfaceConfiguration
// Global scoped configuration for interfaces
type GlobalInterfaceConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable link-status messages. The type is LinkStatusEnum. The
    // default value is default.
    LinkStatus interface{}
}

func (globalInterfaceConfiguration *GlobalInterfaceConfiguration) GetEntityData() *types.CommonEntityData {
    globalInterfaceConfiguration.EntityData.YFilter = globalInterfaceConfiguration.YFilter
    globalInterfaceConfiguration.EntityData.YangName = "global-interface-configuration"
    globalInterfaceConfiguration.EntityData.BundleName = "cisco_ios_xr"
    globalInterfaceConfiguration.EntityData.ParentYangName = "Cisco-IOS-XR-ifmgr-cfg"
    globalInterfaceConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration"
    globalInterfaceConfiguration.EntityData.AbsolutePath = globalInterfaceConfiguration.EntityData.SegmentPath
    globalInterfaceConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalInterfaceConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalInterfaceConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalInterfaceConfiguration.EntityData.Children = types.NewOrderedMap()
    globalInterfaceConfiguration.EntityData.Leafs = types.NewOrderedMap()
    globalInterfaceConfiguration.EntityData.Leafs.Append("link-status", types.YLeaf{"LinkStatus", globalInterfaceConfiguration.LinkStatus})

    globalInterfaceConfiguration.EntityData.YListKeys = []string {}

    return &(globalInterfaceConfiguration.EntityData)
}

// InterfaceConfigurations
// interface configurations
type InterfaceConfigurations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The configuration for an interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration.
    InterfaceConfiguration []*InterfaceConfigurations_InterfaceConfiguration
}

func (interfaceConfigurations *InterfaceConfigurations) GetEntityData() *types.CommonEntityData {
    interfaceConfigurations.EntityData.YFilter = interfaceConfigurations.YFilter
    interfaceConfigurations.EntityData.YangName = "interface-configurations"
    interfaceConfigurations.EntityData.BundleName = "cisco_ios_xr"
    interfaceConfigurations.EntityData.ParentYangName = "Cisco-IOS-XR-ifmgr-cfg"
    interfaceConfigurations.EntityData.SegmentPath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
    interfaceConfigurations.EntityData.AbsolutePath = interfaceConfigurations.EntityData.SegmentPath
    interfaceConfigurations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceConfigurations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceConfigurations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceConfigurations.EntityData.Children = types.NewOrderedMap()
    interfaceConfigurations.EntityData.Children.Append("interface-configuration", types.YChild{"InterfaceConfiguration", nil})
    for i := range interfaceConfigurations.InterfaceConfiguration {
        interfaceConfigurations.EntityData.Children.Append(types.GetSegmentPath(interfaceConfigurations.InterfaceConfiguration[i]), types.YChild{"InterfaceConfiguration", interfaceConfigurations.InterfaceConfiguration[i]})
    }
    interfaceConfigurations.EntityData.Leafs = types.NewOrderedMap()

    interfaceConfigurations.EntityData.YListKeys = []string {}

    return &(interfaceConfigurations.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration
// The configuration for an interface
type InterfaceConfigurations_InterfaceConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Whether the interface is active or preconfigured.
    // The type is string with pattern: b'(act)|(pre)'.
    Active interface{}

    // This attribute is a key. The name of the interface. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // The existence of this configuration indicates the interface is shut down.
    // The type is interface{}.
    Shutdown interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software virtual/subinterface. The type is
    // interface{}.
    InterfaceVirtual interface{}

    // The secondary admin state of the interface. The type is
    // SecondaryAdminStateEnum.
    SecondaryAdminState interface{}

    // The mode in which an interface is running. The existence of this object
    // causes the creation of the software subinterface. The type is
    // InterfaceModeEnum. The default value is default.
    InterfaceModeNonPhysical interface{}

    // The bandwidth of the interface in kbps. The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Enable interface and line-protocol state change alarms. The type is
    // interface{}.
    LinkStatus interface{}

    // The description of this interface. The type is string.
    Description interface{}

    // Configure Laser-Squelch. The type is interface{}.
    LaserSquelch interface{}

    // Configure Holdoff Time. The type is interface{} with range: 0..3000.
    HoldoffTime interface{}

    // Configure Performance Monitoring . The type is interface{}.
    PerfMonDisable interface{}

    // configure maintenance embargo flag on the given interface. The type is
    // bool.
    MaintenanceEmbargo interface{}

    // User-Network Interface ID. The type is string with length: 1..64.
    UserNetworkInterface interface{}

    // Assign the interface to a VRF. The type is string with length: 1..32.
    Vrf interface{}

    // Track Name. The type is string with length: 1..32.
    TrackName interface{}

    // Enable Fast Shutdown for this interface. The type is interface{}.
    FastShutdown interface{}

    // Set the Mac address on an interface. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddr interface{}

    // Whether this interface's state changes are dampened or not.
    Dampening InterfaceConfigurations_InterfaceConfiguration_Dampening

    // The MTU configuration for the interface.
    Mtus InterfaceConfigurations_InterfaceConfiguration_Mtus

    // The encapsulation on the interface.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_Encapsulation

    // AAA configuration.
    AaaTable InterfaceConfigurations_InterfaceConfiguration_AaaTable

    // EthernetControl.
    EthernetControl InterfaceConfigurations_InterfaceConfiguration_EthernetControl

    // Precision Time Protocol interface configuration.
    Ptp InterfaceConfigurations_InterfaceConfiguration_Ptp

    // PW-Ether attributes.
    PseudowireEther InterfaceConfigurations_InterfaceConfiguration_PseudowireEther

    // PW-IW attributes.
    PseudowireIw InterfaceConfigurations_InterfaceConfiguration_PseudowireIw

    // BVI attributes.
    Bvi InterfaceConfigurations_InterfaceConfiguration_Bvi

    // Interface Layer 2 Transport service configuration data.
    L2Transport InterfaceConfigurations_InterfaceConfiguration_L2Transport

    // ATM Configuration.
    Atm InterfaceConfigurations_InterfaceConfiguration_Atm

    // BFD over bundle members configuration.
    Bfd InterfaceConfigurations_InterfaceConfiguration_Bfd

    // Generic per-bundle configuration.
    Bundle InterfaceConfigurations_InterfaceConfiguration_Bundle

    // Link Aggregation Control Protocol per-interface configuration (for bundle
    // or member).
    Lacp InterfaceConfigurations_InterfaceConfiguration_Lacp

    // Generic per-member configuration.
    BundleMember InterfaceConfigurations_InterfaceConfiguration_BundleMember

    // Multi-chassis LACP configuration.
    Mlacp InterfaceConfigurations_InterfaceConfiguration_Mlacp

    // Interface specific CDP configuration.
    Cdp InterfaceConfigurations_InterfaceConfiguration_Cdp

    // Optics controller configuration.
    Optics InterfaceConfigurations_InterfaceConfiguration_Optics

    // OTU port controller configuration.
    Otu InterfaceConfigurations_InterfaceConfiguration_Otu

    // MACSec service for an interface.
    Macsec InterfaceConfigurations_InterfaceConfiguration_Macsec

    // Interface Specific Dot1x Configuration.
    Dot1xInterface InterfaceConfigurations_InterfaceConfiguration_Dot1xInterface

    // Configure Extended loopback (diagnostics).
    Loopbacks InterfaceConfigurations_InterfaceConfiguration_Loopbacks

    // Ether specific interface configuration.
    Ethernet InterfaceConfigurations_InterfaceConfiguration_Ethernet

    // DWDM port controller configuration.
    Dwdm InterfaceConfigurations_InterfaceConfiguration_Dwdm

    // IEEE 802.1Q VLAN subinterface configuration.
    VlanSubConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration

    // Ethernet service configuration.
    EthernetService InterfaceConfigurations_InterfaceConfiguration_EthernetService

    // Ethernet Infra BNG specific configuration.
    EthernetBng InterfaceConfigurations_InterfaceConfiguration_EthernetBng

    // MAC Accounting Configuration.
    MacAccounting InterfaceConfigurations_InterfaceConfiguration_MacAccounting

    // Ethernet Features Configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_CarrierDelay

    // IEEE 802.1Q VLAN trunk interface configuration.
    VlanTrunkConfiguration InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration

    // nV Satellite Access Link Configuration.
    NvSatelliteAccess InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess

    // nV Satellite Fabric Link Configuration.
    NvSatelliteFabricLink InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink

    // Complex Network connection to one or more Satellites.
    NvSatelliteFabricNetwork InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork

    // Disable LLDP TX or RX.
    Lldp InterfaceConfigurations_InterfaceConfiguration_Lldp

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions

    // Flowspec on IPv4 interface.
    Ipv4FlowSpec InterfaceConfigurations_InterfaceConfiguration_Ipv4FlowSpec

    // Flowspec on IPv6 interface.
    Ipv6FlowSpec InterfaceConfigurations_InterfaceConfiguration_Ipv6FlowSpec

    // Frequency Synchronization interface configuration.
    FrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization

    // Interface control subscriber policy configuration.
    ServicePolicies InterfaceConfigurations_InterfaceConfiguration_ServicePolicies

    // Per-address-family and topology configuration.
    Afs InterfaceConfigurations_InterfaceConfiguration_Afs

    // Per-interface statistics configuration.
    Statistics InterfaceConfigurations_InterfaceConfiguration_Statistics

    // IPv6 Packet Filtering configuration for the interface.
    Ipv6PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter

    // ES Packet Filtering configuration for the interface.
    EsPacketFilter InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter

    // IPv4 Packet Filtering configuration for the interface.
    Ipv4PacketFilter InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter

    // Direct-Attached Gateway Redundancy configuration.
    Dagrs InterfaceConfigurations_InterfaceConfiguration_Dagrs

    // Configure Address Resolution Protocol.
    Ipv4arp InterfaceConfigurations_InterfaceConfiguration_Ipv4arp

    // Interface IPv4 dhcp-addres-client-options configuration.
    Ipv4DhcpClientConfig InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig

    // Interface IPv4 Network configuration data.
    Ipv4Network InterfaceConfigurations_InterfaceConfiguration_Ipv4Network

    // Interface IPv4 Network configuration data also used for forwarding.
    Ipv4NetworkForwarding InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding

    // Interface IPv6 Network configuration data.
    Ipv6Network InterfaceConfigurations_InterfaceConfiguration_Ipv6Network

    // IPv6 interface neighbor or neighbor discovery configuration.
    Ipv6Neighbor InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor

    // MPLS configuration under an interface.
    Mpls InterfaceConfigurations_InterfaceConfiguration_Mpls

    // MPLS tunnel attributes.
    TunnelTeAttributes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes

    // MPLS-TP tunnel attributes.
    TransportProfileTunnel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel

    // MPLS P2MP tunnel attributes.
    MteTunnelAttributes InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes

    // Interface PBR configuration.
    Pbr InterfaceConfigurations_InterfaceConfiguration_Pbr

    // Configure pm parameters.
    PerformanceManagement InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement

    // Interface PPP configuration data.
    CiscoIOSXRPppMaCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp

    // Interface PPP configuration data.
    CiscoIOSXRPppMaFsmCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp

    // Interface PPP configuration data.
    CiscoIOSXRPppMaIpcpCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp

    // Interface PPP configuration data.
    CiscoIOSXRPppMaIpcpiwCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp

    // Interface PPP configuration data.
    CiscoIOSXRPppMaLcpCfgPpp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp

    // SSRP Config.
    SsrpSession InterfaceConfigurations_InterfaceConfiguration_SsrpSession

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_Qos

    // Subscribers on interface.
    Subscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber

    // Interface PPPoE configuration data.
    Pppoe InterfaceConfigurations_InterfaceConfiguration_Pppoe

    // Interface netflow configuration.
    FlowProtocols InterfaceConfigurations_InterfaceConfiguration_FlowProtocols

    // IP over GRE encapsulation.
    TunnelIp InterfaceConfigurations_InterfaceConfiguration_TunnelIp

    // NVE operational data.
    Nve InterfaceConfigurations_InterfaceConfiguration_Nve

    // WANPHY port controller configuration.
    Wanphy InterfaceConfigurations_InterfaceConfiguration_Wanphy
}

func (interfaceConfiguration *InterfaceConfigurations_InterfaceConfiguration) GetEntityData() *types.CommonEntityData {
    interfaceConfiguration.EntityData.YFilter = interfaceConfiguration.YFilter
    interfaceConfiguration.EntityData.YangName = "interface-configuration"
    interfaceConfiguration.EntityData.BundleName = "cisco_ios_xr"
    interfaceConfiguration.EntityData.ParentYangName = "interface-configurations"
    interfaceConfiguration.EntityData.SegmentPath = "interface-configuration" + types.AddKeyToken(interfaceConfiguration.Active, "active") + types.AddKeyToken(interfaceConfiguration.InterfaceName, "interface-name")
    interfaceConfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/" + interfaceConfiguration.EntityData.SegmentPath
    interfaceConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceConfiguration.EntityData.Children = types.NewOrderedMap()
    interfaceConfiguration.EntityData.Children.Append("dampening", types.YChild{"Dampening", &interfaceConfiguration.Dampening})
    interfaceConfiguration.EntityData.Children.Append("mtus", types.YChild{"Mtus", &interfaceConfiguration.Mtus})
    interfaceConfiguration.EntityData.Children.Append("encapsulation", types.YChild{"Encapsulation", &interfaceConfiguration.Encapsulation})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table", types.YChild{"AaaTable", &interfaceConfiguration.AaaTable})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control", types.YChild{"EthernetControl", &interfaceConfiguration.EthernetControl})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ptp-cfg:ptp", types.YChild{"Ptp", &interfaceConfiguration.Ptp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether", types.YChild{"PseudowireEther", &interfaceConfiguration.PseudowireEther})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw", types.YChild{"PseudowireIw", &interfaceConfiguration.PseudowireIw})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2vpn-cfg:bvi", types.YChild{"Bvi", &interfaceConfiguration.Bvi})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2vpn-cfg:l2-transport", types.YChild{"L2Transport", &interfaceConfiguration.L2Transport})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-atm-vcm-cfg:atm", types.YChild{"Atm", &interfaceConfiguration.Atm})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-bundlemgr-cfg:bfd", types.YChild{"Bfd", &interfaceConfiguration.Bfd})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-bundlemgr-cfg:bundle", types.YChild{"Bundle", &interfaceConfiguration.Bundle})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-bundlemgr-cfg:lacp", types.YChild{"Lacp", &interfaceConfiguration.Lacp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-bundlemgr-cfg:bundle-member", types.YChild{"BundleMember", &interfaceConfiguration.BundleMember})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-bundlemgr-cfg:mlacp", types.YChild{"Mlacp", &interfaceConfiguration.Mlacp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-cdp-cfg:cdp", types.YChild{"Cdp", &interfaceConfiguration.Cdp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-controller-optics-cfg:optics", types.YChild{"Optics", &interfaceConfiguration.Optics})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-controller-otu-cfg:otu", types.YChild{"Otu", &interfaceConfiguration.Otu})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec", types.YChild{"Macsec", &interfaceConfiguration.Macsec})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface", types.YChild{"Dot1xInterface", &interfaceConfiguration.Dot1xInterface})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks", types.YChild{"Loopbacks", &interfaceConfiguration.Loopbacks})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-drivers-media-eth-cfg:ethernet", types.YChild{"Ethernet", &interfaceConfiguration.Ethernet})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-dwdm-ui-cfg:dwdm", types.YChild{"Dwdm", &interfaceConfiguration.Dwdm})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration", types.YChild{"VlanSubConfiguration", &interfaceConfiguration.VlanSubConfiguration})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service", types.YChild{"EthernetService", &interfaceConfiguration.EthernetService})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng", types.YChild{"EthernetBng", &interfaceConfiguration.EthernetBng})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting", types.YChild{"MacAccounting", &interfaceConfiguration.MacAccounting})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features", types.YChild{"EthernetFeatures", &interfaceConfiguration.EthernetFeatures})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay", types.YChild{"CarrierDelay", &interfaceConfiguration.CarrierDelay})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration", types.YChild{"VlanTrunkConfiguration", &interfaceConfiguration.VlanTrunkConfiguration})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access", types.YChild{"NvSatelliteAccess", &interfaceConfiguration.NvSatelliteAccess})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link", types.YChild{"NvSatelliteFabricLink", &interfaceConfiguration.NvSatelliteFabricLink})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network", types.YChild{"NvSatelliteFabricNetwork", &interfaceConfiguration.NvSatelliteFabricNetwork})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ethernet-lldp-cfg:lldp", types.YChild{"Lldp", &interfaceConfiguration.Lldp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions", types.YChild{"SpanMonitorSessions", &interfaceConfiguration.SpanMonitorSessions})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-flowspec-cfg:ipv4-flow-spec", types.YChild{"Ipv4FlowSpec", &interfaceConfiguration.Ipv4FlowSpec})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-flowspec-cfg:ipv6-flow-spec", types.YChild{"Ipv6FlowSpec", &interfaceConfiguration.Ipv6FlowSpec})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-freqsync-cfg:frequency-synchronization", types.YChild{"FrequencySynchronization", &interfaceConfiguration.FrequencySynchronization})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-iedge4710-cfg:service-policies", types.YChild{"ServicePolicies", &interfaceConfiguration.ServicePolicies})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-infra-rsi-cfg:afs", types.YChild{"Afs", &interfaceConfiguration.Afs})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-infra-statsd-cfg:statistics", types.YChild{"Statistics", &interfaceConfiguration.Statistics})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter", types.YChild{"Ipv6PacketFilter", &interfaceConfiguration.Ipv6PacketFilter})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter", types.YChild{"EsPacketFilter", &interfaceConfiguration.EsPacketFilter})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter", types.YChild{"Ipv4PacketFilter", &interfaceConfiguration.Ipv4PacketFilter})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv4-arp-cfg:dagrs", types.YChild{"Dagrs", &interfaceConfiguration.Dagrs})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp", types.YChild{"Ipv4arp", &interfaceConfiguration.Ipv4arp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv4-dc-cfg:ipv4-dhcp-client-config", types.YChild{"Ipv4DhcpClientConfig", &interfaceConfiguration.Ipv4DhcpClientConfig})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv4-io-cfg:ipv4-network", types.YChild{"Ipv4Network", &interfaceConfiguration.Ipv4Network})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding", types.YChild{"Ipv4NetworkForwarding", &interfaceConfiguration.Ipv4NetworkForwarding})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network", types.YChild{"Ipv6Network", &interfaceConfiguration.Ipv6Network})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor", types.YChild{"Ipv6Neighbor", &interfaceConfiguration.Ipv6Neighbor})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-mpls-io-cfg:mpls", types.YChild{"Mpls", &interfaceConfiguration.Mpls})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes", types.YChild{"TunnelTeAttributes", &interfaceConfiguration.TunnelTeAttributes})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel", types.YChild{"TransportProfileTunnel", &interfaceConfiguration.TransportProfileTunnel})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes", types.YChild{"MteTunnelAttributes", &interfaceConfiguration.MteTunnelAttributes})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-pbr-cfg:pbr", types.YChild{"Pbr", &interfaceConfiguration.Pbr})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-pmengine-cfg:performance-management", types.YChild{"PerformanceManagement", &interfaceConfiguration.PerformanceManagement})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-cfg:ppp", types.YChild{"CiscoIOSXRPppMaCfgPpp", &interfaceConfiguration.CiscoIOSXRPppMaCfgPpp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp", types.YChild{"CiscoIOSXRPppMaFsmCfgPpp", &interfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp", types.YChild{"CiscoIOSXRPppMaIpcpCfgPpp", &interfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp", types.YChild{"CiscoIOSXRPppMaIpcpiwCfgPpp", &interfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp", types.YChild{"CiscoIOSXRPppMaLcpCfgPpp", &interfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session", types.YChild{"SsrpSession", &interfaceConfiguration.SsrpSession})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-cfg:qos", types.YChild{"Qos", &interfaceConfiguration.Qos})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber", types.YChild{"Subscriber", &interfaceConfiguration.Subscriber})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe", types.YChild{"Pppoe", &interfaceConfiguration.Pppoe})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols", types.YChild{"FlowProtocols", &interfaceConfiguration.FlowProtocols})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip", types.YChild{"TunnelIp", &interfaceConfiguration.TunnelIp})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-tunnel-nve-cfg:nve", types.YChild{"Nve", &interfaceConfiguration.Nve})
    interfaceConfiguration.EntityData.Children.Append("Cisco-IOS-XR-wanphy-ui-cfg:wanphy", types.YChild{"Wanphy", &interfaceConfiguration.Wanphy})
    interfaceConfiguration.EntityData.Leafs = types.NewOrderedMap()
    interfaceConfiguration.EntityData.Leafs.Append("active", types.YLeaf{"Active", interfaceConfiguration.Active})
    interfaceConfiguration.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceConfiguration.InterfaceName})
    interfaceConfiguration.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", interfaceConfiguration.Shutdown})
    interfaceConfiguration.EntityData.Leafs.Append("interface-virtual", types.YLeaf{"InterfaceVirtual", interfaceConfiguration.InterfaceVirtual})
    interfaceConfiguration.EntityData.Leafs.Append("secondary-admin-state", types.YLeaf{"SecondaryAdminState", interfaceConfiguration.SecondaryAdminState})
    interfaceConfiguration.EntityData.Leafs.Append("interface-mode-non-physical", types.YLeaf{"InterfaceModeNonPhysical", interfaceConfiguration.InterfaceModeNonPhysical})
    interfaceConfiguration.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", interfaceConfiguration.Bandwidth})
    interfaceConfiguration.EntityData.Leafs.Append("link-status", types.YLeaf{"LinkStatus", interfaceConfiguration.LinkStatus})
    interfaceConfiguration.EntityData.Leafs.Append("description", types.YLeaf{"Description", interfaceConfiguration.Description})
    interfaceConfiguration.EntityData.Leafs.Append("laser-squelch", types.YLeaf{"LaserSquelch", interfaceConfiguration.LaserSquelch})
    interfaceConfiguration.EntityData.Leafs.Append("holdoff-time", types.YLeaf{"HoldoffTime", interfaceConfiguration.HoldoffTime})
    interfaceConfiguration.EntityData.Leafs.Append("perf-mon-disable", types.YLeaf{"PerfMonDisable", interfaceConfiguration.PerfMonDisable})
    interfaceConfiguration.EntityData.Leafs.Append("maintenance-embargo", types.YLeaf{"MaintenanceEmbargo", interfaceConfiguration.MaintenanceEmbargo})
    interfaceConfiguration.EntityData.Leafs.Append("user-network-interface", types.YLeaf{"UserNetworkInterface", interfaceConfiguration.UserNetworkInterface})
    interfaceConfiguration.EntityData.Leafs.Append("vrf", types.YLeaf{"Vrf", interfaceConfiguration.Vrf})
    interfaceConfiguration.EntityData.Leafs.Append("track-name", types.YLeaf{"TrackName", interfaceConfiguration.TrackName})
    interfaceConfiguration.EntityData.Leafs.Append("fast-shutdown", types.YLeaf{"FastShutdown", interfaceConfiguration.FastShutdown})
    interfaceConfiguration.EntityData.Leafs.Append("mac-addr", types.YLeaf{"MacAddr", interfaceConfiguration.MacAddr})

    interfaceConfiguration.EntityData.YListKeys = []string {"Active", "InterfaceName"}

    return &(interfaceConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dampening
// Whether this interface's state changes are
// dampened or not
type InterfaceConfigurations_InterfaceConfiguration_Dampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dampening Arguments. The type is Args.
    Args interface{}

    // Decay half life (in minutes). The type is interface{} with range: 1..45.
    // Units are minute.
    HalfLife interface{}

    // Reuse threshold. The type is interface{} with range: 1..20000.
    ReuseThreshold interface{}

    // Suppress threshold. The type is interface{} with range: 1..20000.
    SuppressThreshold interface{}

    // Max suppress time (in minutes). The type is interface{} with range: 1..255.
    // Units are minute.
    SuppressTime interface{}

    // Restart penalty. The type is interface{} with range: 0..20000.
    RestartPenalty interface{}
}

func (dampening *InterfaceConfigurations_InterfaceConfiguration_Dampening) GetEntityData() *types.CommonEntityData {
    dampening.EntityData.YFilter = dampening.YFilter
    dampening.EntityData.YangName = "dampening"
    dampening.EntityData.BundleName = "cisco_ios_xr"
    dampening.EntityData.ParentYangName = "interface-configuration"
    dampening.EntityData.SegmentPath = "dampening"
    dampening.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + dampening.EntityData.SegmentPath
    dampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dampening.EntityData.Children = types.NewOrderedMap()
    dampening.EntityData.Leafs = types.NewOrderedMap()
    dampening.EntityData.Leafs.Append("args", types.YLeaf{"Args", dampening.Args})
    dampening.EntityData.Leafs.Append("half-life", types.YLeaf{"HalfLife", dampening.HalfLife})
    dampening.EntityData.Leafs.Append("reuse-threshold", types.YLeaf{"ReuseThreshold", dampening.ReuseThreshold})
    dampening.EntityData.Leafs.Append("suppress-threshold", types.YLeaf{"SuppressThreshold", dampening.SuppressThreshold})
    dampening.EntityData.Leafs.Append("suppress-time", types.YLeaf{"SuppressTime", dampening.SuppressTime})
    dampening.EntityData.Leafs.Append("restart-penalty", types.YLeaf{"RestartPenalty", dampening.RestartPenalty})

    dampening.EntityData.YListKeys = []string {}

    return &(dampening.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dampening_Args represents Dampening Arguments
type InterfaceConfigurations_InterfaceConfiguration_Dampening_Args string

const (
    // Default values
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_default_values InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "default-values"

    // Half Life Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_half_life InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-half-life"

    // All Arguments except Restart Penalty
    // Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_all InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-all"

    // All Arguments Specified
    InterfaceConfigurations_InterfaceConfiguration_Dampening_Args_specify_rp InterfaceConfigurations_InterfaceConfiguration_Dampening_Args = "specify-rp"
)

// InterfaceConfigurations_InterfaceConfiguration_Mtus
// The MTU configuration for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MTU for the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu.
    Mtu []*InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
}

func (mtus *InterfaceConfigurations_InterfaceConfiguration_Mtus) GetEntityData() *types.CommonEntityData {
    mtus.EntityData.YFilter = mtus.YFilter
    mtus.EntityData.YangName = "mtus"
    mtus.EntityData.BundleName = "cisco_ios_xr"
    mtus.EntityData.ParentYangName = "interface-configuration"
    mtus.EntityData.SegmentPath = "mtus"
    mtus.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + mtus.EntityData.SegmentPath
    mtus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtus.EntityData.Children = types.NewOrderedMap()
    mtus.EntityData.Children.Append("mtu", types.YChild{"Mtu", nil})
    for i := range mtus.Mtu {
        mtus.EntityData.Children.Append(types.GetSegmentPath(mtus.Mtu[i]), types.YChild{"Mtu", mtus.Mtu[i]})
    }
    mtus.EntityData.Leafs = types.NewOrderedMap()

    mtus.EntityData.YListKeys = []string {}

    return &(mtus.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu
// The MTU for the interface
type InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Owner of the interface - eg. for 'LoopbackX'
    // main interface this is 'loopback'. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Owner interface{}

    // The MTU value. The type is interface{} with range: 64..65535. This
    // attribute is mandatory.
    Mtu interface{}
}

func (mtu *InterfaceConfigurations_InterfaceConfiguration_Mtus_Mtu) GetEntityData() *types.CommonEntityData {
    mtu.EntityData.YFilter = mtu.YFilter
    mtu.EntityData.YangName = "mtu"
    mtu.EntityData.BundleName = "cisco_ios_xr"
    mtu.EntityData.ParentYangName = "mtus"
    mtu.EntityData.SegmentPath = "mtu" + types.AddKeyToken(mtu.Owner, "owner")
    mtu.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/mtus/" + mtu.EntityData.SegmentPath
    mtu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtu.EntityData.Children = types.NewOrderedMap()
    mtu.EntityData.Leafs = types.NewOrderedMap()
    mtu.EntityData.Leafs.Append("owner", types.YLeaf{"Owner", mtu.Owner})
    mtu.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", mtu.Mtu})

    mtu.EntityData.YListKeys = []string {"Owner"}

    return &(mtu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Encapsulation
// The encapsulation on the interface
type InterfaceConfigurations_InterfaceConfiguration_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The encapsulation - e.g. hdlc, ppp. The type is string.
    Encapsulation interface{}

    // The options for this capsulation, usually '0'. The type is interface{} with
    // range: 0..4294967295.
    CapsulationOptions interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "cisco_ios_xr"
    encapsulation.EntityData.ParentYangName = "interface-configuration"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + encapsulation.EntityData.SegmentPath
    encapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    encapsulation.EntityData.Children = types.NewOrderedMap()
    encapsulation.EntityData.Leafs = types.NewOrderedMap()
    encapsulation.EntityData.Leafs.Append("encapsulation", types.YLeaf{"Encapsulation", encapsulation.Encapsulation})
    encapsulation.EntityData.Leafs.Append("capsulation-options", types.YLeaf{"CapsulationOptions", encapsulation.CapsulationOptions})

    encapsulation.EntityData.YListKeys = []string {}

    return &(encapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable
// AAA configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA radius configuration.
    Radius InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
}

func (aaaTable *InterfaceConfigurations_InterfaceConfiguration_AaaTable) GetEntityData() *types.CommonEntityData {
    aaaTable.EntityData.YFilter = aaaTable.YFilter
    aaaTable.EntityData.YangName = "aaa-table"
    aaaTable.EntityData.BundleName = "cisco_ios_xr"
    aaaTable.EntityData.ParentYangName = "interface-configuration"
    aaaTable.EntityData.SegmentPath = "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"
    aaaTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + aaaTable.EntityData.SegmentPath
    aaaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aaaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aaaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aaaTable.EntityData.Children = types.NewOrderedMap()
    aaaTable.EntityData.Children.Append("radius", types.YChild{"Radius", &aaaTable.Radius})
    aaaTable.EntityData.Leafs = types.NewOrderedMap()

    aaaTable.EntityData.YListKeys = []string {}

    return &(aaaTable.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius
// AAA radius configuration
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA radius attribute.
    Attribute InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
}

func (radius *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius) GetEntityData() *types.CommonEntityData {
    radius.EntityData.YFilter = radius.YFilter
    radius.EntityData.YangName = "radius"
    radius.EntityData.BundleName = "cisco_ios_xr"
    radius.EntityData.ParentYangName = "aaa-table"
    radius.EntityData.SegmentPath = "radius"
    radius.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table/" + radius.EntityData.SegmentPath
    radius.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radius.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radius.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radius.EntityData.Children = types.NewOrderedMap()
    radius.EntityData.Children.Append("attribute", types.YChild{"Attribute", &radius.Attribute})
    radius.EntityData.Leafs = types.NewOrderedMap()

    radius.EntityData.YListKeys = []string {}

    return &(radius.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute
// AAA radius attribute
type InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AAA nas-port-type attribute. The type is NasPortValue.
    NasPortType interface{}

    // AAA nas-identifier attribute. The type is string.
    NasIdentifier interface{}
}

func (attribute *InterfaceConfigurations_InterfaceConfiguration_AaaTable_Radius_Attribute) GetEntityData() *types.CommonEntityData {
    attribute.EntityData.YFilter = attribute.YFilter
    attribute.EntityData.YangName = "attribute"
    attribute.EntityData.BundleName = "cisco_ios_xr"
    attribute.EntityData.ParentYangName = "radius"
    attribute.EntityData.SegmentPath = "attribute"
    attribute.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table/radius/" + attribute.EntityData.SegmentPath
    attribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attribute.EntityData.Children = types.NewOrderedMap()
    attribute.EntityData.Leafs = types.NewOrderedMap()
    attribute.EntityData.Leafs.Append("nas-port-type", types.YLeaf{"NasPortType", attribute.NasPortType})
    attribute.EntityData.Leafs.Append("nas-identifier", types.YLeaf{"NasIdentifier", attribute.NasIdentifier})

    attribute.EntityData.YListKeys = []string {}

    return &(attribute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl
// EthernetControl
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the transport mode on an interface. The type is EtherCtrlTransportMode.
    TransportMode interface{}

    // Enable small frame padding on an interface. The type is interface{}.
    SmallFramePadding interface{}

    // Transceiver.
    Transceiver InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
}

func (ethernetControl *InterfaceConfigurations_InterfaceConfiguration_EthernetControl) GetEntityData() *types.CommonEntityData {
    ethernetControl.EntityData.YFilter = ethernetControl.YFilter
    ethernetControl.EntityData.YangName = "ethernet-control"
    ethernetControl.EntityData.BundleName = "cisco_ios_xr"
    ethernetControl.EntityData.ParentYangName = "interface-configuration"
    ethernetControl.EntityData.SegmentPath = "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"
    ethernetControl.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ethernetControl.EntityData.SegmentPath
    ethernetControl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetControl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetControl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetControl.EntityData.Children = types.NewOrderedMap()
    ethernetControl.EntityData.Children.Append("transceiver", types.YChild{"Transceiver", &ethernetControl.Transceiver})
    ethernetControl.EntityData.Leafs = types.NewOrderedMap()
    ethernetControl.EntityData.Leafs.Append("transport-mode", types.YLeaf{"TransportMode", ethernetControl.TransportMode})
    ethernetControl.EntityData.Leafs.Append("small-frame-padding", types.YLeaf{"SmallFramePadding", ethernetControl.SmallFramePadding})

    ethernetControl.EntityData.YListKeys = []string {}

    return &(ethernetControl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver
// Transceiver
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Permit.
    Permit InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
}

func (transceiver *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver) GetEntityData() *types.CommonEntityData {
    transceiver.EntityData.YFilter = transceiver.YFilter
    transceiver.EntityData.YangName = "transceiver"
    transceiver.EntityData.BundleName = "cisco_ios_xr"
    transceiver.EntityData.ParentYangName = "ethernet-control"
    transceiver.EntityData.SegmentPath = "transceiver"
    transceiver.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control/" + transceiver.EntityData.SegmentPath
    transceiver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transceiver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transceiver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transceiver.EntityData.Children = types.NewOrderedMap()
    transceiver.EntityData.Children.Append("permit", types.YChild{"Permit", &transceiver.Permit})
    transceiver.EntityData.Leafs = types.NewOrderedMap()

    transceiver.EntityData.YListKeys = []string {}

    return &(transceiver.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit
// Permit
type InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Permit pluggable type all. The type is PermitPluggable.
    Type interface{}

    // Permit pluggable PID (Product ID) all. The type is PermitPluggablePid.
    Pid interface{}
}

func (permit *InterfaceConfigurations_InterfaceConfiguration_EthernetControl_Transceiver_Permit) GetEntityData() *types.CommonEntityData {
    permit.EntityData.YFilter = permit.YFilter
    permit.EntityData.YangName = "permit"
    permit.EntityData.BundleName = "cisco_ios_xr"
    permit.EntityData.ParentYangName = "transceiver"
    permit.EntityData.SegmentPath = "permit"
    permit.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control/transceiver/" + permit.EntityData.SegmentPath
    permit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    permit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    permit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    permit.EntityData.Children = types.NewOrderedMap()
    permit.EntityData.Leafs = types.NewOrderedMap()
    permit.EntityData.Leafs.Append("type", types.YLeaf{"Type", permit.Type})
    permit.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", permit.Pid})

    permit.EntityData.YListKeys = []string {}

    return &(permit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp
// Precision Time Protocol interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    SyncGrantDuration interface{}

    // General COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    GeneralCos interface{}

    // Enable the precision time protocol. The type is interface{}.
    Enable interface{}

    // Sync timeout, in milliseconds. The type is interface{} with range:
    // 100..100000. Units are millisecond. The default value is 5000.
    SyncTimeout interface{}

    // Transport. The type is PtpEncap. The default value is ipv4.
    Transport interface{}

    // Precision Time Protocol configuration profile. The type is string.
    Profile interface{}

    // Announce Timeout. The type is interface{} with range: 2..10. The default
    // value is 3.
    AnnounceTimeout interface{}

    // COS. The type is interface{} with range: 0..7. The default value is 6.
    Cos interface{}

    // IPv4 TTL. The type is interface{} with range: 1..255. The default value is
    // 255.
    Ipv4ttl interface{}

    // Port state restriction. The type is PtpPortState. The default value is any.
    PortState interface{}

    // Delay-Response timeout, in milliseconds. The type is interface{} with
    // range: 100..100000. Units are millisecond. The default value is 5000.
    DelayResponseTimeout interface{}

    // Local priority. The type is interface{} with range: 1..255. The default
    // value is 128.
    LocalPriority interface{}

    // Delay-Response unicast grant duration, in seconds. The type is interface{}
    // with range: 60..1000. Units are second. The default value is 300.
    DelayResponseGrantDuration interface{}

    // Event COS. The type is interface{} with range: 0..7. The default value is
    // 6.
    EventCos interface{}

    // DSCP. The type is interface{} with range: 0..63. The default value is 46.
    Dscp interface{}

    // IPv6 Hop Limit. The type is interface{} with range: 1..255. The default
    // value is 255.
    Ipv6HopLimit interface{}

    // General DSCP. The type is interface{} with range: 0..63. The default value
    // is 46.
    GeneralDscp interface{}

    // Clock Operation. The type is PtpClockOperation. The default value is
    // two-step.
    ClockOperation interface{}

    // Announce unicast grant duration, in seconds. The type is interface{} with
    // range: 60..1000. Units are second. The default value is 300.
    AnnounceGrantDuration interface{}

    // Invalid unicast grant request response. The type is
    // PtpInvalidUnicastGrantRequestResponse. The default value is reduce.
    UnicastGrantInvalidRequest interface{}

    // Event DSCP. The type is interface{} with range: 0..63. The default value is
    // 46.
    EventDscp interface{}

    // Source IPv6 Address.
    SourceIpv6Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address

    // Announce interval.
    AnnounceInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval

    // Table for interop configuration.
    Interop InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop

    // Source IPv4 Address.
    SourceIpv4Address InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address

    // Table for slave configuration.
    Slaves InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves

    // Sync interval.
    SyncInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval

    // Table for master configuration.
    Masters InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters

    // Communication model.
    Communication InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication

    // Minimum delay request interval.
    DelayRequestMinimumInterval InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
}

func (ptp *InterfaceConfigurations_InterfaceConfiguration_Ptp) GetEntityData() *types.CommonEntityData {
    ptp.EntityData.YFilter = ptp.YFilter
    ptp.EntityData.YangName = "ptp"
    ptp.EntityData.BundleName = "cisco_ios_xr"
    ptp.EntityData.ParentYangName = "interface-configuration"
    ptp.EntityData.SegmentPath = "Cisco-IOS-XR-ptp-cfg:ptp"
    ptp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ptp.EntityData.SegmentPath
    ptp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ptp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ptp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ptp.EntityData.Children = types.NewOrderedMap()
    ptp.EntityData.Children.Append("source-ipv6-address", types.YChild{"SourceIpv6Address", &ptp.SourceIpv6Address})
    ptp.EntityData.Children.Append("announce-interval", types.YChild{"AnnounceInterval", &ptp.AnnounceInterval})
    ptp.EntityData.Children.Append("interop", types.YChild{"Interop", &ptp.Interop})
    ptp.EntityData.Children.Append("source-ipv4-address", types.YChild{"SourceIpv4Address", &ptp.SourceIpv4Address})
    ptp.EntityData.Children.Append("slaves", types.YChild{"Slaves", &ptp.Slaves})
    ptp.EntityData.Children.Append("sync-interval", types.YChild{"SyncInterval", &ptp.SyncInterval})
    ptp.EntityData.Children.Append("masters", types.YChild{"Masters", &ptp.Masters})
    ptp.EntityData.Children.Append("communication", types.YChild{"Communication", &ptp.Communication})
    ptp.EntityData.Children.Append("delay-request-minimum-interval", types.YChild{"DelayRequestMinimumInterval", &ptp.DelayRequestMinimumInterval})
    ptp.EntityData.Leafs = types.NewOrderedMap()
    ptp.EntityData.Leafs.Append("sync-grant-duration", types.YLeaf{"SyncGrantDuration", ptp.SyncGrantDuration})
    ptp.EntityData.Leafs.Append("general-cos", types.YLeaf{"GeneralCos", ptp.GeneralCos})
    ptp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", ptp.Enable})
    ptp.EntityData.Leafs.Append("sync-timeout", types.YLeaf{"SyncTimeout", ptp.SyncTimeout})
    ptp.EntityData.Leafs.Append("transport", types.YLeaf{"Transport", ptp.Transport})
    ptp.EntityData.Leafs.Append("profile", types.YLeaf{"Profile", ptp.Profile})
    ptp.EntityData.Leafs.Append("announce-timeout", types.YLeaf{"AnnounceTimeout", ptp.AnnounceTimeout})
    ptp.EntityData.Leafs.Append("cos", types.YLeaf{"Cos", ptp.Cos})
    ptp.EntityData.Leafs.Append("ipv4ttl", types.YLeaf{"Ipv4ttl", ptp.Ipv4ttl})
    ptp.EntityData.Leafs.Append("port-state", types.YLeaf{"PortState", ptp.PortState})
    ptp.EntityData.Leafs.Append("delay-response-timeout", types.YLeaf{"DelayResponseTimeout", ptp.DelayResponseTimeout})
    ptp.EntityData.Leafs.Append("local-priority", types.YLeaf{"LocalPriority", ptp.LocalPriority})
    ptp.EntityData.Leafs.Append("delay-response-grant-duration", types.YLeaf{"DelayResponseGrantDuration", ptp.DelayResponseGrantDuration})
    ptp.EntityData.Leafs.Append("event-cos", types.YLeaf{"EventCos", ptp.EventCos})
    ptp.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", ptp.Dscp})
    ptp.EntityData.Leafs.Append("ipv6-hop-limit", types.YLeaf{"Ipv6HopLimit", ptp.Ipv6HopLimit})
    ptp.EntityData.Leafs.Append("general-dscp", types.YLeaf{"GeneralDscp", ptp.GeneralDscp})
    ptp.EntityData.Leafs.Append("clock-operation", types.YLeaf{"ClockOperation", ptp.ClockOperation})
    ptp.EntityData.Leafs.Append("announce-grant-duration", types.YLeaf{"AnnounceGrantDuration", ptp.AnnounceGrantDuration})
    ptp.EntityData.Leafs.Append("unicast-grant-invalid-request", types.YLeaf{"UnicastGrantInvalidRequest", ptp.UnicastGrantInvalidRequest})
    ptp.EntityData.Leafs.Append("event-dscp", types.YLeaf{"EventDscp", ptp.EventDscp})

    ptp.EntityData.YListKeys = []string {}

    return &(ptp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address
// Source IPv6 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable source IPv6 address. The type is bool.
    Enable interface{}

    // Source IPv6 address to use. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceIpv6 interface{}
}

func (sourceIpv6Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv6Address) GetEntityData() *types.CommonEntityData {
    sourceIpv6Address.EntityData.YFilter = sourceIpv6Address.YFilter
    sourceIpv6Address.EntityData.YangName = "source-ipv6-address"
    sourceIpv6Address.EntityData.BundleName = "cisco_ios_xr"
    sourceIpv6Address.EntityData.ParentYangName = "ptp"
    sourceIpv6Address.EntityData.SegmentPath = "source-ipv6-address"
    sourceIpv6Address.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + sourceIpv6Address.EntityData.SegmentPath
    sourceIpv6Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceIpv6Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceIpv6Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceIpv6Address.EntityData.Children = types.NewOrderedMap()
    sourceIpv6Address.EntityData.Leafs = types.NewOrderedMap()
    sourceIpv6Address.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", sourceIpv6Address.Enable})
    sourceIpv6Address.EntityData.Leafs.Append("source-ipv6", types.YLeaf{"SourceIpv6", sourceIpv6Address.SourceIpv6})

    sourceIpv6Address.EntityData.YListKeys = []string {}

    return &(sourceIpv6Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval
// Announce interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 2.
    TimePeriod interface{}
}

func (announceInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_AnnounceInterval) GetEntityData() *types.CommonEntityData {
    announceInterval.EntityData.YFilter = announceInterval.YFilter
    announceInterval.EntityData.YangName = "announce-interval"
    announceInterval.EntityData.BundleName = "cisco_ios_xr"
    announceInterval.EntityData.ParentYangName = "ptp"
    announceInterval.EntityData.SegmentPath = "announce-interval"
    announceInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + announceInterval.EntityData.SegmentPath
    announceInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    announceInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    announceInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    announceInterval.EntityData.Children = types.NewOrderedMap()
    announceInterval.EntityData.Leafs = types.NewOrderedMap()
    announceInterval.EntityData.Leafs.Append("time-type", types.YLeaf{"TimeType", announceInterval.TimeType})
    announceInterval.EntityData.Leafs.Append("time-period", types.YLeaf{"TimePeriod", announceInterval.TimePeriod})

    announceInterval.EntityData.YListKeys = []string {}

    return &(announceInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop
// Table for interop configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Profile to interoperate with. The type is PtpClockProfile.
    Profile interface{}

    // Domain number of the peer clock. The type is interface{} with range:
    // 0..255.
    Domain interface{}

    // Iteroperation configuration to be used on egress.
    EgressConversion InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion

    // Iteroperation configuration to be used on ingress.
    IngressConversion InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion
}

func (interop *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop) GetEntityData() *types.CommonEntityData {
    interop.EntityData.YFilter = interop.YFilter
    interop.EntityData.YangName = "interop"
    interop.EntityData.BundleName = "cisco_ios_xr"
    interop.EntityData.ParentYangName = "ptp"
    interop.EntityData.SegmentPath = "interop"
    interop.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + interop.EntityData.SegmentPath
    interop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interop.EntityData.Children = types.NewOrderedMap()
    interop.EntityData.Children.Append("egress-conversion", types.YChild{"EgressConversion", &interop.EgressConversion})
    interop.EntityData.Children.Append("ingress-conversion", types.YChild{"IngressConversion", &interop.IngressConversion})
    interop.EntityData.Leafs = types.NewOrderedMap()
    interop.EntityData.Leafs.Append("profile", types.YLeaf{"Profile", interop.Profile})
    interop.EntityData.Leafs.Append("domain", types.YLeaf{"Domain", interop.Domain})

    interop.EntityData.YListKeys = []string {}

    return &(interop.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion
// Iteroperation configuration to be used on
// egress
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Clock Accuracy value to use for the peer clock. The type is interface{}
    // with range: 0..254.
    ClockAccuracy interface{}

    // Priority2 value to use for the peer clock. The type is interface{} with
    // range: 0..255.
    Priority2 interface{}

    // Default clock class to use when a more specific mapping is not available.
    // The type is interface{} with range: 0..255.
    ClockClassDefault interface{}

    // OSLV value to use for the peer clock. The type is interface{} with range:
    // 0..65535.
    OffsetScaledLogVariance interface{}

    // Priority1 value to use for the peer clock. The type is interface{} with
    // range: 0..255.
    Priority1 interface{}

    // Table for specific mappings for given clock class values.
    ClockClassMappings InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings
}

func (egressConversion *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion) GetEntityData() *types.CommonEntityData {
    egressConversion.EntityData.YFilter = egressConversion.YFilter
    egressConversion.EntityData.YangName = "egress-conversion"
    egressConversion.EntityData.BundleName = "cisco_ios_xr"
    egressConversion.EntityData.ParentYangName = "interop"
    egressConversion.EntityData.SegmentPath = "egress-conversion"
    egressConversion.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/" + egressConversion.EntityData.SegmentPath
    egressConversion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egressConversion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egressConversion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egressConversion.EntityData.Children = types.NewOrderedMap()
    egressConversion.EntityData.Children.Append("clock-class-mappings", types.YChild{"ClockClassMappings", &egressConversion.ClockClassMappings})
    egressConversion.EntityData.Leafs = types.NewOrderedMap()
    egressConversion.EntityData.Leafs.Append("clock-accuracy", types.YLeaf{"ClockAccuracy", egressConversion.ClockAccuracy})
    egressConversion.EntityData.Leafs.Append("priority2", types.YLeaf{"Priority2", egressConversion.Priority2})
    egressConversion.EntityData.Leafs.Append("clock-class-default", types.YLeaf{"ClockClassDefault", egressConversion.ClockClassDefault})
    egressConversion.EntityData.Leafs.Append("offset-scaled-log-variance", types.YLeaf{"OffsetScaledLogVariance", egressConversion.OffsetScaledLogVariance})
    egressConversion.EntityData.Leafs.Append("priority1", types.YLeaf{"Priority1", egressConversion.Priority1})

    egressConversion.EntityData.YListKeys = []string {}

    return &(egressConversion.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings
// Table for specific mappings for given clock
// class values
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping for a given clock class value. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings_ClockClassMapping.
    ClockClassMapping []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings_ClockClassMapping
}

func (clockClassMappings *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings) GetEntityData() *types.CommonEntityData {
    clockClassMappings.EntityData.YFilter = clockClassMappings.YFilter
    clockClassMappings.EntityData.YangName = "clock-class-mappings"
    clockClassMappings.EntityData.BundleName = "cisco_ios_xr"
    clockClassMappings.EntityData.ParentYangName = "egress-conversion"
    clockClassMappings.EntityData.SegmentPath = "clock-class-mappings"
    clockClassMappings.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/egress-conversion/" + clockClassMappings.EntityData.SegmentPath
    clockClassMappings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockClassMappings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockClassMappings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockClassMappings.EntityData.Children = types.NewOrderedMap()
    clockClassMappings.EntityData.Children.Append("clock-class-mapping", types.YChild{"ClockClassMapping", nil})
    for i := range clockClassMappings.ClockClassMapping {
        clockClassMappings.EntityData.Children.Append(types.GetSegmentPath(clockClassMappings.ClockClassMapping[i]), types.YChild{"ClockClassMapping", clockClassMappings.ClockClassMapping[i]})
    }
    clockClassMappings.EntityData.Leafs = types.NewOrderedMap()

    clockClassMappings.EntityData.YListKeys = []string {}

    return &(clockClassMappings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings_ClockClassMapping
// Mapping for a given clock class value
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings_ClockClassMapping struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Clock Class to map from. The type is interface{}
    // with range: 0..255.
    ClockClassFrom interface{}

    // Clock class to map to. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    ClockClassTo interface{}
}

func (clockClassMapping *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_EgressConversion_ClockClassMappings_ClockClassMapping) GetEntityData() *types.CommonEntityData {
    clockClassMapping.EntityData.YFilter = clockClassMapping.YFilter
    clockClassMapping.EntityData.YangName = "clock-class-mapping"
    clockClassMapping.EntityData.BundleName = "cisco_ios_xr"
    clockClassMapping.EntityData.ParentYangName = "clock-class-mappings"
    clockClassMapping.EntityData.SegmentPath = "clock-class-mapping" + types.AddKeyToken(clockClassMapping.ClockClassFrom, "clock-class-from")
    clockClassMapping.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/egress-conversion/clock-class-mappings/" + clockClassMapping.EntityData.SegmentPath
    clockClassMapping.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockClassMapping.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockClassMapping.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockClassMapping.EntityData.Children = types.NewOrderedMap()
    clockClassMapping.EntityData.Leafs = types.NewOrderedMap()
    clockClassMapping.EntityData.Leafs.Append("clock-class-from", types.YLeaf{"ClockClassFrom", clockClassMapping.ClockClassFrom})
    clockClassMapping.EntityData.Leafs.Append("clock-class-to", types.YLeaf{"ClockClassTo", clockClassMapping.ClockClassTo})

    clockClassMapping.EntityData.YListKeys = []string {"ClockClassFrom"}

    return &(clockClassMapping.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion
// Iteroperation configuration to be used on
// ingress
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Clock Accuracy value to use for the peer clock. The type is interface{}
    // with range: 0..254.
    ClockAccuracy interface{}

    // Priority2 value to use for the peer clock. The type is interface{} with
    // range: 0..255.
    Priority2 interface{}

    // Default clock class to use when a more specific mapping is not available.
    // The type is interface{} with range: 0..255.
    ClockClassDefault interface{}

    // OSLV value to use for the peer clock. The type is interface{} with range:
    // 0..65535.
    OffsetScaledLogVariance interface{}

    // Priority1 value to use for the peer clock. The type is interface{} with
    // range: 0..255.
    Priority1 interface{}

    // Table for specific mappings for given clock class values.
    ClockClassMappings InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings
}

func (ingressConversion *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion) GetEntityData() *types.CommonEntityData {
    ingressConversion.EntityData.YFilter = ingressConversion.YFilter
    ingressConversion.EntityData.YangName = "ingress-conversion"
    ingressConversion.EntityData.BundleName = "cisco_ios_xr"
    ingressConversion.EntityData.ParentYangName = "interop"
    ingressConversion.EntityData.SegmentPath = "ingress-conversion"
    ingressConversion.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/" + ingressConversion.EntityData.SegmentPath
    ingressConversion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingressConversion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingressConversion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingressConversion.EntityData.Children = types.NewOrderedMap()
    ingressConversion.EntityData.Children.Append("clock-class-mappings", types.YChild{"ClockClassMappings", &ingressConversion.ClockClassMappings})
    ingressConversion.EntityData.Leafs = types.NewOrderedMap()
    ingressConversion.EntityData.Leafs.Append("clock-accuracy", types.YLeaf{"ClockAccuracy", ingressConversion.ClockAccuracy})
    ingressConversion.EntityData.Leafs.Append("priority2", types.YLeaf{"Priority2", ingressConversion.Priority2})
    ingressConversion.EntityData.Leafs.Append("clock-class-default", types.YLeaf{"ClockClassDefault", ingressConversion.ClockClassDefault})
    ingressConversion.EntityData.Leafs.Append("offset-scaled-log-variance", types.YLeaf{"OffsetScaledLogVariance", ingressConversion.OffsetScaledLogVariance})
    ingressConversion.EntityData.Leafs.Append("priority1", types.YLeaf{"Priority1", ingressConversion.Priority1})

    ingressConversion.EntityData.YListKeys = []string {}

    return &(ingressConversion.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings
// Table for specific mappings for given clock
// class values
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping for a given clock class value. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings_ClockClassMapping.
    ClockClassMapping []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings_ClockClassMapping
}

func (clockClassMappings *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings) GetEntityData() *types.CommonEntityData {
    clockClassMappings.EntityData.YFilter = clockClassMappings.YFilter
    clockClassMappings.EntityData.YangName = "clock-class-mappings"
    clockClassMappings.EntityData.BundleName = "cisco_ios_xr"
    clockClassMappings.EntityData.ParentYangName = "ingress-conversion"
    clockClassMappings.EntityData.SegmentPath = "clock-class-mappings"
    clockClassMappings.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/ingress-conversion/" + clockClassMappings.EntityData.SegmentPath
    clockClassMappings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockClassMappings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockClassMappings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockClassMappings.EntityData.Children = types.NewOrderedMap()
    clockClassMappings.EntityData.Children.Append("clock-class-mapping", types.YChild{"ClockClassMapping", nil})
    for i := range clockClassMappings.ClockClassMapping {
        clockClassMappings.EntityData.Children.Append(types.GetSegmentPath(clockClassMappings.ClockClassMapping[i]), types.YChild{"ClockClassMapping", clockClassMappings.ClockClassMapping[i]})
    }
    clockClassMappings.EntityData.Leafs = types.NewOrderedMap()

    clockClassMappings.EntityData.YListKeys = []string {}

    return &(clockClassMappings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings_ClockClassMapping
// Mapping for a given clock class value
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings_ClockClassMapping struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Clock Class to map from. The type is interface{}
    // with range: 0..255.
    ClockClassFrom interface{}

    // Clock class to map to. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    ClockClassTo interface{}
}

func (clockClassMapping *InterfaceConfigurations_InterfaceConfiguration_Ptp_Interop_IngressConversion_ClockClassMappings_ClockClassMapping) GetEntityData() *types.CommonEntityData {
    clockClassMapping.EntityData.YFilter = clockClassMapping.YFilter
    clockClassMapping.EntityData.YangName = "clock-class-mapping"
    clockClassMapping.EntityData.BundleName = "cisco_ios_xr"
    clockClassMapping.EntityData.ParentYangName = "clock-class-mappings"
    clockClassMapping.EntityData.SegmentPath = "clock-class-mapping" + types.AddKeyToken(clockClassMapping.ClockClassFrom, "clock-class-from")
    clockClassMapping.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/interop/ingress-conversion/clock-class-mappings/" + clockClassMapping.EntityData.SegmentPath
    clockClassMapping.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockClassMapping.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockClassMapping.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockClassMapping.EntityData.Children = types.NewOrderedMap()
    clockClassMapping.EntityData.Leafs = types.NewOrderedMap()
    clockClassMapping.EntityData.Leafs.Append("clock-class-from", types.YLeaf{"ClockClassFrom", clockClassMapping.ClockClassFrom})
    clockClassMapping.EntityData.Leafs.Append("clock-class-to", types.YLeaf{"ClockClassTo", clockClassMapping.ClockClassTo})

    clockClassMapping.EntityData.YListKeys = []string {"ClockClassFrom"}

    return &(clockClassMapping.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address
// Source IPv4 Address
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable source IP address. The type is bool.
    Enable interface{}

    // Source IP address to use. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceIp interface{}
}

func (sourceIpv4Address *InterfaceConfigurations_InterfaceConfiguration_Ptp_SourceIpv4Address) GetEntityData() *types.CommonEntityData {
    sourceIpv4Address.EntityData.YFilter = sourceIpv4Address.YFilter
    sourceIpv4Address.EntityData.YangName = "source-ipv4-address"
    sourceIpv4Address.EntityData.BundleName = "cisco_ios_xr"
    sourceIpv4Address.EntityData.ParentYangName = "ptp"
    sourceIpv4Address.EntityData.SegmentPath = "source-ipv4-address"
    sourceIpv4Address.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + sourceIpv4Address.EntityData.SegmentPath
    sourceIpv4Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourceIpv4Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourceIpv4Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourceIpv4Address.EntityData.Children = types.NewOrderedMap()
    sourceIpv4Address.EntityData.Leafs = types.NewOrderedMap()
    sourceIpv4Address.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", sourceIpv4Address.Enable})
    sourceIpv4Address.EntityData.Leafs.Append("source-ip", types.YLeaf{"SourceIp", sourceIpv4Address.SourceIp})

    sourceIpv4Address.EntityData.YListKeys = []string {}

    return &(sourceIpv4Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves
// Table for slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Slave configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave.
    Slave []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
}

func (slaves *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves) GetEntityData() *types.CommonEntityData {
    slaves.EntityData.YFilter = slaves.YFilter
    slaves.EntityData.YangName = "slaves"
    slaves.EntityData.BundleName = "cisco_ios_xr"
    slaves.EntityData.ParentYangName = "ptp"
    slaves.EntityData.SegmentPath = "slaves"
    slaves.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + slaves.EntityData.SegmentPath
    slaves.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaves.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaves.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaves.EntityData.Children = types.NewOrderedMap()
    slaves.EntityData.Children.Append("slave", types.YChild{"Slave", nil})
    for i := range slaves.Slave {
        slaves.EntityData.Children.Append(types.GetSegmentPath(slaves.Slave[i]), types.YChild{"Slave", slaves.Slave[i]})
    }
    slaves.EntityData.Leafs = types.NewOrderedMap()

    slaves.EntityData.YListKeys = []string {}

    return &(slaves.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave
// Slave configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slave Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet.
    Ethernet []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6.
    Ipv4OrIpv6 []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
}

func (slave *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave) GetEntityData() *types.CommonEntityData {
    slave.EntityData.YFilter = slave.YFilter
    slave.EntityData.YangName = "slave"
    slave.EntityData.BundleName = "cisco_ios_xr"
    slave.EntityData.ParentYangName = "slaves"
    slave.EntityData.SegmentPath = "slave" + types.AddKeyToken(slave.Transport, "transport")
    slave.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/slaves/" + slave.EntityData.SegmentPath
    slave.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slave.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slave.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slave.EntityData.Children = types.NewOrderedMap()
    slave.EntityData.Children.Append("ethernet", types.YChild{"Ethernet", nil})
    for i := range slave.Ethernet {
        slave.EntityData.Children.Append(types.GetSegmentPath(slave.Ethernet[i]), types.YChild{"Ethernet", slave.Ethernet[i]})
    }
    slave.EntityData.Children.Append("ipv4-or-ipv6", types.YChild{"Ipv4OrIpv6", nil})
    for i := range slave.Ipv4OrIpv6 {
        slave.EntityData.Children.Append(types.GetSegmentPath(slave.Ipv4OrIpv6[i]), types.YChild{"Ipv4OrIpv6", slave.Ipv4OrIpv6[i]})
    }
    slave.EntityData.Leafs = types.NewOrderedMap()
    slave.EntityData.Leafs.Append("transport", types.YLeaf{"Transport", slave.Transport})

    slave.EntityData.YListKeys = []string {"Transport"}

    return &(slave.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slave MAC Address. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SlaveMacAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "slave"
    ethernet.EntityData.SegmentPath = "ethernet" + types.AddKeyToken(ethernet.SlaveMacAddress, "slave-mac-address")
    ethernet.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/slaves/slave/" + ethernet.EntityData.SegmentPath
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = types.NewOrderedMap()
    ethernet.EntityData.Leafs = types.NewOrderedMap()
    ethernet.EntityData.Leafs.Append("slave-mac-address", types.YLeaf{"SlaveMacAddress", ethernet.SlaveMacAddress})
    ethernet.EntityData.Leafs.Append("non-negotiated", types.YLeaf{"NonNegotiated", ethernet.NonNegotiated})

    ethernet.EntityData.YListKeys = []string {"SlaveMacAddress"}

    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slave IP Address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SlaveIpAddress interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Slaves_Slave_Ipv4OrIpv6) GetEntityData() *types.CommonEntityData {
    ipv4OrIpv6.EntityData.YFilter = ipv4OrIpv6.YFilter
    ipv4OrIpv6.EntityData.YangName = "ipv4-or-ipv6"
    ipv4OrIpv6.EntityData.BundleName = "cisco_ios_xr"
    ipv4OrIpv6.EntityData.ParentYangName = "slave"
    ipv4OrIpv6.EntityData.SegmentPath = "ipv4-or-ipv6" + types.AddKeyToken(ipv4OrIpv6.SlaveIpAddress, "slave-ip-address")
    ipv4OrIpv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/slaves/slave/" + ipv4OrIpv6.EntityData.SegmentPath
    ipv4OrIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4OrIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4OrIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4OrIpv6.EntityData.Children = types.NewOrderedMap()
    ipv4OrIpv6.EntityData.Leafs = types.NewOrderedMap()
    ipv4OrIpv6.EntityData.Leafs.Append("slave-ip-address", types.YLeaf{"SlaveIpAddress", ipv4OrIpv6.SlaveIpAddress})
    ipv4OrIpv6.EntityData.Leafs.Append("non-negotiated", types.YLeaf{"NonNegotiated", ipv4OrIpv6.NonNegotiated})

    ipv4OrIpv6.EntityData.YListKeys = []string {"SlaveIpAddress"}

    return &(ipv4OrIpv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval
// Sync interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (syncInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_SyncInterval) GetEntityData() *types.CommonEntityData {
    syncInterval.EntityData.YFilter = syncInterval.YFilter
    syncInterval.EntityData.YangName = "sync-interval"
    syncInterval.EntityData.BundleName = "cisco_ios_xr"
    syncInterval.EntityData.ParentYangName = "ptp"
    syncInterval.EntityData.SegmentPath = "sync-interval"
    syncInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + syncInterval.EntityData.SegmentPath
    syncInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncInterval.EntityData.Children = types.NewOrderedMap()
    syncInterval.EntityData.Leafs = types.NewOrderedMap()
    syncInterval.EntityData.Leafs.Append("time-type", types.YLeaf{"TimeType", syncInterval.TimeType})
    syncInterval.EntityData.Leafs.Append("time-period", types.YLeaf{"TimePeriod", syncInterval.TimePeriod})

    syncInterval.EntityData.YListKeys = []string {}

    return &(syncInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters
// Table for master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Master configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master.
    Master []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
}

func (masters *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters) GetEntityData() *types.CommonEntityData {
    masters.EntityData.YFilter = masters.YFilter
    masters.EntityData.YangName = "masters"
    masters.EntityData.BundleName = "cisco_ios_xr"
    masters.EntityData.ParentYangName = "ptp"
    masters.EntityData.SegmentPath = "masters"
    masters.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + masters.EntityData.SegmentPath
    masters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    masters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    masters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    masters.EntityData.Children = types.NewOrderedMap()
    masters.EntityData.Children.Append("master", types.YChild{"Master", nil})
    for i := range masters.Master {
        masters.EntityData.Children.Append(types.GetSegmentPath(masters.Master[i]), types.YChild{"Master", masters.Master[i]})
    }
    masters.EntityData.Leafs = types.NewOrderedMap()

    masters.EntityData.YListKeys = []string {}

    return &(masters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master
// Master configuration
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Master Transport Type. The type is PtpEncap.
    Transport interface{}

    // ethernet. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet.
    Ethernet []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet

    // ipv4 or ipv6. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6.
    Ipv4OrIpv6 []*InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
}

func (master *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master) GetEntityData() *types.CommonEntityData {
    master.EntityData.YFilter = master.YFilter
    master.EntityData.YangName = "master"
    master.EntityData.BundleName = "cisco_ios_xr"
    master.EntityData.ParentYangName = "masters"
    master.EntityData.SegmentPath = "master" + types.AddKeyToken(master.Transport, "transport")
    master.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/masters/" + master.EntityData.SegmentPath
    master.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    master.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    master.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    master.EntityData.Children = types.NewOrderedMap()
    master.EntityData.Children.Append("ethernet", types.YChild{"Ethernet", nil})
    for i := range master.Ethernet {
        master.EntityData.Children.Append(types.GetSegmentPath(master.Ethernet[i]), types.YChild{"Ethernet", master.Ethernet[i]})
    }
    master.EntityData.Children.Append("ipv4-or-ipv6", types.YChild{"Ipv4OrIpv6", nil})
    for i := range master.Ipv4OrIpv6 {
        master.EntityData.Children.Append(types.GetSegmentPath(master.Ipv4OrIpv6[i]), types.YChild{"Ipv4OrIpv6", master.Ipv4OrIpv6[i]})
    }
    master.EntityData.Leafs = types.NewOrderedMap()
    master.EntityData.Leafs.Append("transport", types.YLeaf{"Transport", master.Transport})

    master.EntityData.YListKeys = []string {"Transport"}

    return &(master.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet
// ethernet
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Master MAC Address - only used if Transport is
    // Ethernet. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MasterMacAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "master"
    ethernet.EntityData.SegmentPath = "ethernet" + types.AddKeyToken(ethernet.MasterMacAddress, "master-mac-address")
    ethernet.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/masters/master/" + ethernet.EntityData.SegmentPath
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = types.NewOrderedMap()
    ethernet.EntityData.Children.Append("delay-asymmetry", types.YChild{"DelayAsymmetry", &ethernet.DelayAsymmetry})
    ethernet.EntityData.Leafs = types.NewOrderedMap()
    ethernet.EntityData.Leafs.Append("master-mac-address", types.YLeaf{"MasterMacAddress", ethernet.MasterMacAddress})
    ethernet.EntityData.Leafs.Append("master-clock-class", types.YLeaf{"MasterClockClass", ethernet.MasterClockClass})
    ethernet.EntityData.Leafs.Append("non-negotiated", types.YLeaf{"NonNegotiated", ethernet.NonNegotiated})
    ethernet.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", ethernet.Priority})
    ethernet.EntityData.Leafs.Append("communication", types.YLeaf{"Communication", ethernet.Communication})

    ethernet.EntityData.YListKeys = []string {"MasterMacAddress"}

    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ethernet_DelayAsymmetry) GetEntityData() *types.CommonEntityData {
    delayAsymmetry.EntityData.YFilter = delayAsymmetry.YFilter
    delayAsymmetry.EntityData.YangName = "delay-asymmetry"
    delayAsymmetry.EntityData.BundleName = "cisco_ios_xr"
    delayAsymmetry.EntityData.ParentYangName = "ethernet"
    delayAsymmetry.EntityData.SegmentPath = "delay-asymmetry"
    delayAsymmetry.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/masters/master/ethernet/" + delayAsymmetry.EntityData.SegmentPath
    delayAsymmetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayAsymmetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayAsymmetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayAsymmetry.EntityData.Children = types.NewOrderedMap()
    delayAsymmetry.EntityData.Leafs = types.NewOrderedMap()
    delayAsymmetry.EntityData.Leafs.Append("magnitude", types.YLeaf{"Magnitude", delayAsymmetry.Magnitude})
    delayAsymmetry.EntityData.Leafs.Append("units", types.YLeaf{"Units", delayAsymmetry.Units})

    delayAsymmetry.EntityData.YListKeys = []string {}

    return &(delayAsymmetry.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6
// ipv4 or ipv6
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Master IP Address - used if Transport is not
    // Ethernet. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    MasterIpAddress interface{}

    // Master clock class. The type is interface{} with range: 0..255.
    MasterClockClass interface{}

    // Enable non-negotiated unicast on this interface. The type is bool.
    NonNegotiated interface{}

    // Master priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Communication interface{}

    // The delay asymmetry for this master.
    DelayAsymmetry InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
}

func (ipv4OrIpv6 *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6) GetEntityData() *types.CommonEntityData {
    ipv4OrIpv6.EntityData.YFilter = ipv4OrIpv6.YFilter
    ipv4OrIpv6.EntityData.YangName = "ipv4-or-ipv6"
    ipv4OrIpv6.EntityData.BundleName = "cisco_ios_xr"
    ipv4OrIpv6.EntityData.ParentYangName = "master"
    ipv4OrIpv6.EntityData.SegmentPath = "ipv4-or-ipv6" + types.AddKeyToken(ipv4OrIpv6.MasterIpAddress, "master-ip-address")
    ipv4OrIpv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/masters/master/" + ipv4OrIpv6.EntityData.SegmentPath
    ipv4OrIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4OrIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4OrIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4OrIpv6.EntityData.Children = types.NewOrderedMap()
    ipv4OrIpv6.EntityData.Children.Append("delay-asymmetry", types.YChild{"DelayAsymmetry", &ipv4OrIpv6.DelayAsymmetry})
    ipv4OrIpv6.EntityData.Leafs = types.NewOrderedMap()
    ipv4OrIpv6.EntityData.Leafs.Append("master-ip-address", types.YLeaf{"MasterIpAddress", ipv4OrIpv6.MasterIpAddress})
    ipv4OrIpv6.EntityData.Leafs.Append("master-clock-class", types.YLeaf{"MasterClockClass", ipv4OrIpv6.MasterClockClass})
    ipv4OrIpv6.EntityData.Leafs.Append("non-negotiated", types.YLeaf{"NonNegotiated", ipv4OrIpv6.NonNegotiated})
    ipv4OrIpv6.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", ipv4OrIpv6.Priority})
    ipv4OrIpv6.EntityData.Leafs.Append("communication", types.YLeaf{"Communication", ipv4OrIpv6.Communication})

    ipv4OrIpv6.EntityData.YListKeys = []string {"MasterIpAddress"}

    return &(ipv4OrIpv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry
// The delay asymmetry for this master
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // How much longer the master to slave path takes than the reverse. The type
    // is interface{} with range: -500000000..500000000. This attribute is
    // mandatory.
    Magnitude interface{}

    // The units to use for the delay asymmetry. The type is
    // PtpDelayAsymmetryUnits. This attribute is mandatory.
    Units interface{}
}

func (delayAsymmetry *InterfaceConfigurations_InterfaceConfiguration_Ptp_Masters_Master_Ipv4OrIpv6_DelayAsymmetry) GetEntityData() *types.CommonEntityData {
    delayAsymmetry.EntityData.YFilter = delayAsymmetry.YFilter
    delayAsymmetry.EntityData.YangName = "delay-asymmetry"
    delayAsymmetry.EntityData.BundleName = "cisco_ios_xr"
    delayAsymmetry.EntityData.ParentYangName = "ipv4-or-ipv6"
    delayAsymmetry.EntityData.SegmentPath = "delay-asymmetry"
    delayAsymmetry.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/masters/master/ipv4-or-ipv6/" + delayAsymmetry.EntityData.SegmentPath
    delayAsymmetry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayAsymmetry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayAsymmetry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayAsymmetry.EntityData.Children = types.NewOrderedMap()
    delayAsymmetry.EntityData.Leafs = types.NewOrderedMap()
    delayAsymmetry.EntityData.Leafs.Append("magnitude", types.YLeaf{"Magnitude", delayAsymmetry.Magnitude})
    delayAsymmetry.EntityData.Leafs.Append("units", types.YLeaf{"Units", delayAsymmetry.Units})

    delayAsymmetry.EntityData.YListKeys = []string {}

    return &(delayAsymmetry.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication
// Communication model
type InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Communication Model. The type is PtpTransport. The default value is
    // unicast.
    Model interface{}

    // Target address set. The type is bool. The default value is false.
    TargetAddressSet interface{}

    // Target address. The type is string.
    TargetAddress interface{}
}

func (communication *InterfaceConfigurations_InterfaceConfiguration_Ptp_Communication) GetEntityData() *types.CommonEntityData {
    communication.EntityData.YFilter = communication.YFilter
    communication.EntityData.YangName = "communication"
    communication.EntityData.BundleName = "cisco_ios_xr"
    communication.EntityData.ParentYangName = "ptp"
    communication.EntityData.SegmentPath = "communication"
    communication.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + communication.EntityData.SegmentPath
    communication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    communication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    communication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    communication.EntityData.Children = types.NewOrderedMap()
    communication.EntityData.Leafs = types.NewOrderedMap()
    communication.EntityData.Leafs.Append("model", types.YLeaf{"Model", communication.Model})
    communication.EntityData.Leafs.Append("target-address-set", types.YLeaf{"TargetAddressSet", communication.TargetAddressSet})
    communication.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", communication.TargetAddress})

    communication.EntityData.YListKeys = []string {}

    return &(communication.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval
// Minimum delay request interval
type InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval or Frequency. The type is PtpTime. The default value is interval.
    TimeType interface{}

    // Time Period. The type is PtpTimePeriod. The default value is 1.
    TimePeriod interface{}
}

func (delayRequestMinimumInterval *InterfaceConfigurations_InterfaceConfiguration_Ptp_DelayRequestMinimumInterval) GetEntityData() *types.CommonEntityData {
    delayRequestMinimumInterval.EntityData.YFilter = delayRequestMinimumInterval.YFilter
    delayRequestMinimumInterval.EntityData.YangName = "delay-request-minimum-interval"
    delayRequestMinimumInterval.EntityData.BundleName = "cisco_ios_xr"
    delayRequestMinimumInterval.EntityData.ParentYangName = "ptp"
    delayRequestMinimumInterval.EntityData.SegmentPath = "delay-request-minimum-interval"
    delayRequestMinimumInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ptp-cfg:ptp/" + delayRequestMinimumInterval.EntityData.SegmentPath
    delayRequestMinimumInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayRequestMinimumInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayRequestMinimumInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayRequestMinimumInterval.EntityData.Children = types.NewOrderedMap()
    delayRequestMinimumInterval.EntityData.Leafs = types.NewOrderedMap()
    delayRequestMinimumInterval.EntityData.Leafs.Append("time-type", types.YLeaf{"TimeType", delayRequestMinimumInterval.TimeType})
    delayRequestMinimumInterval.EntityData.Leafs.Append("time-period", types.YLeaf{"TimePeriod", delayRequestMinimumInterval.TimePeriod})

    delayRequestMinimumInterval.EntityData.YListKeys = []string {}

    return &(delayRequestMinimumInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PseudowireEther
// PW-Ether attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireEther struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}

    // PW Ether L2 overhead requirement. The type is interface{} with range:
    // 1..64.
    L2Overhead interface{}
}

func (pseudowireEther *InterfaceConfigurations_InterfaceConfiguration_PseudowireEther) GetEntityData() *types.CommonEntityData {
    pseudowireEther.EntityData.YFilter = pseudowireEther.YFilter
    pseudowireEther.EntityData.YangName = "pseudowire-ether"
    pseudowireEther.EntityData.BundleName = "cisco_ios_xr"
    pseudowireEther.EntityData.ParentYangName = "interface-configuration"
    pseudowireEther.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"
    pseudowireEther.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + pseudowireEther.EntityData.SegmentPath
    pseudowireEther.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireEther.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireEther.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireEther.EntityData.Children = types.NewOrderedMap()
    pseudowireEther.EntityData.Leafs = types.NewOrderedMap()
    pseudowireEther.EntityData.Leafs.Append("generic-interface-list", types.YLeaf{"GenericInterfaceList", pseudowireEther.GenericInterfaceList})
    pseudowireEther.EntityData.Leafs.Append("l2-overhead", types.YLeaf{"L2Overhead", pseudowireEther.L2Overhead})

    pseudowireEther.EntityData.YListKeys = []string {}

    return &(pseudowireEther.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PseudowireIw
// PW-IW attributes
type InterfaceConfigurations_InterfaceConfiguration_PseudowireIw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 overhead size in bytes. The type is interface{} with range: 1..64. Units
    // are byte.
    L2Overhead interface{}

    // Name of the interface list. The type is string with length: 1..32.
    GenericInterfaceList interface{}
}

func (pseudowireIw *InterfaceConfigurations_InterfaceConfiguration_PseudowireIw) GetEntityData() *types.CommonEntityData {
    pseudowireIw.EntityData.YFilter = pseudowireIw.YFilter
    pseudowireIw.EntityData.YangName = "pseudowire-iw"
    pseudowireIw.EntityData.BundleName = "cisco_ios_xr"
    pseudowireIw.EntityData.ParentYangName = "interface-configuration"
    pseudowireIw.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"
    pseudowireIw.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + pseudowireIw.EntityData.SegmentPath
    pseudowireIw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireIw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireIw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireIw.EntityData.Children = types.NewOrderedMap()
    pseudowireIw.EntityData.Leafs = types.NewOrderedMap()
    pseudowireIw.EntityData.Leafs.Append("l2-overhead", types.YLeaf{"L2Overhead", pseudowireIw.L2Overhead})
    pseudowireIw.EntityData.Leafs.Append("generic-interface-list", types.YLeaf{"GenericInterfaceList", pseudowireIw.GenericInterfaceList})

    pseudowireIw.EntityData.YListKeys = []string {}

    return &(pseudowireIw.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bvi
// BVI attributes
type InterfaceConfigurations_InterfaceConfiguration_Bvi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable host-routing on this BVI. The type is interface{}.
    HostRouting interface{}
}

func (bvi *InterfaceConfigurations_InterfaceConfiguration_Bvi) GetEntityData() *types.CommonEntityData {
    bvi.EntityData.YFilter = bvi.YFilter
    bvi.EntityData.YangName = "bvi"
    bvi.EntityData.BundleName = "cisco_ios_xr"
    bvi.EntityData.ParentYangName = "interface-configuration"
    bvi.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:bvi"
    bvi.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + bvi.EntityData.SegmentPath
    bvi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bvi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bvi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bvi.EntityData.Children = types.NewOrderedMap()
    bvi.EntityData.Leafs = types.NewOrderedMap()
    bvi.EntityData.Leafs.Append("host-routing", types.YLeaf{"HostRouting", bvi.HostRouting})

    bvi.EntityData.YListKeys = []string {}

    return &(bvi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport
// Interface Layer 2 Transport service
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_L2Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid on physical interfaces and it controls whether
    // that interface is a port mode Layer 2 attachment circuit (note that for
    // subinterfaces, the Layer 2 property is specified when the subinterface is
    // created).The object must be set before any other L2Transport configuration
    // is supplied for the interface, and must be the last per-interface
    // configuration object to be removed. The type is interface{}.
    Enabled interface{}

    // Enable propagation of the remote attachment-circuit link state to the
    // localattachment-circuit link state. The type is interface{}.
    PropagateRemoteStatus interface{}

    // ATM L2transport Port Mode Parameters Configuration.
    AtmPortModeParameters InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters

    // Interface specific Layer 2 protocol handling.
    L2Protocols InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols

    // L2 Ethernet Features Configuration.
    L2EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures

    // Monitor Session container for this source interface.
    SpanMonitorSessions InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions

    // Port Attachment Circuit configuration.
    Pac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac

    // Connection Attachment Circuit configuration.
    Cac InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
}

func (l2Transport *InterfaceConfigurations_InterfaceConfiguration_L2Transport) GetEntityData() *types.CommonEntityData {
    l2Transport.EntityData.YFilter = l2Transport.YFilter
    l2Transport.EntityData.YangName = "l2-transport"
    l2Transport.EntityData.BundleName = "cisco_ios_xr"
    l2Transport.EntityData.ParentYangName = "interface-configuration"
    l2Transport.EntityData.SegmentPath = "Cisco-IOS-XR-l2vpn-cfg:l2-transport"
    l2Transport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + l2Transport.EntityData.SegmentPath
    l2Transport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Transport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Transport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Transport.EntityData.Children = types.NewOrderedMap()
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters", types.YChild{"AtmPortModeParameters", &l2Transport.AtmPortModeParameters})
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols", types.YChild{"L2Protocols", &l2Transport.L2Protocols})
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features", types.YChild{"L2EthernetFeatures", &l2Transport.L2EthernetFeatures})
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions", types.YChild{"SpanMonitorSessions", &l2Transport.SpanMonitorSessions})
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-cfg:pac", types.YChild{"Pac", &l2Transport.Pac})
    l2Transport.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-cfg:cac", types.YChild{"Cac", &l2Transport.Cac})
    l2Transport.EntityData.Leafs = types.NewOrderedMap()
    l2Transport.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", l2Transport.Enabled})
    l2Transport.EntityData.Leafs.Append("propagate-remote-status", types.YLeaf{"PropagateRemoteStatus", l2Transport.PropagateRemoteStatus})

    l2Transport.EntityData.YListKeys = []string {}

    return &(l2Transport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters
// ATM L2transport Port Mode Parameters
// Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
}

func (atmPortModeParameters *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters) GetEntityData() *types.CommonEntityData {
    atmPortModeParameters.EntityData.YFilter = atmPortModeParameters.YFilter
    atmPortModeParameters.EntityData.YangName = "atm-port-mode-parameters"
    atmPortModeParameters.EntityData.BundleName = "cisco_ios_xr"
    atmPortModeParameters.EntityData.ParentYangName = "l2-transport"
    atmPortModeParameters.EntityData.SegmentPath = "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"
    atmPortModeParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + atmPortModeParameters.EntityData.SegmentPath
    atmPortModeParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atmPortModeParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atmPortModeParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atmPortModeParameters.EntityData.Children = types.NewOrderedMap()
    atmPortModeParameters.EntityData.Children.Append("cell-packing", types.YChild{"CellPacking", &atmPortModeParameters.CellPacking})
    atmPortModeParameters.EntityData.Leafs = types.NewOrderedMap()

    atmPortModeParameters.EntityData.YListKeys = []string {}

    return &(atmPortModeParameters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_L2Transport_AtmPortModeParameters_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "atm-port-mode-parameters"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters/" + cellPacking.EntityData.SegmentPath
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = types.NewOrderedMap()
    cellPacking.EntityData.Leafs = types.NewOrderedMap()
    cellPacking.EntityData.Leafs.Append("maximum-cells-packed", types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked})
    cellPacking.EntityData.Leafs.Append("cell-packing-timer-id", types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId})

    cellPacking.EntityData.YListKeys = []string {}

    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols
// Interface specific Layer 2 protocol handling
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Handling of a specific Layer 2 protocol. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol.
    L2Protocol []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
}

func (l2Protocols *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols) GetEntityData() *types.CommonEntityData {
    l2Protocols.EntityData.YFilter = l2Protocols.YFilter
    l2Protocols.EntityData.YangName = "l2-protocols"
    l2Protocols.EntityData.BundleName = "cisco_ios_xr"
    l2Protocols.EntityData.ParentYangName = "l2-transport"
    l2Protocols.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"
    l2Protocols.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + l2Protocols.EntityData.SegmentPath
    l2Protocols.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Protocols.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Protocols.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Protocols.EntityData.Children = types.NewOrderedMap()
    l2Protocols.EntityData.Children.Append("l2-protocol", types.YChild{"L2Protocol", nil})
    for i := range l2Protocols.L2Protocol {
        l2Protocols.EntityData.Children.Append(types.GetSegmentPath(l2Protocols.L2Protocol[i]), types.YChild{"L2Protocol", l2Protocols.L2Protocol[i]})
    }
    l2Protocols.EntityData.Leafs = types.NewOrderedMap()

    l2Protocols.EntityData.YListKeys = []string {}

    return &(l2Protocols.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol
// Handling of a specific Layer 2 protocol
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Protocol name. The type is L2ProtocolName.
    L2ProtocolName interface{}

    // How to handle the protocol's packets. The type is L2ProtocolMode. This
    // attribute is mandatory.
    Mode interface{}

    // The value to set the MPLS Exp bits to within the PW.This value may be
    // specified if the mode is forward or tunnel and must not be specified if the
    // mode is drop. The type is interface{} with range: 0..7.
    MplsExpBitsValue interface{}
}

func (l2Protocol *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2Protocols_L2Protocol) GetEntityData() *types.CommonEntityData {
    l2Protocol.EntityData.YFilter = l2Protocol.YFilter
    l2Protocol.EntityData.YangName = "l2-protocol"
    l2Protocol.EntityData.BundleName = "cisco_ios_xr"
    l2Protocol.EntityData.ParentYangName = "l2-protocols"
    l2Protocol.EntityData.SegmentPath = "l2-protocol" + types.AddKeyToken(l2Protocol.L2ProtocolName, "l2-protocol-name")
    l2Protocol.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols/" + l2Protocol.EntityData.SegmentPath
    l2Protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Protocol.EntityData.Children = types.NewOrderedMap()
    l2Protocol.EntityData.Leafs = types.NewOrderedMap()
    l2Protocol.EntityData.Leafs.Append("l2-protocol-name", types.YLeaf{"L2ProtocolName", l2Protocol.L2ProtocolName})
    l2Protocol.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", l2Protocol.Mode})
    l2Protocol.EntityData.Leafs.Append("mpls-exp-bits-value", types.YLeaf{"MplsExpBitsValue", l2Protocol.MplsExpBitsValue})

    l2Protocol.EntityData.YListKeys = []string {"L2ProtocolName"}

    return &(l2Protocol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures
// L2 Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress Ethernet filtering. The type is EgressFiltering. The default value
    // is egress-filtering-type-default.
    EgressFiltering interface{}

    // Mark all ingress packets to bypass any egress VLAN filter. The type is
    // interface{}.
    SourceBypassEgressFiltering interface{}
}

func (l2EthernetFeatures *InterfaceConfigurations_InterfaceConfiguration_L2Transport_L2EthernetFeatures) GetEntityData() *types.CommonEntityData {
    l2EthernetFeatures.EntityData.YFilter = l2EthernetFeatures.YFilter
    l2EthernetFeatures.EntityData.YangName = "l2-ethernet-features"
    l2EthernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    l2EthernetFeatures.EntityData.ParentYangName = "l2-transport"
    l2EthernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"
    l2EthernetFeatures.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + l2EthernetFeatures.EntityData.SegmentPath
    l2EthernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2EthernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2EthernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2EthernetFeatures.EntityData.Children = types.NewOrderedMap()
    l2EthernetFeatures.EntityData.Leafs = types.NewOrderedMap()
    l2EthernetFeatures.EntityData.Leafs.Append("egress-filtering", types.YLeaf{"EgressFiltering", l2EthernetFeatures.EgressFiltering})
    l2EthernetFeatures.EntityData.Leafs.Append("source-bypass-egress-filtering", types.YLeaf{"SourceBypassEgressFiltering", l2EthernetFeatures.SourceBypassEgressFiltering})

    l2EthernetFeatures.EntityData.YListKeys = []string {}

    return &(l2EthernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions) GetEntityData() *types.CommonEntityData {
    spanMonitorSessions.EntityData.YFilter = spanMonitorSessions.YFilter
    spanMonitorSessions.EntityData.YangName = "span-monitor-sessions"
    spanMonitorSessions.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSessions.EntityData.ParentYangName = "l2-transport"
    spanMonitorSessions.EntityData.SegmentPath = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
    spanMonitorSessions.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + spanMonitorSessions.EntityData.SegmentPath
    spanMonitorSessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSessions.EntityData.Children = types.NewOrderedMap()
    spanMonitorSessions.EntityData.Children.Append("span-monitor-session", types.YChild{"SpanMonitorSession", nil})
    for i := range spanMonitorSessions.SpanMonitorSession {
        spanMonitorSessions.EntityData.Children.Append(types.GetSegmentPath(spanMonitorSessions.SpanMonitorSession[i]), types.YChild{"SpanMonitorSession", spanMonitorSessions.SpanMonitorSession[i]})
    }
    spanMonitorSessions.EntityData.Leafs = types.NewOrderedMap()

    spanMonitorSessions.EntityData.YListKeys = []string {}

    return &(spanMonitorSessions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession) GetEntityData() *types.CommonEntityData {
    spanMonitorSession.EntityData.YFilter = spanMonitorSession.YFilter
    spanMonitorSession.EntityData.YangName = "span-monitor-session"
    spanMonitorSession.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSession.EntityData.ParentYangName = "span-monitor-sessions"
    spanMonitorSession.EntityData.SegmentPath = "span-monitor-session" + types.AddKeyToken(spanMonitorSession.SessionClass, "session-class")
    spanMonitorSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/" + spanMonitorSession.EntityData.SegmentPath
    spanMonitorSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSession.EntityData.Children = types.NewOrderedMap()
    spanMonitorSession.EntityData.Children.Append("attachment", types.YChild{"Attachment", &spanMonitorSession.Attachment})
    spanMonitorSession.EntityData.Children.Append("acl", types.YChild{"Acl", &spanMonitorSession.Acl})
    spanMonitorSession.EntityData.Leafs = types.NewOrderedMap()
    spanMonitorSession.EntityData.Leafs.Append("session-class", types.YLeaf{"SessionClass", spanMonitorSession.SessionClass})
    spanMonitorSession.EntityData.Leafs.Append("mirror-first", types.YLeaf{"MirrorFirst", spanMonitorSession.MirrorFirst})
    spanMonitorSession.EntityData.Leafs.Append("mirror-interval", types.YLeaf{"MirrorInterval", spanMonitorSession.MirrorInterval})

    spanMonitorSession.EntityData.YListKeys = []string {"SessionClass"}

    return &(spanMonitorSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Attachment) GetEntityData() *types.CommonEntityData {
    attachment.EntityData.YFilter = attachment.YFilter
    attachment.EntityData.YangName = "attachment"
    attachment.EntityData.BundleName = "cisco_ios_xr"
    attachment.EntityData.ParentYangName = "span-monitor-session"
    attachment.EntityData.SegmentPath = "attachment"
    attachment.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/span-monitor-session/" + attachment.EntityData.SegmentPath
    attachment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachment.EntityData.Children = types.NewOrderedMap()
    attachment.EntityData.Leafs = types.NewOrderedMap()
    attachment.EntityData.Leafs.Append("session-name", types.YLeaf{"SessionName", attachment.SessionName})
    attachment.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", attachment.Direction})
    attachment.EntityData.Leafs.Append("port-level-enable", types.YLeaf{"PortLevelEnable", attachment.PortLevelEnable})

    attachment.EntityData.YListKeys = []string {}

    return &(attachment.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_L2Transport_SpanMonitorSessions_SpanMonitorSession_Acl) GetEntityData() *types.CommonEntityData {
    acl.EntityData.YFilter = acl.YFilter
    acl.EntityData.YangName = "acl"
    acl.EntityData.BundleName = "cisco_ios_xr"
    acl.EntityData.ParentYangName = "span-monitor-session"
    acl.EntityData.SegmentPath = "acl"
    acl.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/span-monitor-session/" + acl.EntityData.SegmentPath
    acl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    acl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    acl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    acl.EntityData.Children = types.NewOrderedMap()
    acl.EntityData.Leafs = types.NewOrderedMap()
    acl.EntityData.Leafs.Append("acl-enable", types.YLeaf{"AclEnable", acl.AclEnable})
    acl.EntityData.Leafs.Append("acl-name", types.YLeaf{"AclName", acl.AclName})

    acl.EntityData.YListKeys = []string {}

    return &(acl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac
// Port Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
}

func (pac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac) GetEntityData() *types.CommonEntityData {
    pac.EntityData.YFilter = pac.YFilter
    pac.EntityData.YangName = "pac"
    pac.EntityData.BundleName = "cisco_ios_xr"
    pac.EntityData.ParentYangName = "l2-transport"
    pac.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:pac"
    pac.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + pac.EntityData.SegmentPath
    pac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pac.EntityData.Children = types.NewOrderedMap()
    pac.EntityData.Children.Append("qos", types.YChild{"Qos", &pac.Qos})
    pac.EntityData.Leafs = types.NewOrderedMap()

    pac.EntityData.YListKeys = []string {}

    return &(pac.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "pac"
    qos.EntityData.SegmentPath = "qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range output.ServicePolicyQos {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", output.ServicePolicyQos[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/output/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/output/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/output/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/output/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range input.ServicePolicyQos {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", input.ServicePolicyQos[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/input/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/input/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/input/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Pac_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:pac/qos/input/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac
// Connection Attachment Circuit configuration.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
}

func (cac *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac) GetEntityData() *types.CommonEntityData {
    cac.EntityData.YFilter = cac.YFilter
    cac.EntityData.YangName = "cac"
    cac.EntityData.BundleName = "cisco_ios_xr"
    cac.EntityData.ParentYangName = "l2-transport"
    cac.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:cac"
    cac.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/" + cac.EntityData.SegmentPath
    cac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cac.EntityData.Children = types.NewOrderedMap()
    cac.EntityData.Children.Append("qos", types.YChild{"Qos", &cac.Qos})
    cac.EntityData.Leafs = types.NewOrderedMap()

    cac.EntityData.YListKeys = []string {}

    return &(cac.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "cac"
    qos.EntityData.SegmentPath = "qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range output.ServicePolicyQos {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", output.ServicePolicyQos[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/output/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/output/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/output/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/output/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range input.ServicePolicyQos {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", input.ServicePolicyQos[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/input/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/input/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/input/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_L2Transport_Cac_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2vpn-cfg:l2-transport/Cisco-IOS-XR-qos-ma-cfg:cac/qos/input/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm
// ATM Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Support 12-bits VPI cell format. The type is AtmVpiBitsMode.
    MaxVpiBits interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // PVP Configuration.
    Pvps InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps

    // PVC Configuration.
    Pvcs InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs

    // Configure maximum cell-packing timers.  All parameters are mandatory.
    MaximumCellPackingTimers InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers

    // VP tunnel configuration.
    VpTunnels InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
}

func (atm *InterfaceConfigurations_InterfaceConfiguration_Atm) GetEntityData() *types.CommonEntityData {
    atm.EntityData.YFilter = atm.YFilter
    atm.EntityData.YangName = "atm"
    atm.EntityData.BundleName = "cisco_ios_xr"
    atm.EntityData.ParentYangName = "interface-configuration"
    atm.EntityData.SegmentPath = "Cisco-IOS-XR-atm-vcm-cfg:atm"
    atm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + atm.EntityData.SegmentPath
    atm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atm.EntityData.Children = types.NewOrderedMap()
    atm.EntityData.Children.Append("pvps", types.YChild{"Pvps", &atm.Pvps})
    atm.EntityData.Children.Append("pvcs", types.YChild{"Pvcs", &atm.Pvcs})
    atm.EntityData.Children.Append("maximum-cell-packing-timers", types.YChild{"MaximumCellPackingTimers", &atm.MaximumCellPackingTimers})
    atm.EntityData.Children.Append("vp-tunnels", types.YChild{"VpTunnels", &atm.VpTunnels})
    atm.EntityData.Leafs = types.NewOrderedMap()
    atm.EntityData.Leafs.Append("max-vpi-bits", types.YLeaf{"MaxVpiBits", atm.MaxVpiBits})
    atm.EntityData.Leafs.Append("vc-class", types.YLeaf{"VcClass", atm.VcClass})

    atm.EntityData.YListKeys = []string {}

    return &(atm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps
// PVP Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of particular PVP. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp.
    Pvp []*InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
}

func (pvps *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps) GetEntityData() *types.CommonEntityData {
    pvps.EntityData.YFilter = pvps.YFilter
    pvps.EntityData.YangName = "pvps"
    pvps.EntityData.BundleName = "cisco_ios_xr"
    pvps.EntityData.ParentYangName = "atm"
    pvps.EntityData.SegmentPath = "pvps"
    pvps.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/" + pvps.EntityData.SegmentPath
    pvps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvps.EntityData.Children = types.NewOrderedMap()
    pvps.EntityData.Children.Append("pvp", types.YChild{"Pvp", nil})
    for i := range pvps.Pvp {
        pvps.EntityData.Children.Append(types.GetSegmentPath(pvps.Pvp[i]), types.YChild{"Pvp", pvps.Pvp[i]})
    }
    pvps.EntityData.Leafs = types.NewOrderedMap()

    pvps.EntityData.YListKeys = []string {}

    return &(pvps.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp
// Configuration of particular PVP
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Create the PVP. The type is interface{}.
    Enable interface{}

    // Configure the PVP test mode. The type is AtmPvpTestMode.
    TestMode interface{}

    // Enable L2VPN PVP OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
}

func (pvp *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp) GetEntityData() *types.CommonEntityData {
    pvp.EntityData.YFilter = pvp.YFilter
    pvp.EntityData.YangName = "pvp"
    pvp.EntityData.BundleName = "cisco_ios_xr"
    pvp.EntityData.ParentYangName = "pvps"
    pvp.EntityData.SegmentPath = "pvp" + types.AddKeyToken(pvp.Vpi, "vpi")
    pvp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvps/" + pvp.EntityData.SegmentPath
    pvp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvp.EntityData.Children = types.NewOrderedMap()
    pvp.EntityData.Children.Append("shape", types.YChild{"Shape", &pvp.Shape})
    pvp.EntityData.Children.Append("cell-packing", types.YChild{"CellPacking", &pvp.CellPacking})
    pvp.EntityData.Leafs = types.NewOrderedMap()
    pvp.EntityData.Leafs.Append("vpi", types.YLeaf{"Vpi", pvp.Vpi})
    pvp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", pvp.Enable})
    pvp.EntityData.Leafs.Append("test-mode", types.YLeaf{"TestMode", pvp.TestMode})
    pvp.EntityData.Leafs.Append("oam-segment-endpoint", types.YLeaf{"OamSegmentEndpoint", pvp.OamSegmentEndpoint})

    pvp.EntityData.YListKeys = []string {"Vpi"}

    return &(pvp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "pvp"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvps/pvp/" + shape.EntityData.SegmentPath
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = types.NewOrderedMap()
    shape.EntityData.Leafs = types.NewOrderedMap()
    shape.EntityData.Leafs.Append("type", types.YLeaf{"Type", shape.Type})
    shape.EntityData.Leafs.Append("peak-cell-rate", types.YLeaf{"PeakCellRate", shape.PeakCellRate})
    shape.EntityData.Leafs.Append("sustained-cell-rate", types.YLeaf{"SustainedCellRate", shape.SustainedCellRate})
    shape.EntityData.Leafs.Append("burst-size", types.YLeaf{"BurstSize", shape.BurstSize})

    shape.EntityData.YListKeys = []string {}

    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvps_Pvp_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "pvp"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvps/pvp/" + cellPacking.EntityData.SegmentPath
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = types.NewOrderedMap()
    cellPacking.EntityData.Leafs = types.NewOrderedMap()
    cellPacking.EntityData.Leafs.Append("maximum-cells-packed", types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked})
    cellPacking.EntityData.Leafs.Append("cell-packing-timer-id", types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId})

    cellPacking.EntityData.YListKeys = []string {}

    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs
// PVC Configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration particular PVC. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc.
    Pvc []*InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
}

func (pvcs *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs) GetEntityData() *types.CommonEntityData {
    pvcs.EntityData.YFilter = pvcs.YFilter
    pvcs.EntityData.YangName = "pvcs"
    pvcs.EntityData.BundleName = "cisco_ios_xr"
    pvcs.EntityData.ParentYangName = "atm"
    pvcs.EntityData.SegmentPath = "pvcs"
    pvcs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/" + pvcs.EntityData.SegmentPath
    pvcs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvcs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvcs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvcs.EntityData.Children = types.NewOrderedMap()
    pvcs.EntityData.Children.Append("pvc", types.YChild{"Pvc", nil})
    for i := range pvcs.Pvc {
        pvcs.EntityData.Children.Append(types.GetSegmentPath(pvcs.Pvc[i]), types.YChild{"Pvc", pvcs.Pvc[i]})
    }
    pvcs.EntityData.Leafs = types.NewOrderedMap()

    pvcs.EntityData.YListKeys = []string {}

    return &(pvcs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc
// Configuration particular PVC
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // This attribute is a key. VCI value. The type is interface{} with range:
    // 1..65535.
    Vci interface{}

    // This attribute is a key. PVC type. The type is AtmPvcData.
    PvCtype interface{}

    // Name of the VC class. The type is string with length: 1..30.
    VcClass interface{}

    // Configure encapsulation. The type is AtmPvcEncapsulation.
    Encapsulation interface{}

    // Create the PVC. The type is interface{}.
    Enable interface{}

    // Configure the PVC test mode. The type is AtmPvcTestMode.
    TestMode interface{}

    // Enable L2VPN PVC OAM segment endpoint. The type is interface{}.
    OamSegmentEndpoint interface{}

    // Configure traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape

    // L2VPN OAM emulation.
    OamEmulation InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation

    // Configure cell-packing parameters.  All parameters are mandatory.
    CellPacking InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
}

func (pvc *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc) GetEntityData() *types.CommonEntityData {
    pvc.EntityData.YFilter = pvc.YFilter
    pvc.EntityData.YangName = "pvc"
    pvc.EntityData.BundleName = "cisco_ios_xr"
    pvc.EntityData.ParentYangName = "pvcs"
    pvc.EntityData.SegmentPath = "pvc" + types.AddKeyToken(pvc.Vpi, "vpi") + types.AddKeyToken(pvc.Vci, "vci") + types.AddKeyToken(pvc.PvCtype, "pv-ctype")
    pvc.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvcs/" + pvc.EntityData.SegmentPath
    pvc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pvc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pvc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pvc.EntityData.Children = types.NewOrderedMap()
    pvc.EntityData.Children.Append("shape", types.YChild{"Shape", &pvc.Shape})
    pvc.EntityData.Children.Append("oam-emulation", types.YChild{"OamEmulation", &pvc.OamEmulation})
    pvc.EntityData.Children.Append("cell-packing", types.YChild{"CellPacking", &pvc.CellPacking})
    pvc.EntityData.Leafs = types.NewOrderedMap()
    pvc.EntityData.Leafs.Append("vpi", types.YLeaf{"Vpi", pvc.Vpi})
    pvc.EntityData.Leafs.Append("vci", types.YLeaf{"Vci", pvc.Vci})
    pvc.EntityData.Leafs.Append("pv-ctype", types.YLeaf{"PvCtype", pvc.PvCtype})
    pvc.EntityData.Leafs.Append("vc-class", types.YLeaf{"VcClass", pvc.VcClass})
    pvc.EntityData.Leafs.Append("encapsulation", types.YLeaf{"Encapsulation", pvc.Encapsulation})
    pvc.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", pvc.Enable})
    pvc.EntityData.Leafs.Append("test-mode", types.YLeaf{"TestMode", pvc.TestMode})
    pvc.EntityData.Leafs.Append("oam-segment-endpoint", types.YLeaf{"OamSegmentEndpoint", pvc.OamSegmentEndpoint})

    pvc.EntityData.YListKeys = []string {"Vpi", "Vci", "PvCtype"}

    return &(pvc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape
// Configure traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmPvcShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "pvc"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvcs/pvc/" + shape.EntityData.SegmentPath
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = types.NewOrderedMap()
    shape.EntityData.Leafs = types.NewOrderedMap()
    shape.EntityData.Leafs.Append("type", types.YLeaf{"Type", shape.Type})
    shape.EntityData.Leafs.Append("peak-cell-rate", types.YLeaf{"PeakCellRate", shape.PeakCellRate})
    shape.EntityData.Leafs.Append("sustained-cell-rate", types.YLeaf{"SustainedCellRate", shape.SustainedCellRate})
    shape.EntityData.Leafs.Append("burst-size", types.YLeaf{"BurstSize", shape.BurstSize})

    shape.EntityData.YListKeys = []string {}

    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation
// L2VPN OAM emulation
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable OAM emulation. The type is interface{}.
    Enable interface{}

    // AIS cell transmit rate (1 per x seconds). The type is interface{} with
    // range: 0..60.
    AisTransmitRate interface{}
}

func (oamEmulation *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_OamEmulation) GetEntityData() *types.CommonEntityData {
    oamEmulation.EntityData.YFilter = oamEmulation.YFilter
    oamEmulation.EntityData.YangName = "oam-emulation"
    oamEmulation.EntityData.BundleName = "cisco_ios_xr"
    oamEmulation.EntityData.ParentYangName = "pvc"
    oamEmulation.EntityData.SegmentPath = "oam-emulation"
    oamEmulation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvcs/pvc/" + oamEmulation.EntityData.SegmentPath
    oamEmulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oamEmulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oamEmulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oamEmulation.EntityData.Children = types.NewOrderedMap()
    oamEmulation.EntityData.Leafs = types.NewOrderedMap()
    oamEmulation.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", oamEmulation.Enable})
    oamEmulation.EntityData.Leafs.Append("ais-transmit-rate", types.YLeaf{"AisTransmitRate", oamEmulation.AisTransmitRate})

    oamEmulation.EntityData.YListKeys = []string {}

    return &(oamEmulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking
// Configure cell-packing parameters.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum number of cells to be packed in a packet. The type is interface{}
    // with range: 2..255. This attribute is mandatory.
    MaximumCellsPacked interface{}

    // Which cell packing timer to use. The type is interface{} with range: 1..3.
    // This attribute is mandatory.
    CellPackingTimerId interface{}
}

func (cellPacking *InterfaceConfigurations_InterfaceConfiguration_Atm_Pvcs_Pvc_CellPacking) GetEntityData() *types.CommonEntityData {
    cellPacking.EntityData.YFilter = cellPacking.YFilter
    cellPacking.EntityData.YangName = "cell-packing"
    cellPacking.EntityData.BundleName = "cisco_ios_xr"
    cellPacking.EntityData.ParentYangName = "pvc"
    cellPacking.EntityData.SegmentPath = "cell-packing"
    cellPacking.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/pvcs/pvc/" + cellPacking.EntityData.SegmentPath
    cellPacking.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cellPacking.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cellPacking.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cellPacking.EntityData.Children = types.NewOrderedMap()
    cellPacking.EntityData.Leafs = types.NewOrderedMap()
    cellPacking.EntityData.Leafs.Append("maximum-cells-packed", types.YLeaf{"MaximumCellsPacked", cellPacking.MaximumCellsPacked})
    cellPacking.EntityData.Leafs.Append("cell-packing-timer-id", types.YLeaf{"CellPackingTimerId", cellPacking.CellPackingTimerId})

    cellPacking.EntityData.YListKeys = []string {}

    return &(cellPacking.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers
// Configure maximum cell-packing timers.  All
// parameters are mandatory.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Cell-packing timer1 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer1 interface{}

    // Cell-packing timer2 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer2 interface{}

    // Cell-packing timer3 (micro seconds). The type is interface{} with range:
    // 50..4095. This attribute is mandatory.
    CellPackingTimer3 interface{}
}

func (maximumCellPackingTimers *InterfaceConfigurations_InterfaceConfiguration_Atm_MaximumCellPackingTimers) GetEntityData() *types.CommonEntityData {
    maximumCellPackingTimers.EntityData.YFilter = maximumCellPackingTimers.YFilter
    maximumCellPackingTimers.EntityData.YangName = "maximum-cell-packing-timers"
    maximumCellPackingTimers.EntityData.BundleName = "cisco_ios_xr"
    maximumCellPackingTimers.EntityData.ParentYangName = "atm"
    maximumCellPackingTimers.EntityData.SegmentPath = "maximum-cell-packing-timers"
    maximumCellPackingTimers.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/" + maximumCellPackingTimers.EntityData.SegmentPath
    maximumCellPackingTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumCellPackingTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumCellPackingTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumCellPackingTimers.EntityData.Children = types.NewOrderedMap()
    maximumCellPackingTimers.EntityData.Leafs = types.NewOrderedMap()
    maximumCellPackingTimers.EntityData.Leafs.Append("cell-packing-timer1", types.YLeaf{"CellPackingTimer1", maximumCellPackingTimers.CellPackingTimer1})
    maximumCellPackingTimers.EntityData.Leafs.Append("cell-packing-timer2", types.YLeaf{"CellPackingTimer2", maximumCellPackingTimers.CellPackingTimer2})
    maximumCellPackingTimers.EntityData.Leafs.Append("cell-packing-timer3", types.YLeaf{"CellPackingTimer3", maximumCellPackingTimers.CellPackingTimer3})

    maximumCellPackingTimers.EntityData.YListKeys = []string {}

    return &(maximumCellPackingTimers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels
// VP tunnel configuration
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a VP tunnel on this interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel.
    VpTunnel []*InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
}

func (vpTunnels *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels) GetEntityData() *types.CommonEntityData {
    vpTunnels.EntityData.YFilter = vpTunnels.YFilter
    vpTunnels.EntityData.YangName = "vp-tunnels"
    vpTunnels.EntityData.BundleName = "cisco_ios_xr"
    vpTunnels.EntityData.ParentYangName = "atm"
    vpTunnels.EntityData.SegmentPath = "vp-tunnels"
    vpTunnels.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/" + vpTunnels.EntityData.SegmentPath
    vpTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vpTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vpTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vpTunnels.EntityData.Children = types.NewOrderedMap()
    vpTunnels.EntityData.Children.Append("vp-tunnel", types.YChild{"VpTunnel", nil})
    for i := range vpTunnels.VpTunnel {
        vpTunnels.EntityData.Children.Append(types.GetSegmentPath(vpTunnels.VpTunnel[i]), types.YChild{"VpTunnel", vpTunnels.VpTunnel[i]})
    }
    vpTunnels.EntityData.Leafs = types.NewOrderedMap()

    vpTunnels.EntityData.YListKeys = []string {}

    return &(vpTunnels.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel
// Configure a VP tunnel on this interface
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VPI value. The type is interface{} with range:
    // 0..4095.
    Vpi interface{}

    // Enable Hierarchical Shaping configuration. The type is interface{}.
    EnableHierarchicalShaping interface{}

    // Create the VP Tunnel. The type is interface{}.
    Enable interface{}

    // Disable F4 OAM configuration. The type is interface{}.
    DisableF4oam interface{}

    // Configure Traffic shaping parameters.
    Shape InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
}

func (vpTunnel *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel) GetEntityData() *types.CommonEntityData {
    vpTunnel.EntityData.YFilter = vpTunnel.YFilter
    vpTunnel.EntityData.YangName = "vp-tunnel"
    vpTunnel.EntityData.BundleName = "cisco_ios_xr"
    vpTunnel.EntityData.ParentYangName = "vp-tunnels"
    vpTunnel.EntityData.SegmentPath = "vp-tunnel" + types.AddKeyToken(vpTunnel.Vpi, "vpi")
    vpTunnel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/vp-tunnels/" + vpTunnel.EntityData.SegmentPath
    vpTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vpTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vpTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vpTunnel.EntityData.Children = types.NewOrderedMap()
    vpTunnel.EntityData.Children.Append("shape", types.YChild{"Shape", &vpTunnel.Shape})
    vpTunnel.EntityData.Leafs = types.NewOrderedMap()
    vpTunnel.EntityData.Leafs.Append("vpi", types.YLeaf{"Vpi", vpTunnel.Vpi})
    vpTunnel.EntityData.Leafs.Append("enable-hierarchical-shaping", types.YLeaf{"EnableHierarchicalShaping", vpTunnel.EnableHierarchicalShaping})
    vpTunnel.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", vpTunnel.Enable})
    vpTunnel.EntityData.Leafs.Append("disable-f4oam", types.YLeaf{"DisableF4oam", vpTunnel.DisableF4oam})

    vpTunnel.EntityData.YListKeys = []string {"Vpi"}

    return &(vpTunnel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape
// Configure Traffic shaping parameters
type InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic shaping type. The type is AtmVpShaping.
    Type interface{}

    // Peak cell rate (kbps). The type is interface{} with range: 8..622080.
    PeakCellRate interface{}

    // Sustained cell rate (kbps). The type is interface{} with range: 8..622080.
    SustainedCellRate interface{}

    // Burst size in cells. The type is interface{} with range: 1..8192.
    BurstSize interface{}
}

func (shape *InterfaceConfigurations_InterfaceConfiguration_Atm_VpTunnels_VpTunnel_Shape) GetEntityData() *types.CommonEntityData {
    shape.EntityData.YFilter = shape.YFilter
    shape.EntityData.YangName = "shape"
    shape.EntityData.BundleName = "cisco_ios_xr"
    shape.EntityData.ParentYangName = "vp-tunnel"
    shape.EntityData.SegmentPath = "shape"
    shape.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-atm-vcm-cfg:atm/vp-tunnels/vp-tunnel/" + shape.EntityData.SegmentPath
    shape.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shape.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shape.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shape.EntityData.Children = types.NewOrderedMap()
    shape.EntityData.Leafs = types.NewOrderedMap()
    shape.EntityData.Leafs.Append("type", types.YLeaf{"Type", shape.Type})
    shape.EntityData.Leafs.Append("peak-cell-rate", types.YLeaf{"PeakCellRate", shape.PeakCellRate})
    shape.EntityData.Leafs.Append("sustained-cell-rate", types.YLeaf{"SustainedCellRate", shape.SustainedCellRate})
    shape.EntityData.Leafs.Append("burst-size", types.YLeaf{"BurstSize", shape.BurstSize})

    shape.EntityData.YListKeys = []string {}

    return &(shape.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd
// BFD over bundle members configuration
type InterfaceConfigurations_InterfaceConfiguration_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of BFDoBM mode [cisco|ietf]. The type is BfdMode. The default
    // value is no-cfg.
    Mode interface{}

    // Configuration of BFDoBM for all address families.
    AddressFamily InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "interface-configuration"
    bfd.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bfd"
    bfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Children.Append("address-family", types.YChild{"AddressFamily", &bfd.AddressFamily})
    bfd.EntityData.Leafs = types.NewOrderedMap()
    bfd.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", bfd.Mode})

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily
// Configuration of BFDoBM for all address
// families
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of BFDoBM for IPv6 address family.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6

    // Configuration of BFDoBM for IPv4 address family.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
}

func (addressFamily *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily) GetEntityData() *types.CommonEntityData {
    addressFamily.EntityData.YFilter = addressFamily.YFilter
    addressFamily.EntityData.YangName = "address-family"
    addressFamily.EntityData.BundleName = "cisco_ios_xr"
    addressFamily.EntityData.ParentYangName = "bfd"
    addressFamily.EntityData.SegmentPath = "address-family"
    addressFamily.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/" + addressFamily.EntityData.SegmentPath
    addressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamily.EntityData.Children = types.NewOrderedMap()
    addressFamily.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &addressFamily.Ipv6})
    addressFamily.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &addressFamily.Ipv4})
    addressFamily.EntityData.Leafs = types.NewOrderedMap()

    addressFamily.EntityData.YListKeys = []string {}

    return &(addressFamily.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6
// Configuration of BFDoBM for IPv6 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Destination address for BFD sessions created by bundlemgr. The type is
    // string.
    Ipv6DestinationAddress interface{}

    // IPv6 Detection multiplier for BFD sessions created by bundlemgr. The type
    // is interface{} with range: 2..50.
    Ipv6DetectionMultiplier interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    Ipv6FastDetect interface{}

    // IPV6 Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Ipv6Interval interface{}

    // Timers associated with BFDoBM.
    Ipv6Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "address-family"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/address-family/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("ipv6-timers", types.YChild{"Ipv6Timers", &ipv6.Ipv6Timers})
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("ipv6-destination-address", types.YLeaf{"Ipv6DestinationAddress", ipv6.Ipv6DestinationAddress})
    ipv6.EntityData.Leafs.Append("ipv6-detection-multiplier", types.YLeaf{"Ipv6DetectionMultiplier", ipv6.Ipv6DetectionMultiplier})
    ipv6.EntityData.Leafs.Append("ipv6-fast-detect", types.YLeaf{"Ipv6FastDetect", ipv6.Ipv6FastDetect})
    ipv6.EntityData.Leafs.Append("ipv6-interval", types.YLeaf{"Ipv6Interval", ipv6.Ipv6Interval})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    Ipv6NborUnconfigTimer interface{}

    // IPv6 Timer associated with aggressiveness on BFD session creation. The type
    // is interface{} with range: 60..3600.
    Ipv6StartTimer interface{}
}

func (ipv6Timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv6_Ipv6Timers) GetEntityData() *types.CommonEntityData {
    ipv6Timers.EntityData.YFilter = ipv6Timers.YFilter
    ipv6Timers.EntityData.YangName = "ipv6-timers"
    ipv6Timers.EntityData.BundleName = "cisco_ios_xr"
    ipv6Timers.EntityData.ParentYangName = "ipv6"
    ipv6Timers.EntityData.SegmentPath = "ipv6-timers"
    ipv6Timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/address-family/ipv6/" + ipv6Timers.EntityData.SegmentPath
    ipv6Timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Timers.EntityData.Children = types.NewOrderedMap()
    ipv6Timers.EntityData.Leafs = types.NewOrderedMap()
    ipv6Timers.EntityData.Leafs.Append("ipv6-nbor-unconfig-timer", types.YLeaf{"Ipv6NborUnconfigTimer", ipv6Timers.Ipv6NborUnconfigTimer})
    ipv6Timers.EntityData.Leafs.Append("ipv6-start-timer", types.YLeaf{"Ipv6StartTimer", ipv6Timers.Ipv6StartTimer})

    ipv6Timers.EntityData.YListKeys = []string {}

    return &(ipv6Timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4
// Configuration of BFDoBM for IPv4 address
// family
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 3..30000.
    Interval interface{}

    // Detection multiplier for BFD sessions created by bundlemgr. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Destination address for BFD sessions created by bundlemgr. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Configure to enable BFD over bundle members. The type is interface{}.
    FastDetect interface{}

    // Container for Echo min-multiplier.
    Echo InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo

    // Timers associated with BFDoBM.
    Timers InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "address-family"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/address-family/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("echo", types.YChild{"Echo", &ipv4.Echo})
    ipv4.EntityData.Children.Append("timers", types.YChild{"Timers", &ipv4.Timers})
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", ipv4.Interval})
    ipv4.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", ipv4.DetectionMultiplier})
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("fast-detect", types.YLeaf{"FastDetect", ipv4.FastDetect})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo
// Container for Echo min-multiplier
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure echo min-interval for bundle interface. The type is interface{}
    // with range: 15..2000.
    MinInterval interface{}
}

func (echo *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Echo) GetEntityData() *types.CommonEntityData {
    echo.EntityData.YFilter = echo.YFilter
    echo.EntityData.YangName = "echo"
    echo.EntityData.BundleName = "cisco_ios_xr"
    echo.EntityData.ParentYangName = "ipv4"
    echo.EntityData.SegmentPath = "echo"
    echo.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/address-family/ipv4/" + echo.EntityData.SegmentPath
    echo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    echo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    echo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    echo.EntityData.Children = types.NewOrderedMap()
    echo.EntityData.Leafs = types.NewOrderedMap()
    echo.EntityData.Leafs.Append("min-interval", types.YLeaf{"MinInterval", echo.MinInterval})

    echo.EntityData.YListKeys = []string {}

    return &(echo.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers
// Timers associated with BFDoBM
type InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timer associated with aggressiveness on BFD session peer being
    // unconfigured. The type is interface{} with range: 60..3600.
    NborUnconfigTimer interface{}

    // Timer associated with aggressiveness on BFD session creation. The type is
    // interface{} with range: 60..3600.
    StartTimer interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Bfd_AddressFamily_Ipv4_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "ipv4"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bfd/address-family/ipv4/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("nbor-unconfig-timer", types.YLeaf{"NborUnconfigTimer", timers.NborUnconfigTimer})
    timers.EntityData.Leafs.Append("start-timer", types.YLeaf{"StartTimer", timers.StartTimer})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle
// Generic per-bundle configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the lacp-delay timeout for members of this bundle. The type is
    // interface{} with range: 1000..15000.
    LacpDelay interface{}

    // Set the lacp-fallback timeout for this bundle. The type is interface{} with
    // range: 1..120. The default value is 5.
    LacpFallback interface{}

    // Deactivate all member links (down to Standby state). The type is
    // interface{}.
    Shutdown interface{}

    // Set the wait-while timeout for members of this bundle. The type is
    // interface{} with range: 0..2000. The default value is 2000.
    WaitWhile interface{}

    // Load-balance configuration.
    BundleLoadBalancing InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing

    // Minimum criteria for a bundle to be active.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive

    // Set a limit on the number of links that can be active.
    MaximumActive InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
}

func (bundle *InterfaceConfigurations_InterfaceConfiguration_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "interface-configuration"
    bundle.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bundle"
    bundle.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + bundle.EntityData.SegmentPath
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = types.NewOrderedMap()
    bundle.EntityData.Children.Append("bundle-load-balancing", types.YChild{"BundleLoadBalancing", &bundle.BundleLoadBalancing})
    bundle.EntityData.Children.Append("minimum-active", types.YChild{"MinimumActive", &bundle.MinimumActive})
    bundle.EntityData.Children.Append("maximum-active", types.YChild{"MaximumActive", &bundle.MaximumActive})
    bundle.EntityData.Leafs = types.NewOrderedMap()
    bundle.EntityData.Leafs.Append("lacp-delay", types.YLeaf{"LacpDelay", bundle.LacpDelay})
    bundle.EntityData.Leafs.Append("lacp-fallback", types.YLeaf{"LacpFallback", bundle.LacpFallback})
    bundle.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", bundle.Shutdown})
    bundle.EntityData.Leafs.Append("wait-while", types.YLeaf{"WaitWhile", bundle.WaitWhile})

    bundle.EntityData.YListKeys = []string {}

    return &(bundle.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing
// Load-balance configuration
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set thresholds for forwarding bundle traffic within a rack. The type is
    // interface{} with range: 1..64.
    LocalizeLinks interface{}

    // Enable loadbalancing on this Bundle / EFP.
    HashFunction InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
}

func (bundleLoadBalancing *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing) GetEntityData() *types.CommonEntityData {
    bundleLoadBalancing.EntityData.YFilter = bundleLoadBalancing.YFilter
    bundleLoadBalancing.EntityData.YangName = "bundle-load-balancing"
    bundleLoadBalancing.EntityData.BundleName = "cisco_ios_xr"
    bundleLoadBalancing.EntityData.ParentYangName = "bundle"
    bundleLoadBalancing.EntityData.SegmentPath = "bundle-load-balancing"
    bundleLoadBalancing.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/" + bundleLoadBalancing.EntityData.SegmentPath
    bundleLoadBalancing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleLoadBalancing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleLoadBalancing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleLoadBalancing.EntityData.Children = types.NewOrderedMap()
    bundleLoadBalancing.EntityData.Children.Append("hash-function", types.YChild{"HashFunction", &bundleLoadBalancing.HashFunction})
    bundleLoadBalancing.EntityData.Leafs = types.NewOrderedMap()
    bundleLoadBalancing.EntityData.Leafs.Append("localize-links", types.YLeaf{"LocalizeLinks", bundleLoadBalancing.LocalizeLinks})

    bundleLoadBalancing.EntityData.YListKeys = []string {}

    return &(bundleLoadBalancing.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction
// Enable loadbalancing on this Bundle / EFP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // The specified hash function to use. The type is BundleLoadBalance. This
    // attribute is mandatory.
    HashType interface{}

    // The loadbalance hash value selected. For non-EFP Value methods, this value
    // must be set to 1. The type is interface{} with range: 1..64. This attribute
    // is mandatory.
    HashValue interface{}
}

func (hashFunction *InterfaceConfigurations_InterfaceConfiguration_Bundle_BundleLoadBalancing_HashFunction) GetEntityData() *types.CommonEntityData {
    hashFunction.EntityData.YFilter = hashFunction.YFilter
    hashFunction.EntityData.YangName = "hash-function"
    hashFunction.EntityData.BundleName = "cisco_ios_xr"
    hashFunction.EntityData.ParentYangName = "bundle-load-balancing"
    hashFunction.EntityData.SegmentPath = "hash-function"
    hashFunction.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/bundle-load-balancing/" + hashFunction.EntityData.SegmentPath
    hashFunction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hashFunction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hashFunction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hashFunction.EntityData.Children = types.NewOrderedMap()
    hashFunction.EntityData.Leafs = types.NewOrderedMap()
    hashFunction.EntityData.Leafs.Append("hash-type", types.YLeaf{"HashType", hashFunction.HashType})
    hashFunction.EntityData.Leafs.Append("hash-value", types.YLeaf{"HashValue", hashFunction.HashValue})

    hashFunction.EntityData.YListKeys = []string {}

    return &(hashFunction.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive
// Minimum criteria for a bundle to be active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active links needed to bring up a bundle. The type is interface{}
    // with range: 1..64. The default value is 1.
    Links interface{}

    // Bandwidth (in kbps) needed to bring up a bundle.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive) GetEntityData() *types.CommonEntityData {
    minimumActive.EntityData.YFilter = minimumActive.YFilter
    minimumActive.EntityData.YangName = "minimum-active"
    minimumActive.EntityData.BundleName = "cisco_ios_xr"
    minimumActive.EntityData.ParentYangName = "bundle"
    minimumActive.EntityData.SegmentPath = "minimum-active"
    minimumActive.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/" + minimumActive.EntityData.SegmentPath
    minimumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minimumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minimumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minimumActive.EntityData.Children = types.NewOrderedMap()
    minimumActive.EntityData.Children.Append("bandwidth", types.YChild{"Bandwidth", &minimumActive.Bandwidth})
    minimumActive.EntityData.Leafs = types.NewOrderedMap()
    minimumActive.EntityData.Leafs.Append("links", types.YLeaf{"Links", minimumActive.Links})

    minimumActive.EntityData.YListKeys = []string {}

    return &(minimumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth
// Bandwidth (in kbps) needed to bring up a
// bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum Bandwidth Range. The type is BundleMinimumBandwidthRange. This
    // attribute is mandatory.
    MinBandwidthRange interface{}

    // Bandwidth. The type is interface{} with range: 1..4294967295. This
    // attribute is mandatory.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_Bundle_MinimumActive_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "minimum-active"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/minimum-active/" + bandwidth.EntityData.SegmentPath
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = types.NewOrderedMap()
    bandwidth.EntityData.Leafs = types.NewOrderedMap()
    bandwidth.EntityData.Leafs.Append("min-bandwidth-range", types.YLeaf{"MinBandwidthRange", bandwidth.MinBandwidthRange})
    bandwidth.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", bandwidth.Bandwidth})

    bandwidth.EntityData.YListKeys = []string {}

    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive
// Set a limit on the number of links that can be
// active
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of active links in a bundle.
    Links InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
}

func (maximumActive *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive) GetEntityData() *types.CommonEntityData {
    maximumActive.EntityData.YFilter = maximumActive.YFilter
    maximumActive.EntityData.YangName = "maximum-active"
    maximumActive.EntityData.BundleName = "cisco_ios_xr"
    maximumActive.EntityData.ParentYangName = "bundle"
    maximumActive.EntityData.SegmentPath = "maximum-active"
    maximumActive.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/" + maximumActive.EntityData.SegmentPath
    maximumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumActive.EntityData.Children = types.NewOrderedMap()
    maximumActive.EntityData.Children.Append("links", types.YChild{"Links", &maximumActive.Links})
    maximumActive.EntityData.Leafs = types.NewOrderedMap()

    maximumActive.EntityData.YListKeys = []string {}

    return &(maximumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links
// Maximum number of active links in a bundle
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of active links. The type is interface{} with range: 1..64. This
    // attribute is mandatory.
    Links interface{}

    // Maximum active links mode. The type is BundleMaximumActiveLinksMode.
    MaxActiveLinksMode interface{}
}

func (links *InterfaceConfigurations_InterfaceConfiguration_Bundle_MaximumActive_Links) GetEntityData() *types.CommonEntityData {
    links.EntityData.YFilter = links.YFilter
    links.EntityData.YangName = "links"
    links.EntityData.BundleName = "cisco_ios_xr"
    links.EntityData.ParentYangName = "maximum-active"
    links.EntityData.SegmentPath = "links"
    links.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle/maximum-active/" + links.EntityData.SegmentPath
    links.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    links.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    links.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    links.EntityData.Children = types.NewOrderedMap()
    links.EntityData.Leafs = types.NewOrderedMap()
    links.EntityData.Leafs.Append("links", types.YLeaf{"Links", links.Links})
    links.EntityData.Leafs.Append("max-active-links-mode", types.YLeaf{"MaxActiveLinksMode", links.MaxActiveLinksMode})

    links.EntityData.YListKeys = []string {}

    return &(links.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp
// Link Aggregation Control Protocol per-interface
// configuration (for bundle or member)
type InterfaceConfigurations_InterfaceConfiguration_Lacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System priority for this bundle. Lower value is higher priority. The type
    // is interface{} with range: 1..65535.
    SystemPriority interface{}

    // Lacp period for the bundle. The type is one of the following types:
    // enumeration BundlePeriod, or int with range: 1..1000.
    Period interface{}

    // Collector Max Delay value to signal to the LACP partner. The type is
    // interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // Configure to enable lacp non-revertive mode. The type is interface{}.
    LacpNonrevertive interface{}

    // Lacp mode for the bundle. The type is BundleMode.
    Mode interface{}

    // Configure to enable the fast-switchover mode. The type is interface{}.
    FastSwitchover interface{}

    // Suppress flaps on switchover for the specified period (in ms). The type is
    // interface{} with range: 100..65535.
    SuppressFlaps interface{}

    // System identifier for this bundle. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SystemMac interface{}

    // LACP period to request from the partner (LACP standard short period, or
    // rate in milliseconds for use with Cisco-specific extensions). Default is
    // LACP standard long period (30s). The type is one of the following types:
    // enumeration PeriodShortEnum Units are millisecond., or int with range:
    // 1..1000 Units are millisecond..
    PeriodShort interface{}

    // Log churn notifications on the specified system(s). The type is
    // ChurnLogging.
    ChurnLogging interface{}

    // Enable bundle Cisco extensions.
    CiscoExtensions InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions

    // Set timeout values for LACP-related timers.
    Timeout InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
}

func (lacp *InterfaceConfigurations_InterfaceConfiguration_Lacp) GetEntityData() *types.CommonEntityData {
    lacp.EntityData.YFilter = lacp.YFilter
    lacp.EntityData.YangName = "lacp"
    lacp.EntityData.BundleName = "cisco_ios_xr"
    lacp.EntityData.ParentYangName = "interface-configuration"
    lacp.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:lacp"
    lacp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + lacp.EntityData.SegmentPath
    lacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacp.EntityData.Children = types.NewOrderedMap()
    lacp.EntityData.Children.Append("cisco-extensions", types.YChild{"CiscoExtensions", &lacp.CiscoExtensions})
    lacp.EntityData.Children.Append("timeout", types.YChild{"Timeout", &lacp.Timeout})
    lacp.EntityData.Leafs = types.NewOrderedMap()
    lacp.EntityData.Leafs.Append("system-priority", types.YLeaf{"SystemPriority", lacp.SystemPriority})
    lacp.EntityData.Leafs.Append("period", types.YLeaf{"Period", lacp.Period})
    lacp.EntityData.Leafs.Append("collector-max-delay", types.YLeaf{"CollectorMaxDelay", lacp.CollectorMaxDelay})
    lacp.EntityData.Leafs.Append("lacp-nonrevertive", types.YLeaf{"LacpNonrevertive", lacp.LacpNonrevertive})
    lacp.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", lacp.Mode})
    lacp.EntityData.Leafs.Append("fast-switchover", types.YLeaf{"FastSwitchover", lacp.FastSwitchover})
    lacp.EntityData.Leafs.Append("suppress-flaps", types.YLeaf{"SuppressFlaps", lacp.SuppressFlaps})
    lacp.EntityData.Leafs.Append("system-mac", types.YLeaf{"SystemMac", lacp.SystemMac})
    lacp.EntityData.Leafs.Append("period-short", types.YLeaf{"PeriodShort", lacp.PeriodShort})
    lacp.EntityData.Leafs.Append("churn-logging", types.YLeaf{"ChurnLogging", lacp.ChurnLogging})

    lacp.EntityData.YListKeys = []string {}

    return &(lacp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions
// Enable bundle Cisco extensions
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Cisco extensions. The type is interface{}. This attribute is mandatory.
    CiscoExt interface{}

    // Specific Cisco extension to enable / disable. The type is
    // BundleCiscoExtTypes.
    CiscoExtType interface{}
}

func (ciscoExtensions *InterfaceConfigurations_InterfaceConfiguration_Lacp_CiscoExtensions) GetEntityData() *types.CommonEntityData {
    ciscoExtensions.EntityData.YFilter = ciscoExtensions.YFilter
    ciscoExtensions.EntityData.YangName = "cisco-extensions"
    ciscoExtensions.EntityData.BundleName = "cisco_ios_xr"
    ciscoExtensions.EntityData.ParentYangName = "lacp"
    ciscoExtensions.EntityData.SegmentPath = "cisco-extensions"
    ciscoExtensions.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:lacp/" + ciscoExtensions.EntityData.SegmentPath
    ciscoExtensions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoExtensions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoExtensions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoExtensions.EntityData.Children = types.NewOrderedMap()
    ciscoExtensions.EntityData.Leafs = types.NewOrderedMap()
    ciscoExtensions.EntityData.Leafs.Append("cisco-ext", types.YLeaf{"CiscoExt", ciscoExtensions.CiscoExt})
    ciscoExtensions.EntityData.Leafs.Append("cisco-ext-type", types.YLeaf{"CiscoExtType", ciscoExtensions.CiscoExtType})

    ciscoExtensions.EntityData.YListKeys = []string {}

    return &(ciscoExtensions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout
// Set timeout values for LACP-related timers
type InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the timeout between expired and defaulted states. The type is
    // interface{} with range: 0..3000.
    RxDefault interface{}

    // The time in milliseconds for which to run the timer. The type is
    // interface{} with range: 0..120.
    ActorChurn interface{}

    // Set the timeout to use before declaring partner churn. The type is
    // interface{} with range: 0..120.
    PartnerChurn interface{}
}

func (timeout *InterfaceConfigurations_InterfaceConfiguration_Lacp_Timeout) GetEntityData() *types.CommonEntityData {
    timeout.EntityData.YFilter = timeout.YFilter
    timeout.EntityData.YangName = "timeout"
    timeout.EntityData.BundleName = "cisco_ios_xr"
    timeout.EntityData.ParentYangName = "lacp"
    timeout.EntityData.SegmentPath = "timeout"
    timeout.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:lacp/" + timeout.EntityData.SegmentPath
    timeout.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timeout.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timeout.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timeout.EntityData.Children = types.NewOrderedMap()
    timeout.EntityData.Leafs = types.NewOrderedMap()
    timeout.EntityData.Leafs.Append("rx-default", types.YLeaf{"RxDefault", timeout.RxDefault})
    timeout.EntityData.Leafs.Append("actor-churn", types.YLeaf{"ActorChurn", timeout.ActorChurn})
    timeout.EntityData.Leafs.Append("partner-churn", types.YLeaf{"PartnerChurn", timeout.PartnerChurn})

    timeout.EntityData.YListKeys = []string {}

    return &(timeout.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_BundleMember
// Generic per-member configuration
type InterfaceConfigurations_InterfaceConfiguration_BundleMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority for this port. Lower value is higher priority. The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Add the port to an aggregated interface.
    Id InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
}

func (bundleMember *InterfaceConfigurations_InterfaceConfiguration_BundleMember) GetEntityData() *types.CommonEntityData {
    bundleMember.EntityData.YFilter = bundleMember.YFilter
    bundleMember.EntityData.YangName = "bundle-member"
    bundleMember.EntityData.BundleName = "cisco_ios_xr"
    bundleMember.EntityData.ParentYangName = "interface-configuration"
    bundleMember.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:bundle-member"
    bundleMember.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + bundleMember.EntityData.SegmentPath
    bundleMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMember.EntityData.Children = types.NewOrderedMap()
    bundleMember.EntityData.Children.Append("id", types.YChild{"Id", &bundleMember.Id})
    bundleMember.EntityData.Leafs = types.NewOrderedMap()
    bundleMember.EntityData.Leafs.Append("port-priority", types.YLeaf{"PortPriority", bundleMember.PortPriority})

    bundleMember.EntityData.YListKeys = []string {}

    return &(bundleMember.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id
// Add the port to an aggregated interface.
type InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of the bundle to add the port to. The type is interface{} with
    // range: 1..65535.
    BundleId interface{}

    // Port Activity. The type is BundlePortActivity.
    PortActivity interface{}
}

func (id *InterfaceConfigurations_InterfaceConfiguration_BundleMember_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "bundle-member"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:bundle-member/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("bundle-id", types.YLeaf{"BundleId", id.BundleId})
    id.EntityData.Leafs.Append("port-activity", types.YLeaf{"PortActivity", id.PortActivity})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mlacp
// Multi-chassis LACP configuration
type InterfaceConfigurations_InterfaceConfiguration_Mlacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LACP port priority (lower value is higher priority). The type is
    // interface{} with range: 1..65535. The default value is 32768.
    PortPriority interface{}

    // Set the delay before the bundle becomes active after recovery from failure.
    // The type is interface{} with range: 0..65535. The default value is 300.
    RecoveryDelay interface{}

    // Set the type of mLACP switchover to use for this bundle. The type is
    // MlacpSwitchover.
    SwitchoverType interface{}

    // Specify an ICCP Group in which this bundle should operate. The type is
    // interface{} with range: 1..4294967295.
    IccpGroup interface{}

    // Set parameters to maximize between the mLACP peers.
    Maximize InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
}

func (mlacp *InterfaceConfigurations_InterfaceConfiguration_Mlacp) GetEntityData() *types.CommonEntityData {
    mlacp.EntityData.YFilter = mlacp.YFilter
    mlacp.EntityData.YangName = "mlacp"
    mlacp.EntityData.BundleName = "cisco_ios_xr"
    mlacp.EntityData.ParentYangName = "interface-configuration"
    mlacp.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-cfg:mlacp"
    mlacp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + mlacp.EntityData.SegmentPath
    mlacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacp.EntityData.Children = types.NewOrderedMap()
    mlacp.EntityData.Children.Append("maximize", types.YChild{"Maximize", &mlacp.Maximize})
    mlacp.EntityData.Leafs = types.NewOrderedMap()
    mlacp.EntityData.Leafs.Append("port-priority", types.YLeaf{"PortPriority", mlacp.PortPriority})
    mlacp.EntityData.Leafs.Append("recovery-delay", types.YLeaf{"RecoveryDelay", mlacp.RecoveryDelay})
    mlacp.EntityData.Leafs.Append("switchover-type", types.YLeaf{"SwitchoverType", mlacp.SwitchoverType})
    mlacp.EntityData.Leafs.Append("iccp-group", types.YLeaf{"IccpGroup", mlacp.IccpGroup})

    mlacp.EntityData.YListKeys = []string {}

    return &(mlacp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize
// Set parameters to maximize between the mLACP
// peers
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // The paramenter which should be maximized. The type is
    // MlacpMaximizeParameter. This attribute is mandatory.
    MaximizeBy interface{}

    // The number of links below which to switch to the peer if it has more links
    // available. Only applicable if maximizing by links. If 0, no threshold is
    // applied. The type is interface{} with range: 0..64.
    LinkThreshold interface{}

    // The bandwidth (in kbps) below which to switch to the peer if it has more
    // bandwidth available . Only applicable if maximizing by bandwidth. If 0, no
    // threshold is applied. The type is interface{} with range: 0..4294967295.
    BandwidthThreshold interface{}
}

func (maximize *InterfaceConfigurations_InterfaceConfiguration_Mlacp_Maximize) GetEntityData() *types.CommonEntityData {
    maximize.EntityData.YFilter = maximize.YFilter
    maximize.EntityData.YangName = "maximize"
    maximize.EntityData.BundleName = "cisco_ios_xr"
    maximize.EntityData.ParentYangName = "mlacp"
    maximize.EntityData.SegmentPath = "maximize"
    maximize.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-bundlemgr-cfg:mlacp/" + maximize.EntityData.SegmentPath
    maximize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximize.EntityData.Children = types.NewOrderedMap()
    maximize.EntityData.Leafs = types.NewOrderedMap()
    maximize.EntityData.Leafs.Append("maximize-by", types.YLeaf{"MaximizeBy", maximize.MaximizeBy})
    maximize.EntityData.Leafs.Append("link-threshold", types.YLeaf{"LinkThreshold", maximize.LinkThreshold})
    maximize.EntityData.Leafs.Append("bandwidth-threshold", types.YLeaf{"BandwidthThreshold", maximize.BandwidthThreshold})

    maximize.EntityData.YListKeys = []string {}

    return &(maximize.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Cdp
// Interface specific CDP configuration
type InterfaceConfigurations_InterfaceConfiguration_Cdp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable CDP on an interface. The type is interface{}.
    Enable interface{}
}

func (cdp *InterfaceConfigurations_InterfaceConfiguration_Cdp) GetEntityData() *types.CommonEntityData {
    cdp.EntityData.YFilter = cdp.YFilter
    cdp.EntityData.YangName = "cdp"
    cdp.EntityData.BundleName = "cisco_ios_xr"
    cdp.EntityData.ParentYangName = "interface-configuration"
    cdp.EntityData.SegmentPath = "Cisco-IOS-XR-cdp-cfg:cdp"
    cdp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + cdp.EntityData.SegmentPath
    cdp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cdp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cdp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cdp.EntityData.Children = types.NewOrderedMap()
    cdp.EntityData.Leafs = types.NewOrderedMap()
    cdp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", cdp.Enable})

    cdp.EntityData.YListKeys = []string {}

    return &(cdp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics
// Optics controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..30.
    OpticsTransmitPower interface{}

    // Select Rx Enable as True or False. The type is bool.
    OpticsOtsRxEnable interface{}

    // Configure max delta among all measured channel powers . The type is
    // interface{} with range: -500..300.
    OpticsOtsChannelPowerMaxDelta interface{}

    // Configure optics loopback mode . The type is OpticsLoopback. The default
    // value is none.
    OpticsLoopback interface{}

    // Configure Optical safety remote interlock (OSRI). The type is bool.
    OpticsOtsOsri interface{}

    // Select Amplifier Gain Degrade High Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeHighThreshold interface{}

    // Select RX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsRxVoaAttenuation interface{}

    // Configure optics fec . The type is OpticsFec. The default value is
    // fec-none.
    OpticsFec interface{}

    // Select DGD high threshold(in units of 0.1ps). The type is interface{} with
    // range: 0..18000.
    OpticsDgdHighThreshold interface{}

    // Select Amplifier Channel Power(in units of 0 .1dBm). The type is
    // interface{} with range: -500..300.
    OpticsOtsAmplifierChannelPower interface{}

    // Configure amplifier working mode. The type is OpticsOtsAmpliControlMode.
    OpticsOtsAmplifierControlMode interface{}

    // Rx Low threshold delta value in units of 0.1dB. The type is interface{}
    // with range: 0..300.
    OpticsOtsRxLowThresholdDelta interface{}

    // Select Amplifier Gain value(in units of 0.1dBm). The type is interface{}
    // with range: 0..500.
    OpticsOtsAmplifierGain interface{}

    // Normal or extended Ampli Gain Range. The type is OpticsOtsAmpliGainRange.
    OpticsOtsAmplifierGainRange interface{}

    // Configure safety Control Mode. The type is OpticsOtsSafetyControlMode.
    OpticsOtsSafetyControlMode interface{}

    // Select min chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMin interface{}

    // Select TX Voa Attenuation Setpoint(in units of 0.1dBm). The type is
    // interface{} with range: 0..200.
    OpticsOtsTxVoaAttenuation interface{}

    // Select Tx Enable as True or False. The type is bool.
    OpticsOtsTxEnable interface{}

    // Select Amplifier Tilt value(in units of 0.1dB). The type is interface{}
    // with range: -50..50.
    OpticsOtsAmplifierTilt interface{}

    // Configure optics transmit laser shutdown . The type is bool.
    OpticsTransmitShutdown interface{}

    // BaudRate(Max Length 10). The type is string with length: 1..20.
    OpticsBaudRate interface{}

    // Select Performance Monitoring as Enable or Disable. The type is bool. The
    // default value is true.
    OpticsPerformanceMonitoring interface{}

    // Select max chromatic dispersion (in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdMax interface{}

    // BitsPerSymbol(Max Length 9). The type is string with length: 1..20.
    OpticsBitsPerSymbol interface{}

    // Select power level (in units of percentage). The type is interface{} with
    // range: 0..100.
    OpticsLbcHighThreshold interface{}

    // Select chromatic dispersion high threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdHighThreshold interface{}

    // Select OSNR low threshold(in units of 0.01db). The type is interface{} with
    // range: 0..4000.
    OpticsOsnrLowThreshold interface{}

    // Select Amplifier Gain Degrade Low Threshold(in units of 0.1dBm). The type
    // is interface{} with range: 0..500.
    OpticsOtsAmplifierGainDegradeLowThreshold interface{}

    // Select chromatic dispersion low threshold(in units of ps/nm). The type is
    // interface{} with range: -280000..280000.
    OpticsCdLowThreshold interface{}

    // breakout mode configuration. The type is string with pattern:
    // b'(4x10)|(4x25)'.
    Breakout interface{}

    // Configure Rx threshold.
    RxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds

    // Configure Network srlgs.
    OpticsNetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs

    // Configure optics DWDM Carrier.
    OpticsDwdmCarrier InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier

    // Optics lanes.
    OpticsLanes InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes

    // Configure Tx threshold.
    TxThresholds InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
}

func (optics *InterfaceConfigurations_InterfaceConfiguration_Optics) GetEntityData() *types.CommonEntityData {
    optics.EntityData.YFilter = optics.YFilter
    optics.EntityData.YangName = "optics"
    optics.EntityData.BundleName = "cisco_ios_xr"
    optics.EntityData.ParentYangName = "interface-configuration"
    optics.EntityData.SegmentPath = "Cisco-IOS-XR-controller-optics-cfg:optics"
    optics.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + optics.EntityData.SegmentPath
    optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optics.EntityData.Children = types.NewOrderedMap()
    optics.EntityData.Children.Append("rx-thresholds", types.YChild{"RxThresholds", &optics.RxThresholds})
    optics.EntityData.Children.Append("optics-network-srlgs", types.YChild{"OpticsNetworkSrlgs", &optics.OpticsNetworkSrlgs})
    optics.EntityData.Children.Append("optics-dwdm-carrier", types.YChild{"OpticsDwdmCarrier", &optics.OpticsDwdmCarrier})
    optics.EntityData.Children.Append("optics-lanes", types.YChild{"OpticsLanes", &optics.OpticsLanes})
    optics.EntityData.Children.Append("tx-thresholds", types.YChild{"TxThresholds", &optics.TxThresholds})
    optics.EntityData.Leafs = types.NewOrderedMap()
    optics.EntityData.Leafs.Append("optics-transmit-power", types.YLeaf{"OpticsTransmitPower", optics.OpticsTransmitPower})
    optics.EntityData.Leafs.Append("optics-ots-rx-enable", types.YLeaf{"OpticsOtsRxEnable", optics.OpticsOtsRxEnable})
    optics.EntityData.Leafs.Append("optics-ots-channel-power-max-delta", types.YLeaf{"OpticsOtsChannelPowerMaxDelta", optics.OpticsOtsChannelPowerMaxDelta})
    optics.EntityData.Leafs.Append("optics-loopback", types.YLeaf{"OpticsLoopback", optics.OpticsLoopback})
    optics.EntityData.Leafs.Append("optics-ots-osri", types.YLeaf{"OpticsOtsOsri", optics.OpticsOtsOsri})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-gain-degrade-high-threshold", types.YLeaf{"OpticsOtsAmplifierGainDegradeHighThreshold", optics.OpticsOtsAmplifierGainDegradeHighThreshold})
    optics.EntityData.Leafs.Append("optics-ots-rx-voa-attenuation", types.YLeaf{"OpticsOtsRxVoaAttenuation", optics.OpticsOtsRxVoaAttenuation})
    optics.EntityData.Leafs.Append("optics-fec", types.YLeaf{"OpticsFec", optics.OpticsFec})
    optics.EntityData.Leafs.Append("optics-dgd-high-threshold", types.YLeaf{"OpticsDgdHighThreshold", optics.OpticsDgdHighThreshold})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-channel-power", types.YLeaf{"OpticsOtsAmplifierChannelPower", optics.OpticsOtsAmplifierChannelPower})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-control-mode", types.YLeaf{"OpticsOtsAmplifierControlMode", optics.OpticsOtsAmplifierControlMode})
    optics.EntityData.Leafs.Append("optics-ots-rx-low-threshold-delta", types.YLeaf{"OpticsOtsRxLowThresholdDelta", optics.OpticsOtsRxLowThresholdDelta})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-gain", types.YLeaf{"OpticsOtsAmplifierGain", optics.OpticsOtsAmplifierGain})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-gain-range", types.YLeaf{"OpticsOtsAmplifierGainRange", optics.OpticsOtsAmplifierGainRange})
    optics.EntityData.Leafs.Append("optics-ots-safety-control-mode", types.YLeaf{"OpticsOtsSafetyControlMode", optics.OpticsOtsSafetyControlMode})
    optics.EntityData.Leafs.Append("optics-cd-min", types.YLeaf{"OpticsCdMin", optics.OpticsCdMin})
    optics.EntityData.Leafs.Append("optics-ots-tx-voa-attenuation", types.YLeaf{"OpticsOtsTxVoaAttenuation", optics.OpticsOtsTxVoaAttenuation})
    optics.EntityData.Leafs.Append("optics-ots-tx-enable", types.YLeaf{"OpticsOtsTxEnable", optics.OpticsOtsTxEnable})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-tilt", types.YLeaf{"OpticsOtsAmplifierTilt", optics.OpticsOtsAmplifierTilt})
    optics.EntityData.Leafs.Append("optics-transmit-shutdown", types.YLeaf{"OpticsTransmitShutdown", optics.OpticsTransmitShutdown})
    optics.EntityData.Leafs.Append("optics-baud-rate", types.YLeaf{"OpticsBaudRate", optics.OpticsBaudRate})
    optics.EntityData.Leafs.Append("optics-performance-monitoring", types.YLeaf{"OpticsPerformanceMonitoring", optics.OpticsPerformanceMonitoring})
    optics.EntityData.Leafs.Append("optics-cd-max", types.YLeaf{"OpticsCdMax", optics.OpticsCdMax})
    optics.EntityData.Leafs.Append("optics-bits-per-symbol", types.YLeaf{"OpticsBitsPerSymbol", optics.OpticsBitsPerSymbol})
    optics.EntityData.Leafs.Append("optics-lbc-high-threshold", types.YLeaf{"OpticsLbcHighThreshold", optics.OpticsLbcHighThreshold})
    optics.EntityData.Leafs.Append("optics-cd-high-threshold", types.YLeaf{"OpticsCdHighThreshold", optics.OpticsCdHighThreshold})
    optics.EntityData.Leafs.Append("optics-osnr-low-threshold", types.YLeaf{"OpticsOsnrLowThreshold", optics.OpticsOsnrLowThreshold})
    optics.EntityData.Leafs.Append("optics-ots-amplifier-gain-degrade-low-threshold", types.YLeaf{"OpticsOtsAmplifierGainDegradeLowThreshold", optics.OpticsOtsAmplifierGainDegradeLowThreshold})
    optics.EntityData.Leafs.Append("optics-cd-low-threshold", types.YLeaf{"OpticsCdLowThreshold", optics.OpticsCdLowThreshold})
    optics.EntityData.Leafs.Append("breakout", types.YLeaf{"Breakout", optics.Breakout})

    optics.EntityData.YListKeys = []string {}

    return &(optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds
// Configure Rx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optics RX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold.
    RxThreshold []*InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
}

func (rxThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds) GetEntityData() *types.CommonEntityData {
    rxThresholds.EntityData.YFilter = rxThresholds.YFilter
    rxThresholds.EntityData.YangName = "rx-thresholds"
    rxThresholds.EntityData.BundleName = "cisco_ios_xr"
    rxThresholds.EntityData.ParentYangName = "optics"
    rxThresholds.EntityData.SegmentPath = "rx-thresholds"
    rxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/" + rxThresholds.EntityData.SegmentPath
    rxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxThresholds.EntityData.Children = types.NewOrderedMap()
    rxThresholds.EntityData.Children.Append("rx-threshold", types.YChild{"RxThreshold", nil})
    for i := range rxThresholds.RxThreshold {
        rxThresholds.EntityData.Children.Append(types.GetSegmentPath(rxThresholds.RxThreshold[i]), types.YChild{"RxThreshold", rxThresholds.RxThreshold[i]})
    }
    rxThresholds.EntityData.Leafs = types.NewOrderedMap()

    rxThresholds.EntityData.YListKeys = []string {}

    return &(rxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold
// Optics RX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Low or high rx threshold. The type is Threshold.
    RxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    RxThreshold interface{}
}

func (rxThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_RxThresholds_RxThreshold) GetEntityData() *types.CommonEntityData {
    rxThreshold.EntityData.YFilter = rxThreshold.YFilter
    rxThreshold.EntityData.YangName = "rx-threshold"
    rxThreshold.EntityData.BundleName = "cisco_ios_xr"
    rxThreshold.EntityData.ParentYangName = "rx-thresholds"
    rxThreshold.EntityData.SegmentPath = "rx-threshold" + types.AddKeyToken(rxThreshold.RxThresholdType, "rx-threshold-type")
    rxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/rx-thresholds/" + rxThreshold.EntityData.SegmentPath
    rxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxThreshold.EntityData.Children = types.NewOrderedMap()
    rxThreshold.EntityData.Leafs = types.NewOrderedMap()
    rxThreshold.EntityData.Leafs.Append("rx-threshold-type", types.YLeaf{"RxThresholdType", rxThreshold.RxThresholdType})
    rxThreshold.EntityData.Leafs.Append("rx-threshold", types.YLeaf{"RxThreshold", rxThreshold.RxThreshold})

    rxThreshold.EntityData.YListKeys = []string {"RxThresholdType"}

    return &(rxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg.
    OpticsNetworkSrlg []*InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
}

func (opticsNetworkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs) GetEntityData() *types.CommonEntityData {
    opticsNetworkSrlgs.EntityData.YFilter = opticsNetworkSrlgs.YFilter
    opticsNetworkSrlgs.EntityData.YangName = "optics-network-srlgs"
    opticsNetworkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    opticsNetworkSrlgs.EntityData.ParentYangName = "optics"
    opticsNetworkSrlgs.EntityData.SegmentPath = "optics-network-srlgs"
    opticsNetworkSrlgs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/" + opticsNetworkSrlgs.EntityData.SegmentPath
    opticsNetworkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsNetworkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsNetworkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsNetworkSrlgs.EntityData.Children = types.NewOrderedMap()
    opticsNetworkSrlgs.EntityData.Children.Append("optics-network-srlg", types.YChild{"OpticsNetworkSrlg", nil})
    for i := range opticsNetworkSrlgs.OpticsNetworkSrlg {
        opticsNetworkSrlgs.EntityData.Children.Append(types.GetSegmentPath(opticsNetworkSrlgs.OpticsNetworkSrlg[i]), types.YChild{"OpticsNetworkSrlg", opticsNetworkSrlgs.OpticsNetworkSrlg[i]})
    }
    opticsNetworkSrlgs.EntityData.Leafs = types.NewOrderedMap()

    opticsNetworkSrlgs.EntityData.YListKeys = []string {}

    return &(opticsNetworkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (opticsNetworkSrlg *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsNetworkSrlgs_OpticsNetworkSrlg) GetEntityData() *types.CommonEntityData {
    opticsNetworkSrlg.EntityData.YFilter = opticsNetworkSrlg.YFilter
    opticsNetworkSrlg.EntityData.YangName = "optics-network-srlg"
    opticsNetworkSrlg.EntityData.BundleName = "cisco_ios_xr"
    opticsNetworkSrlg.EntityData.ParentYangName = "optics-network-srlgs"
    opticsNetworkSrlg.EntityData.SegmentPath = "optics-network-srlg" + types.AddKeyToken(opticsNetworkSrlg.SetId, "set-id")
    opticsNetworkSrlg.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/optics-network-srlgs/" + opticsNetworkSrlg.EntityData.SegmentPath
    opticsNetworkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsNetworkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsNetworkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsNetworkSrlg.EntityData.Children = types.NewOrderedMap()
    opticsNetworkSrlg.EntityData.Leafs = types.NewOrderedMap()
    opticsNetworkSrlg.EntityData.Leafs.Append("set-id", types.YLeaf{"SetId", opticsNetworkSrlg.SetId})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg1", types.YLeaf{"Srlg1", opticsNetworkSrlg.Srlg1})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg2", types.YLeaf{"Srlg2", opticsNetworkSrlg.Srlg2})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg3", types.YLeaf{"Srlg3", opticsNetworkSrlg.Srlg3})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg4", types.YLeaf{"Srlg4", opticsNetworkSrlg.Srlg4})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg5", types.YLeaf{"Srlg5", opticsNetworkSrlg.Srlg5})
    opticsNetworkSrlg.EntityData.Leafs.Append("srlg6", types.YLeaf{"Srlg6", opticsNetworkSrlg.Srlg6})

    opticsNetworkSrlg.EntityData.YListKeys = []string {"SetId"}

    return &(opticsNetworkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier
// Configure optics DWDM Carrier
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // DWDM Channel Grid Type. The type is OpticsDwdmCarrierGrid. This attribute
    // is mandatory.
    GridType interface{}

    // DWDM Channel Parameter Type ITU-Channel or Frequency or Wavelength. The
    // type is OpticsDwdmCarrierParam. This attribute is mandatory.
    ParamType interface{}

    // Type ITU-Channel Range 1-100, Frequency Range 19115-19610, Wavelength Range
    // 1528773-1568362, 100MHz Frequency Range 1911500-1961000. The type is
    // interface{} with range: 1..1961000. This attribute is mandatory.
    ParamValue interface{}
}

func (opticsDwdmCarrier *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsDwdmCarrier) GetEntityData() *types.CommonEntityData {
    opticsDwdmCarrier.EntityData.YFilter = opticsDwdmCarrier.YFilter
    opticsDwdmCarrier.EntityData.YangName = "optics-dwdm-carrier"
    opticsDwdmCarrier.EntityData.BundleName = "cisco_ios_xr"
    opticsDwdmCarrier.EntityData.ParentYangName = "optics"
    opticsDwdmCarrier.EntityData.SegmentPath = "optics-dwdm-carrier"
    opticsDwdmCarrier.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/" + opticsDwdmCarrier.EntityData.SegmentPath
    opticsDwdmCarrier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsDwdmCarrier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsDwdmCarrier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsDwdmCarrier.EntityData.Children = types.NewOrderedMap()
    opticsDwdmCarrier.EntityData.Leafs = types.NewOrderedMap()
    opticsDwdmCarrier.EntityData.Leafs.Append("grid-type", types.YLeaf{"GridType", opticsDwdmCarrier.GridType})
    opticsDwdmCarrier.EntityData.Leafs.Append("param-type", types.YLeaf{"ParamType", opticsDwdmCarrier.ParamType})
    opticsDwdmCarrier.EntityData.Leafs.Append("param-value", types.YLeaf{"ParamValue", opticsDwdmCarrier.ParamValue})

    opticsDwdmCarrier.EntityData.YListKeys = []string {}

    return &(opticsDwdmCarrier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes
// Optics lanes
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Lane. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane.
    OpticsLane []*InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
}

func (opticsLanes *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes) GetEntityData() *types.CommonEntityData {
    opticsLanes.EntityData.YFilter = opticsLanes.YFilter
    opticsLanes.EntityData.YangName = "optics-lanes"
    opticsLanes.EntityData.BundleName = "cisco_ios_xr"
    opticsLanes.EntityData.ParentYangName = "optics"
    opticsLanes.EntityData.SegmentPath = "optics-lanes"
    opticsLanes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/" + opticsLanes.EntityData.SegmentPath
    opticsLanes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsLanes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsLanes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsLanes.EntityData.Children = types.NewOrderedMap()
    opticsLanes.EntityData.Children.Append("optics-lane", types.YChild{"OpticsLane", nil})
    for i := range opticsLanes.OpticsLane {
        opticsLanes.EntityData.Children.Append(types.GetSegmentPath(opticsLanes.OpticsLane[i]), types.YChild{"OpticsLane", opticsLanes.OpticsLane[i]})
    }
    opticsLanes.EntityData.Leafs = types.NewOrderedMap()

    opticsLanes.EntityData.YListKeys = []string {}

    return &(opticsLanes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane
// Lane
type InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Lane Number. The type is interface{} with range:
    // 0..4294967295.
    Index interface{}

    // Configure description for this Lane. The type is string with length:
    // 1..255.
    Description interface{}
}

func (opticsLane *InterfaceConfigurations_InterfaceConfiguration_Optics_OpticsLanes_OpticsLane) GetEntityData() *types.CommonEntityData {
    opticsLane.EntityData.YFilter = opticsLane.YFilter
    opticsLane.EntityData.YangName = "optics-lane"
    opticsLane.EntityData.BundleName = "cisco_ios_xr"
    opticsLane.EntityData.ParentYangName = "optics-lanes"
    opticsLane.EntityData.SegmentPath = "optics-lane" + types.AddKeyToken(opticsLane.Index, "index")
    opticsLane.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/optics-lanes/" + opticsLane.EntityData.SegmentPath
    opticsLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsLane.EntityData.Children = types.NewOrderedMap()
    opticsLane.EntityData.Leafs = types.NewOrderedMap()
    opticsLane.EntityData.Leafs.Append("index", types.YLeaf{"Index", opticsLane.Index})
    opticsLane.EntityData.Leafs.Append("description", types.YLeaf{"Description", opticsLane.Description})

    opticsLane.EntityData.YListKeys = []string {"Index"}

    return &(opticsLane.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds
// Configure Tx threshold
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optics TX Low or high threshold configuration. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold.
    TxThreshold []*InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
}

func (txThresholds *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds) GetEntityData() *types.CommonEntityData {
    txThresholds.EntityData.YFilter = txThresholds.YFilter
    txThresholds.EntityData.YangName = "tx-thresholds"
    txThresholds.EntityData.BundleName = "cisco_ios_xr"
    txThresholds.EntityData.ParentYangName = "optics"
    txThresholds.EntityData.SegmentPath = "tx-thresholds"
    txThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/" + txThresholds.EntityData.SegmentPath
    txThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txThresholds.EntityData.Children = types.NewOrderedMap()
    txThresholds.EntityData.Children.Append("tx-threshold", types.YChild{"TxThreshold", nil})
    for i := range txThresholds.TxThreshold {
        txThresholds.EntityData.Children.Append(types.GetSegmentPath(txThresholds.TxThreshold[i]), types.YChild{"TxThreshold", txThresholds.TxThreshold[i]})
    }
    txThresholds.EntityData.Leafs = types.NewOrderedMap()

    txThresholds.EntityData.YListKeys = []string {}

    return &(txThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold
// Optics TX Low or high threshold configuration
type InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Low or high tx threshold. The type is Threshold.
    TxThresholdType interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -400..300. This attribute is mandatory.
    TxThreshold interface{}
}

func (txThreshold *InterfaceConfigurations_InterfaceConfiguration_Optics_TxThresholds_TxThreshold) GetEntityData() *types.CommonEntityData {
    txThreshold.EntityData.YFilter = txThreshold.YFilter
    txThreshold.EntityData.YangName = "tx-threshold"
    txThreshold.EntityData.BundleName = "cisco_ios_xr"
    txThreshold.EntityData.ParentYangName = "tx-thresholds"
    txThreshold.EntityData.SegmentPath = "tx-threshold" + types.AddKeyToken(txThreshold.TxThresholdType, "tx-threshold-type")
    txThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-optics-cfg:optics/tx-thresholds/" + txThreshold.EntityData.SegmentPath
    txThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txThreshold.EntityData.Children = types.NewOrderedMap()
    txThreshold.EntityData.Leafs = types.NewOrderedMap()
    txThreshold.EntityData.Leafs.Append("tx-threshold-type", types.YLeaf{"TxThresholdType", txThreshold.TxThresholdType})
    txThreshold.EntityData.Leafs.Append("tx-threshold", types.YLeaf{"TxThreshold", txThreshold.TxThreshold})

    txThreshold.EntityData.YListKeys = []string {"TxThresholdType"}

    return &(txThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu
// OTU port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Otu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // General Communication Channel configuration. The type is interface{}.
    Gcc interface{}

    // Signal failure threshold. The type is interface{} with range: 5..9.
    Sf interface{}

    // Configure secondary admin state . The type is OtnSecAdminState. The default
    // value is normal.
    SecondaryAdminState interface{}

    // Signal degrade threshold. The type is interface{} with range: 5..9.
    Sd interface{}

    // Configure performance monitoring. The type is OtnPerMon. The default value
    // is enable.
    PerformanceMonitoring interface{}

    // Type of Loopback. The type is OtnLoopback.
    Loopback interface{}

    // Configure forward error correction. The type is OtuForwardErrorCorrection.
    // The default value is none.
    Fec interface{}

    // Configure OTN Send TTI value for OS config.
    OtnSendTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos

    // Configure OTN Send TTI value for DAPI configs.
    OtnSendTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi

    // Configure OTN Expected TTI value for SAPI configs.
    OtnExpectedTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi

    // Configure Proactive Protection.
    ProactiveProtection InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs

    // Configure OTN Send TTI value for Full ASCII/HEX.
    OtnSendTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti

    // Configure OTN Expected TTI value for DAPI configs.
    OtnExpectedTtitcmdapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi

    // Configure OTN Send TTI value for SAPI configs.
    OtnSendTtisapi InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi

    // Enable Prbs And configure.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs

    // Configure OTN Expected TTI value for OS config.
    OtnExpectedTtitcmos InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos

    // Configure OTN Expected TTI value for Full ASCII/HEX.
    OtnExpectedTti InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Otu) GetEntityData() *types.CommonEntityData {
    otu.EntityData.YFilter = otu.YFilter
    otu.EntityData.YangName = "otu"
    otu.EntityData.BundleName = "cisco_ios_xr"
    otu.EntityData.ParentYangName = "interface-configuration"
    otu.EntityData.SegmentPath = "Cisco-IOS-XR-controller-otu-cfg:otu"
    otu.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + otu.EntityData.SegmentPath
    otu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otu.EntityData.Children = types.NewOrderedMap()
    otu.EntityData.Children.Append("otn-send-ttitcmos", types.YChild{"OtnSendTtitcmos", &otu.OtnSendTtitcmos})
    otu.EntityData.Children.Append("otn-send-ttitcmdapi", types.YChild{"OtnSendTtitcmdapi", &otu.OtnSendTtitcmdapi})
    otu.EntityData.Children.Append("otn-expected-ttisapi", types.YChild{"OtnExpectedTtisapi", &otu.OtnExpectedTtisapi})
    otu.EntityData.Children.Append("proactive-protection", types.YChild{"ProactiveProtection", &otu.ProactiveProtection})
    otu.EntityData.Children.Append("network-srlgs", types.YChild{"NetworkSrlgs", &otu.NetworkSrlgs})
    otu.EntityData.Children.Append("otn-send-tti", types.YChild{"OtnSendTti", &otu.OtnSendTti})
    otu.EntityData.Children.Append("otn-expected-ttitcmdapi", types.YChild{"OtnExpectedTtitcmdapi", &otu.OtnExpectedTtitcmdapi})
    otu.EntityData.Children.Append("otn-send-ttisapi", types.YChild{"OtnSendTtisapi", &otu.OtnSendTtisapi})
    otu.EntityData.Children.Append("prbs", types.YChild{"Prbs", &otu.Prbs})
    otu.EntityData.Children.Append("otn-expected-ttitcmos", types.YChild{"OtnExpectedTtitcmos", &otu.OtnExpectedTtitcmos})
    otu.EntityData.Children.Append("otn-expected-tti", types.YChild{"OtnExpectedTti", &otu.OtnExpectedTti})
    otu.EntityData.Leafs = types.NewOrderedMap()
    otu.EntityData.Leafs.Append("gcc", types.YLeaf{"Gcc", otu.Gcc})
    otu.EntityData.Leafs.Append("sf", types.YLeaf{"Sf", otu.Sf})
    otu.EntityData.Leafs.Append("secondary-admin-state", types.YLeaf{"SecondaryAdminState", otu.SecondaryAdminState})
    otu.EntityData.Leafs.Append("sd", types.YLeaf{"Sd", otu.Sd})
    otu.EntityData.Leafs.Append("performance-monitoring", types.YLeaf{"PerformanceMonitoring", otu.PerformanceMonitoring})
    otu.EntityData.Leafs.Append("loopback", types.YLeaf{"Loopback", otu.Loopback})
    otu.EntityData.Leafs.Append("fec", types.YLeaf{"Fec", otu.Fec})

    otu.EntityData.YListKeys = []string {}

    return &(otu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos
// Configure OTN Send TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnSendTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmos) GetEntityData() *types.CommonEntityData {
    otnSendTtitcmos.EntityData.YFilter = otnSendTtitcmos.YFilter
    otnSendTtitcmos.EntityData.YangName = "otn-send-ttitcmos"
    otnSendTtitcmos.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtitcmos.EntityData.ParentYangName = "otu"
    otnSendTtitcmos.EntityData.SegmentPath = "otn-send-ttitcmos"
    otnSendTtitcmos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnSendTtitcmos.EntityData.SegmentPath
    otnSendTtitcmos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtitcmos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtitcmos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtitcmos.EntityData.Children = types.NewOrderedMap()
    otnSendTtitcmos.EntityData.Leafs = types.NewOrderedMap()
    otnSendTtitcmos.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnSendTtitcmos.StringType})
    otnSendTtitcmos.EntityData.Leafs.Append("osascii-string", types.YLeaf{"OsasciiString", otnSendTtitcmos.OsasciiString})
    otnSendTtitcmos.EntityData.Leafs.Append("oshex-string", types.YLeaf{"OshexString", otnSendTtitcmos.OshexString})

    otnSendTtitcmos.EntityData.YListKeys = []string {}

    return &(otnSendTtitcmos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi
// Configure OTN Send TTI value for DAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnSendTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtitcmdapi) GetEntityData() *types.CommonEntityData {
    otnSendTtitcmdapi.EntityData.YFilter = otnSendTtitcmdapi.YFilter
    otnSendTtitcmdapi.EntityData.YangName = "otn-send-ttitcmdapi"
    otnSendTtitcmdapi.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtitcmdapi.EntityData.ParentYangName = "otu"
    otnSendTtitcmdapi.EntityData.SegmentPath = "otn-send-ttitcmdapi"
    otnSendTtitcmdapi.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnSendTtitcmdapi.EntityData.SegmentPath
    otnSendTtitcmdapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtitcmdapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtitcmdapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtitcmdapi.EntityData.Children = types.NewOrderedMap()
    otnSendTtitcmdapi.EntityData.Leafs = types.NewOrderedMap()
    otnSendTtitcmdapi.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnSendTtitcmdapi.StringType})
    otnSendTtitcmdapi.EntityData.Leafs.Append("dapi-ascii-string", types.YLeaf{"DapiAsciiString", otnSendTtitcmdapi.DapiAsciiString})

    otnSendTtitcmdapi.EntityData.YListKeys = []string {}

    return &(otnSendTtitcmdapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi
// Configure OTN Expected TTI value for SAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnExpectedTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtisapi) GetEntityData() *types.CommonEntityData {
    otnExpectedTtisapi.EntityData.YFilter = otnExpectedTtisapi.YFilter
    otnExpectedTtisapi.EntityData.YangName = "otn-expected-ttisapi"
    otnExpectedTtisapi.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtisapi.EntityData.ParentYangName = "otu"
    otnExpectedTtisapi.EntityData.SegmentPath = "otn-expected-ttisapi"
    otnExpectedTtisapi.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnExpectedTtisapi.EntityData.SegmentPath
    otnExpectedTtisapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtisapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtisapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtisapi.EntityData.Children = types.NewOrderedMap()
    otnExpectedTtisapi.EntityData.Leafs = types.NewOrderedMap()
    otnExpectedTtisapi.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnExpectedTtisapi.StringType})
    otnExpectedTtisapi.EntityData.Leafs.Append("sapi-ascii-string", types.YLeaf{"SapiAsciiString", otnExpectedTtisapi.SapiAsciiString})

    otnExpectedTtisapi.EntityData.YListKeys = []string {}

    return &(otnExpectedTtisapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection
// Configure Proactive Protection
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Proactive Protection. The type is interface{}.
    Status interface{}

    // Proactive Protection Threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold

    // Proactive Protection Window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow

    // Proactive Protection Window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow

    // Proactive Protection Threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
}

func (proactiveProtection *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection) GetEntityData() *types.CommonEntityData {
    proactiveProtection.EntityData.YFilter = proactiveProtection.YFilter
    proactiveProtection.EntityData.YangName = "proactive-protection"
    proactiveProtection.EntityData.BundleName = "cisco_ios_xr"
    proactiveProtection.EntityData.ParentYangName = "otu"
    proactiveProtection.EntityData.SegmentPath = "proactive-protection"
    proactiveProtection.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + proactiveProtection.EntityData.SegmentPath
    proactiveProtection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    proactiveProtection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    proactiveProtection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    proactiveProtection.EntityData.Children = types.NewOrderedMap()
    proactiveProtection.EntityData.Children.Append("trigger-threshold", types.YChild{"TriggerThreshold", &proactiveProtection.TriggerThreshold})
    proactiveProtection.EntityData.Children.Append("revert-window", types.YChild{"RevertWindow", &proactiveProtection.RevertWindow})
    proactiveProtection.EntityData.Children.Append("trigger-window", types.YChild{"TriggerWindow", &proactiveProtection.TriggerWindow})
    proactiveProtection.EntityData.Children.Append("revert-threshold", types.YChild{"RevertThreshold", &proactiveProtection.RevertThreshold})
    proactiveProtection.EntityData.Leafs = types.NewOrderedMap()
    proactiveProtection.EntityData.Leafs.Append("status", types.YLeaf{"Status", proactiveProtection.Status})

    proactiveProtection.EntityData.YListKeys = []string {}

    return &(proactiveProtection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 3..9.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerThreshold) GetEntityData() *types.CommonEntityData {
    triggerThreshold.EntityData.YFilter = triggerThreshold.YFilter
    triggerThreshold.EntityData.YangName = "trigger-threshold"
    triggerThreshold.EntityData.BundleName = "cisco_ios_xr"
    triggerThreshold.EntityData.ParentYangName = "proactive-protection"
    triggerThreshold.EntityData.SegmentPath = "trigger-threshold"
    triggerThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/proactive-protection/" + triggerThreshold.EntityData.SegmentPath
    triggerThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerThreshold.EntityData.Children = types.NewOrderedMap()
    triggerThreshold.EntityData.Leafs = types.NewOrderedMap()
    triggerThreshold.EntityData.Leafs.Append("coefficient", types.YLeaf{"Coefficient", triggerThreshold.Coefficient})
    triggerThreshold.EntityData.Leafs.Append("power", types.YLeaf{"Power", triggerThreshold.Power})
    triggerThreshold.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", triggerThreshold.Enable})

    triggerThreshold.EntityData.YListKeys = []string {}

    return &(triggerThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 2000..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertWindow) GetEntityData() *types.CommonEntityData {
    revertWindow.EntityData.YFilter = revertWindow.YFilter
    revertWindow.EntityData.YangName = "revert-window"
    revertWindow.EntityData.BundleName = "cisco_ios_xr"
    revertWindow.EntityData.ParentYangName = "proactive-protection"
    revertWindow.EntityData.SegmentPath = "revert-window"
    revertWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/proactive-protection/" + revertWindow.EntityData.SegmentPath
    revertWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertWindow.EntityData.Children = types.NewOrderedMap()
    revertWindow.EntityData.Leafs = types.NewOrderedMap()
    revertWindow.EntityData.Leafs.Append("value", types.YLeaf{"Value", revertWindow.Value})
    revertWindow.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", revertWindow.Enable})

    revertWindow.EntityData.YListKeys = []string {}

    return &(revertWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow
// Proactive Protection Window
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000.
    Value interface{}

    // Enable Proactive Protection. The type is interface{}.
    Enable interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_TriggerWindow) GetEntityData() *types.CommonEntityData {
    triggerWindow.EntityData.YFilter = triggerWindow.YFilter
    triggerWindow.EntityData.YangName = "trigger-window"
    triggerWindow.EntityData.BundleName = "cisco_ios_xr"
    triggerWindow.EntityData.ParentYangName = "proactive-protection"
    triggerWindow.EntityData.SegmentPath = "trigger-window"
    triggerWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/proactive-protection/" + triggerWindow.EntityData.SegmentPath
    triggerWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerWindow.EntityData.Children = types.NewOrderedMap()
    triggerWindow.EntityData.Leafs = types.NewOrderedMap()
    triggerWindow.EntityData.Leafs.Append("value", types.YLeaf{"Value", triggerWindow.Value})
    triggerWindow.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", triggerWindow.Enable})

    triggerWindow.EntityData.YListKeys = []string {}

    return &(triggerWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold
// Proactive Protection Threshold
type InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bit error rate coefficient. The type is interface{} with range: 1..9.
    Coefficient interface{}

    // Bit error rate power. The type is interface{} with range: 4..10.
    Power interface{}

    // Proactive Protection supported. The type is interface{}.
    Enable interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Otu_ProactiveProtection_RevertThreshold) GetEntityData() *types.CommonEntityData {
    revertThreshold.EntityData.YFilter = revertThreshold.YFilter
    revertThreshold.EntityData.YangName = "revert-threshold"
    revertThreshold.EntityData.BundleName = "cisco_ios_xr"
    revertThreshold.EntityData.ParentYangName = "proactive-protection"
    revertThreshold.EntityData.SegmentPath = "revert-threshold"
    revertThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/proactive-protection/" + revertThreshold.EntityData.SegmentPath
    revertThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertThreshold.EntityData.Children = types.NewOrderedMap()
    revertThreshold.EntityData.Leafs = types.NewOrderedMap()
    revertThreshold.EntityData.Leafs.Append("coefficient", types.YLeaf{"Coefficient", revertThreshold.Coefficient})
    revertThreshold.EntityData.Leafs.Append("power", types.YLeaf{"Power", revertThreshold.Power})
    revertThreshold.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", revertThreshold.Enable})

    revertThreshold.EntityData.YListKeys = []string {}

    return &(revertThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []*InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs) GetEntityData() *types.CommonEntityData {
    networkSrlgs.EntityData.YFilter = networkSrlgs.YFilter
    networkSrlgs.EntityData.YangName = "network-srlgs"
    networkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    networkSrlgs.EntityData.ParentYangName = "otu"
    networkSrlgs.EntityData.SegmentPath = "network-srlgs"
    networkSrlgs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + networkSrlgs.EntityData.SegmentPath
    networkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlgs.EntityData.Children = types.NewOrderedMap()
    networkSrlgs.EntityData.Children.Append("network-srlg", types.YChild{"NetworkSrlg", nil})
    for i := range networkSrlgs.NetworkSrlg {
        networkSrlgs.EntityData.Children.Append(types.GetSegmentPath(networkSrlgs.NetworkSrlg[i]), types.YChild{"NetworkSrlg", networkSrlgs.NetworkSrlg[i]})
    }
    networkSrlgs.EntityData.Leafs = types.NewOrderedMap()

    networkSrlgs.EntityData.YListKeys = []string {}

    return &(networkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // First value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg1 interface{}

    // Second value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg2 interface{}

    // Third value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg3 interface{}

    // Forth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg4 interface{}

    // Fifth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg5 interface{}

    // Sixth value for Network SRLG. The type is interface{} with range:
    // 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Otu_NetworkSrlgs_NetworkSrlg) GetEntityData() *types.CommonEntityData {
    networkSrlg.EntityData.YFilter = networkSrlg.YFilter
    networkSrlg.EntityData.YangName = "network-srlg"
    networkSrlg.EntityData.BundleName = "cisco_ios_xr"
    networkSrlg.EntityData.ParentYangName = "network-srlgs"
    networkSrlg.EntityData.SegmentPath = "network-srlg" + types.AddKeyToken(networkSrlg.SetId, "set-id")
    networkSrlg.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/network-srlgs/" + networkSrlg.EntityData.SegmentPath
    networkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlg.EntityData.Children = types.NewOrderedMap()
    networkSrlg.EntityData.Leafs = types.NewOrderedMap()
    networkSrlg.EntityData.Leafs.Append("set-id", types.YLeaf{"SetId", networkSrlg.SetId})
    networkSrlg.EntityData.Leafs.Append("srlg1", types.YLeaf{"Srlg1", networkSrlg.Srlg1})
    networkSrlg.EntityData.Leafs.Append("srlg2", types.YLeaf{"Srlg2", networkSrlg.Srlg2})
    networkSrlg.EntityData.Leafs.Append("srlg3", types.YLeaf{"Srlg3", networkSrlg.Srlg3})
    networkSrlg.EntityData.Leafs.Append("srlg4", types.YLeaf{"Srlg4", networkSrlg.Srlg4})
    networkSrlg.EntityData.Leafs.Append("srlg5", types.YLeaf{"Srlg5", networkSrlg.Srlg5})
    networkSrlg.EntityData.Leafs.Append("srlg6", types.YLeaf{"Srlg6", networkSrlg.Srlg6})

    networkSrlg.EntityData.YListKeys = []string {"SetId"}

    return &(networkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti
// Configure OTN Send TTI value for Full ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnSendTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTti) GetEntityData() *types.CommonEntityData {
    otnSendTti.EntityData.YFilter = otnSendTti.YFilter
    otnSendTti.EntityData.YangName = "otn-send-tti"
    otnSendTti.EntityData.BundleName = "cisco_ios_xr"
    otnSendTti.EntityData.ParentYangName = "otu"
    otnSendTti.EntityData.SegmentPath = "otn-send-tti"
    otnSendTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnSendTti.EntityData.SegmentPath
    otnSendTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTti.EntityData.Children = types.NewOrderedMap()
    otnSendTti.EntityData.Leafs = types.NewOrderedMap()
    otnSendTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnSendTti.StringType})
    otnSendTti.EntityData.Leafs.Append("full-ascii-string", types.YLeaf{"FullAsciiString", otnSendTti.FullAsciiString})
    otnSendTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", otnSendTti.HexString})

    otnSendTti.EntityData.YListKeys = []string {}

    return &(otnSendTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi
// Configure OTN Expected TTI value for DAPI
// configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeDapi.
    StringType interface{}

    // DAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    DapiAsciiString interface{}
}

func (otnExpectedTtitcmdapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmdapi) GetEntityData() *types.CommonEntityData {
    otnExpectedTtitcmdapi.EntityData.YFilter = otnExpectedTtitcmdapi.YFilter
    otnExpectedTtitcmdapi.EntityData.YangName = "otn-expected-ttitcmdapi"
    otnExpectedTtitcmdapi.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtitcmdapi.EntityData.ParentYangName = "otu"
    otnExpectedTtitcmdapi.EntityData.SegmentPath = "otn-expected-ttitcmdapi"
    otnExpectedTtitcmdapi.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnExpectedTtitcmdapi.EntityData.SegmentPath
    otnExpectedTtitcmdapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtitcmdapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtitcmdapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtitcmdapi.EntityData.Children = types.NewOrderedMap()
    otnExpectedTtitcmdapi.EntityData.Leafs = types.NewOrderedMap()
    otnExpectedTtitcmdapi.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnExpectedTtitcmdapi.StringType})
    otnExpectedTtitcmdapi.EntityData.Leafs.Append("dapi-ascii-string", types.YLeaf{"DapiAsciiString", otnExpectedTtitcmdapi.DapiAsciiString})

    otnExpectedTtitcmdapi.EntityData.YListKeys = []string {}

    return &(otnExpectedTtitcmdapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi
// Configure OTN Send TTI value for SAPI configs
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnSendTtiTypeSapi.
    StringType interface{}

    // SAPI ASCII text (Max 14 characters). The type is string with length: 1..14.
    SapiAsciiString interface{}
}

func (otnSendTtisapi *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnSendTtisapi) GetEntityData() *types.CommonEntityData {
    otnSendTtisapi.EntityData.YFilter = otnSendTtisapi.YFilter
    otnSendTtisapi.EntityData.YangName = "otn-send-ttisapi"
    otnSendTtisapi.EntityData.BundleName = "cisco_ios_xr"
    otnSendTtisapi.EntityData.ParentYangName = "otu"
    otnSendTtisapi.EntityData.SegmentPath = "otn-send-ttisapi"
    otnSendTtisapi.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnSendTtisapi.EntityData.SegmentPath
    otnSendTtisapi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnSendTtisapi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnSendTtisapi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnSendTtisapi.EntityData.Children = types.NewOrderedMap()
    otnSendTtisapi.EntityData.Leafs = types.NewOrderedMap()
    otnSendTtisapi.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnSendTtisapi.StringType})
    otnSendTtisapi.EntityData.Leafs.Append("sapi-ascii-string", types.YLeaf{"SapiAsciiString", otnSendTtisapi.SapiAsciiString})

    otnSendTtisapi.EntityData.YListKeys = []string {}

    return &(otnSendTtisapi.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs
// Enable Prbs And configure
type InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mode value. The type is OtuMode.
    ModeValue interface{}

    // Pattern value. The type is OtuPattern.
    Patternvalue interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Otu_Prbs) GetEntityData() *types.CommonEntityData {
    prbs.EntityData.YFilter = prbs.YFilter
    prbs.EntityData.YangName = "prbs"
    prbs.EntityData.BundleName = "cisco_ios_xr"
    prbs.EntityData.ParentYangName = "otu"
    prbs.EntityData.SegmentPath = "prbs"
    prbs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + prbs.EntityData.SegmentPath
    prbs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prbs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prbs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prbs.EntityData.Children = types.NewOrderedMap()
    prbs.EntityData.Leafs = types.NewOrderedMap()
    prbs.EntityData.Leafs.Append("mode-value", types.YLeaf{"ModeValue", prbs.ModeValue})
    prbs.EntityData.Leafs.Append("patternvalue", types.YLeaf{"Patternvalue", prbs.Patternvalue})

    prbs.EntityData.YListKeys = []string {}

    return &(prbs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos
// Configure OTN Expected TTI value for OS config
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeOs.
    StringType interface{}

    // OS ASCII text (Max 32 characters). The type is string with length: 1..32.
    OsasciiString interface{}

    // OS HEX text (Max 64 characters). The type is string with length: 1..64.
    OshexString interface{}
}

func (otnExpectedTtitcmos *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTtitcmos) GetEntityData() *types.CommonEntityData {
    otnExpectedTtitcmos.EntityData.YFilter = otnExpectedTtitcmos.YFilter
    otnExpectedTtitcmos.EntityData.YangName = "otn-expected-ttitcmos"
    otnExpectedTtitcmos.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTtitcmos.EntityData.ParentYangName = "otu"
    otnExpectedTtitcmos.EntityData.SegmentPath = "otn-expected-ttitcmos"
    otnExpectedTtitcmos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnExpectedTtitcmos.EntityData.SegmentPath
    otnExpectedTtitcmos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTtitcmos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTtitcmos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTtitcmos.EntityData.Children = types.NewOrderedMap()
    otnExpectedTtitcmos.EntityData.Leafs = types.NewOrderedMap()
    otnExpectedTtitcmos.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnExpectedTtitcmos.StringType})
    otnExpectedTtitcmos.EntityData.Leafs.Append("osascii-string", types.YLeaf{"OsasciiString", otnExpectedTtitcmos.OsasciiString})
    otnExpectedTtitcmos.EntityData.Leafs.Append("oshex-string", types.YLeaf{"OshexString", otnExpectedTtitcmos.OshexString})

    otnExpectedTtitcmos.EntityData.YListKeys = []string {}

    return &(otnExpectedTtitcmos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti
// Configure OTN Expected TTI value for Full
// ASCII/HEX
type InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or
    // OS ASCII or OS HEX). The type is OtnExpTtiTypeFull.
    StringType interface{}

    // Full ASCII text (Max 64 characters). The type is string with length: 1..64.
    FullAsciiString interface{}

    // Hex nibbles (Max 128 - The string length should be an even number). The
    // type is string with length: 1..128.
    HexString interface{}
}

func (otnExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Otu_OtnExpectedTti) GetEntityData() *types.CommonEntityData {
    otnExpectedTti.EntityData.YFilter = otnExpectedTti.YFilter
    otnExpectedTti.EntityData.YangName = "otn-expected-tti"
    otnExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    otnExpectedTti.EntityData.ParentYangName = "otu"
    otnExpectedTti.EntityData.SegmentPath = "otn-expected-tti"
    otnExpectedTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-controller-otu-cfg:otu/" + otnExpectedTti.EntityData.SegmentPath
    otnExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otnExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otnExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otnExpectedTti.EntityData.Children = types.NewOrderedMap()
    otnExpectedTti.EntityData.Leafs = types.NewOrderedMap()
    otnExpectedTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otnExpectedTti.StringType})
    otnExpectedTti.EntityData.Leafs.Append("full-ascii-string", types.YLeaf{"FullAsciiString", otnExpectedTti.FullAsciiString})
    otnExpectedTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", otnExpectedTti.HexString})

    otnExpectedTti.EntityData.YListKeys = []string {}

    return &(otnExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec
// MACSec service for an interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macsec-service configuration on interface.
    MacsecService InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService

    // Enabling MACSec eap Configuration on Interface.
    Eap InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap

    // MACSec MKA Configuration on Interface.
    PskKeyChain InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
}

func (macsec *InterfaceConfigurations_InterfaceConfiguration_Macsec) GetEntityData() *types.CommonEntityData {
    macsec.EntityData.YFilter = macsec.YFilter
    macsec.EntityData.YangName = "macsec"
    macsec.EntityData.BundleName = "cisco_ios_xr"
    macsec.EntityData.ParentYangName = "interface-configuration"
    macsec.EntityData.SegmentPath = "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"
    macsec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + macsec.EntityData.SegmentPath
    macsec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macsec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macsec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macsec.EntityData.Children = types.NewOrderedMap()
    macsec.EntityData.Children.Append("macsec-service", types.YChild{"MacsecService", &macsec.MacsecService})
    macsec.EntityData.Children.Append("eap", types.YChild{"Eap", &macsec.Eap})
    macsec.EntityData.Children.Append("psk-key-chain", types.YChild{"PskKeyChain", &macsec.PskKeyChain})
    macsec.EntityData.Leafs = types.NewOrderedMap()

    macsec.EntityData.YListKeys = []string {}

    return &(macsec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService
// macsec-service configuration on interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // macsec service decryption port. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'. This attribute is mandatory.
    DecryptPort interface{}

    // name of keychain. The type is string with length: 1..32. This attribute is
    // mandatory.
    KeyChain interface{}

    // name of policy. The type is string with length: 1..16.
    Policy interface{}
}

func (macsecService *InterfaceConfigurations_InterfaceConfiguration_Macsec_MacsecService) GetEntityData() *types.CommonEntityData {
    macsecService.EntityData.YFilter = macsecService.YFilter
    macsecService.EntityData.YangName = "macsec-service"
    macsecService.EntityData.BundleName = "cisco_ios_xr"
    macsecService.EntityData.ParentYangName = "macsec"
    macsecService.EntityData.SegmentPath = "macsec-service"
    macsecService.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec/" + macsecService.EntityData.SegmentPath
    macsecService.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macsecService.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macsecService.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macsecService.EntityData.Children = types.NewOrderedMap()
    macsecService.EntityData.Leafs = types.NewOrderedMap()
    macsecService.EntityData.Leafs.Append("decrypt-port", types.YLeaf{"DecryptPort", macsecService.DecryptPort})
    macsecService.EntityData.Leafs.Append("key-chain", types.YLeaf{"KeyChain", macsecService.KeyChain})
    macsecService.EntityData.Leafs.Append("policy", types.YLeaf{"Policy", macsecService.Policy})

    macsecService.EntityData.YListKeys = []string {}

    return &(macsecService.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap
// Enabling MACSec eap Configuration on Interface
type InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Eap config. The type is string with pattern: b'(eap)'.
    EapConfig interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}
}

func (eap *InterfaceConfigurations_InterfaceConfiguration_Macsec_Eap) GetEntityData() *types.CommonEntityData {
    eap.EntityData.YFilter = eap.YFilter
    eap.EntityData.YangName = "eap"
    eap.EntityData.BundleName = "cisco_ios_xr"
    eap.EntityData.ParentYangName = "macsec"
    eap.EntityData.SegmentPath = "eap"
    eap.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec/" + eap.EntityData.SegmentPath
    eap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eap.EntityData.Children = types.NewOrderedMap()
    eap.EntityData.Leafs = types.NewOrderedMap()
    eap.EntityData.Leafs.Append("eap-config", types.YLeaf{"EapConfig", eap.EapConfig})
    eap.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", eap.PolicyName})

    eap.EntityData.YListKeys = []string {}

    return &(eap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain
// MACSec MKA Configuration on Interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Name of KeyChainName. The type is string with length: 1..32. This attribute
    // is mandatory.
    KeyChainName interface{}

    // Name of Policy. The type is string with length: 1..16.
    PolicyName interface{}

    // name of fallback keychain. The type is string with length: 1..32.
    FallbackKeyChain interface{}
}

func (pskKeyChain *InterfaceConfigurations_InterfaceConfiguration_Macsec_PskKeyChain) GetEntityData() *types.CommonEntityData {
    pskKeyChain.EntityData.YFilter = pskKeyChain.YFilter
    pskKeyChain.EntityData.YangName = "psk-key-chain"
    pskKeyChain.EntityData.BundleName = "cisco_ios_xr"
    pskKeyChain.EntityData.ParentYangName = "macsec"
    pskKeyChain.EntityData.SegmentPath = "psk-key-chain"
    pskKeyChain.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec/" + pskKeyChain.EntityData.SegmentPath
    pskKeyChain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pskKeyChain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pskKeyChain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pskKeyChain.EntityData.Children = types.NewOrderedMap()
    pskKeyChain.EntityData.Leafs = types.NewOrderedMap()
    pskKeyChain.EntityData.Leafs.Append("key-chain-name", types.YLeaf{"KeyChainName", pskKeyChain.KeyChainName})
    pskKeyChain.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", pskKeyChain.PolicyName})
    pskKeyChain.EntityData.Leafs.Append("fallback-key-chain", types.YLeaf{"FallbackKeyChain", pskKeyChain.FallbackKeyChain})

    pskKeyChain.EntityData.YListKeys = []string {}

    return &(pskKeyChain.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dot1xInterface
// Interface Specific Dot1x Configuration
type InterfaceConfigurations_InterfaceConfiguration_Dot1xInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address for EAPoL frames transmission. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    EapolDestAddr interface{}

    // Name of Dot1x profile. The type is string with length: 1..63.
    Dot1xProfile interface{}
}

func (dot1xInterface *InterfaceConfigurations_InterfaceConfiguration_Dot1xInterface) GetEntityData() *types.CommonEntityData {
    dot1xInterface.EntityData.YFilter = dot1xInterface.YFilter
    dot1xInterface.EntityData.YangName = "dot1x-interface"
    dot1xInterface.EntityData.BundleName = "cisco_ios_xr"
    dot1xInterface.EntityData.ParentYangName = "interface-configuration"
    dot1xInterface.EntityData.SegmentPath = "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"
    dot1xInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + dot1xInterface.EntityData.SegmentPath
    dot1xInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dot1xInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dot1xInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dot1xInterface.EntityData.Children = types.NewOrderedMap()
    dot1xInterface.EntityData.Leafs = types.NewOrderedMap()
    dot1xInterface.EntityData.Leafs.Append("eapol-dest-addr", types.YLeaf{"EapolDestAddr", dot1xInterface.EapolDestAddr})
    dot1xInterface.EntityData.Leafs.Append("dot1x-profile", types.YLeaf{"Dot1xProfile", dot1xInterface.Dot1xProfile})

    dot1xInterface.EntityData.YListKeys = []string {}

    return &(dot1xInterface.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks
// Configure Extended loopback (diagnostics)
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure extended loopback mode. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback.
    Loopback []*InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
}

func (loopbacks *InterfaceConfigurations_InterfaceConfiguration_Loopbacks) GetEntityData() *types.CommonEntityData {
    loopbacks.EntityData.YFilter = loopbacks.YFilter
    loopbacks.EntityData.YangName = "loopbacks"
    loopbacks.EntityData.BundleName = "cisco_ios_xr"
    loopbacks.EntityData.ParentYangName = "interface-configuration"
    loopbacks.EntityData.SegmentPath = "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"
    loopbacks.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + loopbacks.EntityData.SegmentPath
    loopbacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopbacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopbacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopbacks.EntityData.Children = types.NewOrderedMap()
    loopbacks.EntityData.Children.Append("loopback", types.YChild{"Loopback", nil})
    for i := range loopbacks.Loopback {
        loopbacks.EntityData.Children.Append(types.GetSegmentPath(loopbacks.Loopback[i]), types.YChild{"Loopback", loopbacks.Loopback[i]})
    }
    loopbacks.EntityData.Leafs = types.NewOrderedMap()

    loopbacks.EntityData.YListKeys = []string {}

    return &(loopbacks.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback
// Configure extended loopback mode
type InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Level. The type is interface{} with range: 1..3.
    Level interface{}

    // Loopback. The type is ExtendedEthernetLoopback. This attribute is
    // mandatory.
    Loopback interface{}
}

func (loopback *InterfaceConfigurations_InterfaceConfiguration_Loopbacks_Loopback) GetEntityData() *types.CommonEntityData {
    loopback.EntityData.YFilter = loopback.YFilter
    loopback.EntityData.YangName = "loopback"
    loopback.EntityData.BundleName = "cisco_ios_xr"
    loopback.EntityData.ParentYangName = "loopbacks"
    loopback.EntityData.SegmentPath = "loopback" + types.AddKeyToken(loopback.Level, "level")
    loopback.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks/" + loopback.EntityData.SegmentPath
    loopback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopback.EntityData.Children = types.NewOrderedMap()
    loopback.EntityData.Leafs = types.NewOrderedMap()
    loopback.EntityData.Leafs.Append("level", types.YLeaf{"Level", loopback.Level})
    loopback.EntityData.Leafs.Append("loopback", types.YLeaf{"Loopback", loopback.Loopback})

    loopback.EntityData.YListKeys = []string {"Level"}

    return &(loopback.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet
// Ether specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure duplex operational mode. The type is EthernetDuplex.
    Duplex interface{}

    // Link auto-negotiation. The type is EthernetAutoNegotiation.
    AutoNegotiation interface{}

    // Configure flow-control mode. The type is EthernetFlowCtrl.
    FlowControl interface{}

    // Forward Error Correction. The type is EthernetFec.
    ForwardErrorCorrection interface{}

    // Configure priority flow-control mode. The type is EthernetPfc.
    PriorityFlowControl interface{}

    // Configure loopback mode. The type is EthernetLoopback.
    Loopback interface{}

    // Set the ethernet speed on an interface. The type is EthernetSpeed.
    Speed interface{}

    // Inter-packet gap. The type is EthernetIpg.
    InterPacketGap interface{}

    // Signal Fail Bit Error Rate handling options.
    SignalFailBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate

    // Optical power degrade handling options.
    OpticalPowerDegrade InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade

    // Signal Degrade Bit Error Rate handling options.
    SignalDegradeBitErrorRate InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate

    // Set the carrier transition delay on an interface in msecs.
    CarrierDelay InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
}

func (ethernet *InterfaceConfigurations_InterfaceConfiguration_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "interface-configuration"
    ethernet.EntityData.SegmentPath = "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"
    ethernet.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ethernet.EntityData.SegmentPath
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = types.NewOrderedMap()
    ethernet.EntityData.Children.Append("signal-fail-bit-error-rate", types.YChild{"SignalFailBitErrorRate", &ethernet.SignalFailBitErrorRate})
    ethernet.EntityData.Children.Append("optical-power-degrade", types.YChild{"OpticalPowerDegrade", &ethernet.OpticalPowerDegrade})
    ethernet.EntityData.Children.Append("signal-degrade-bit-error-rate", types.YChild{"SignalDegradeBitErrorRate", &ethernet.SignalDegradeBitErrorRate})
    ethernet.EntityData.Children.Append("carrier-delay", types.YChild{"CarrierDelay", &ethernet.CarrierDelay})
    ethernet.EntityData.Leafs = types.NewOrderedMap()
    ethernet.EntityData.Leafs.Append("duplex", types.YLeaf{"Duplex", ethernet.Duplex})
    ethernet.EntityData.Leafs.Append("auto-negotiation", types.YLeaf{"AutoNegotiation", ethernet.AutoNegotiation})
    ethernet.EntityData.Leafs.Append("flow-control", types.YLeaf{"FlowControl", ethernet.FlowControl})
    ethernet.EntityData.Leafs.Append("forward-error-correction", types.YLeaf{"ForwardErrorCorrection", ethernet.ForwardErrorCorrection})
    ethernet.EntityData.Leafs.Append("priority-flow-control", types.YLeaf{"PriorityFlowControl", ethernet.PriorityFlowControl})
    ethernet.EntityData.Leafs.Append("loopback", types.YLeaf{"Loopback", ethernet.Loopback})
    ethernet.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", ethernet.Speed})
    ethernet.EntityData.Leafs.Append("inter-packet-gap", types.YLeaf{"InterPacketGap", ethernet.InterPacketGap})

    ethernet.EntityData.YListKeys = []string {}

    return &(ethernet.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate
// Signal Fail Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Signal a remote fault to the peer device whenever the link is taken down
    // due to crossing the SF-BER threshold. The type is interface{}.
    SignalRemoteFault interface{}

    // Set the Signal Fail bit error rate threshold on an interface to a value of
    // 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 4..15. The default value is 4.
    SignalFailThreshold interface{}

    // Disable generation of an alarm whenever the SF-BER threshold is crossed for
    // this interface. The type is interface{}.
    SignalFailReportDisable interface{}
}

func (signalFailBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalFailBitErrorRate) GetEntityData() *types.CommonEntityData {
    signalFailBitErrorRate.EntityData.YFilter = signalFailBitErrorRate.YFilter
    signalFailBitErrorRate.EntityData.YangName = "signal-fail-bit-error-rate"
    signalFailBitErrorRate.EntityData.BundleName = "cisco_ios_xr"
    signalFailBitErrorRate.EntityData.ParentYangName = "ethernet"
    signalFailBitErrorRate.EntityData.SegmentPath = "signal-fail-bit-error-rate"
    signalFailBitErrorRate.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-drivers-media-eth-cfg:ethernet/" + signalFailBitErrorRate.EntityData.SegmentPath
    signalFailBitErrorRate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    signalFailBitErrorRate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    signalFailBitErrorRate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    signalFailBitErrorRate.EntityData.Children = types.NewOrderedMap()
    signalFailBitErrorRate.EntityData.Leafs = types.NewOrderedMap()
    signalFailBitErrorRate.EntityData.Leafs.Append("signal-remote-fault", types.YLeaf{"SignalRemoteFault", signalFailBitErrorRate.SignalRemoteFault})
    signalFailBitErrorRate.EntityData.Leafs.Append("signal-fail-threshold", types.YLeaf{"SignalFailThreshold", signalFailBitErrorRate.SignalFailThreshold})
    signalFailBitErrorRate.EntityData.Leafs.Append("signal-fail-report-disable", types.YLeaf{"SignalFailReportDisable", signalFailBitErrorRate.SignalFailReportDisable})

    signalFailBitErrorRate.EntityData.YListKeys = []string {}

    return &(signalFailBitErrorRate.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade
// Optical power degrade handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the value of the received optical power degrade alarm threshold on an
    // interface. The type is interface{} with range: -300..50.
    RxAlarmThreshold interface{}
}

func (opticalPowerDegrade *InterfaceConfigurations_InterfaceConfiguration_Ethernet_OpticalPowerDegrade) GetEntityData() *types.CommonEntityData {
    opticalPowerDegrade.EntityData.YFilter = opticalPowerDegrade.YFilter
    opticalPowerDegrade.EntityData.YangName = "optical-power-degrade"
    opticalPowerDegrade.EntityData.BundleName = "cisco_ios_xr"
    opticalPowerDegrade.EntityData.ParentYangName = "ethernet"
    opticalPowerDegrade.EntityData.SegmentPath = "optical-power-degrade"
    opticalPowerDegrade.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-drivers-media-eth-cfg:ethernet/" + opticalPowerDegrade.EntityData.SegmentPath
    opticalPowerDegrade.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalPowerDegrade.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalPowerDegrade.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalPowerDegrade.EntityData.Children = types.NewOrderedMap()
    opticalPowerDegrade.EntityData.Leafs = types.NewOrderedMap()
    opticalPowerDegrade.EntityData.Leafs.Append("rx-alarm-threshold", types.YLeaf{"RxAlarmThreshold", opticalPowerDegrade.RxAlarmThreshold})

    opticalPowerDegrade.EntityData.YListKeys = []string {}

    return &(opticalPowerDegrade.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate
// Signal Degrade Bit Error Rate handling options
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the Signal Degrade bit error rate threshold on an interface to a value
    // of 10e-x, where x is the value passed in here. The type is interface{} with
    // range: 3..15. The default value is 6.
    SignalDegradeThreshold interface{}

    // Generate an alarm whenever the SD-BER threshold is crossed for this
    // interface. The type is interface{}.
    SignalDegradeReport interface{}
}

func (signalDegradeBitErrorRate *InterfaceConfigurations_InterfaceConfiguration_Ethernet_SignalDegradeBitErrorRate) GetEntityData() *types.CommonEntityData {
    signalDegradeBitErrorRate.EntityData.YFilter = signalDegradeBitErrorRate.YFilter
    signalDegradeBitErrorRate.EntityData.YangName = "signal-degrade-bit-error-rate"
    signalDegradeBitErrorRate.EntityData.BundleName = "cisco_ios_xr"
    signalDegradeBitErrorRate.EntityData.ParentYangName = "ethernet"
    signalDegradeBitErrorRate.EntityData.SegmentPath = "signal-degrade-bit-error-rate"
    signalDegradeBitErrorRate.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-drivers-media-eth-cfg:ethernet/" + signalDegradeBitErrorRate.EntityData.SegmentPath
    signalDegradeBitErrorRate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    signalDegradeBitErrorRate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    signalDegradeBitErrorRate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    signalDegradeBitErrorRate.EntityData.Children = types.NewOrderedMap()
    signalDegradeBitErrorRate.EntityData.Leafs = types.NewOrderedMap()
    signalDegradeBitErrorRate.EntityData.Leafs.Append("signal-degrade-threshold", types.YLeaf{"SignalDegradeThreshold", signalDegradeBitErrorRate.SignalDegradeThreshold})
    signalDegradeBitErrorRate.EntityData.Leafs.Append("signal-degrade-report", types.YLeaf{"SignalDegradeReport", signalDegradeBitErrorRate.SignalDegradeReport})

    signalDegradeBitErrorRate.EntityData.YListKeys = []string {}

    return &(signalDegradeBitErrorRate.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay
// Set the carrier transition delay on an
// interface in msecs
type InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayUp interface{}

    // Carrier Delay (down) in msecs. The type is interface{} with range:
    // 0..2147483647.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_Ethernet_CarrierDelay) GetEntityData() *types.CommonEntityData {
    carrierDelay.EntityData.YFilter = carrierDelay.YFilter
    carrierDelay.EntityData.YangName = "carrier-delay"
    carrierDelay.EntityData.BundleName = "cisco_ios_xr"
    carrierDelay.EntityData.ParentYangName = "ethernet"
    carrierDelay.EntityData.SegmentPath = "carrier-delay"
    carrierDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-drivers-media-eth-cfg:ethernet/" + carrierDelay.EntityData.SegmentPath
    carrierDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    carrierDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    carrierDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    carrierDelay.EntityData.Children = types.NewOrderedMap()
    carrierDelay.EntityData.Leafs = types.NewOrderedMap()
    carrierDelay.EntityData.Leafs.Append("carrier-delay-up", types.YLeaf{"CarrierDelayUp", carrierDelay.CarrierDelayUp})
    carrierDelay.EntityData.Leafs.Append("carrier-delay-down", types.YLeaf{"CarrierDelayDown", carrierDelay.CarrierDelayDown})

    carrierDelay.EntityData.YListKeys = []string {}

    return &(carrierDelay.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm
// DWDM port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Dwdm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable or Enable VTXP configuration. The type is bool.
    EnableVtxp interface{}

    // Configure network port id. The type is string with length: 1..64.
    NetworkPortId interface{}

    // Configure transport admin state. The type is DwdmAdminState. The default
    // value is out-of-service.
    TransportAdminState interface{}

    // Configure laser off/on. The type is interface{}.
    Laser interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -190..10.
    TransmitPower interface{}

    // Select power level (in units of 0.1dBm). The type is interface{} with
    // range: -350..50.
    RxThreshold interface{}

    // Configure network connection id. The type is string with length: 1..64.
    NetworkConnectionId interface{}

    // Configure loopback mode . The type is DwdmLoopback. The default value is
    // none.
    Loopback interface{}

    // Configure Network srlgs.
    NetworkSrlgs InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs

    // Configure G709 parameters.
    G709 InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709

    // Configure transponder wavelength.
    Wavelength InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
}

func (dwdm *InterfaceConfigurations_InterfaceConfiguration_Dwdm) GetEntityData() *types.CommonEntityData {
    dwdm.EntityData.YFilter = dwdm.YFilter
    dwdm.EntityData.YangName = "dwdm"
    dwdm.EntityData.BundleName = "cisco_ios_xr"
    dwdm.EntityData.ParentYangName = "interface-configuration"
    dwdm.EntityData.SegmentPath = "Cisco-IOS-XR-dwdm-ui-cfg:dwdm"
    dwdm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + dwdm.EntityData.SegmentPath
    dwdm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dwdm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dwdm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dwdm.EntityData.Children = types.NewOrderedMap()
    dwdm.EntityData.Children.Append("network-srlgs", types.YChild{"NetworkSrlgs", &dwdm.NetworkSrlgs})
    dwdm.EntityData.Children.Append("g709", types.YChild{"G709", &dwdm.G709})
    dwdm.EntityData.Children.Append("wavelength", types.YChild{"Wavelength", &dwdm.Wavelength})
    dwdm.EntityData.Leafs = types.NewOrderedMap()
    dwdm.EntityData.Leafs.Append("enable-vtxp", types.YLeaf{"EnableVtxp", dwdm.EnableVtxp})
    dwdm.EntityData.Leafs.Append("network-port-id", types.YLeaf{"NetworkPortId", dwdm.NetworkPortId})
    dwdm.EntityData.Leafs.Append("transport-admin-state", types.YLeaf{"TransportAdminState", dwdm.TransportAdminState})
    dwdm.EntityData.Leafs.Append("laser", types.YLeaf{"Laser", dwdm.Laser})
    dwdm.EntityData.Leafs.Append("transmit-power", types.YLeaf{"TransmitPower", dwdm.TransmitPower})
    dwdm.EntityData.Leafs.Append("rx-threshold", types.YLeaf{"RxThreshold", dwdm.RxThreshold})
    dwdm.EntityData.Leafs.Append("network-connection-id", types.YLeaf{"NetworkConnectionId", dwdm.NetworkConnectionId})
    dwdm.EntityData.Leafs.Append("loopback", types.YLeaf{"Loopback", dwdm.Loopback})

    dwdm.EntityData.YListKeys = []string {}

    return &(dwdm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs
// Configure Network srlgs
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure network srlg sets. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg.
    NetworkSrlg []*InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
}

func (networkSrlgs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs) GetEntityData() *types.CommonEntityData {
    networkSrlgs.EntityData.YFilter = networkSrlgs.YFilter
    networkSrlgs.EntityData.YangName = "network-srlgs"
    networkSrlgs.EntityData.BundleName = "cisco_ios_xr"
    networkSrlgs.EntityData.ParentYangName = "dwdm"
    networkSrlgs.EntityData.SegmentPath = "network-srlgs"
    networkSrlgs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/" + networkSrlgs.EntityData.SegmentPath
    networkSrlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlgs.EntityData.Children = types.NewOrderedMap()
    networkSrlgs.EntityData.Children.Append("network-srlg", types.YChild{"NetworkSrlg", nil})
    for i := range networkSrlgs.NetworkSrlg {
        networkSrlgs.EntityData.Children.Append(types.GetSegmentPath(networkSrlgs.NetworkSrlg[i]), types.YChild{"NetworkSrlg", networkSrlgs.NetworkSrlg[i]})
    }
    networkSrlgs.EntityData.Leafs = types.NewOrderedMap()

    networkSrlgs.EntityData.YListKeys = []string {}

    return &(networkSrlgs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg
// Configure network srlg sets
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Set index. The type is interface{} with range:
    // 1..17.
    SetId interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg1 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg2 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg3 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg4 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg5 interface{}

    // none. The type is interface{} with range: 0..4294967294.
    Srlg6 interface{}
}

func (networkSrlg *InterfaceConfigurations_InterfaceConfiguration_Dwdm_NetworkSrlgs_NetworkSrlg) GetEntityData() *types.CommonEntityData {
    networkSrlg.EntityData.YFilter = networkSrlg.YFilter
    networkSrlg.EntityData.YangName = "network-srlg"
    networkSrlg.EntityData.BundleName = "cisco_ios_xr"
    networkSrlg.EntityData.ParentYangName = "network-srlgs"
    networkSrlg.EntityData.SegmentPath = "network-srlg" + types.AddKeyToken(networkSrlg.SetId, "set-id")
    networkSrlg.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/network-srlgs/" + networkSrlg.EntityData.SegmentPath
    networkSrlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkSrlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkSrlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkSrlg.EntityData.Children = types.NewOrderedMap()
    networkSrlg.EntityData.Leafs = types.NewOrderedMap()
    networkSrlg.EntityData.Leafs.Append("set-id", types.YLeaf{"SetId", networkSrlg.SetId})
    networkSrlg.EntityData.Leafs.Append("srlg1", types.YLeaf{"Srlg1", networkSrlg.Srlg1})
    networkSrlg.EntityData.Leafs.Append("srlg2", types.YLeaf{"Srlg2", networkSrlg.Srlg2})
    networkSrlg.EntityData.Leafs.Append("srlg3", types.YLeaf{"Srlg3", networkSrlg.Srlg3})
    networkSrlg.EntityData.Leafs.Append("srlg4", types.YLeaf{"Srlg4", networkSrlg.Srlg4})
    networkSrlg.EntityData.Leafs.Append("srlg5", types.YLeaf{"Srlg5", networkSrlg.Srlg5})
    networkSrlg.EntityData.Leafs.Append("srlg6", types.YLeaf{"Srlg6", networkSrlg.Srlg6})

    networkSrlg.EntityData.YListKeys = []string {"SetId"}

    return &(networkSrlg.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709
// Configure G709 parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable proactive protectioni Graceful or Default mode. The type is
    // Proactive.
    Proactive interface{}

    // Enable GAIS insertion. The type is interface{}.
    BdiToGais interface{}

    // Configure Trace Identifier Mismatch alarm consequence. The type is
    // interface{}.
    TimToGais interface{}

    // Configure proactive protection log file. The type is string with length:
    // 1..128.
    ProactiveLoggingFile interface{}

    // Configure Trail Trace Identifier  processing. The type is interface{}.
    TtiProcessing interface{}

    // Disable or Enable g709 framing. The type is bool.
    Enable interface{}

    // Over clocking mode for client signal bw compatibility. The type is Framing.
    Framing interface{}

    // Configure ODU parameters.
    Odu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu

    // Configure OTU parameters.
    Otu InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu

    // Configure PRBS mode and pattern.
    Prbs InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs

    // Configure FEC mode.
    Fec InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
}

func (g709 *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709) GetEntityData() *types.CommonEntityData {
    g709.EntityData.YFilter = g709.YFilter
    g709.EntityData.YangName = "g709"
    g709.EntityData.BundleName = "cisco_ios_xr"
    g709.EntityData.ParentYangName = "dwdm"
    g709.EntityData.SegmentPath = "g709"
    g709.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/" + g709.EntityData.SegmentPath
    g709.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709.EntityData.Children = types.NewOrderedMap()
    g709.EntityData.Children.Append("odu", types.YChild{"Odu", &g709.Odu})
    g709.EntityData.Children.Append("otu", types.YChild{"Otu", &g709.Otu})
    g709.EntityData.Children.Append("prbs", types.YChild{"Prbs", &g709.Prbs})
    g709.EntityData.Children.Append("fec", types.YChild{"Fec", &g709.Fec})
    g709.EntityData.Leafs = types.NewOrderedMap()
    g709.EntityData.Leafs.Append("proactive", types.YLeaf{"Proactive", g709.Proactive})
    g709.EntityData.Leafs.Append("bdi-to-gais", types.YLeaf{"BdiToGais", g709.BdiToGais})
    g709.EntityData.Leafs.Append("tim-to-gais", types.YLeaf{"TimToGais", g709.TimToGais})
    g709.EntityData.Leafs.Append("proactive-logging-file", types.YLeaf{"ProactiveLoggingFile", g709.ProactiveLoggingFile})
    g709.EntityData.Leafs.Append("tti-processing", types.YLeaf{"TtiProcessing", g709.TtiProcessing})
    g709.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", g709.Enable})
    g709.EntityData.Leafs.Append("framing", types.YLeaf{"Framing", g709.Framing})

    g709.EntityData.YListKeys = []string {}

    return &(g709.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu
// Configure ODU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ODU alarm reporting.
    OduReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports

    // Configure ODU threshold value.
    OduThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds

    // Configure ODU Expected TTI value.
    OduExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti

    // Configure ODU TTI value.
    OduTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
}

func (odu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu) GetEntityData() *types.CommonEntityData {
    odu.EntityData.YFilter = odu.YFilter
    odu.EntityData.YangName = "odu"
    odu.EntityData.BundleName = "cisco_ios_xr"
    odu.EntityData.ParentYangName = "g709"
    odu.EntityData.SegmentPath = "odu"
    odu.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/" + odu.EntityData.SegmentPath
    odu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    odu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    odu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    odu.EntityData.Children = types.NewOrderedMap()
    odu.EntityData.Children.Append("odu-reports", types.YChild{"OduReports", &odu.OduReports})
    odu.EntityData.Children.Append("odu-thresholds", types.YChild{"OduThresholds", &odu.OduThresholds})
    odu.EntityData.Children.Append("odu-expected-tti", types.YChild{"OduExpectedTti", &odu.OduExpectedTti})
    odu.EntityData.Children.Append("odu-tx-tti", types.YChild{"OduTxTti", &odu.OduTxTti})
    odu.EntityData.Leafs = types.NewOrderedMap()

    odu.EntityData.YListKeys = []string {}

    return &(odu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports
// Configure ODU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport.
    OduReport []*InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
}

func (oduReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports) GetEntityData() *types.CommonEntityData {
    oduReports.EntityData.YFilter = oduReports.YFilter
    oduReports.EntityData.YangName = "odu-reports"
    oduReports.EntityData.BundleName = "cisco_ios_xr"
    oduReports.EntityData.ParentYangName = "odu"
    oduReports.EntityData.SegmentPath = "odu-reports"
    oduReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/" + oduReports.EntityData.SegmentPath
    oduReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduReports.EntityData.Children = types.NewOrderedMap()
    oduReports.EntityData.Children.Append("odu-report", types.YChild{"OduReport", nil})
    for i := range oduReports.OduReport {
        oduReports.EntityData.Children.Append(types.GetSegmentPath(oduReports.OduReport[i]), types.YChild{"OduReport", oduReports.OduReport[i]})
    }
    oduReports.EntityData.Leafs = types.NewOrderedMap()

    oduReports.EntityData.YListKeys = []string {}

    return &(oduReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ODU alarm type. The type is OduAlarm.
    Alarm interface{}
}

func (oduReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduReports_OduReport) GetEntityData() *types.CommonEntityData {
    oduReport.EntityData.YFilter = oduReport.YFilter
    oduReport.EntityData.YangName = "odu-report"
    oduReport.EntityData.BundleName = "cisco_ios_xr"
    oduReport.EntityData.ParentYangName = "odu-reports"
    oduReport.EntityData.SegmentPath = "odu-report" + types.AddKeyToken(oduReport.Alarm, "alarm")
    oduReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/odu-reports/" + oduReport.EntityData.SegmentPath
    oduReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduReport.EntityData.Children = types.NewOrderedMap()
    oduReport.EntityData.Leafs = types.NewOrderedMap()
    oduReport.EntityData.Leafs.Append("alarm", types.YLeaf{"Alarm", oduReport.Alarm})

    oduReport.EntityData.YListKeys = []string {"Alarm"}

    return &(oduReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds
// Configure ODU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold.
    OduThreshold []*InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
}

func (oduThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds) GetEntityData() *types.CommonEntityData {
    oduThresholds.EntityData.YFilter = oduThresholds.YFilter
    oduThresholds.EntityData.YangName = "odu-thresholds"
    oduThresholds.EntityData.BundleName = "cisco_ios_xr"
    oduThresholds.EntityData.ParentYangName = "odu"
    oduThresholds.EntityData.SegmentPath = "odu-thresholds"
    oduThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/" + oduThresholds.EntityData.SegmentPath
    oduThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduThresholds.EntityData.Children = types.NewOrderedMap()
    oduThresholds.EntityData.Children.Append("odu-threshold", types.YChild{"OduThreshold", nil})
    for i := range oduThresholds.OduThreshold {
        oduThresholds.EntityData.Children.Append(types.GetSegmentPath(oduThresholds.OduThreshold[i]), types.YChild{"OduThreshold", oduThresholds.OduThreshold[i]})
    }
    oduThresholds.EntityData.Leafs = types.NewOrderedMap()

    oduThresholds.EntityData.YListKeys = []string {}

    return &(oduThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ODU Threshold type. The type is OduThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (oduThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduThresholds_OduThreshold) GetEntityData() *types.CommonEntityData {
    oduThreshold.EntityData.YFilter = oduThreshold.YFilter
    oduThreshold.EntityData.YangName = "odu-threshold"
    oduThreshold.EntityData.BundleName = "cisco_ios_xr"
    oduThreshold.EntityData.ParentYangName = "odu-thresholds"
    oduThreshold.EntityData.SegmentPath = "odu-threshold" + types.AddKeyToken(oduThreshold.Threshold, "threshold")
    oduThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/odu-thresholds/" + oduThreshold.EntityData.SegmentPath
    oduThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduThreshold.EntityData.Children = types.NewOrderedMap()
    oduThreshold.EntityData.Leafs = types.NewOrderedMap()
    oduThreshold.EntityData.Leafs.Append("threshold", types.YLeaf{"Threshold", oduThreshold.Threshold})
    oduThreshold.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", oduThreshold.ThresholdValue})

    oduThreshold.EntityData.YListKeys = []string {"Threshold"}

    return &(oduThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti
// Configure ODU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduExpectedTti) GetEntityData() *types.CommonEntityData {
    oduExpectedTti.EntityData.YFilter = oduExpectedTti.YFilter
    oduExpectedTti.EntityData.YangName = "odu-expected-tti"
    oduExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    oduExpectedTti.EntityData.ParentYangName = "odu"
    oduExpectedTti.EntityData.SegmentPath = "odu-expected-tti"
    oduExpectedTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/" + oduExpectedTti.EntityData.SegmentPath
    oduExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduExpectedTti.EntityData.Children = types.NewOrderedMap()
    oduExpectedTti.EntityData.Leafs = types.NewOrderedMap()
    oduExpectedTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", oduExpectedTti.StringType})
    oduExpectedTti.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", oduExpectedTti.AsciiString})
    oduExpectedTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", oduExpectedTti.HexString})

    oduExpectedTti.EntityData.YListKeys = []string {}

    return &(oduExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti
// Configure ODU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (oduTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Odu_OduTxTti) GetEntityData() *types.CommonEntityData {
    oduTxTti.EntityData.YFilter = oduTxTti.YFilter
    oduTxTti.EntityData.YangName = "odu-tx-tti"
    oduTxTti.EntityData.BundleName = "cisco_ios_xr"
    oduTxTti.EntityData.ParentYangName = "odu"
    oduTxTti.EntityData.SegmentPath = "odu-tx-tti"
    oduTxTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/odu/" + oduTxTti.EntityData.SegmentPath
    oduTxTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oduTxTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oduTxTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oduTxTti.EntityData.Children = types.NewOrderedMap()
    oduTxTti.EntityData.Leafs = types.NewOrderedMap()
    oduTxTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", oduTxTti.StringType})
    oduTxTti.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", oduTxTti.AsciiString})
    oduTxTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", oduTxTti.HexString})

    oduTxTti.EntityData.YListKeys = []string {}

    return &(oduTxTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu
// Configure OTU parameters
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure OTU Expected TTI value.
    OtuExpectedTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti

    // Configure OTU threshold value.
    OtuThresholds InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds

    // Configure FRR thresholds and Window for trigger and revert.
    Frr InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr

    // Configure OTU alarm reporting.
    OtuReports InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports

    // Configure OTU TTI value.
    OtuTxTti InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
}

func (otu *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu) GetEntityData() *types.CommonEntityData {
    otu.EntityData.YFilter = otu.YFilter
    otu.EntityData.YangName = "otu"
    otu.EntityData.BundleName = "cisco_ios_xr"
    otu.EntityData.ParentYangName = "g709"
    otu.EntityData.SegmentPath = "otu"
    otu.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/" + otu.EntityData.SegmentPath
    otu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otu.EntityData.Children = types.NewOrderedMap()
    otu.EntityData.Children.Append("otu-expected-tti", types.YChild{"OtuExpectedTti", &otu.OtuExpectedTti})
    otu.EntityData.Children.Append("otu-thresholds", types.YChild{"OtuThresholds", &otu.OtuThresholds})
    otu.EntityData.Children.Append("frr", types.YChild{"Frr", &otu.Frr})
    otu.EntityData.Children.Append("otu-reports", types.YChild{"OtuReports", &otu.OtuReports})
    otu.EntityData.Children.Append("otu-tx-tti", types.YChild{"OtuTxTti", &otu.OtuTxTti})
    otu.EntityData.Leafs = types.NewOrderedMap()

    otu.EntityData.YListKeys = []string {}

    return &(otu.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti
// Configure OTU Expected TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is ExpectedTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuExpectedTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuExpectedTti) GetEntityData() *types.CommonEntityData {
    otuExpectedTti.EntityData.YFilter = otuExpectedTti.YFilter
    otuExpectedTti.EntityData.YangName = "otu-expected-tti"
    otuExpectedTti.EntityData.BundleName = "cisco_ios_xr"
    otuExpectedTti.EntityData.ParentYangName = "otu"
    otuExpectedTti.EntityData.SegmentPath = "otu-expected-tti"
    otuExpectedTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/" + otuExpectedTti.EntityData.SegmentPath
    otuExpectedTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuExpectedTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuExpectedTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuExpectedTti.EntityData.Children = types.NewOrderedMap()
    otuExpectedTti.EntityData.Leafs = types.NewOrderedMap()
    otuExpectedTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otuExpectedTti.StringType})
    otuExpectedTti.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", otuExpectedTti.AsciiString})
    otuExpectedTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", otuExpectedTti.HexString})

    otuExpectedTti.EntityData.YListKeys = []string {}

    return &(otuExpectedTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds
// Configure OTU threshold value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold.
    OtuThreshold []*InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
}

func (otuThresholds *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds) GetEntityData() *types.CommonEntityData {
    otuThresholds.EntityData.YFilter = otuThresholds.YFilter
    otuThresholds.EntityData.YangName = "otu-thresholds"
    otuThresholds.EntityData.BundleName = "cisco_ios_xr"
    otuThresholds.EntityData.ParentYangName = "otu"
    otuThresholds.EntityData.SegmentPath = "otu-thresholds"
    otuThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/" + otuThresholds.EntityData.SegmentPath
    otuThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuThresholds.EntityData.Children = types.NewOrderedMap()
    otuThresholds.EntityData.Children.Append("otu-threshold", types.YChild{"OtuThreshold", nil})
    for i := range otuThresholds.OtuThreshold {
        otuThresholds.EntityData.Children.Append(types.GetSegmentPath(otuThresholds.OtuThreshold[i]), types.YChild{"OtuThreshold", otuThresholds.OtuThreshold[i]})
    }
    otuThresholds.EntityData.Leafs = types.NewOrderedMap()

    otuThresholds.EntityData.YListKeys = []string {}

    return &(otuThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OTU Threshold type. The type is OtuThreshold.
    Threshold interface{}

    // Bit error rate (10 to the minus n). The type is interface{} with range:
    // 1..9. This attribute is mandatory.
    ThresholdValue interface{}
}

func (otuThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuThresholds_OtuThreshold) GetEntityData() *types.CommonEntityData {
    otuThreshold.EntityData.YFilter = otuThreshold.YFilter
    otuThreshold.EntityData.YangName = "otu-threshold"
    otuThreshold.EntityData.BundleName = "cisco_ios_xr"
    otuThreshold.EntityData.ParentYangName = "otu-thresholds"
    otuThreshold.EntityData.SegmentPath = "otu-threshold" + types.AddKeyToken(otuThreshold.Threshold, "threshold")
    otuThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/otu-thresholds/" + otuThreshold.EntityData.SegmentPath
    otuThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuThreshold.EntityData.Children = types.NewOrderedMap()
    otuThreshold.EntityData.Leafs = types.NewOrderedMap()
    otuThreshold.EntityData.Leafs.Append("threshold", types.YLeaf{"Threshold", otuThreshold.Threshold})
    otuThreshold.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", otuThreshold.ThresholdValue})

    otuThreshold.EntityData.YListKeys = []string {"Threshold"}

    return &(otuThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr
// Configure FRR thresholds and Window for
// trigger and revert
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure FRR trigger window.
    TriggerWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow

    // Configure proactive protection revert threshold.
    RevertThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold

    // Configure proactive protection trigger threshold.
    TriggerThreshold InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold

    // Configure FRR revert window.
    RevertWindow InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
}

func (frr *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr) GetEntityData() *types.CommonEntityData {
    frr.EntityData.YFilter = frr.YFilter
    frr.EntityData.YangName = "frr"
    frr.EntityData.BundleName = "cisco_ios_xr"
    frr.EntityData.ParentYangName = "otu"
    frr.EntityData.SegmentPath = "frr"
    frr.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/" + frr.EntityData.SegmentPath
    frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frr.EntityData.Children = types.NewOrderedMap()
    frr.EntityData.Children.Append("trigger-window", types.YChild{"TriggerWindow", &frr.TriggerWindow})
    frr.EntityData.Children.Append("revert-threshold", types.YChild{"RevertThreshold", &frr.RevertThreshold})
    frr.EntityData.Children.Append("trigger-threshold", types.YChild{"TriggerThreshold", &frr.TriggerThreshold})
    frr.EntityData.Children.Append("revert-window", types.YChild{"RevertWindow", &frr.RevertWindow})
    frr.EntityData.Leafs = types.NewOrderedMap()

    frr.EntityData.YListKeys = []string {}

    return &(frr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow
// Configure FRR trigger window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Integration window for FRR trigger in MS. The type is interface{} with
    // range: 10..10000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (triggerWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerWindow) GetEntityData() *types.CommonEntityData {
    triggerWindow.EntityData.YFilter = triggerWindow.YFilter
    triggerWindow.EntityData.YangName = "trigger-window"
    triggerWindow.EntityData.BundleName = "cisco_ios_xr"
    triggerWindow.EntityData.ParentYangName = "frr"
    triggerWindow.EntityData.SegmentPath = "trigger-window"
    triggerWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/frr/" + triggerWindow.EntityData.SegmentPath
    triggerWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerWindow.EntityData.Children = types.NewOrderedMap()
    triggerWindow.EntityData.Leafs = types.NewOrderedMap()
    triggerWindow.EntityData.Leafs.Append("window", types.YLeaf{"Window", triggerWindow.Window})
    triggerWindow.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", triggerWindow.Dummy})

    triggerWindow.EntityData.YListKeys = []string {}

    return &(triggerWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold
// Configure proactive protection revert
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range:
    // 3..10. This attribute is mandatory.
    BerPower interface{}
}

func (revertThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertThreshold) GetEntityData() *types.CommonEntityData {
    revertThreshold.EntityData.YFilter = revertThreshold.YFilter
    revertThreshold.EntityData.YangName = "revert-threshold"
    revertThreshold.EntityData.BundleName = "cisco_ios_xr"
    revertThreshold.EntityData.ParentYangName = "frr"
    revertThreshold.EntityData.SegmentPath = "revert-threshold"
    revertThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/frr/" + revertThreshold.EntityData.SegmentPath
    revertThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertThreshold.EntityData.Children = types.NewOrderedMap()
    revertThreshold.EntityData.Leafs = types.NewOrderedMap()
    revertThreshold.EntityData.Leafs.Append("ber-base", types.YLeaf{"BerBase", revertThreshold.BerBase})
    revertThreshold.EntityData.Leafs.Append("ber-power", types.YLeaf{"BerPower", revertThreshold.BerPower})

    revertThreshold.EntityData.YListKeys = []string {}

    return &(revertThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold
// Configure proactive protection trigger
// threshold
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bit error rate base (x of xE-y). The type is interface{} with range: 1..9.
    // This attribute is mandatory.
    BerBase interface{}

    // Bit error rate power (y of xE-y). The type is interface{} with range: 2..9.
    // This attribute is mandatory.
    BerPower interface{}
}

func (triggerThreshold *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_TriggerThreshold) GetEntityData() *types.CommonEntityData {
    triggerThreshold.EntityData.YFilter = triggerThreshold.YFilter
    triggerThreshold.EntityData.YangName = "trigger-threshold"
    triggerThreshold.EntityData.BundleName = "cisco_ios_xr"
    triggerThreshold.EntityData.ParentYangName = "frr"
    triggerThreshold.EntityData.SegmentPath = "trigger-threshold"
    triggerThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/frr/" + triggerThreshold.EntityData.SegmentPath
    triggerThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerThreshold.EntityData.Children = types.NewOrderedMap()
    triggerThreshold.EntityData.Leafs = types.NewOrderedMap()
    triggerThreshold.EntityData.Leafs.Append("ber-base", types.YLeaf{"BerBase", triggerThreshold.BerBase})
    triggerThreshold.EntityData.Leafs.Append("ber-power", types.YLeaf{"BerPower", triggerThreshold.BerPower})

    triggerThreshold.EntityData.YListKeys = []string {}

    return &(triggerThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow
// Configure FRR revert window
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Integration window for FRR revert in MS. The type is interface{} with
    // range: 500..100000. This attribute is mandatory.
    Window interface{}

    // Just a Dummy for window for FRR revert in MS. The type is interface{} with
    // range: 0..2.
    Dummy interface{}
}

func (revertWindow *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_Frr_RevertWindow) GetEntityData() *types.CommonEntityData {
    revertWindow.EntityData.YFilter = revertWindow.YFilter
    revertWindow.EntityData.YangName = "revert-window"
    revertWindow.EntityData.BundleName = "cisco_ios_xr"
    revertWindow.EntityData.ParentYangName = "frr"
    revertWindow.EntityData.SegmentPath = "revert-window"
    revertWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/frr/" + revertWindow.EntityData.SegmentPath
    revertWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    revertWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    revertWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    revertWindow.EntityData.Children = types.NewOrderedMap()
    revertWindow.EntityData.Leafs = types.NewOrderedMap()
    revertWindow.EntityData.Leafs.Append("window", types.YLeaf{"Window", revertWindow.Window})
    revertWindow.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", revertWindow.Dummy})

    revertWindow.EntityData.YListKeys = []string {}

    return &(revertWindow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports
// Configure OTU alarm reporting
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport.
    OtuReport []*InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
}

func (otuReports *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports) GetEntityData() *types.CommonEntityData {
    otuReports.EntityData.YFilter = otuReports.YFilter
    otuReports.EntityData.YangName = "otu-reports"
    otuReports.EntityData.BundleName = "cisco_ios_xr"
    otuReports.EntityData.ParentYangName = "otu"
    otuReports.EntityData.SegmentPath = "otu-reports"
    otuReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/" + otuReports.EntityData.SegmentPath
    otuReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuReports.EntityData.Children = types.NewOrderedMap()
    otuReports.EntityData.Children.Append("otu-report", types.YChild{"OtuReport", nil})
    for i := range otuReports.OtuReport {
        otuReports.EntityData.Children.Append(types.GetSegmentPath(otuReports.OtuReport[i]), types.YChild{"OtuReport", otuReports.OtuReport[i]})
    }
    otuReports.EntityData.Leafs = types.NewOrderedMap()

    otuReports.EntityData.YListKeys = []string {}

    return &(otuReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport
// none
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OTU alarm type. The type is OtuAlarm.
    Alarm interface{}
}

func (otuReport *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuReports_OtuReport) GetEntityData() *types.CommonEntityData {
    otuReport.EntityData.YFilter = otuReport.YFilter
    otuReport.EntityData.YangName = "otu-report"
    otuReport.EntityData.BundleName = "cisco_ios_xr"
    otuReport.EntityData.ParentYangName = "otu-reports"
    otuReport.EntityData.SegmentPath = "otu-report" + types.AddKeyToken(otuReport.Alarm, "alarm")
    otuReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/otu-reports/" + otuReport.EntityData.SegmentPath
    otuReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuReport.EntityData.Children = types.NewOrderedMap()
    otuReport.EntityData.Leafs = types.NewOrderedMap()
    otuReport.EntityData.Leafs.Append("alarm", types.YLeaf{"Alarm", otuReport.Alarm})

    otuReport.EntityData.YListKeys = []string {"Alarm"}

    return &(otuReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti
// Configure OTU TTI value
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TTI string type (ascii or hex format). The type is TxTti.
    StringType interface{}

    // ASCII text (Max 64 characters). The type is string with length: 1..64.
    AsciiString interface{}

    // Hex nibbles (Max 128- The string length should be an even number). The type
    // is string with length: 1..128.
    HexString interface{}
}

func (otuTxTti *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Otu_OtuTxTti) GetEntityData() *types.CommonEntityData {
    otuTxTti.EntityData.YFilter = otuTxTti.YFilter
    otuTxTti.EntityData.YangName = "otu-tx-tti"
    otuTxTti.EntityData.BundleName = "cisco_ios_xr"
    otuTxTti.EntityData.ParentYangName = "otu"
    otuTxTti.EntityData.SegmentPath = "otu-tx-tti"
    otuTxTti.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/otu/" + otuTxTti.EntityData.SegmentPath
    otuTxTti.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    otuTxTti.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    otuTxTti.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    otuTxTti.EntityData.Children = types.NewOrderedMap()
    otuTxTti.EntityData.Leafs = types.NewOrderedMap()
    otuTxTti.EntityData.Leafs.Append("string-type", types.YLeaf{"StringType", otuTxTti.StringType})
    otuTxTti.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", otuTxTti.AsciiString})
    otuTxTti.EntityData.Leafs.Append("hex-string", types.YLeaf{"HexString", otuTxTti.HexString})

    otuTxTti.EntityData.YListKeys = []string {}

    return &(otuTxTti.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs
// Configure PRBS mode and pattern
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable PRBS with mode. The type is PrbsMode. This attribute is mandatory.
    PrbsMode interface{}

    // Enable prbs test with pattern. The type is PrbsPattern. This attribute is
    // mandatory.
    PrbsPattern interface{}
}

func (prbs *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Prbs) GetEntityData() *types.CommonEntityData {
    prbs.EntityData.YFilter = prbs.YFilter
    prbs.EntityData.YangName = "prbs"
    prbs.EntityData.BundleName = "cisco_ios_xr"
    prbs.EntityData.ParentYangName = "g709"
    prbs.EntityData.SegmentPath = "prbs"
    prbs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/" + prbs.EntityData.SegmentPath
    prbs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prbs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prbs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prbs.EntityData.Children = types.NewOrderedMap()
    prbs.EntityData.Leafs = types.NewOrderedMap()
    prbs.EntityData.Leafs.Append("prbs-mode", types.YLeaf{"PrbsMode", prbs.PrbsMode})
    prbs.EntityData.Leafs.Append("prbs-pattern", types.YLeaf{"PrbsPattern", prbs.PrbsPattern})

    prbs.EntityData.YListKeys = []string {}

    return &(prbs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec
// Configure FEC mode
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // None, Standard, Enhanced, High-Gain, Long-Haul, Ci-BCH, 15SDFecDe, 15SDFec.
    // The type is Fec. This attribute is mandatory.
    FecMode interface{}

    // Enhanced FECMode to use i.4, i.7, Other FECMode to use None. The type is
    // Efec. The default value is none.
    EfecMode interface{}
}

func (fec *InterfaceConfigurations_InterfaceConfiguration_Dwdm_G709_Fec) GetEntityData() *types.CommonEntityData {
    fec.EntityData.YFilter = fec.YFilter
    fec.EntityData.YangName = "fec"
    fec.EntityData.BundleName = "cisco_ios_xr"
    fec.EntityData.ParentYangName = "g709"
    fec.EntityData.SegmentPath = "fec"
    fec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/g709/" + fec.EntityData.SegmentPath
    fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec.EntityData.Children = types.NewOrderedMap()
    fec.EntityData.Leafs = types.NewOrderedMap()
    fec.EntityData.Leafs.Append("fec-mode", types.YLeaf{"FecMode", fec.FecMode})
    fec.EntityData.Leafs.Append("efec-mode", types.YLeaf{"EfecMode", fec.EfecMode})

    fec.EntityData.YListKeys = []string {}

    return &(fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength
// Configure transponder wavelength
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Select a ITU channel number,channel range for C-band:
    // 1~82,L-band:106~185,spacing:50GHZ or 100MHz. The type is interface{} with
    // range: 1..1568362. This attribute is mandatory.
    WaveChannel interface{}

    // Wave Channel Number. The type is WaveChannelNum. This attribute is
    // mandatory.
    WaveChannelNumber interface{}

    // Enter Frequency Data in THz. The type is string with length: 1..128.
    ProgFrequency interface{}
}

func (wavelength *InterfaceConfigurations_InterfaceConfiguration_Dwdm_Wavelength) GetEntityData() *types.CommonEntityData {
    wavelength.EntityData.YFilter = wavelength.YFilter
    wavelength.EntityData.YangName = "wavelength"
    wavelength.EntityData.BundleName = "cisco_ios_xr"
    wavelength.EntityData.ParentYangName = "dwdm"
    wavelength.EntityData.SegmentPath = "wavelength"
    wavelength.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-dwdm-ui-cfg:dwdm/" + wavelength.EntityData.SegmentPath
    wavelength.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    wavelength.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    wavelength.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    wavelength.EntityData.Children = types.NewOrderedMap()
    wavelength.EntityData.Leafs = types.NewOrderedMap()
    wavelength.EntityData.Leafs.Append("wave-channel", types.YLeaf{"WaveChannel", wavelength.WaveChannel})
    wavelength.EntityData.Leafs.Append("wave-channel-number", types.YLeaf{"WaveChannelNumber", wavelength.WaveChannelNumber})
    wavelength.EntityData.Leafs.Append("prog-frequency", types.YLeaf{"ProgFrequency", wavelength.ProgFrequency})

    wavelength.EntityData.YListKeys = []string {}

    return &(wavelength.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration
// IEEE 802.1Q VLAN subinterface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The VLAN tag stack associated with this sub-interface.
    VlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
}

func (vlanSubConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration) GetEntityData() *types.CommonEntityData {
    vlanSubConfiguration.EntityData.YFilter = vlanSubConfiguration.YFilter
    vlanSubConfiguration.EntityData.YangName = "vlan-sub-configuration"
    vlanSubConfiguration.EntityData.BundleName = "cisco_ios_xr"
    vlanSubConfiguration.EntityData.ParentYangName = "interface-configuration"
    vlanSubConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"
    vlanSubConfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + vlanSubConfiguration.EntityData.SegmentPath
    vlanSubConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanSubConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanSubConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanSubConfiguration.EntityData.Children = types.NewOrderedMap()
    vlanSubConfiguration.EntityData.Children.Append("vlan-identifier", types.YChild{"VlanIdentifier", &vlanSubConfiguration.VlanIdentifier})
    vlanSubConfiguration.EntityData.Leafs = types.NewOrderedMap()

    vlanSubConfiguration.EntityData.YListKeys = []string {}

    return &(vlanSubConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier
// The VLAN tag stack associated with this
// sub-interface.
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Whether this sub-interface is dot1ad or dot1Q. The type is Vlan. This
    // attribute is mandatory.
    VlanType interface{}

    // First (outermost) VLAN tag value. The type is interface{} with range:
    // 1..4094. This attribute is mandatory.
    FirstTag interface{}

    // Second VLAN tag value. The any value may only be used for Layer 2
    // subinterfaces. The type is one of the following types: enumeration
    // VlanTagOrNull, or int with range: 0..4094.
    SecondTag interface{}
}

func (vlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanSubConfiguration_VlanIdentifier) GetEntityData() *types.CommonEntityData {
    vlanIdentifier.EntityData.YFilter = vlanIdentifier.YFilter
    vlanIdentifier.EntityData.YangName = "vlan-identifier"
    vlanIdentifier.EntityData.BundleName = "cisco_ios_xr"
    vlanIdentifier.EntityData.ParentYangName = "vlan-sub-configuration"
    vlanIdentifier.EntityData.SegmentPath = "vlan-identifier"
    vlanIdentifier.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration/" + vlanIdentifier.EntityData.SegmentPath
    vlanIdentifier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanIdentifier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanIdentifier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanIdentifier.EntityData.Children = types.NewOrderedMap()
    vlanIdentifier.EntityData.Leafs = types.NewOrderedMap()
    vlanIdentifier.EntityData.Leafs.Append("vlan-type", types.YLeaf{"VlanType", vlanIdentifier.VlanType})
    vlanIdentifier.EntityData.Leafs.Append("first-tag", types.YLeaf{"FirstTag", vlanIdentifier.FirstTag})
    vlanIdentifier.EntityData.Leafs.Append("second-tag", types.YLeaf{"SecondTag", vlanIdentifier.SecondTag})

    vlanIdentifier.EntityData.YListKeys = []string {}

    return &(vlanIdentifier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService
// Ethernet service configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetService struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The default encapsulation to be used for locally-sourced packets.
    LocalTrafficDefaultEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation

    // The encapsulation of this Ethernet service.
    Encapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation

    // The rewrite operation for the Ethernet service.
    Rewrite InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
}

func (ethernetService *InterfaceConfigurations_InterfaceConfiguration_EthernetService) GetEntityData() *types.CommonEntityData {
    ethernetService.EntityData.YFilter = ethernetService.YFilter
    ethernetService.EntityData.YangName = "ethernet-service"
    ethernetService.EntityData.BundleName = "cisco_ios_xr"
    ethernetService.EntityData.ParentYangName = "interface-configuration"
    ethernetService.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"
    ethernetService.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ethernetService.EntityData.SegmentPath
    ethernetService.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetService.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetService.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetService.EntityData.Children = types.NewOrderedMap()
    ethernetService.EntityData.Children.Append("local-traffic-default-encapsulation", types.YChild{"LocalTrafficDefaultEncapsulation", &ethernetService.LocalTrafficDefaultEncapsulation})
    ethernetService.EntityData.Children.Append("encapsulation", types.YChild{"Encapsulation", &ethernetService.Encapsulation})
    ethernetService.EntityData.Children.Append("rewrite", types.YChild{"Rewrite", &ethernetService.Rewrite})
    ethernetService.EntityData.Leafs = types.NewOrderedMap()

    ethernetService.EntityData.YListKeys = []string {}

    return &(ethernetService.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation
// The default encapsulation to be used for
// locally-sourced packets
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Type of outer tag. The type is Vlan. This attribute is mandatory.
    OuterTagType interface{}

    // VLAN id for outer tag. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    OuterVlanId interface{}

    // Optional VLAN Id for inner Dot1Q tag. The type is interface{} with range:
    // 1..4094.
    InnerVlanId interface{}
}

func (localTrafficDefaultEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_LocalTrafficDefaultEncapsulation) GetEntityData() *types.CommonEntityData {
    localTrafficDefaultEncapsulation.EntityData.YFilter = localTrafficDefaultEncapsulation.YFilter
    localTrafficDefaultEncapsulation.EntityData.YangName = "local-traffic-default-encapsulation"
    localTrafficDefaultEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    localTrafficDefaultEncapsulation.EntityData.ParentYangName = "ethernet-service"
    localTrafficDefaultEncapsulation.EntityData.SegmentPath = "local-traffic-default-encapsulation"
    localTrafficDefaultEncapsulation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service/" + localTrafficDefaultEncapsulation.EntityData.SegmentPath
    localTrafficDefaultEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTrafficDefaultEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTrafficDefaultEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTrafficDefaultEncapsulation.EntityData.Children = types.NewOrderedMap()
    localTrafficDefaultEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    localTrafficDefaultEncapsulation.EntityData.Leafs.Append("outer-tag-type", types.YLeaf{"OuterTagType", localTrafficDefaultEncapsulation.OuterTagType})
    localTrafficDefaultEncapsulation.EntityData.Leafs.Append("outer-vlan-id", types.YLeaf{"OuterVlanId", localTrafficDefaultEncapsulation.OuterVlanId})
    localTrafficDefaultEncapsulation.EntityData.Leafs.Append("inner-vlan-id", types.YLeaf{"InnerVlanId", localTrafficDefaultEncapsulation.InnerVlanId})

    localTrafficDefaultEncapsulation.EntityData.YListKeys = []string {}

    return &(localTrafficDefaultEncapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation
// The encapsulation of this Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (encapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "cisco_ios_xr"
    encapsulation.EntityData.ParentYangName = "ethernet-service"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service/" + encapsulation.EntityData.SegmentPath
    encapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    encapsulation.EntityData.Children = types.NewOrderedMap()
    encapsulation.EntityData.Leafs = types.NewOrderedMap()
    encapsulation.EntityData.Leafs.Append("outer-tag-type", types.YLeaf{"OuterTagType", encapsulation.OuterTagType})
    encapsulation.EntityData.Leafs.Append("outer-range1-low", types.YLeaf{"OuterRange1Low", encapsulation.OuterRange1Low})
    encapsulation.EntityData.Leafs.Append("outer-range1-high", types.YLeaf{"OuterRange1High", encapsulation.OuterRange1High})
    encapsulation.EntityData.Leafs.Append("inner-tag-type", types.YLeaf{"InnerTagType", encapsulation.InnerTagType})
    encapsulation.EntityData.Leafs.Append("inner-range1-low", types.YLeaf{"InnerRange1Low", encapsulation.InnerRange1Low})
    encapsulation.EntityData.Leafs.Append("inner-range1-high", types.YLeaf{"InnerRange1High", encapsulation.InnerRange1High})
    encapsulation.EntityData.Leafs.Append("additional-range1-low", types.YLeaf{"AdditionalRange1Low", encapsulation.AdditionalRange1Low})
    encapsulation.EntityData.Leafs.Append("additional-range1-high", types.YLeaf{"AdditionalRange1High", encapsulation.AdditionalRange1High})
    encapsulation.EntityData.Leafs.Append("additional-range2-low", types.YLeaf{"AdditionalRange2Low", encapsulation.AdditionalRange2Low})
    encapsulation.EntityData.Leafs.Append("additional-range2-high", types.YLeaf{"AdditionalRange2High", encapsulation.AdditionalRange2High})
    encapsulation.EntityData.Leafs.Append("additional-range3-low", types.YLeaf{"AdditionalRange3Low", encapsulation.AdditionalRange3Low})
    encapsulation.EntityData.Leafs.Append("additional-range3-high", types.YLeaf{"AdditionalRange3High", encapsulation.AdditionalRange3High})
    encapsulation.EntityData.Leafs.Append("additional-range4-low", types.YLeaf{"AdditionalRange4Low", encapsulation.AdditionalRange4Low})
    encapsulation.EntityData.Leafs.Append("additional-range4-high", types.YLeaf{"AdditionalRange4High", encapsulation.AdditionalRange4High})
    encapsulation.EntityData.Leafs.Append("additional-range5-low", types.YLeaf{"AdditionalRange5Low", encapsulation.AdditionalRange5Low})
    encapsulation.EntityData.Leafs.Append("additional-range5-high", types.YLeaf{"AdditionalRange5High", encapsulation.AdditionalRange5High})
    encapsulation.EntityData.Leafs.Append("additional-range6-low", types.YLeaf{"AdditionalRange6Low", encapsulation.AdditionalRange6Low})
    encapsulation.EntityData.Leafs.Append("additional-range6-high", types.YLeaf{"AdditionalRange6High", encapsulation.AdditionalRange6High})
    encapsulation.EntityData.Leafs.Append("additional-range7-low", types.YLeaf{"AdditionalRange7Low", encapsulation.AdditionalRange7Low})
    encapsulation.EntityData.Leafs.Append("additional-range7-high", types.YLeaf{"AdditionalRange7High", encapsulation.AdditionalRange7High})
    encapsulation.EntityData.Leafs.Append("additional-range8-low", types.YLeaf{"AdditionalRange8Low", encapsulation.AdditionalRange8Low})
    encapsulation.EntityData.Leafs.Append("additional-range8-high", types.YLeaf{"AdditionalRange8High", encapsulation.AdditionalRange8High})
    encapsulation.EntityData.Leafs.Append("outer-class-of-service", types.YLeaf{"OuterClassOfService", encapsulation.OuterClassOfService})
    encapsulation.EntityData.Leafs.Append("inner-class-of-service", types.YLeaf{"InnerClassOfService", encapsulation.InnerClassOfService})
    encapsulation.EntityData.Leafs.Append("payload-ethertype-match", types.YLeaf{"PayloadEthertypeMatch", encapsulation.PayloadEthertypeMatch})
    encapsulation.EntityData.Leafs.Append("ingress-source-mac", types.YLeaf{"IngressSourceMac", encapsulation.IngressSourceMac})
    encapsulation.EntityData.Leafs.Append("ingress-destination-mac", types.YLeaf{"IngressDestinationMac", encapsulation.IngressDestinationMac})
    encapsulation.EntityData.Leafs.Append("exact", types.YLeaf{"Exact", encapsulation.Exact})

    encapsulation.EntityData.YListKeys = []string {}

    return &(encapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite
// The rewrite operation for the Ethernet service
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // The type of rewrite to perform. The type is Rewrite. This attribute is
    // mandatory.
    RewriteType interface{}

    // Type of outermost tag to be pushed. The type is Match.
    OuterTagType interface{}

    // VLAN Id of outermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    OuterTagValue interface{}

    // Type of innermost tag to be pushed. The type is Match.
    InnerTagType interface{}

    // VLAN Id of innermost tag to be pushed. The type is interface{} with range:
    // 1..4094.
    InnerTagValue interface{}
}

func (rewrite *InterfaceConfigurations_InterfaceConfiguration_EthernetService_Rewrite) GetEntityData() *types.CommonEntityData {
    rewrite.EntityData.YFilter = rewrite.YFilter
    rewrite.EntityData.YangName = "rewrite"
    rewrite.EntityData.BundleName = "cisco_ios_xr"
    rewrite.EntityData.ParentYangName = "ethernet-service"
    rewrite.EntityData.SegmentPath = "rewrite"
    rewrite.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service/" + rewrite.EntityData.SegmentPath
    rewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewrite.EntityData.Children = types.NewOrderedMap()
    rewrite.EntityData.Leafs = types.NewOrderedMap()
    rewrite.EntityData.Leafs.Append("rewrite-type", types.YLeaf{"RewriteType", rewrite.RewriteType})
    rewrite.EntityData.Leafs.Append("outer-tag-type", types.YLeaf{"OuterTagType", rewrite.OuterTagType})
    rewrite.EntityData.Leafs.Append("outer-tag-value", types.YLeaf{"OuterTagValue", rewrite.OuterTagValue})
    rewrite.EntityData.Leafs.Append("inner-tag-type", types.YLeaf{"InnerTagType", rewrite.InnerTagType})
    rewrite.EntityData.Leafs.Append("inner-tag-value", types.YLeaf{"InnerTagValue", rewrite.InnerTagValue})

    rewrite.EntityData.YListKeys = []string {}

    return &(rewrite.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng
// Ethernet Infra BNG specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L3 Ambiguous encapsulation.
    AmbiguousEncapsulation InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
}

func (ethernetBng *InterfaceConfigurations_InterfaceConfiguration_EthernetBng) GetEntityData() *types.CommonEntityData {
    ethernetBng.EntityData.YFilter = ethernetBng.YFilter
    ethernetBng.EntityData.YangName = "ethernet-bng"
    ethernetBng.EntityData.BundleName = "cisco_ios_xr"
    ethernetBng.EntityData.ParentYangName = "interface-configuration"
    ethernetBng.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"
    ethernetBng.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ethernetBng.EntityData.SegmentPath
    ethernetBng.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetBng.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetBng.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetBng.EntityData.Children = types.NewOrderedMap()
    ethernetBng.EntityData.Children.Append("ambiguous-encapsulation", types.YChild{"AmbiguousEncapsulation", &ethernetBng.AmbiguousEncapsulation})
    ethernetBng.EntityData.Leafs = types.NewOrderedMap()

    ethernetBng.EntityData.YListKeys = []string {}

    return &(ethernetBng.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation
// L3 Ambiguous encapsulation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Whether to match all unmatched packets, untagged packets or tagged packets,
    // and if matching tagged packets, the outer tag type to match. The type is
    // Match. This attribute is mandatory.
    OuterTagType interface{}

    // Low value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    OuterRange1Low interface{}

    // High value of first range for outer tag match. The type is one of the
    // following types: enumeration VlanTagOrNative, or int with range: 1..65535.
    OuterRange1High interface{}

    // Type of tag for inner match (if present). The type is Match.
    InnerTagType interface{}

    // Low value of first range for inner tag match. The type is one of the
    // following types: enumeration VlanTagOrAny, or int with range: 1..4096.
    InnerRange1Low interface{}

    // High value of first range for inner tag match. The type is interface{} with
    // range: 1..4094.
    InnerRange1High interface{}

    // Low value of first additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange1Low interface{}

    // High value of first additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange1High interface{}

    // Low value of second additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange2Low interface{}

    // High value of second additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange2High interface{}

    // Low value of third additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange3Low interface{}

    // High value of third additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange3High interface{}

    // Low value of forth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange4Low interface{}

    // High value of forth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange4High interface{}

    // Low value of fifth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange5Low interface{}

    // High value of fifth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange5High interface{}

    // Low value of sixth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange6Low interface{}

    // High value of sixth additional range for tag match. The type is interface{}
    // with range: 1..4094.
    AdditionalRange6High interface{}

    // Low value of seventh additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange7Low interface{}

    // High value of seventh additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange7High interface{}

    // Low value of eighth additional range for tag match. The type is one of the
    // following types: enumeration VlanTagOrCvp, or int with range: 1..65534.
    AdditionalRange8Low interface{}

    // High value of eighth additional range for tag match. The type is
    // interface{} with range: 1..4094.
    AdditionalRange8High interface{}

    // Value to match against Class Of Service bits for outer tag. The type is
    // interface{} with range: 0..7.
    OuterClassOfService interface{}

    // Value to match against Class Of Service bits for inner tag. The type is
    // interface{} with range: 0..7.
    InnerClassOfService interface{}

    // Which payload ethertype values to match. The type is EthertypeMatch.
    PayloadEthertypeMatch interface{}

    // Source MAC address to match on ingress. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressSourceMac interface{}

    // Destination MAC address to match on egress. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    IngressDestinationMac interface{}

    // Only match packets with no more tags than explicitly matched. The type is
    // interface{}.
    Exact interface{}
}

func (ambiguousEncapsulation *InterfaceConfigurations_InterfaceConfiguration_EthernetBng_AmbiguousEncapsulation) GetEntityData() *types.CommonEntityData {
    ambiguousEncapsulation.EntityData.YFilter = ambiguousEncapsulation.YFilter
    ambiguousEncapsulation.EntityData.YangName = "ambiguous-encapsulation"
    ambiguousEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ambiguousEncapsulation.EntityData.ParentYangName = "ethernet-bng"
    ambiguousEncapsulation.EntityData.SegmentPath = "ambiguous-encapsulation"
    ambiguousEncapsulation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng/" + ambiguousEncapsulation.EntityData.SegmentPath
    ambiguousEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ambiguousEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ambiguousEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ambiguousEncapsulation.EntityData.Children = types.NewOrderedMap()
    ambiguousEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ambiguousEncapsulation.EntityData.Leafs.Append("outer-tag-type", types.YLeaf{"OuterTagType", ambiguousEncapsulation.OuterTagType})
    ambiguousEncapsulation.EntityData.Leafs.Append("outer-range1-low", types.YLeaf{"OuterRange1Low", ambiguousEncapsulation.OuterRange1Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("outer-range1-high", types.YLeaf{"OuterRange1High", ambiguousEncapsulation.OuterRange1High})
    ambiguousEncapsulation.EntityData.Leafs.Append("inner-tag-type", types.YLeaf{"InnerTagType", ambiguousEncapsulation.InnerTagType})
    ambiguousEncapsulation.EntityData.Leafs.Append("inner-range1-low", types.YLeaf{"InnerRange1Low", ambiguousEncapsulation.InnerRange1Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("inner-range1-high", types.YLeaf{"InnerRange1High", ambiguousEncapsulation.InnerRange1High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range1-low", types.YLeaf{"AdditionalRange1Low", ambiguousEncapsulation.AdditionalRange1Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range1-high", types.YLeaf{"AdditionalRange1High", ambiguousEncapsulation.AdditionalRange1High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range2-low", types.YLeaf{"AdditionalRange2Low", ambiguousEncapsulation.AdditionalRange2Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range2-high", types.YLeaf{"AdditionalRange2High", ambiguousEncapsulation.AdditionalRange2High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range3-low", types.YLeaf{"AdditionalRange3Low", ambiguousEncapsulation.AdditionalRange3Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range3-high", types.YLeaf{"AdditionalRange3High", ambiguousEncapsulation.AdditionalRange3High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range4-low", types.YLeaf{"AdditionalRange4Low", ambiguousEncapsulation.AdditionalRange4Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range4-high", types.YLeaf{"AdditionalRange4High", ambiguousEncapsulation.AdditionalRange4High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range5-low", types.YLeaf{"AdditionalRange5Low", ambiguousEncapsulation.AdditionalRange5Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range5-high", types.YLeaf{"AdditionalRange5High", ambiguousEncapsulation.AdditionalRange5High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range6-low", types.YLeaf{"AdditionalRange6Low", ambiguousEncapsulation.AdditionalRange6Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range6-high", types.YLeaf{"AdditionalRange6High", ambiguousEncapsulation.AdditionalRange6High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range7-low", types.YLeaf{"AdditionalRange7Low", ambiguousEncapsulation.AdditionalRange7Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range7-high", types.YLeaf{"AdditionalRange7High", ambiguousEncapsulation.AdditionalRange7High})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range8-low", types.YLeaf{"AdditionalRange8Low", ambiguousEncapsulation.AdditionalRange8Low})
    ambiguousEncapsulation.EntityData.Leafs.Append("additional-range8-high", types.YLeaf{"AdditionalRange8High", ambiguousEncapsulation.AdditionalRange8High})
    ambiguousEncapsulation.EntityData.Leafs.Append("outer-class-of-service", types.YLeaf{"OuterClassOfService", ambiguousEncapsulation.OuterClassOfService})
    ambiguousEncapsulation.EntityData.Leafs.Append("inner-class-of-service", types.YLeaf{"InnerClassOfService", ambiguousEncapsulation.InnerClassOfService})
    ambiguousEncapsulation.EntityData.Leafs.Append("payload-ethertype-match", types.YLeaf{"PayloadEthertypeMatch", ambiguousEncapsulation.PayloadEthertypeMatch})
    ambiguousEncapsulation.EntityData.Leafs.Append("ingress-source-mac", types.YLeaf{"IngressSourceMac", ambiguousEncapsulation.IngressSourceMac})
    ambiguousEncapsulation.EntityData.Leafs.Append("ingress-destination-mac", types.YLeaf{"IngressDestinationMac", ambiguousEncapsulation.IngressDestinationMac})
    ambiguousEncapsulation.EntityData.Leafs.Append("exact", types.YLeaf{"Exact", ambiguousEncapsulation.Exact})

    ambiguousEncapsulation.EntityData.YListKeys = []string {}

    return &(ambiguousEncapsulation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MacAccounting
// MAC Accounting Configuration
type InterfaceConfigurations_InterfaceConfiguration_MacAccounting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per MAC address accounting statistics. The type is interface{}.
    Ingress interface{}

    // Per MAC address accounting statistics. The type is interface{}.
    Egress interface{}
}

func (macAccounting *InterfaceConfigurations_InterfaceConfiguration_MacAccounting) GetEntityData() *types.CommonEntityData {
    macAccounting.EntityData.YFilter = macAccounting.YFilter
    macAccounting.EntityData.YangName = "mac-accounting"
    macAccounting.EntityData.BundleName = "cisco_ios_xr"
    macAccounting.EntityData.ParentYangName = "interface-configuration"
    macAccounting.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"
    macAccounting.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + macAccounting.EntityData.SegmentPath
    macAccounting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAccounting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAccounting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAccounting.EntityData.Children = types.NewOrderedMap()
    macAccounting.EntityData.Leafs = types.NewOrderedMap()
    macAccounting.EntityData.Leafs.Append("ingress", types.YLeaf{"Ingress", macAccounting.Ingress})
    macAccounting.EntityData.Leafs.Append("egress", types.YLeaf{"Egress", macAccounting.Egress})

    macAccounting.EntityData.YListKeys = []string {}

    return &(macAccounting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures
// Ethernet Features Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ingress Ethernet frame filtering. The type is Filtering.
    Filtering interface{}

    // Enable Ethernet Link OAM on the interface. The type is interface{}.
    EtherLinkOamEnable interface{}

    // CFM interface configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm

    // Ethernet Link OAM Interface Configuration.
    EtherLinkOam InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures) GetEntityData() *types.CommonEntityData {
    ethernetFeatures.EntityData.YFilter = ethernetFeatures.YFilter
    ethernetFeatures.EntityData.YangName = "ethernet-features"
    ethernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    ethernetFeatures.EntityData.ParentYangName = "interface-configuration"
    ethernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"
    ethernetFeatures.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ethernetFeatures.EntityData.SegmentPath
    ethernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetFeatures.EntityData.Children = types.NewOrderedMap()
    ethernetFeatures.EntityData.Children.Append("Cisco-IOS-XR-ethernet-cfm-cfg:cfm", types.YChild{"Cfm", &ethernetFeatures.Cfm})
    ethernetFeatures.EntityData.Children.Append("Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam", types.YChild{"EtherLinkOam", &ethernetFeatures.EtherLinkOam})
    ethernetFeatures.EntityData.Leafs = types.NewOrderedMap()
    ethernetFeatures.EntityData.Leafs.Append("filtering", types.YLeaf{"Filtering", ethernetFeatures.Filtering})
    ethernetFeatures.EntityData.Leafs.Append("ether-link-oam-enable", types.YLeaf{"EtherLinkOamEnable", ethernetFeatures.EtherLinkOamEnable})

    ethernetFeatures.EntityData.YListKeys = []string {}

    return &(ethernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm
// CFM interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain-specific interface configuration.
    Domains InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains

    // Interface specific AIS configuration.
    AisUp InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm) GetEntityData() *types.CommonEntityData {
    cfm.EntityData.YFilter = cfm.YFilter
    cfm.EntityData.YangName = "cfm"
    cfm.EntityData.BundleName = "cisco_ios_xr"
    cfm.EntityData.ParentYangName = "ethernet-features"
    cfm.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-cfm-cfg:cfm"
    cfm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/" + cfm.EntityData.SegmentPath
    cfm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cfm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cfm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cfm.EntityData.Children = types.NewOrderedMap()
    cfm.EntityData.Children.Append("domains", types.YChild{"Domains", &cfm.Domains})
    cfm.EntityData.Children.Append("ais-up", types.YChild{"AisUp", &cfm.AisUp})
    cfm.EntityData.Leafs = types.NewOrderedMap()

    cfm.EntityData.YListKeys = []string {}

    return &(cfm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains
// Domain-specific interface configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular Maintenance Domain. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain.
    Domain []*InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
}

func (domains *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains) GetEntityData() *types.CommonEntityData {
    domains.EntityData.YFilter = domains.YFilter
    domains.EntityData.YangName = "domains"
    domains.EntityData.BundleName = "cisco_ios_xr"
    domains.EntityData.ParentYangName = "cfm"
    domains.EntityData.SegmentPath = "domains"
    domains.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/" + domains.EntityData.SegmentPath
    domains.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domains.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domains.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domains.EntityData.Children = types.NewOrderedMap()
    domains.EntityData.Children.Append("domain", types.YChild{"Domain", nil})
    for i := range domains.Domain {
        domains.EntityData.Children.Append(types.GetSegmentPath(domains.Domain[i]), types.YChild{"Domain", domains.Domain[i]})
    }
    domains.EntityData.Leafs = types.NewOrderedMap()

    domains.EntityData.YListKeys = []string {}

    return &(domains.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain
// Configuration for a particular Maintenance
// Domain
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Maintenance Domain. The type is string with
    // length: 1..127.
    Domain interface{}

    // MEP Configuration.
    Mep InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
}

func (domain *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain) GetEntityData() *types.CommonEntityData {
    domain.EntityData.YFilter = domain.YFilter
    domain.EntityData.YangName = "domain"
    domain.EntityData.BundleName = "cisco_ios_xr"
    domain.EntityData.ParentYangName = "domains"
    domain.EntityData.SegmentPath = "domain" + types.AddKeyToken(domain.Domain, "domain")
    domain.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/" + domain.EntityData.SegmentPath
    domain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domain.EntityData.Children = types.NewOrderedMap()
    domain.EntityData.Children.Append("mep", types.YChild{"Mep", &domain.Mep})
    domain.EntityData.Leafs = types.NewOrderedMap()
    domain.EntityData.Leafs.Append("domain", types.YLeaf{"Domain", domain.Domain})

    domain.EntityData.YListKeys = []string {"Domain"}

    return &(domain.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep
// MEP Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Class of Service bits for this MEP. The type is interface{} with range:
    // 0..7.
    Cos interface{}

    // SLA specific configuration.
    SlaProfileTargetMepIds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds

    // Properties for this MEP.
    MepProperties InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties

    // Loss-measurement specific configuration.
    LossMeasurementCounters InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
}

func (mep *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep) GetEntityData() *types.CommonEntityData {
    mep.EntityData.YFilter = mep.YFilter
    mep.EntityData.YangName = "mep"
    mep.EntityData.BundleName = "cisco_ios_xr"
    mep.EntityData.ParentYangName = "domain"
    mep.EntityData.SegmentPath = "mep"
    mep.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/" + mep.EntityData.SegmentPath
    mep.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mep.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mep.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mep.EntityData.Children = types.NewOrderedMap()
    mep.EntityData.Children.Append("sla-profile-target-mep-ids", types.YChild{"SlaProfileTargetMepIds", &mep.SlaProfileTargetMepIds})
    mep.EntityData.Children.Append("mep-properties", types.YChild{"MepProperties", &mep.MepProperties})
    mep.EntityData.Children.Append("loss-measurement-counters", types.YChild{"LossMeasurementCounters", &mep.LossMeasurementCounters})
    mep.EntityData.Leafs = types.NewOrderedMap()
    mep.EntityData.Leafs.Append("cos", types.YLeaf{"Cos", mep.Cos})

    mep.EntityData.YListKeys = []string {}

    return &(mep.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds
// SLA specific configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId.
    SlaProfileTargetMepId []*InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId

    // Configuration for a particular SLA operation. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress.
    SlaProfileTargetMacAddress []*InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
}

func (slaProfileTargetMepIds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMepIds.EntityData.YFilter = slaProfileTargetMepIds.YFilter
    slaProfileTargetMepIds.EntityData.YangName = "sla-profile-target-mep-ids"
    slaProfileTargetMepIds.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMepIds.EntityData.ParentYangName = "mep"
    slaProfileTargetMepIds.EntityData.SegmentPath = "sla-profile-target-mep-ids"
    slaProfileTargetMepIds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/mep/" + slaProfileTargetMepIds.EntityData.SegmentPath
    slaProfileTargetMepIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMepIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMepIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMepIds.EntityData.Children = types.NewOrderedMap()
    slaProfileTargetMepIds.EntityData.Children.Append("sla-profile-target-mep-id", types.YChild{"SlaProfileTargetMepId", nil})
    for i := range slaProfileTargetMepIds.SlaProfileTargetMepId {
        slaProfileTargetMepIds.EntityData.Children.Append(types.GetSegmentPath(slaProfileTargetMepIds.SlaProfileTargetMepId[i]), types.YChild{"SlaProfileTargetMepId", slaProfileTargetMepIds.SlaProfileTargetMepId[i]})
    }
    slaProfileTargetMepIds.EntityData.Children.Append("sla-profile-target-mac-address", types.YChild{"SlaProfileTargetMacAddress", nil})
    for i := range slaProfileTargetMepIds.SlaProfileTargetMacAddress {
        slaProfileTargetMepIds.EntityData.Children.Append(types.GetSegmentPath(slaProfileTargetMepIds.SlaProfileTargetMacAddress[i]), types.YChild{"SlaProfileTargetMacAddress", slaProfileTargetMepIds.SlaProfileTargetMacAddress[i]})
    }
    slaProfileTargetMepIds.EntityData.Leafs = types.NewOrderedMap()

    slaProfileTargetMepIds.EntityData.YListKeys = []string {}

    return &(slaProfileTargetMepIds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Profile interface{}

    // This attribute is a key. Target MEP-ID. The type is interface{} with range:
    // 1..8191.
    TargetMepId interface{}
}

func (slaProfileTargetMepId *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMepId) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMepId.EntityData.YFilter = slaProfileTargetMepId.YFilter
    slaProfileTargetMepId.EntityData.YangName = "sla-profile-target-mep-id"
    slaProfileTargetMepId.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMepId.EntityData.ParentYangName = "sla-profile-target-mep-ids"
    slaProfileTargetMepId.EntityData.SegmentPath = "sla-profile-target-mep-id" + types.AddKeyToken(slaProfileTargetMepId.Profile, "profile") + types.AddKeyToken(slaProfileTargetMepId.TargetMepId, "target-mep-id")
    slaProfileTargetMepId.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/mep/sla-profile-target-mep-ids/" + slaProfileTargetMepId.EntityData.SegmentPath
    slaProfileTargetMepId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMepId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMepId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMepId.EntityData.Children = types.NewOrderedMap()
    slaProfileTargetMepId.EntityData.Leafs = types.NewOrderedMap()
    slaProfileTargetMepId.EntityData.Leafs.Append("profile", types.YLeaf{"Profile", slaProfileTargetMepId.Profile})
    slaProfileTargetMepId.EntityData.Leafs.Append("target-mep-id", types.YLeaf{"TargetMepId", slaProfileTargetMepId.TargetMepId})

    slaProfileTargetMepId.EntityData.YListKeys = []string {"Profile", "TargetMepId"}

    return &(slaProfileTargetMepId.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress
// Configuration for a particular SLA
// operation
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. SLA profile name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Profile interface{}

    // This attribute is a key. Target MAC address. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    TargetMacAddress interface{}
}

func (slaProfileTargetMacAddress *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_SlaProfileTargetMepIds_SlaProfileTargetMacAddress) GetEntityData() *types.CommonEntityData {
    slaProfileTargetMacAddress.EntityData.YFilter = slaProfileTargetMacAddress.YFilter
    slaProfileTargetMacAddress.EntityData.YangName = "sla-profile-target-mac-address"
    slaProfileTargetMacAddress.EntityData.BundleName = "cisco_ios_xr"
    slaProfileTargetMacAddress.EntityData.ParentYangName = "sla-profile-target-mep-ids"
    slaProfileTargetMacAddress.EntityData.SegmentPath = "sla-profile-target-mac-address" + types.AddKeyToken(slaProfileTargetMacAddress.Profile, "profile") + types.AddKeyToken(slaProfileTargetMacAddress.TargetMacAddress, "target-mac-address")
    slaProfileTargetMacAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/mep/sla-profile-target-mep-ids/" + slaProfileTargetMacAddress.EntityData.SegmentPath
    slaProfileTargetMacAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slaProfileTargetMacAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slaProfileTargetMacAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slaProfileTargetMacAddress.EntityData.Children = types.NewOrderedMap()
    slaProfileTargetMacAddress.EntityData.Leafs = types.NewOrderedMap()
    slaProfileTargetMacAddress.EntityData.Leafs.Append("profile", types.YLeaf{"Profile", slaProfileTargetMacAddress.Profile})
    slaProfileTargetMacAddress.EntityData.Leafs.Append("target-mac-address", types.YLeaf{"TargetMacAddress", slaProfileTargetMacAddress.TargetMacAddress})

    slaProfileTargetMacAddress.EntityData.YListKeys = []string {"Profile", "TargetMacAddress"}

    return &(slaProfileTargetMacAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties
// Properties for this MEP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Service (Maintenance Association). The type is string with length: 1..127.
    // This attribute is mandatory.
    Service interface{}

    // MEP ID. The type is interface{} with range: 1..8191. This attribute is
    // mandatory.
    MepId interface{}
}

func (mepProperties *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_MepProperties) GetEntityData() *types.CommonEntityData {
    mepProperties.EntityData.YFilter = mepProperties.YFilter
    mepProperties.EntityData.YangName = "mep-properties"
    mepProperties.EntityData.BundleName = "cisco_ios_xr"
    mepProperties.EntityData.ParentYangName = "mep"
    mepProperties.EntityData.SegmentPath = "mep-properties"
    mepProperties.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/mep/" + mepProperties.EntityData.SegmentPath
    mepProperties.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mepProperties.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mepProperties.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mepProperties.EntityData.Children = types.NewOrderedMap()
    mepProperties.EntityData.Leafs = types.NewOrderedMap()
    mepProperties.EntityData.Leafs.Append("service", types.YLeaf{"Service", mepProperties.Service})
    mepProperties.EntityData.Leafs.Append("mep-id", types.YLeaf{"MepId", mepProperties.MepId})

    mepProperties.EntityData.YListKeys = []string {}

    return &(mepProperties.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters
// Loss-measurement specific configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Aggregate, List, or Range. The type is CfmLmCountersCfg. This attribute is
    // mandatory.
    CfgType interface{}

    // CoS bits for per-CoS counters - start of range or list item. The type is
    // interface{} with range: 0..7.
    Cos0 interface{}

    // CoS bits for per-CoS counters - end of range or list item. The type is
    // interface{} with range: 0..7.
    Cos1 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos2 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos3 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos4 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos5 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos6 interface{}

    // CoS bits for per-CoS counters - list item. The type is interface{} with
    // range: 0..7.
    Cos7 interface{}
}

func (lossMeasurementCounters *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_Domains_Domain_Mep_LossMeasurementCounters) GetEntityData() *types.CommonEntityData {
    lossMeasurementCounters.EntityData.YFilter = lossMeasurementCounters.YFilter
    lossMeasurementCounters.EntityData.YangName = "loss-measurement-counters"
    lossMeasurementCounters.EntityData.BundleName = "cisco_ios_xr"
    lossMeasurementCounters.EntityData.ParentYangName = "mep"
    lossMeasurementCounters.EntityData.SegmentPath = "loss-measurement-counters"
    lossMeasurementCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/domains/domain/mep/" + lossMeasurementCounters.EntityData.SegmentPath
    lossMeasurementCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lossMeasurementCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lossMeasurementCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lossMeasurementCounters.EntityData.Children = types.NewOrderedMap()
    lossMeasurementCounters.EntityData.Leafs = types.NewOrderedMap()
    lossMeasurementCounters.EntityData.Leafs.Append("cfg-type", types.YLeaf{"CfgType", lossMeasurementCounters.CfgType})
    lossMeasurementCounters.EntityData.Leafs.Append("cos0", types.YLeaf{"Cos0", lossMeasurementCounters.Cos0})
    lossMeasurementCounters.EntityData.Leafs.Append("cos1", types.YLeaf{"Cos1", lossMeasurementCounters.Cos1})
    lossMeasurementCounters.EntityData.Leafs.Append("cos2", types.YLeaf{"Cos2", lossMeasurementCounters.Cos2})
    lossMeasurementCounters.EntityData.Leafs.Append("cos3", types.YLeaf{"Cos3", lossMeasurementCounters.Cos3})
    lossMeasurementCounters.EntityData.Leafs.Append("cos4", types.YLeaf{"Cos4", lossMeasurementCounters.Cos4})
    lossMeasurementCounters.EntityData.Leafs.Append("cos5", types.YLeaf{"Cos5", lossMeasurementCounters.Cos5})
    lossMeasurementCounters.EntityData.Leafs.Append("cos6", types.YLeaf{"Cos6", lossMeasurementCounters.Cos6})
    lossMeasurementCounters.EntityData.Leafs.Append("cos7", types.YLeaf{"Cos7", lossMeasurementCounters.Cos7})

    lossMeasurementCounters.EntityData.YListKeys = []string {}

    return &(lossMeasurementCounters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp
// Interface specific AIS configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIS transmission configuration.
    Transmission InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
}

func (aisUp *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp) GetEntityData() *types.CommonEntityData {
    aisUp.EntityData.YFilter = aisUp.YFilter
    aisUp.EntityData.YangName = "ais-up"
    aisUp.EntityData.BundleName = "cisco_ios_xr"
    aisUp.EntityData.ParentYangName = "cfm"
    aisUp.EntityData.SegmentPath = "ais-up"
    aisUp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/" + aisUp.EntityData.SegmentPath
    aisUp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aisUp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aisUp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aisUp.EntityData.Children = types.NewOrderedMap()
    aisUp.EntityData.Children.Append("transmission", types.YChild{"Transmission", &aisUp.Transmission})
    aisUp.EntityData.Leafs = types.NewOrderedMap()

    aisUp.EntityData.YListKeys = []string {}

    return &(aisUp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission
// AIS transmission configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // AIS Interval. The type is CfmAisInterval.
    AisInterval interface{}

    // Class of Service bits. The type is interface{} with range: 0..7.
    Cos interface{}
}

func (transmission *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_Cfm_AisUp_Transmission) GetEntityData() *types.CommonEntityData {
    transmission.EntityData.YFilter = transmission.YFilter
    transmission.EntityData.YangName = "transmission"
    transmission.EntityData.BundleName = "cisco_ios_xr"
    transmission.EntityData.ParentYangName = "ais-up"
    transmission.EntityData.SegmentPath = "transmission"
    transmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-cfm-cfg:cfm/ais-up/" + transmission.EntityData.SegmentPath
    transmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmission.EntityData.Children = types.NewOrderedMap()
    transmission.EntityData.Leafs = types.NewOrderedMap()
    transmission.EntityData.Leafs.Append("ais-interval", types.YLeaf{"AisInterval", transmission.AisInterval})
    transmission.EntityData.Leafs.Append("cos", types.YLeaf{"Cos", transmission.Cos})

    transmission.EntityData.YListKeys = []string {}

    return &(transmission.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam
// Ethernet Link OAM Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connection timeout period in number of lost heartbeats. The type is
    // interface{} with range: 2..30.
    Timeout interface{}

    // Possible Ethernet Link OAM modes. The type is EtherLinkOamModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval. The type is bool.
    MibRetrieval interface{}

    // Set the profile to use on the interface. The type is string.
    ProfileName interface{}

    // Enable or disable remote loopback. The type is bool.
    RemoteLoopback interface{}

    // Possible Ethernet Link OAM hello intervals. The type is
    // EtherLinkOamHelloIntervalEnum.
    HelloInterval interface{}

    // Enable or disable uni-directional link-fault detection. The type is bool.
    Udlf interface{}

    // Configure action parameters.
    Action InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action

    // Configure remote requirement parameters.
    RequireRemote InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote

    // Configure link monitor parameters.
    LinkMonitoring InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
}

func (etherLinkOam *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam) GetEntityData() *types.CommonEntityData {
    etherLinkOam.EntityData.YFilter = etherLinkOam.YFilter
    etherLinkOam.EntityData.YangName = "ether-link-oam"
    etherLinkOam.EntityData.BundleName = "cisco_ios_xr"
    etherLinkOam.EntityData.ParentYangName = "ethernet-features"
    etherLinkOam.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"
    etherLinkOam.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/" + etherLinkOam.EntityData.SegmentPath
    etherLinkOam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    etherLinkOam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    etherLinkOam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    etherLinkOam.EntityData.Children = types.NewOrderedMap()
    etherLinkOam.EntityData.Children.Append("action", types.YChild{"Action", &etherLinkOam.Action})
    etherLinkOam.EntityData.Children.Append("require-remote", types.YChild{"RequireRemote", &etherLinkOam.RequireRemote})
    etherLinkOam.EntityData.Children.Append("link-monitoring", types.YChild{"LinkMonitoring", &etherLinkOam.LinkMonitoring})
    etherLinkOam.EntityData.Leafs = types.NewOrderedMap()
    etherLinkOam.EntityData.Leafs.Append("timeout", types.YLeaf{"Timeout", etherLinkOam.Timeout})
    etherLinkOam.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", etherLinkOam.Mode})
    etherLinkOam.EntityData.Leafs.Append("mib-retrieval", types.YLeaf{"MibRetrieval", etherLinkOam.MibRetrieval})
    etherLinkOam.EntityData.Leafs.Append("profile-name", types.YLeaf{"ProfileName", etherLinkOam.ProfileName})
    etherLinkOam.EntityData.Leafs.Append("remote-loopback", types.YLeaf{"RemoteLoopback", etherLinkOam.RemoteLoopback})
    etherLinkOam.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", etherLinkOam.HelloInterval})
    etherLinkOam.EntityData.Leafs.Append("udlf", types.YLeaf{"Udlf", etherLinkOam.Udlf})

    etherLinkOam.EntityData.YListKeys = []string {}

    return &(etherLinkOam.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action
// Configure action parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Action to perform when a dying gasp occurs. The type is
    // EtherLinkOamEventActionEnum.
    DyingGasp interface{}

    // Action to perform when a link fault occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    LinkFault interface{}

    // Action to perform when a capabilities conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    CapabilitiesConflict interface{}

    // Action to perform when a session comes up. The type is
    // EtherLinkOamEventActionPrimEnum.
    SessionUp interface{}

    // Action to perform when a critical event occurs. The type is
    // EtherLinkOamEventActionEnum.
    CriticalEvent interface{}

    // Action to perform when remote loopback is entered or exited. The type is
    // EtherLinkOamEventActionPrimEnum.
    RemoteLoopback interface{}

    // Action to perform when a wiring conflict occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    WiringConflict interface{}

    // Action to perform when a high-threshold event occurs. The type is
    // EtherLinkOamEventActionEnum.
    HighThreshold interface{}

    // Action to perform when discovery timeout occurs. The type is
    // EtherLinkOamEventActionEnumEfd.
    DiscoveryTimeout interface{}

    // Action to perform when a session comes down. The type is
    // EtherLinkOamEventActionEnumEfd.
    SessionDown interface{}
}

func (action *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_Action) GetEntityData() *types.CommonEntityData {
    action.EntityData.YFilter = action.YFilter
    action.EntityData.YangName = "action"
    action.EntityData.BundleName = "cisco_ios_xr"
    action.EntityData.ParentYangName = "ether-link-oam"
    action.EntityData.SegmentPath = "action"
    action.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/" + action.EntityData.SegmentPath
    action.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    action.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    action.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    action.EntityData.Children = types.NewOrderedMap()
    action.EntityData.Leafs = types.NewOrderedMap()
    action.EntityData.Leafs.Append("dying-gasp", types.YLeaf{"DyingGasp", action.DyingGasp})
    action.EntityData.Leafs.Append("link-fault", types.YLeaf{"LinkFault", action.LinkFault})
    action.EntityData.Leafs.Append("capabilities-conflict", types.YLeaf{"CapabilitiesConflict", action.CapabilitiesConflict})
    action.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", action.SessionUp})
    action.EntityData.Leafs.Append("critical-event", types.YLeaf{"CriticalEvent", action.CriticalEvent})
    action.EntityData.Leafs.Append("remote-loopback", types.YLeaf{"RemoteLoopback", action.RemoteLoopback})
    action.EntityData.Leafs.Append("wiring-conflict", types.YLeaf{"WiringConflict", action.WiringConflict})
    action.EntityData.Leafs.Append("high-threshold", types.YLeaf{"HighThreshold", action.HighThreshold})
    action.EntityData.Leafs.Append("discovery-timeout", types.YLeaf{"DiscoveryTimeout", action.DiscoveryTimeout})
    action.EntityData.Leafs.Append("session-down", types.YLeaf{"SessionDown", action.SessionDown})

    action.EntityData.YListKeys = []string {}

    return &(action.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote
// Configure remote requirement parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Possible required peer modes. The type is EtherLinkOamRequireModeEnum.
    Mode interface{}

    // Enable or disable MIB retrieval peer requirement. The type is bool.
    MibRetrieval interface{}

    // Enable or disable remote loopback peer requirement. The type is bool.
    RemoteLoopback interface{}

    // Enable or disable link monitoring peer requirement. The type is bool.
    LinkMonitoring interface{}
}

func (requireRemote *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_RequireRemote) GetEntityData() *types.CommonEntityData {
    requireRemote.EntityData.YFilter = requireRemote.YFilter
    requireRemote.EntityData.YangName = "require-remote"
    requireRemote.EntityData.BundleName = "cisco_ios_xr"
    requireRemote.EntityData.ParentYangName = "ether-link-oam"
    requireRemote.EntityData.SegmentPath = "require-remote"
    requireRemote.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/" + requireRemote.EntityData.SegmentPath
    requireRemote.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requireRemote.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requireRemote.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requireRemote.EntityData.Children = types.NewOrderedMap()
    requireRemote.EntityData.Leafs = types.NewOrderedMap()
    requireRemote.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", requireRemote.Mode})
    requireRemote.EntityData.Leafs.Append("mib-retrieval", types.YLeaf{"MibRetrieval", requireRemote.MibRetrieval})
    requireRemote.EntityData.Leafs.Append("remote-loopback", types.YLeaf{"RemoteLoopback", requireRemote.RemoteLoopback})
    requireRemote.EntityData.Leafs.Append("link-monitoring", types.YLeaf{"LinkMonitoring", requireRemote.LinkMonitoring})

    requireRemote.EntityData.YListKeys = []string {}

    return &(requireRemote.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring
// Configure link monitor parameters
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable monitoring. The type is bool.
    Monitoring interface{}

    // Symbol-period event configuration.
    SymbolPeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod

    // Frame-period event configuration.
    FramePeriod InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod

    // Frame-seconds event configuration.
    FrameSeconds InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds

    // Frame event configuration.
    Frame InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
}

func (linkMonitoring *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring) GetEntityData() *types.CommonEntityData {
    linkMonitoring.EntityData.YFilter = linkMonitoring.YFilter
    linkMonitoring.EntityData.YangName = "link-monitoring"
    linkMonitoring.EntityData.BundleName = "cisco_ios_xr"
    linkMonitoring.EntityData.ParentYangName = "ether-link-oam"
    linkMonitoring.EntityData.SegmentPath = "link-monitoring"
    linkMonitoring.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/" + linkMonitoring.EntityData.SegmentPath
    linkMonitoring.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkMonitoring.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkMonitoring.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkMonitoring.EntityData.Children = types.NewOrderedMap()
    linkMonitoring.EntityData.Children.Append("symbol-period", types.YChild{"SymbolPeriod", &linkMonitoring.SymbolPeriod})
    linkMonitoring.EntityData.Children.Append("frame-period", types.YChild{"FramePeriod", &linkMonitoring.FramePeriod})
    linkMonitoring.EntityData.Children.Append("frame-seconds", types.YChild{"FrameSeconds", &linkMonitoring.FrameSeconds})
    linkMonitoring.EntityData.Children.Append("frame", types.YChild{"Frame", &linkMonitoring.Frame})
    linkMonitoring.EntityData.Leafs = types.NewOrderedMap()
    linkMonitoring.EntityData.Leafs.Append("monitoring", types.YLeaf{"Monitoring", linkMonitoring.Monitoring})

    linkMonitoring.EntityData.YListKeys = []string {}

    return &(linkMonitoring.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod
// Symbol-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for symbol-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window

    // Threshold configuration for symbol-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
}

func (symbolPeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod) GetEntityData() *types.CommonEntityData {
    symbolPeriod.EntityData.YFilter = symbolPeriod.YFilter
    symbolPeriod.EntityData.YangName = "symbol-period"
    symbolPeriod.EntityData.BundleName = "cisco_ios_xr"
    symbolPeriod.EntityData.ParentYangName = "link-monitoring"
    symbolPeriod.EntityData.SegmentPath = "symbol-period"
    symbolPeriod.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/" + symbolPeriod.EntityData.SegmentPath
    symbolPeriod.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    symbolPeriod.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    symbolPeriod.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    symbolPeriod.EntityData.Children = types.NewOrderedMap()
    symbolPeriod.EntityData.Children.Append("window", types.YChild{"Window", &symbolPeriod.Window})
    symbolPeriod.EntityData.Children.Append("threshold", types.YChild{"Threshold", &symbolPeriod.Threshold})
    symbolPeriod.EntityData.Leafs = types.NewOrderedMap()

    symbolPeriod.EntityData.YListKeys = []string {}

    return &(symbolPeriod.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window
// Window size configuration for symbol-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Size of the symbol-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // Units to use for this window. The type is
    // EtherLinkOamWindowUnitsSymbolsEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Symbols and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Window) GetEntityData() *types.CommonEntityData {
    window.EntityData.YFilter = window.YFilter
    window.EntityData.YangName = "window"
    window.EntityData.BundleName = "cisco_ios_xr"
    window.EntityData.ParentYangName = "symbol-period"
    window.EntityData.SegmentPath = "window"
    window.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/symbol-period/" + window.EntityData.SegmentPath
    window.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    window.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    window.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    window.EntityData.Children = types.NewOrderedMap()
    window.EntityData.Leafs = types.NewOrderedMap()
    window.EntityData.Leafs.Append("window", types.YLeaf{"Window", window.Window})
    window.EntityData.Leafs.Append("units", types.YLeaf{"Units", window.Units})
    window.EntityData.Leafs.Append("multiplier", types.YLeaf{"Multiplier", window.Multiplier})

    window.EntityData.YListKeys = []string {}

    return &(window.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold
// Threshold configuration for symbol-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for symbol-period. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsSymbolsEnum. The default value is symbols.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Symbols and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_SymbolPeriod_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "symbol-period"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/symbol-period/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("threshold-low", types.YLeaf{"ThresholdLow", threshold.ThresholdLow})
    threshold.EntityData.Leafs.Append("threshold-high", types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh})
    threshold.EntityData.Leafs.Append("units", types.YLeaf{"Units", threshold.Units})
    threshold.EntityData.Leafs.Append("multiplier-low", types.YLeaf{"MultiplierLow", threshold.MultiplierLow})
    threshold.EntityData.Leafs.Append("multiplier-high", types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh})

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod
// Frame-period event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame-period events.
    Window InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window

    // Threshold configuration for frame-period events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
}

func (framePeriod *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod) GetEntityData() *types.CommonEntityData {
    framePeriod.EntityData.YFilter = framePeriod.YFilter
    framePeriod.EntityData.YangName = "frame-period"
    framePeriod.EntityData.BundleName = "cisco_ios_xr"
    framePeriod.EntityData.ParentYangName = "link-monitoring"
    framePeriod.EntityData.SegmentPath = "frame-period"
    framePeriod.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/" + framePeriod.EntityData.SegmentPath
    framePeriod.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    framePeriod.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    framePeriod.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    framePeriod.EntityData.Children = types.NewOrderedMap()
    framePeriod.EntityData.Children.Append("window", types.YChild{"Window", &framePeriod.Window})
    framePeriod.EntityData.Children.Append("threshold", types.YChild{"Threshold", &framePeriod.Threshold})
    framePeriod.EntityData.Leafs = types.NewOrderedMap()

    framePeriod.EntityData.YListKeys = []string {}

    return &(framePeriod.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window
// Window size configuration for frame-period
// events
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Size of the frame-period window. The type is interface{} with range:
    // 1..4294967295. This attribute is mandatory.
    Window interface{}

    // The units to use for this window. The type is
    // EtherLinkOamWindowUnitsFramesEnum. This attribute is mandatory.
    Units interface{}

    // The multiplier to use for this window (only valid if 'Units' is Frames and
    // treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    Multiplier interface{}
}

func (window *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Window) GetEntityData() *types.CommonEntityData {
    window.EntityData.YFilter = window.YFilter
    window.EntityData.YangName = "window"
    window.EntityData.BundleName = "cisco_ios_xr"
    window.EntityData.ParentYangName = "frame-period"
    window.EntityData.SegmentPath = "window"
    window.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/frame-period/" + window.EntityData.SegmentPath
    window.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    window.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    window.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    window.EntityData.Children = types.NewOrderedMap()
    window.EntityData.Leafs = types.NewOrderedMap()
    window.EntityData.Leafs.Append("window", types.YLeaf{"Window", window.Window})
    window.EntityData.Leafs.Append("units", types.YLeaf{"Units", window.Units})
    window.EntityData.Leafs.Append("multiplier", types.YLeaf{"Multiplier", window.Multiplier})

    window.EntityData.YListKeys = []string {}

    return &(window.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold
// Threshold configuration for frame-period
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-period events. The type is interface{} with
    // range: 1..4294967295.
    ThresholdHigh interface{}

    // The units to use for these thresholds. The type is
    // EtherLinkOamThresholdUnitsFramesEnum. The default value is ppm.
    Units interface{}

    // The multiplier to use for the low threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum. The default value is none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (only valid if 'Units' is
    // Frames and treated as 1 if unspecified). The type is
    // EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FramePeriod_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame-period"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/frame-period/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("threshold-low", types.YLeaf{"ThresholdLow", threshold.ThresholdLow})
    threshold.EntityData.Leafs.Append("threshold-high", types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh})
    threshold.EntityData.Leafs.Append("units", types.YLeaf{"Units", threshold.Units})
    threshold.EntityData.Leafs.Append("multiplier-low", types.YLeaf{"MultiplierLow", threshold.MultiplierLow})
    threshold.EntityData.Leafs.Append("multiplier-high", types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh})

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds
// Frame-seconds event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame-seconds events. The type is interface{}
    // with range: 10000..900000. Units are millisecond. The default value is
    // 60000.
    Window interface{}

    // Threshold configuration for frame-seconds events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
}

func (frameSeconds *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds) GetEntityData() *types.CommonEntityData {
    frameSeconds.EntityData.YFilter = frameSeconds.YFilter
    frameSeconds.EntityData.YangName = "frame-seconds"
    frameSeconds.EntityData.BundleName = "cisco_ios_xr"
    frameSeconds.EntityData.ParentYangName = "link-monitoring"
    frameSeconds.EntityData.SegmentPath = "frame-seconds"
    frameSeconds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/" + frameSeconds.EntityData.SegmentPath
    frameSeconds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frameSeconds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frameSeconds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frameSeconds.EntityData.Children = types.NewOrderedMap()
    frameSeconds.EntityData.Children.Append("threshold", types.YChild{"Threshold", &frameSeconds.Threshold})
    frameSeconds.EntityData.Leafs = types.NewOrderedMap()
    frameSeconds.EntityData.Leafs.Append("window", types.YLeaf{"Window", frameSeconds.Window})

    frameSeconds.EntityData.YListKeys = []string {}

    return &(frameSeconds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold
// Threshold configuration for frame-seconds
// events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame-seconds events. The type is interface{} with
    // range: 1..900. Units are second.
    ThresholdHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_FrameSeconds_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame-seconds"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/frame-seconds/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("threshold-low", types.YLeaf{"ThresholdLow", threshold.ThresholdLow})
    threshold.EntityData.Leafs.Append("threshold-high", types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh})

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame
// Frame event configuration
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Window size configuration for frame events. The type is interface{} with
    // range: 1000..60000. Units are millisecond. The default value is 1000.
    Window interface{}

    // Threshold configuration for frame events.
    Threshold InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
}

func (frame *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame) GetEntityData() *types.CommonEntityData {
    frame.EntityData.YFilter = frame.YFilter
    frame.EntityData.YangName = "frame"
    frame.EntityData.BundleName = "cisco_ios_xr"
    frame.EntityData.ParentYangName = "link-monitoring"
    frame.EntityData.SegmentPath = "frame"
    frame.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/" + frame.EntityData.SegmentPath
    frame.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frame.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frame.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frame.EntityData.Children = types.NewOrderedMap()
    frame.EntityData.Children.Append("threshold", types.YChild{"Threshold", &frame.Threshold})
    frame.EntityData.Leafs = types.NewOrderedMap()
    frame.EntityData.Leafs.Append("window", types.YLeaf{"Window", frame.Window})

    frame.EntityData.YListKeys = []string {}

    return &(frame.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold
// Threshold configuration for frame events
type InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The low threshold for frame events. The type is interface{} with range:
    // 1..4294967295. The default value is 1.
    ThresholdLow interface{}

    // The high threshold for frame events. The type is interface{} with range:
    // 1..4294967295.
    ThresholdHigh interface{}

    // The multiplier to use for the low threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum. The default value is
    // none.
    MultiplierLow interface{}

    // The multiplier to use for the high threshold (treated as 1 if unspecified).
    // The type is EtherLinkOamThresholdWindowMultiplierEnum.
    MultiplierHigh interface{}
}

func (threshold *InterfaceConfigurations_InterfaceConfiguration_EthernetFeatures_EtherLinkOam_LinkMonitoring_Frame_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "frame"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam/link-monitoring/frame/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("threshold-low", types.YLeaf{"ThresholdLow", threshold.ThresholdLow})
    threshold.EntityData.Leafs.Append("threshold-high", types.YLeaf{"ThresholdHigh", threshold.ThresholdHigh})
    threshold.EntityData.Leafs.Append("multiplier-low", types.YLeaf{"MultiplierLow", threshold.MultiplierLow})
    threshold.EntityData.Leafs.Append("multiplier-high", types.YLeaf{"MultiplierHigh", threshold.MultiplierHigh})

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CarrierDelay
// Set the carrier transition delay on an interface
// in msecs
type InterfaceConfigurations_InterfaceConfiguration_CarrierDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Carrier Delay (up) in msecs. The type is interface{} with range: 1..65535.
    CarrierDelayUp interface{}

    // Carrier Delay down in msecs, must be set to 0. The type is interface{} with
    // range: 0..0.
    CarrierDelayDown interface{}
}

func (carrierDelay *InterfaceConfigurations_InterfaceConfiguration_CarrierDelay) GetEntityData() *types.CommonEntityData {
    carrierDelay.EntityData.YFilter = carrierDelay.YFilter
    carrierDelay.EntityData.YangName = "carrier-delay"
    carrierDelay.EntityData.BundleName = "cisco_ios_xr"
    carrierDelay.EntityData.ParentYangName = "interface-configuration"
    carrierDelay.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"
    carrierDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + carrierDelay.EntityData.SegmentPath
    carrierDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    carrierDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    carrierDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    carrierDelay.EntityData.Children = types.NewOrderedMap()
    carrierDelay.EntityData.Leafs = types.NewOrderedMap()
    carrierDelay.EntityData.Leafs.Append("carrier-delay-up", types.YLeaf{"CarrierDelayUp", carrierDelay.CarrierDelayUp})
    carrierDelay.EntityData.Leafs.Append("carrier-delay-down", types.YLeaf{"CarrierDelayDown", carrierDelay.CarrierDelayDown})

    carrierDelay.EntityData.YListKeys = []string {}

    return &(carrierDelay.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration
// IEEE 802.1Q VLAN trunk interface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The outer ethertype used in Q-in-Q frames. The default value is 0x8100. The
    // type is TunnelingEthertype.
    TunnelingEthertype interface{}

    // The Native VLAN identifier associated with this trunk interface.
    NativeVlanIdentifier InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier

    // VLAN Switch interface configuration.
    VlanSwitched InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_VlanSwitched
}

func (vlanTrunkConfiguration *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration) GetEntityData() *types.CommonEntityData {
    vlanTrunkConfiguration.EntityData.YFilter = vlanTrunkConfiguration.YFilter
    vlanTrunkConfiguration.EntityData.YangName = "vlan-trunk-configuration"
    vlanTrunkConfiguration.EntityData.BundleName = "cisco_ios_xr"
    vlanTrunkConfiguration.EntityData.ParentYangName = "interface-configuration"
    vlanTrunkConfiguration.EntityData.SegmentPath = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"
    vlanTrunkConfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + vlanTrunkConfiguration.EntityData.SegmentPath
    vlanTrunkConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanTrunkConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanTrunkConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanTrunkConfiguration.EntityData.Children = types.NewOrderedMap()
    vlanTrunkConfiguration.EntityData.Children.Append("native-vlan-identifier", types.YChild{"NativeVlanIdentifier", &vlanTrunkConfiguration.NativeVlanIdentifier})
    vlanTrunkConfiguration.EntityData.Children.Append("vlan-switched", types.YChild{"VlanSwitched", &vlanTrunkConfiguration.VlanSwitched})
    vlanTrunkConfiguration.EntityData.Leafs = types.NewOrderedMap()
    vlanTrunkConfiguration.EntityData.Leafs.Append("tunneling-ethertype", types.YLeaf{"TunnelingEthertype", vlanTrunkConfiguration.TunnelingEthertype})

    vlanTrunkConfiguration.EntityData.YListKeys = []string {}

    return &(vlanTrunkConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier
// The Native VLAN identifier associated with this
// trunk interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Whether this interface is dot1ad or dot1Q. The type is Vlan. This attribute
    // is mandatory.
    VlanType interface{}

    // VLAN identifier. The type is interface{} with range: 1..4094. This
    // attribute is mandatory.
    VlanIdentifier interface{}
}

func (nativeVlanIdentifier *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_NativeVlanIdentifier) GetEntityData() *types.CommonEntityData {
    nativeVlanIdentifier.EntityData.YFilter = nativeVlanIdentifier.YFilter
    nativeVlanIdentifier.EntityData.YangName = "native-vlan-identifier"
    nativeVlanIdentifier.EntityData.BundleName = "cisco_ios_xr"
    nativeVlanIdentifier.EntityData.ParentYangName = "vlan-trunk-configuration"
    nativeVlanIdentifier.EntityData.SegmentPath = "native-vlan-identifier"
    nativeVlanIdentifier.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration/" + nativeVlanIdentifier.EntityData.SegmentPath
    nativeVlanIdentifier.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeVlanIdentifier.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeVlanIdentifier.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeVlanIdentifier.EntityData.Children = types.NewOrderedMap()
    nativeVlanIdentifier.EntityData.Leafs = types.NewOrderedMap()
    nativeVlanIdentifier.EntityData.Leafs.Append("vlan-type", types.YLeaf{"VlanType", nativeVlanIdentifier.VlanType})
    nativeVlanIdentifier.EntityData.Leafs.Append("vlan-identifier", types.YLeaf{"VlanIdentifier", nativeVlanIdentifier.VlanIdentifier})

    nativeVlanIdentifier.EntityData.YListKeys = []string {}

    return &(nativeVlanIdentifier.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_VlanSwitched
// VLAN Switch interface configuration
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_VlanSwitched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VLAN Switch mode. The type is VsMode.
    Mode interface{}

    // Access VLAN Id. The type is interface{} with range: 1..4094.
    AccessVlan interface{}

    // Whether to match dot1ad or dot1Q packets. The type is Vlan.
    TrunkTagType interface{}

    // Comma-separated, increasing sequence of VLAN Ids or VLAN ranges. The type
    // is string.
    TrunkVlaNs interface{}
}

func (vlanSwitched *InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_VlanSwitched) GetEntityData() *types.CommonEntityData {
    vlanSwitched.EntityData.YFilter = vlanSwitched.YFilter
    vlanSwitched.EntityData.YangName = "vlan-switched"
    vlanSwitched.EntityData.BundleName = "cisco_ios_xr"
    vlanSwitched.EntityData.ParentYangName = "vlan-trunk-configuration"
    vlanSwitched.EntityData.SegmentPath = "vlan-switched"
    vlanSwitched.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration/" + vlanSwitched.EntityData.SegmentPath
    vlanSwitched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanSwitched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanSwitched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanSwitched.EntityData.Children = types.NewOrderedMap()
    vlanSwitched.EntityData.Leafs = types.NewOrderedMap()
    vlanSwitched.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", vlanSwitched.Mode})
    vlanSwitched.EntityData.Leafs.Append("access-vlan", types.YLeaf{"AccessVlan", vlanSwitched.AccessVlan})
    vlanSwitched.EntityData.Leafs.Append("trunk-tag-type", types.YLeaf{"TrunkTagType", vlanSwitched.TrunkTagType})
    vlanSwitched.EntityData.Leafs.Append("trunk-vla-ns", types.YLeaf{"TrunkVlaNs", vlanSwitched.TrunkVlaNs})

    vlanSwitched.EntityData.YListKeys = []string {}

    return &(vlanSwitched.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype represents default value is 0x8100
type InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype string

const (
    // 0x9100
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9100 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9100"

    // 0x9200
    InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype_Y_0x9200 InterfaceConfigurations_InterfaceConfiguration_VlanTrunkConfiguration_TunnelingEthertype = "0x9200"
)

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess
// nV Satellite Access Link Configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
}

func (nvSatelliteAccess *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess) GetEntityData() *types.CommonEntityData {
    nvSatelliteAccess.EntityData.YFilter = nvSatelliteAccess.YFilter
    nvSatelliteAccess.EntityData.YangName = "nv-satellite-access"
    nvSatelliteAccess.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteAccess.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteAccess.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"
    nvSatelliteAccess.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + nvSatelliteAccess.EntityData.SegmentPath
    nvSatelliteAccess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteAccess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteAccess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteAccess.EntityData.Children = types.NewOrderedMap()
    nvSatelliteAccess.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-sat-cfg:qos", types.YChild{"Qos", &nvSatelliteAccess.Qos})
    nvSatelliteAccess.EntityData.Leafs = types.NewOrderedMap()

    nvSatelliteAccess.EntityData.YListKeys = []string {}

    return &(nvSatelliteAccess.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "nv-satellite-access"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access/Cisco-IOS-XR-qos-ma-sat-cfg:qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteAccess_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access/Cisco-IOS-XR-qos-ma-sat-cfg:qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink
// nV Satellite Fabric Link Configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Hub & Spoke connection to a single Satellite. The type is interface{} with
    // range: 100..65534. This attribute is mandatory.
    Satellite interface{}

    // Mininum number of active links required. The type is interface{} with
    // range: 1..64.
    MinimumRequiredLinks interface{}

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts

    // Ethernet Satellite configuration.
    EthernetFeatures InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures

    // Frequency Synchronization satellite configuration.
    FrequencySynchronization InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
}

func (nvSatelliteFabricLink *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink) GetEntityData() *types.CommonEntityData {
    nvSatelliteFabricLink.EntityData.YFilter = nvSatelliteFabricLink.YFilter
    nvSatelliteFabricLink.EntityData.YangName = "nv-satellite-fabric-link"
    nvSatelliteFabricLink.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteFabricLink.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteFabricLink.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"
    nvSatelliteFabricLink.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + nvSatelliteFabricLink.EntityData.SegmentPath
    nvSatelliteFabricLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteFabricLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteFabricLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteFabricLink.EntityData.Children = types.NewOrderedMap()
    nvSatelliteFabricLink.EntityData.Children.Append("redundancy", types.YChild{"Redundancy", &nvSatelliteFabricLink.Redundancy})
    nvSatelliteFabricLink.EntityData.Children.Append("remote-ports", types.YChild{"RemotePorts", &nvSatelliteFabricLink.RemotePorts})
    nvSatelliteFabricLink.EntityData.Children.Append("Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features", types.YChild{"EthernetFeatures", &nvSatelliteFabricLink.EthernetFeatures})
    nvSatelliteFabricLink.EntityData.Children.Append("Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization", types.YChild{"FrequencySynchronization", &nvSatelliteFabricLink.FrequencySynchronization})
    nvSatelliteFabricLink.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-sat-cfg:qos", types.YChild{"Qos", &nvSatelliteFabricLink.Qos})
    nvSatelliteFabricLink.EntityData.Leafs = types.NewOrderedMap()
    nvSatelliteFabricLink.EntityData.Leafs.Append("satellite", types.YLeaf{"Satellite", nvSatelliteFabricLink.Satellite})
    nvSatelliteFabricLink.EntityData.Leafs.Append("minimum-required-links", types.YLeaf{"MinimumRequiredLinks", nvSatelliteFabricLink.MinimumRequiredLinks})

    nvSatelliteFabricLink.EntityData.YListKeys = []string {}

    return &(nvSatelliteFabricLink.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nv-satellite-fabric-link"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/" + redundancy.EntityData.SegmentPath
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = types.NewOrderedMap()
    redundancy.EntityData.Leafs = types.NewOrderedMap()
    redundancy.EntityData.Leafs.Append("iccp-group", types.YLeaf{"IccpGroup", redundancy.IccpGroup})
    redundancy.EntityData.Leafs.Append("minimum-preferred-links", types.YLeaf{"MinimumPreferredLinks", redundancy.MinimumPreferredLinks})

    redundancy.EntityData.YListKeys = []string {}

    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort.
    RemotePort []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts) GetEntityData() *types.CommonEntityData {
    remotePorts.EntityData.YFilter = remotePorts.YFilter
    remotePorts.EntityData.YangName = "remote-ports"
    remotePorts.EntityData.BundleName = "cisco_ios_xr"
    remotePorts.EntityData.ParentYangName = "nv-satellite-fabric-link"
    remotePorts.EntityData.SegmentPath = "remote-ports"
    remotePorts.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/" + remotePorts.EntityData.SegmentPath
    remotePorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePorts.EntityData.Children = types.NewOrderedMap()
    remotePorts.EntityData.Children.Append("remote-port", types.YChild{"RemotePort", nil})
    for i := range remotePorts.RemotePort {
        remotePorts.EntityData.Children.Append(types.GetSegmentPath(remotePorts.RemotePort[i]), types.YChild{"RemotePort", remotePorts.RemotePort[i]})
    }
    remotePorts.EntityData.Leafs = types.NewOrderedMap()

    remotePorts.EntityData.YListKeys = []string {}

    return &(remotePorts.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Port type. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_RemotePorts_RemotePort) GetEntityData() *types.CommonEntityData {
    remotePort.EntityData.YFilter = remotePort.YFilter
    remotePort.EntityData.YangName = "remote-port"
    remotePort.EntityData.BundleName = "cisco_ios_xr"
    remotePort.EntityData.ParentYangName = "remote-ports"
    remotePort.EntityData.SegmentPath = "remote-port" + types.AddKeyToken(remotePort.PortType, "port-type") + types.AddKeyToken(remotePort.Slot, "slot") + types.AddKeyToken(remotePort.SubSlot, "sub-slot")
    remotePort.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/remote-ports/" + remotePort.EntityData.SegmentPath
    remotePort.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePort.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePort.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePort.EntityData.Children = types.NewOrderedMap()
    remotePort.EntityData.Leafs = types.NewOrderedMap()
    remotePort.EntityData.Leafs.Append("port-type", types.YLeaf{"PortType", remotePort.PortType})
    remotePort.EntityData.Leafs.Append("slot", types.YLeaf{"Slot", remotePort.Slot})
    remotePort.EntityData.Leafs.Append("sub-slot", types.YLeaf{"SubSlot", remotePort.SubSlot})
    remotePort.EntityData.Leafs.Append("port-range", types.YLeaf{"PortRange", remotePort.PortRange})

    remotePort.EntityData.YListKeys = []string {"PortType", "Slot", "SubSlot"}

    return &(remotePort.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures
// Ethernet Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CFM Satellite configuration.
    Cfm InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
}

func (ethernetFeatures *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures) GetEntityData() *types.CommonEntityData {
    ethernetFeatures.EntityData.YFilter = ethernetFeatures.YFilter
    ethernetFeatures.EntityData.YangName = "ethernet-features"
    ethernetFeatures.EntityData.BundleName = "cisco_ios_xr"
    ethernetFeatures.EntityData.ParentYangName = "nv-satellite-fabric-link"
    ethernetFeatures.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"
    ethernetFeatures.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/" + ethernetFeatures.EntityData.SegmentPath
    ethernetFeatures.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetFeatures.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetFeatures.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetFeatures.EntityData.Children = types.NewOrderedMap()
    ethernetFeatures.EntityData.Children.Append("cfm", types.YChild{"Cfm", &ethernetFeatures.Cfm})
    ethernetFeatures.EntityData.Leafs = types.NewOrderedMap()

    ethernetFeatures.EntityData.YListKeys = []string {}

    return &(ethernetFeatures.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm
// CFM Satellite configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Continuity-Check Interval. The type is CfmCcmInterval.
    ContinuityCheckInterval interface{}

    // Maintenance Domain Level. The type is interface{} with range: 0..7.
    Level interface{}

    // Enable CFM on Satellite. The type is interface{}.
    Enable interface{}
}

func (cfm *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_EthernetFeatures_Cfm) GetEntityData() *types.CommonEntityData {
    cfm.EntityData.YFilter = cfm.YFilter
    cfm.EntityData.YangName = "cfm"
    cfm.EntityData.BundleName = "cisco_ios_xr"
    cfm.EntityData.ParentYangName = "ethernet-features"
    cfm.EntityData.SegmentPath = "cfm"
    cfm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features/" + cfm.EntityData.SegmentPath
    cfm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cfm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cfm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cfm.EntityData.Children = types.NewOrderedMap()
    cfm.EntityData.Leafs = types.NewOrderedMap()
    cfm.EntityData.Leafs.Append("continuity-check-interval", types.YLeaf{"ContinuityCheckInterval", cfm.ContinuityCheckInterval})
    cfm.EntityData.Leafs.Append("level", types.YLeaf{"Level", cfm.Level})
    cfm.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", cfm.Enable})

    cfm.EntityData.YListKeys = []string {}

    return &(cfm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization
// Frequency Synchronization satellite
// configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_FrequencySynchronization) GetEntityData() *types.CommonEntityData {
    frequencySynchronization.EntityData.YFilter = frequencySynchronization.YFilter
    frequencySynchronization.EntityData.YangName = "frequency-synchronization"
    frequencySynchronization.EntityData.BundleName = "cisco_ios_xr"
    frequencySynchronization.EntityData.ParentYangName = "nv-satellite-fabric-link"
    frequencySynchronization.EntityData.SegmentPath = "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"
    frequencySynchronization.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/" + frequencySynchronization.EntityData.SegmentPath
    frequencySynchronization.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frequencySynchronization.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frequencySynchronization.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frequencySynchronization.EntityData.Children = types.NewOrderedMap()
    frequencySynchronization.EntityData.Leafs = types.NewOrderedMap()
    frequencySynchronization.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", frequencySynchronization.Enable})

    frequencySynchronization.EntityData.YListKeys = []string {}

    return &(frequencySynchronization.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "nv-satellite-fabric-link"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/Cisco-IOS-XR-qos-ma-sat-cfg:qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricLink_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link/Cisco-IOS-XR-qos-ma-sat-cfg:qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork
// Complex Network connection to one or more
// Satellites
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable. The type is interface{}. This attribute is mandatory.
    Enable interface{}

    // Connected Satellite table.
    Satellites InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites

    // Redundancy submode.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
}

func (nvSatelliteFabricNetwork *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork) GetEntityData() *types.CommonEntityData {
    nvSatelliteFabricNetwork.EntityData.YFilter = nvSatelliteFabricNetwork.YFilter
    nvSatelliteFabricNetwork.EntityData.YangName = "nv-satellite-fabric-network"
    nvSatelliteFabricNetwork.EntityData.BundleName = "cisco_ios_xr"
    nvSatelliteFabricNetwork.EntityData.ParentYangName = "interface-configuration"
    nvSatelliteFabricNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"
    nvSatelliteFabricNetwork.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + nvSatelliteFabricNetwork.EntityData.SegmentPath
    nvSatelliteFabricNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nvSatelliteFabricNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nvSatelliteFabricNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nvSatelliteFabricNetwork.EntityData.Children = types.NewOrderedMap()
    nvSatelliteFabricNetwork.EntityData.Children.Append("satellites", types.YChild{"Satellites", &nvSatelliteFabricNetwork.Satellites})
    nvSatelliteFabricNetwork.EntityData.Children.Append("redundancy", types.YChild{"Redundancy", &nvSatelliteFabricNetwork.Redundancy})
    nvSatelliteFabricNetwork.EntityData.Leafs = types.NewOrderedMap()
    nvSatelliteFabricNetwork.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", nvSatelliteFabricNetwork.Enable})

    nvSatelliteFabricNetwork.EntityData.YListKeys = []string {}

    return &(nvSatelliteFabricNetwork.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites
// Connected Satellite table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Connected Satellite. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite.
    Satellite []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite

    // Interface QOS configuration.
    Qos InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
}

func (satellites *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites) GetEntityData() *types.CommonEntityData {
    satellites.EntityData.YFilter = satellites.YFilter
    satellites.EntityData.YangName = "satellites"
    satellites.EntityData.BundleName = "cisco_ios_xr"
    satellites.EntityData.ParentYangName = "nv-satellite-fabric-network"
    satellites.EntityData.SegmentPath = "satellites"
    satellites.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/" + satellites.EntityData.SegmentPath
    satellites.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    satellites.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    satellites.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    satellites.EntityData.Children = types.NewOrderedMap()
    satellites.EntityData.Children.Append("satellite", types.YChild{"Satellite", nil})
    for i := range satellites.Satellite {
        satellites.EntityData.Children.Append(types.GetSegmentPath(satellites.Satellite[i]), types.YChild{"Satellite", satellites.Satellite[i]})
    }
    satellites.EntityData.Children.Append("Cisco-IOS-XR-qos-ma-sat-cfg:qos", types.YChild{"Qos", &satellites.Qos})
    satellites.EntityData.Leafs = types.NewOrderedMap()

    satellites.EntityData.YListKeys = []string {}

    return &(satellites.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite
// Connected Satellite
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Satellite ID. The type is interface{} with range:
    // 100..65534.
    SatelliteId interface{}

    // Enable. The type is interface{}. This attribute is mandatory.
    Enable interface{}

    // Remote Ports table.
    RemotePorts InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
}

func (satellite *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite) GetEntityData() *types.CommonEntityData {
    satellite.EntityData.YFilter = satellite.YFilter
    satellite.EntityData.YangName = "satellite"
    satellite.EntityData.BundleName = "cisco_ios_xr"
    satellite.EntityData.ParentYangName = "satellites"
    satellite.EntityData.SegmentPath = "satellite" + types.AddKeyToken(satellite.SatelliteId, "satellite-id")
    satellite.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/" + satellite.EntityData.SegmentPath
    satellite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    satellite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    satellite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    satellite.EntityData.Children = types.NewOrderedMap()
    satellite.EntityData.Children.Append("remote-ports", types.YChild{"RemotePorts", &satellite.RemotePorts})
    satellite.EntityData.Leafs = types.NewOrderedMap()
    satellite.EntityData.Leafs.Append("satellite-id", types.YLeaf{"SatelliteId", satellite.SatelliteId})
    satellite.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", satellite.Enable})

    satellite.EntityData.YListKeys = []string {"SatelliteId"}

    return &(satellite.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts
// Remote Ports table
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Ports. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort.
    RemotePort []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
}

func (remotePorts *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts) GetEntityData() *types.CommonEntityData {
    remotePorts.EntityData.YFilter = remotePorts.YFilter
    remotePorts.EntityData.YangName = "remote-ports"
    remotePorts.EntityData.BundleName = "cisco_ios_xr"
    remotePorts.EntityData.ParentYangName = "satellite"
    remotePorts.EntityData.SegmentPath = "remote-ports"
    remotePorts.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/satellite/" + remotePorts.EntityData.SegmentPath
    remotePorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePorts.EntityData.Children = types.NewOrderedMap()
    remotePorts.EntityData.Children.Append("remote-port", types.YChild{"RemotePort", nil})
    for i := range remotePorts.RemotePort {
        remotePorts.EntityData.Children.Append(types.GetSegmentPath(remotePorts.RemotePort[i]), types.YChild{"RemotePort", remotePorts.RemotePort[i]})
    }
    remotePorts.EntityData.Leafs = types.NewOrderedMap()

    remotePorts.EntityData.YListKeys = []string {}

    return &(remotePorts.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort
// Remote Ports
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Port type. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    PortType interface{}

    // This attribute is a key. Slot. The type is interface{} with range: 0..8.
    Slot interface{}

    // This attribute is a key. Sub slot. The type is interface{} with range:
    // 0..8.
    SubSlot interface{}

    // Port range. The type is string. This attribute is mandatory.
    PortRange interface{}
}

func (remotePort *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Satellite_RemotePorts_RemotePort) GetEntityData() *types.CommonEntityData {
    remotePort.EntityData.YFilter = remotePort.YFilter
    remotePort.EntityData.YangName = "remote-port"
    remotePort.EntityData.BundleName = "cisco_ios_xr"
    remotePort.EntityData.ParentYangName = "remote-ports"
    remotePort.EntityData.SegmentPath = "remote-port" + types.AddKeyToken(remotePort.PortType, "port-type") + types.AddKeyToken(remotePort.Slot, "slot") + types.AddKeyToken(remotePort.SubSlot, "sub-slot")
    remotePort.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/satellite/remote-ports/" + remotePort.EntityData.SegmentPath
    remotePort.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePort.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePort.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePort.EntityData.Children = types.NewOrderedMap()
    remotePort.EntityData.Leafs = types.NewOrderedMap()
    remotePort.EntityData.Leafs.Append("port-type", types.YLeaf{"PortType", remotePort.PortType})
    remotePort.EntityData.Leafs.Append("slot", types.YLeaf{"Slot", remotePort.Slot})
    remotePort.EntityData.Leafs.Append("sub-slot", types.YLeaf{"SubSlot", remotePort.SubSlot})
    remotePort.EntityData.Leafs.Append("port-range", types.YLeaf{"PortRange", remotePort.PortRange})

    remotePort.EntityData.YListKeys = []string {"PortType", "Slot", "SubSlot"}

    return &(remotePort.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "satellites"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
}

func (output *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/Cisco-IOS-XR-qos-ma-sat-cfg:qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
}

func (input *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/Cisco-IOS-XR-qos-ma-sat-cfg:qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Satellites_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/satellites/Cisco-IOS-XR-qos-ma-sat-cfg:qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy
// Redundancy submode
type InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Links the satellite fabric to the given ICCP group. The type is interface{}
    // with range: 0..4294967295.
    IccpGroup interface{}

    // Mininum number of active links preferred. The type is interface{} with
    // range: 1..64.
    MinimumPreferredLinks interface{}
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_NvSatelliteFabricNetwork_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nv-satellite-fabric-network"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network/" + redundancy.EntityData.SegmentPath
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = types.NewOrderedMap()
    redundancy.EntityData.Leafs = types.NewOrderedMap()
    redundancy.EntityData.Leafs.Append("iccp-group", types.YLeaf{"IccpGroup", redundancy.IccpGroup})
    redundancy.EntityData.Leafs.Append("minimum-preferred-links", types.YLeaf{"MinimumPreferredLinks", redundancy.MinimumPreferredLinks})

    redundancy.EntityData.YListKeys = []string {}

    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp
// Disable LLDP TX or RX
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Lldp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // enter LLDP interface submode. The type is bool. This attribute is
    // mandatory.
    LldpIntfEnter interface{}

    // Enable both LLDP TX and RX. The type is bool. The default value is false.
    Enable interface{}

    // Disable LLDP TX.
    Transmit InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit

    // Disable LLDP RX.
    Receive InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
}

func (lldp *InterfaceConfigurations_InterfaceConfiguration_Lldp) GetEntityData() *types.CommonEntityData {
    lldp.EntityData.YFilter = lldp.YFilter
    lldp.EntityData.YangName = "lldp"
    lldp.EntityData.BundleName = "cisco_ios_xr"
    lldp.EntityData.ParentYangName = "interface-configuration"
    lldp.EntityData.SegmentPath = "Cisco-IOS-XR-ethernet-lldp-cfg:lldp"
    lldp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + lldp.EntityData.SegmentPath
    lldp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lldp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lldp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lldp.EntityData.Children = types.NewOrderedMap()
    lldp.EntityData.Children.Append("transmit", types.YChild{"Transmit", &lldp.Transmit})
    lldp.EntityData.Children.Append("receive", types.YChild{"Receive", &lldp.Receive})
    lldp.EntityData.Leafs = types.NewOrderedMap()
    lldp.EntityData.Leafs.Append("lldp-intf-enter", types.YLeaf{"LldpIntfEnter", lldp.LldpIntfEnter})
    lldp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", lldp.Enable})

    lldp.EntityData.YListKeys = []string {}

    return &(lldp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit
// Disable LLDP TX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // disable LLDP TX. The type is bool. The default value is false.
    Disable interface{}
}

func (transmit *InterfaceConfigurations_InterfaceConfiguration_Lldp_Transmit) GetEntityData() *types.CommonEntityData {
    transmit.EntityData.YFilter = transmit.YFilter
    transmit.EntityData.YangName = "transmit"
    transmit.EntityData.BundleName = "cisco_ios_xr"
    transmit.EntityData.ParentYangName = "lldp"
    transmit.EntityData.SegmentPath = "transmit"
    transmit.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ethernet-lldp-cfg:lldp/" + transmit.EntityData.SegmentPath
    transmit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmit.EntityData.Children = types.NewOrderedMap()
    transmit.EntityData.Leafs = types.NewOrderedMap()
    transmit.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", transmit.Disable})

    transmit.EntityData.YListKeys = []string {}

    return &(transmit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive
// Disable LLDP RX
type InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // disable LLDP RX. The type is bool. The default value is false.
    Disable interface{}
}

func (receive *InterfaceConfigurations_InterfaceConfiguration_Lldp_Receive) GetEntityData() *types.CommonEntityData {
    receive.EntityData.YFilter = receive.YFilter
    receive.EntityData.YangName = "receive"
    receive.EntityData.BundleName = "cisco_ios_xr"
    receive.EntityData.ParentYangName = "lldp"
    receive.EntityData.SegmentPath = "receive"
    receive.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ethernet-lldp-cfg:lldp/" + receive.EntityData.SegmentPath
    receive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receive.EntityData.Children = types.NewOrderedMap()
    receive.EntityData.Leafs = types.NewOrderedMap()
    receive.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", receive.Disable})

    receive.EntityData.YListKeys = []string {}

    return &(receive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions
// Monitor Session container for this source
// interface
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular class of Monitor Session. The type is slice
    // of
    // InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession.
    SpanMonitorSession []*InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
}

func (spanMonitorSessions *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions) GetEntityData() *types.CommonEntityData {
    spanMonitorSessions.EntityData.YFilter = spanMonitorSessions.YFilter
    spanMonitorSessions.EntityData.YangName = "span-monitor-sessions"
    spanMonitorSessions.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSessions.EntityData.ParentYangName = "interface-configuration"
    spanMonitorSessions.EntityData.SegmentPath = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
    spanMonitorSessions.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + spanMonitorSessions.EntityData.SegmentPath
    spanMonitorSessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSessions.EntityData.Children = types.NewOrderedMap()
    spanMonitorSessions.EntityData.Children.Append("span-monitor-session", types.YChild{"SpanMonitorSession", nil})
    for i := range spanMonitorSessions.SpanMonitorSession {
        spanMonitorSessions.EntityData.Children.Append(types.GetSegmentPath(spanMonitorSessions.SpanMonitorSession[i]), types.YChild{"SpanMonitorSession", spanMonitorSessions.SpanMonitorSession[i]})
    }
    spanMonitorSessions.EntityData.Leafs = types.NewOrderedMap()

    spanMonitorSessions.EntityData.YListKeys = []string {}

    return &(spanMonitorSessions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession
// Configuration for a particular class of Monitor
// Session
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Session Class. The type is SpanSessionClass.
    SessionClass interface{}

    // Mirror a specified number of bytes from start of packet. The type is
    // interface{} with range: 1..10000. Units are byte.
    MirrorFirst interface{}

    // Specify the mirror interval. The type is SpanMirrorInterval.
    MirrorInterval interface{}

    // Attach the interface to a Monitor Session.
    Attachment InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment

    // Enable ACL matching for traffic mirroring.
    Acl InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
}

func (spanMonitorSession *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession) GetEntityData() *types.CommonEntityData {
    spanMonitorSession.EntityData.YFilter = spanMonitorSession.YFilter
    spanMonitorSession.EntityData.YangName = "span-monitor-session"
    spanMonitorSession.EntityData.BundleName = "cisco_ios_xr"
    spanMonitorSession.EntityData.ParentYangName = "span-monitor-sessions"
    spanMonitorSession.EntityData.SegmentPath = "span-monitor-session" + types.AddKeyToken(spanMonitorSession.SessionClass, "session-class")
    spanMonitorSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/" + spanMonitorSession.EntityData.SegmentPath
    spanMonitorSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spanMonitorSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spanMonitorSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spanMonitorSession.EntityData.Children = types.NewOrderedMap()
    spanMonitorSession.EntityData.Children.Append("attachment", types.YChild{"Attachment", &spanMonitorSession.Attachment})
    spanMonitorSession.EntityData.Children.Append("acl", types.YChild{"Acl", &spanMonitorSession.Acl})
    spanMonitorSession.EntityData.Leafs = types.NewOrderedMap()
    spanMonitorSession.EntityData.Leafs.Append("session-class", types.YLeaf{"SessionClass", spanMonitorSession.SessionClass})
    spanMonitorSession.EntityData.Leafs.Append("mirror-first", types.YLeaf{"MirrorFirst", spanMonitorSession.MirrorFirst})
    spanMonitorSession.EntityData.Leafs.Append("mirror-interval", types.YLeaf{"MirrorInterval", spanMonitorSession.MirrorInterval})

    spanMonitorSession.EntityData.YListKeys = []string {"SessionClass"}

    return &(spanMonitorSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment
// Attach the interface to a Monitor Session
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Session Name. The type is string with length: 1..79. This attribute is
    // mandatory.
    SessionName interface{}

    // Specify the direction of traffic to replicate (optional). The type is
    // SpanTrafficDirection.
    Direction interface{}

    // Enable port level traffic mirroring. The type is interface{}.
    PortLevelEnable interface{}
}

func (attachment *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Attachment) GetEntityData() *types.CommonEntityData {
    attachment.EntityData.YFilter = attachment.YFilter
    attachment.EntityData.YangName = "attachment"
    attachment.EntityData.BundleName = "cisco_ios_xr"
    attachment.EntityData.ParentYangName = "span-monitor-session"
    attachment.EntityData.SegmentPath = "attachment"
    attachment.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/span-monitor-session/" + attachment.EntityData.SegmentPath
    attachment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachment.EntityData.Children = types.NewOrderedMap()
    attachment.EntityData.Leafs = types.NewOrderedMap()
    attachment.EntityData.Leafs.Append("session-name", types.YLeaf{"SessionName", attachment.SessionName})
    attachment.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", attachment.Direction})
    attachment.EntityData.Leafs.Append("port-level-enable", types.YLeaf{"PortLevelEnable", attachment.PortLevelEnable})

    attachment.EntityData.YListKeys = []string {}

    return &(attachment.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl
// Enable ACL matching for traffic mirroring
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable ACL. The type is interface{}. This attribute is mandatory.
    AclEnable interface{}

    // ACL Name. The type is string with length: 1..80.
    AclName interface{}
}

func (acl *InterfaceConfigurations_InterfaceConfiguration_SpanMonitorSessions_SpanMonitorSession_Acl) GetEntityData() *types.CommonEntityData {
    acl.EntityData.YFilter = acl.YFilter
    acl.EntityData.YangName = "acl"
    acl.EntityData.BundleName = "cisco_ios_xr"
    acl.EntityData.ParentYangName = "span-monitor-session"
    acl.EntityData.SegmentPath = "acl"
    acl.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions/span-monitor-session/" + acl.EntityData.SegmentPath
    acl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    acl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    acl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    acl.EntityData.Children = types.NewOrderedMap()
    acl.EntityData.Leafs = types.NewOrderedMap()
    acl.EntityData.Leafs.Append("acl-enable", types.YLeaf{"AclEnable", acl.AclEnable})
    acl.EntityData.Leafs.Append("acl-name", types.YLeaf{"AclName", acl.AclName})

    acl.EntityData.YListKeys = []string {}

    return &(acl.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4FlowSpec
// Flowspec on IPv4 interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable FlowSpec on this interface. The type is interface{}.
    Enabled interface{}
}

func (ipv4FlowSpec *InterfaceConfigurations_InterfaceConfiguration_Ipv4FlowSpec) GetEntityData() *types.CommonEntityData {
    ipv4FlowSpec.EntityData.YFilter = ipv4FlowSpec.YFilter
    ipv4FlowSpec.EntityData.YangName = "ipv4-flow-spec"
    ipv4FlowSpec.EntityData.BundleName = "cisco_ios_xr"
    ipv4FlowSpec.EntityData.ParentYangName = "interface-configuration"
    ipv4FlowSpec.EntityData.SegmentPath = "Cisco-IOS-XR-flowspec-cfg:ipv4-flow-spec"
    ipv4FlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4FlowSpec.EntityData.SegmentPath
    ipv4FlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FlowSpec.EntityData.Children = types.NewOrderedMap()
    ipv4FlowSpec.EntityData.Leafs = types.NewOrderedMap()
    ipv4FlowSpec.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", ipv4FlowSpec.Enabled})

    ipv4FlowSpec.EntityData.YListKeys = []string {}

    return &(ipv4FlowSpec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6FlowSpec
// Flowspec on IPv6 interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable flowspec on interface. The type is interface{}.
    Enabled interface{}
}

func (ipv6FlowSpec *InterfaceConfigurations_InterfaceConfiguration_Ipv6FlowSpec) GetEntityData() *types.CommonEntityData {
    ipv6FlowSpec.EntityData.YFilter = ipv6FlowSpec.YFilter
    ipv6FlowSpec.EntityData.YangName = "ipv6-flow-spec"
    ipv6FlowSpec.EntityData.BundleName = "cisco_ios_xr"
    ipv6FlowSpec.EntityData.ParentYangName = "interface-configuration"
    ipv6FlowSpec.EntityData.SegmentPath = "Cisco-IOS-XR-flowspec-cfg:ipv6-flow-spec"
    ipv6FlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv6FlowSpec.EntityData.SegmentPath
    ipv6FlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FlowSpec.EntityData.Children = types.NewOrderedMap()
    ipv6FlowSpec.EntityData.Leafs = types.NewOrderedMap()
    ipv6FlowSpec.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", ipv6FlowSpec.Enabled})

    ipv6FlowSpec.EntityData.YListKeys = []string {}

    return &(ipv6FlowSpec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization
// Frequency Synchronization interface
// configuration
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable SSM on this source. The type is interface{}.
    SsmDisable interface{}

    // Set the time-of-day priority of this source. The type is interface{} with
    // range: 1..254. The default value is 100.
    TimeOfDayPriority interface{}

    // Assign this source as a selection input. The type is interface{}.
    SelectionInput interface{}

    // Enable Frequency Synchronization. The type is interface{}.
    Enable interface{}

    // Set the priority of this source. The type is interface{} with range:
    // 1..254. The default value is 100.
    Priority interface{}

    // Set the wait-to-restore time for this source. The type is interface{} with
    // range: 0..12. The default value is 5.
    WaitToRestoreTime interface{}

    // Set the input quality level.
    InputQualityLevel InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel

    // Set the output quality level.
    OutputQualityLevel InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel
}

func (frequencySynchronization *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization) GetEntityData() *types.CommonEntityData {
    frequencySynchronization.EntityData.YFilter = frequencySynchronization.YFilter
    frequencySynchronization.EntityData.YangName = "frequency-synchronization"
    frequencySynchronization.EntityData.BundleName = "cisco_ios_xr"
    frequencySynchronization.EntityData.ParentYangName = "interface-configuration"
    frequencySynchronization.EntityData.SegmentPath = "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"
    frequencySynchronization.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + frequencySynchronization.EntityData.SegmentPath
    frequencySynchronization.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frequencySynchronization.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frequencySynchronization.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frequencySynchronization.EntityData.Children = types.NewOrderedMap()
    frequencySynchronization.EntityData.Children.Append("input-quality-level", types.YChild{"InputQualityLevel", &frequencySynchronization.InputQualityLevel})
    frequencySynchronization.EntityData.Children.Append("output-quality-level", types.YChild{"OutputQualityLevel", &frequencySynchronization.OutputQualityLevel})
    frequencySynchronization.EntityData.Leafs = types.NewOrderedMap()
    frequencySynchronization.EntityData.Leafs.Append("ssm-disable", types.YLeaf{"SsmDisable", frequencySynchronization.SsmDisable})
    frequencySynchronization.EntityData.Leafs.Append("time-of-day-priority", types.YLeaf{"TimeOfDayPriority", frequencySynchronization.TimeOfDayPriority})
    frequencySynchronization.EntityData.Leafs.Append("selection-input", types.YLeaf{"SelectionInput", frequencySynchronization.SelectionInput})
    frequencySynchronization.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", frequencySynchronization.Enable})
    frequencySynchronization.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", frequencySynchronization.Priority})
    frequencySynchronization.EntityData.Leafs.Append("wait-to-restore-time", types.YLeaf{"WaitToRestoreTime", frequencySynchronization.WaitToRestoreTime})

    frequencySynchronization.EntityData.YListKeys = []string {}

    return &(frequencySynchronization.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel
// Set the input quality level
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (inputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_InputQualityLevel) GetEntityData() *types.CommonEntityData {
    inputQualityLevel.EntityData.YFilter = inputQualityLevel.YFilter
    inputQualityLevel.EntityData.YangName = "input-quality-level"
    inputQualityLevel.EntityData.BundleName = "cisco_ios_xr"
    inputQualityLevel.EntityData.ParentYangName = "frequency-synchronization"
    inputQualityLevel.EntityData.SegmentPath = "input-quality-level"
    inputQualityLevel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-freqsync-cfg:frequency-synchronization/" + inputQualityLevel.EntityData.SegmentPath
    inputQualityLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inputQualityLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inputQualityLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inputQualityLevel.EntityData.Children = types.NewOrderedMap()
    inputQualityLevel.EntityData.Leafs = types.NewOrderedMap()
    inputQualityLevel.EntityData.Leafs.Append("quality-level-option", types.YLeaf{"QualityLevelOption", inputQualityLevel.QualityLevelOption})
    inputQualityLevel.EntityData.Leafs.Append("exact-quality-level-value", types.YLeaf{"ExactQualityLevelValue", inputQualityLevel.ExactQualityLevelValue})
    inputQualityLevel.EntityData.Leafs.Append("min-quality-level-value", types.YLeaf{"MinQualityLevelValue", inputQualityLevel.MinQualityLevelValue})
    inputQualityLevel.EntityData.Leafs.Append("max-quality-level-value", types.YLeaf{"MaxQualityLevelValue", inputQualityLevel.MaxQualityLevelValue})

    inputQualityLevel.EntityData.YListKeys = []string {}

    return &(inputQualityLevel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel
// Set the output quality level
type InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quality level option. The type is FsyncQlOption.
    QualityLevelOption interface{}

    // Exact quality level value. The type is FsyncQlValue.
    ExactQualityLevelValue interface{}

    // Minimum quality level value. The type is FsyncQlValue.
    MinQualityLevelValue interface{}

    // Maximum quality level value. The type is FsyncQlValue.
    MaxQualityLevelValue interface{}
}

func (outputQualityLevel *InterfaceConfigurations_InterfaceConfiguration_FrequencySynchronization_OutputQualityLevel) GetEntityData() *types.CommonEntityData {
    outputQualityLevel.EntityData.YFilter = outputQualityLevel.YFilter
    outputQualityLevel.EntityData.YangName = "output-quality-level"
    outputQualityLevel.EntityData.BundleName = "cisco_ios_xr"
    outputQualityLevel.EntityData.ParentYangName = "frequency-synchronization"
    outputQualityLevel.EntityData.SegmentPath = "output-quality-level"
    outputQualityLevel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-freqsync-cfg:frequency-synchronization/" + outputQualityLevel.EntityData.SegmentPath
    outputQualityLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outputQualityLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outputQualityLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outputQualityLevel.EntityData.Children = types.NewOrderedMap()
    outputQualityLevel.EntityData.Leafs = types.NewOrderedMap()
    outputQualityLevel.EntityData.Leafs.Append("quality-level-option", types.YLeaf{"QualityLevelOption", outputQualityLevel.QualityLevelOption})
    outputQualityLevel.EntityData.Leafs.Append("exact-quality-level-value", types.YLeaf{"ExactQualityLevelValue", outputQualityLevel.ExactQualityLevelValue})
    outputQualityLevel.EntityData.Leafs.Append("min-quality-level-value", types.YLeaf{"MinQualityLevelValue", outputQualityLevel.MinQualityLevelValue})
    outputQualityLevel.EntityData.Leafs.Append("max-quality-level-value", types.YLeaf{"MaxQualityLevelValue", outputQualityLevel.MaxQualityLevelValue})

    outputQualityLevel.EntityData.YListKeys = []string {}

    return &(outputQualityLevel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies
// Interface control subscriber policy
// configuration
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy to be applied to access interface  for subscribers. The type
    // is slice of
    // InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies) GetEntityData() *types.CommonEntityData {
    servicePolicies.EntityData.YFilter = servicePolicies.YFilter
    servicePolicies.EntityData.YangName = "service-policies"
    servicePolicies.EntityData.BundleName = "cisco_ios_xr"
    servicePolicies.EntityData.ParentYangName = "interface-configuration"
    servicePolicies.EntityData.SegmentPath = "Cisco-IOS-XR-iedge4710-cfg:service-policies"
    servicePolicies.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + servicePolicies.EntityData.SegmentPath
    servicePolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicies.EntityData.Children = types.NewOrderedMap()
    servicePolicies.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range servicePolicies.ServicePolicy {
        servicePolicies.EntityData.Children.Append(types.GetSegmentPath(servicePolicies.ServicePolicy[i]), types.YChild{"ServicePolicy", servicePolicies.ServicePolicy[i]})
    }
    servicePolicies.EntityData.Leafs = types.NewOrderedMap()

    servicePolicies.EntityData.YListKeys = []string {}

    return &(servicePolicies.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy
// Service policy to be applied to access
// interface  for subscribers
type InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 1..63.
    ServicePolicyName interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_ServicePolicies_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "service-policies"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-iedge4710-cfg:service-policies/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs
// Per-address-family and topology configuration
type InterfaceConfigurations_InterfaceConfiguration_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_Af.
    Af []*InterfaceConfigurations_InterfaceConfiguration_Afs_Af

    // The presence of this object enables the givenaddress-family and topology on
    // the interface. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName.
    AfTopologyName []*InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
}

func (afs *InterfaceConfigurations_InterfaceConfiguration_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "interface-configuration"
    afs.EntityData.SegmentPath = "Cisco-IOS-XR-infra-rsi-cfg:afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Children.Append("af-topology-name", types.YChild{"AfTopologyName", nil})
    for i := range afs.AfTopologyName {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.AfTopologyName[i]), types.YChild{"AfTopologyName", afs.AfTopologyName[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs_Af
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (af *InterfaceConfigurations_InterfaceConfiguration_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name") + types.AddKeyToken(af.SafName, "saf-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-infra-rsi-cfg:afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})
    af.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", af.SafName})

    af.EntityData.YListKeys = []string {"AfName", "SafName"}

    return &(af.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName
// The presence of this object enables the
// givenaddress-family and topology on the
// interface.
type InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with length:
    // 1..32.
    TopologyName interface{}

    // This attribute is a key. Address-family. The type is VrfAddressFamily.
    AfName interface{}

    // This attribute is a key. Sub-address-family. The type is
    // VrfSubAddressFamily.
    SafName interface{}
}

func (afTopologyName *InterfaceConfigurations_InterfaceConfiguration_Afs_AfTopologyName) GetEntityData() *types.CommonEntityData {
    afTopologyName.EntityData.YFilter = afTopologyName.YFilter
    afTopologyName.EntityData.YangName = "af-topology-name"
    afTopologyName.EntityData.BundleName = "cisco_ios_xr"
    afTopologyName.EntityData.ParentYangName = "afs"
    afTopologyName.EntityData.SegmentPath = "af-topology-name" + types.AddKeyToken(afTopologyName.TopologyName, "topology-name") + types.AddKeyToken(afTopologyName.AfName, "af-name") + types.AddKeyToken(afTopologyName.SafName, "saf-name")
    afTopologyName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-infra-rsi-cfg:afs/" + afTopologyName.EntityData.SegmentPath
    afTopologyName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afTopologyName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afTopologyName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afTopologyName.EntityData.Children = types.NewOrderedMap()
    afTopologyName.EntityData.Leafs = types.NewOrderedMap()
    afTopologyName.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", afTopologyName.TopologyName})
    afTopologyName.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", afTopologyName.AfName})
    afTopologyName.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", afTopologyName.SafName})

    afTopologyName.EntityData.YListKeys = []string {"TopologyName", "AfName", "SafName"}

    return &(afTopologyName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Statistics
// Per-interface statistics configuration
type InterfaceConfigurations_InterfaceConfiguration_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify interval for load calculation for an interface. The type is
    // interface{} with range: 0..600. The default value is 300.
    LoadInterval interface{}
}

func (statistics *InterfaceConfigurations_InterfaceConfiguration_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "interface-configuration"
    statistics.EntityData.SegmentPath = "Cisco-IOS-XR-infra-statsd-cfg:statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Leafs = types.NewOrderedMap()
    statistics.EntityData.Leafs.Append("load-interval", types.YLeaf{"LoadInterval", statistics.LoadInterval})

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter
// IPv6 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound

    // IPv6 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
}

func (ipv6PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter) GetEntityData() *types.CommonEntityData {
    ipv6PacketFilter.EntityData.YFilter = ipv6PacketFilter.YFilter
    ipv6PacketFilter.EntityData.YangName = "ipv6-packet-filter"
    ipv6PacketFilter.EntityData.BundleName = "cisco_ios_xr"
    ipv6PacketFilter.EntityData.ParentYangName = "interface-configuration"
    ipv6PacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"
    ipv6PacketFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv6PacketFilter.EntityData.SegmentPath
    ipv6PacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6PacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6PacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6PacketFilter.EntityData.Children = types.NewOrderedMap()
    ipv6PacketFilter.EntityData.Children.Append("inbound", types.YChild{"Inbound", &ipv6PacketFilter.Inbound})
    ipv6PacketFilter.EntityData.Children.Append("outbound", types.YChild{"Outbound", &ipv6PacketFilter.Outbound})
    ipv6PacketFilter.EntityData.Leafs = types.NewOrderedMap()

    ipv6PacketFilter.EntityData.YListKeys = []string {}

    return &(ipv6PacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound
// IPv6 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..64.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Inbound  NOTE: This parameter is mandatory if 'CommonACLName' is not
    // specified. The type is string with length: 1..64.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..64.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Inbound) GetEntityData() *types.CommonEntityData {
    inbound.EntityData.YFilter = inbound.YFilter
    inbound.EntityData.YangName = "inbound"
    inbound.EntityData.BundleName = "cisco_ios_xr"
    inbound.EntityData.ParentYangName = "ipv6-packet-filter"
    inbound.EntityData.SegmentPath = "inbound"
    inbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter/" + inbound.EntityData.SegmentPath
    inbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inbound.EntityData.Children = types.NewOrderedMap()
    inbound.EntityData.Leafs = types.NewOrderedMap()
    inbound.EntityData.Leafs.Append("common-acl-name", types.YLeaf{"CommonAclName", inbound.CommonAclName})
    inbound.EntityData.Leafs.Append("name", types.YLeaf{"Name", inbound.Name})
    inbound.EntityData.Leafs.Append("interface-statistics", types.YLeaf{"InterfaceStatistics", inbound.InterfaceStatistics})
    inbound.EntityData.Leafs.Append("compression-level", types.YLeaf{"CompressionLevel", inbound.CompressionLevel})
    inbound.EntityData.Leafs.Append("acl-name-array", types.YLeaf{"AclNameArray", inbound.AclNameArray})
    inbound.EntityData.Leafs.Append("is-common-array", types.YLeaf{"IsCommonArray", inbound.IsCommonArray})

    inbound.EntityData.YListKeys = []string {}

    return &(inbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound
// IPv6 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..64.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv6 Packet Filter Name to be applied
    // to Outbound  packets. The type is string with length: 1..64.
    Name interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv6 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..64.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv6PacketFilter_Outbound) GetEntityData() *types.CommonEntityData {
    outbound.EntityData.YFilter = outbound.YFilter
    outbound.EntityData.YangName = "outbound"
    outbound.EntityData.BundleName = "cisco_ios_xr"
    outbound.EntityData.ParentYangName = "ipv6-packet-filter"
    outbound.EntityData.SegmentPath = "outbound"
    outbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter/" + outbound.EntityData.SegmentPath
    outbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outbound.EntityData.Children = types.NewOrderedMap()
    outbound.EntityData.Leafs = types.NewOrderedMap()
    outbound.EntityData.Leafs.Append("do-not-use", types.YLeaf{"DoNotUse", outbound.DoNotUse})
    outbound.EntityData.Leafs.Append("name", types.YLeaf{"Name", outbound.Name})
    outbound.EntityData.Leafs.Append("interface-statistics", types.YLeaf{"InterfaceStatistics", outbound.InterfaceStatistics})
    outbound.EntityData.Leafs.Append("compression-level", types.YLeaf{"CompressionLevel", outbound.CompressionLevel})
    outbound.EntityData.Leafs.Append("acl-name-array", types.YLeaf{"AclNameArray", outbound.AclNameArray})
    outbound.EntityData.Leafs.Append("is-common-array", types.YLeaf{"IsCommonArray", outbound.IsCommonArray})

    outbound.EntityData.YListKeys = []string {}

    return &(outbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter
// ES Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of filter to be applied to outbound packets. The type is string with
    // length: 1..64.
    Outbound interface{}

    // Name of filter to be applied to inbound packets. The type is string with
    // length: 1..64.
    Inbound interface{}
}

func (esPacketFilter *InterfaceConfigurations_InterfaceConfiguration_EsPacketFilter) GetEntityData() *types.CommonEntityData {
    esPacketFilter.EntityData.YFilter = esPacketFilter.YFilter
    esPacketFilter.EntityData.YangName = "es-packet-filter"
    esPacketFilter.EntityData.BundleName = "cisco_ios_xr"
    esPacketFilter.EntityData.ParentYangName = "interface-configuration"
    esPacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"
    esPacketFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + esPacketFilter.EntityData.SegmentPath
    esPacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esPacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esPacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esPacketFilter.EntityData.Children = types.NewOrderedMap()
    esPacketFilter.EntityData.Leafs = types.NewOrderedMap()
    esPacketFilter.EntityData.Leafs.Append("outbound", types.YLeaf{"Outbound", esPacketFilter.Outbound})
    esPacketFilter.EntityData.Leafs.Append("inbound", types.YLeaf{"Inbound", esPacketFilter.Inbound})

    esPacketFilter.EntityData.YListKeys = []string {}

    return &(esPacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter
// IPv4 Packet Filtering configuration for the
// interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Packet filter to be applied to outbound packets.
    Outbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound

    // IPv4 Packet filter to be applied to inbound packets.
    Inbound InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
}

func (ipv4PacketFilter *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter) GetEntityData() *types.CommonEntityData {
    ipv4PacketFilter.EntityData.YFilter = ipv4PacketFilter.YFilter
    ipv4PacketFilter.EntityData.YangName = "ipv4-packet-filter"
    ipv4PacketFilter.EntityData.BundleName = "cisco_ios_xr"
    ipv4PacketFilter.EntityData.ParentYangName = "interface-configuration"
    ipv4PacketFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"
    ipv4PacketFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4PacketFilter.EntityData.SegmentPath
    ipv4PacketFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4PacketFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4PacketFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4PacketFilter.EntityData.Children = types.NewOrderedMap()
    ipv4PacketFilter.EntityData.Children.Append("outbound", types.YChild{"Outbound", &ipv4PacketFilter.Outbound})
    ipv4PacketFilter.EntityData.Children.Append("inbound", types.YChild{"Inbound", &ipv4PacketFilter.Inbound})
    ipv4PacketFilter.EntityData.Leafs = types.NewOrderedMap()

    ipv4PacketFilter.EntityData.YListKeys = []string {}

    return &(ipv4PacketFilter.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound
// IPv4 Packet filter to be applied to outbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved.  Error if specified. The type is string with length: 1..64.
    DoNotUse interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Outbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..64.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Outbound packets. The
    // type is slice of string with length: 1..64.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (outbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Outbound) GetEntityData() *types.CommonEntityData {
    outbound.EntityData.YFilter = outbound.YFilter
    outbound.EntityData.YangName = "outbound"
    outbound.EntityData.BundleName = "cisco_ios_xr"
    outbound.EntityData.ParentYangName = "ipv4-packet-filter"
    outbound.EntityData.SegmentPath = "outbound"
    outbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter/" + outbound.EntityData.SegmentPath
    outbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outbound.EntityData.Children = types.NewOrderedMap()
    outbound.EntityData.Leafs = types.NewOrderedMap()
    outbound.EntityData.Leafs.Append("do-not-use", types.YLeaf{"DoNotUse", outbound.DoNotUse})
    outbound.EntityData.Leafs.Append("name", types.YLeaf{"Name", outbound.Name})
    outbound.EntityData.Leafs.Append("hardware-count", types.YLeaf{"HardwareCount", outbound.HardwareCount})
    outbound.EntityData.Leafs.Append("interface-statistics", types.YLeaf{"InterfaceStatistics", outbound.InterfaceStatistics})
    outbound.EntityData.Leafs.Append("compression-level", types.YLeaf{"CompressionLevel", outbound.CompressionLevel})
    outbound.EntityData.Leafs.Append("acl-name-array", types.YLeaf{"AclNameArray", outbound.AclNameArray})
    outbound.EntityData.Leafs.Append("is-common-array", types.YLeaf{"IsCommonArray", outbound.IsCommonArray})

    outbound.EntityData.YListKeys = []string {}

    return &(outbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound
// IPv4 Packet filter to be applied to inbound
// packets
type InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets, ACL providing HW optimization when applied on multiple
    // interfaces. NOTE: This parameter is mandatory if 'Name' is not specified.
    // The type is string with length: 1..64.
    CommonAclName interface{}

    // Reserved for backward compatibility. IPv4 Packet Filter Name to be applied
    // to Inbound packets NOTE: This parameter is mandatory if 'CommonACLName' is
    // not specified. The type is string with length: 1..64.
    Name interface{}

    // True if packets hitting the ACL should be counted in the hardware.  The
    // default is not to count them. NOTE: HardwareCount is allowed only if Name
    // is specified. The type is interface{}.
    HardwareCount interface{}

    // True if packets hitting the ACL should be counted in hardware per
    // interface.The default is not to count them. NOTE: InterfaceStatistics is
    // allowed only if Name is specified. The type is interface{}.
    InterfaceStatistics interface{}

    // The level of compression applied to the ACL on this interface. The range is
    // 0 to 3 with default being no compression (0). The type is interface{} with
    // range: 0..3.
    CompressionLevel interface{}

    // Array of IPv4 Packet Filter Names to be applied to Inbound packets. The
    // type is slice of string with length: 1..64.
    AclNameArray []interface{}

    // Array of CommonACL flags for each ACL. TRUE indicates HW optimization on
    // multiple interfaces is provided. The type is slice of bool.
    IsCommonArray []interface{}
}

func (inbound *InterfaceConfigurations_InterfaceConfiguration_Ipv4PacketFilter_Inbound) GetEntityData() *types.CommonEntityData {
    inbound.EntityData.YFilter = inbound.YFilter
    inbound.EntityData.YangName = "inbound"
    inbound.EntityData.BundleName = "cisco_ios_xr"
    inbound.EntityData.ParentYangName = "ipv4-packet-filter"
    inbound.EntityData.SegmentPath = "inbound"
    inbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter/" + inbound.EntityData.SegmentPath
    inbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inbound.EntityData.Children = types.NewOrderedMap()
    inbound.EntityData.Leafs = types.NewOrderedMap()
    inbound.EntityData.Leafs.Append("common-acl-name", types.YLeaf{"CommonAclName", inbound.CommonAclName})
    inbound.EntityData.Leafs.Append("name", types.YLeaf{"Name", inbound.Name})
    inbound.EntityData.Leafs.Append("hardware-count", types.YLeaf{"HardwareCount", inbound.HardwareCount})
    inbound.EntityData.Leafs.Append("interface-statistics", types.YLeaf{"InterfaceStatistics", inbound.InterfaceStatistics})
    inbound.EntityData.Leafs.Append("compression-level", types.YLeaf{"CompressionLevel", inbound.CompressionLevel})
    inbound.EntityData.Leafs.Append("acl-name-array", types.YLeaf{"AclNameArray", inbound.AclNameArray})
    inbound.EntityData.Leafs.Append("is-common-array", types.YLeaf{"IsCommonArray", inbound.IsCommonArray})

    inbound.EntityData.YListKeys = []string {}

    return &(inbound.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs
// Direct-Attached Gateway Redundancy configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The DAGR entry being configured. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr.
    Dagr []*InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
}

func (dagrs *InterfaceConfigurations_InterfaceConfiguration_Dagrs) GetEntityData() *types.CommonEntityData {
    dagrs.EntityData.YFilter = dagrs.YFilter
    dagrs.EntityData.YangName = "dagrs"
    dagrs.EntityData.BundleName = "cisco_ios_xr"
    dagrs.EntityData.ParentYangName = "interface-configuration"
    dagrs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-arp-cfg:dagrs"
    dagrs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + dagrs.EntityData.SegmentPath
    dagrs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dagrs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dagrs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dagrs.EntityData.Children = types.NewOrderedMap()
    dagrs.EntityData.Children.Append("dagr", types.YChild{"Dagr", nil})
    for i := range dagrs.Dagr {
        dagrs.EntityData.Children.Append(types.GetSegmentPath(dagrs.Dagr[i]), types.YChild{"Dagr", dagrs.Dagr[i]})
    }
    dagrs.EntityData.Leafs = types.NewOrderedMap()

    dagrs.EntityData.YListKeys = []string {}

    return &(dagrs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr
// The DAGR entry being configured
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. DAGR Peer IPv4 address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpAddr interface{}

    // DAGR Group Enter item. The type is interface{}.
    Enter interface{}

    // DAGR Submode configuration.
    Sub InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
}

func (dagr *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr) GetEntityData() *types.CommonEntityData {
    dagr.EntityData.YFilter = dagr.YFilter
    dagr.EntityData.YangName = "dagr"
    dagr.EntityData.BundleName = "cisco_ios_xr"
    dagr.EntityData.ParentYangName = "dagrs"
    dagr.EntityData.SegmentPath = "dagr" + types.AddKeyToken(dagr.IpAddr, "ip-addr")
    dagr.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-arp-cfg:dagrs/" + dagr.EntityData.SegmentPath
    dagr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dagr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dagr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dagr.EntityData.Children = types.NewOrderedMap()
    dagr.EntityData.Children.Append("sub", types.YChild{"Sub", &dagr.Sub})
    dagr.EntityData.Leafs = types.NewOrderedMap()
    dagr.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", dagr.IpAddr})
    dagr.EntityData.Leafs.Append("enter", types.YLeaf{"Enter", dagr.Enter})

    dagr.EntityData.YListKeys = []string {"IpAddr"}

    return &(dagr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub
// DAGR Submode configuration
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority Timeout value. The type is interface{} with range: 1..10000. The
    // default value is 20.
    PriorityTimeout interface{}

    // Set Route Metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric

    // Set Query Timers.
    Timers InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers

    // Set Route Distance.
    Distance InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
}

func (sub *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub) GetEntityData() *types.CommonEntityData {
    sub.EntityData.YFilter = sub.YFilter
    sub.EntityData.YangName = "sub"
    sub.EntityData.BundleName = "cisco_ios_xr"
    sub.EntityData.ParentYangName = "dagr"
    sub.EntityData.SegmentPath = "sub"
    sub.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-arp-cfg:dagrs/dagr/" + sub.EntityData.SegmentPath
    sub.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sub.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sub.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sub.EntityData.Children = types.NewOrderedMap()
    sub.EntityData.Children.Append("metric", types.YChild{"Metric", &sub.Metric})
    sub.EntityData.Children.Append("timers", types.YChild{"Timers", &sub.Timers})
    sub.EntityData.Children.Append("distance", types.YChild{"Distance", &sub.Distance})
    sub.EntityData.Leafs = types.NewOrderedMap()
    sub.EntityData.Leafs.Append("priority-timeout", types.YLeaf{"PriorityTimeout", sub.PriorityTimeout})

    sub.EntityData.YListKeys = []string {}

    return &(sub.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric
// Set Route Metric
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Normal Route Metric. The type is interface{} with range: 0..256. The
    // default value is 100.
    MetricNorm interface{}

    // Priority Route Metric. The type is interface{} with range: 0..256. The
    // default value is 90.
    MetricPrio interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Metric) GetEntityData() *types.CommonEntityData {
    metric.EntityData.YFilter = metric.YFilter
    metric.EntityData.YangName = "metric"
    metric.EntityData.BundleName = "cisco_ios_xr"
    metric.EntityData.ParentYangName = "sub"
    metric.EntityData.SegmentPath = "metric"
    metric.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-arp-cfg:dagrs/dagr/sub/" + metric.EntityData.SegmentPath
    metric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    metric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    metric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    metric.EntityData.Children = types.NewOrderedMap()
    metric.EntityData.Leafs = types.NewOrderedMap()
    metric.EntityData.Leafs.Append("metric-norm", types.YLeaf{"MetricNorm", metric.MetricNorm})
    metric.EntityData.Leafs.Append("metric-prio", types.YLeaf{"MetricPrio", metric.MetricPrio})

    metric.EntityData.YListKeys = []string {}

    return &(metric.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers
// Set Query Timers
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Query Timeout. The type is interface{} with range: 1..10000. The default
    // value is 1.
    QueryTime interface{}

    // Standby Query Timeout. The type is interface{} with range: 1..10000. The
    // default value is 20.
    SbyTime interface{}
}

func (timers *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "sub"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-arp-cfg:dagrs/dagr/sub/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("query-time", types.YLeaf{"QueryTime", timers.QueryTime})
    timers.EntityData.Leafs.Append("sby-time", types.YLeaf{"SbyTime", timers.SbyTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance
// Set Route Distance
type InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Normal Route Distance. The type is interface{} with range: 0..256. The
    // default value is 150.
    DistNorm interface{}

    // Priority Route Distance. The type is interface{} with range: 0..256. The
    // default value is 5.
    DistPrio interface{}
}

func (distance *InterfaceConfigurations_InterfaceConfiguration_Dagrs_Dagr_Sub_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "sub"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-arp-cfg:dagrs/dagr/sub/" + distance.EntityData.SegmentPath
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = types.NewOrderedMap()
    distance.EntityData.Leafs = types.NewOrderedMap()
    distance.EntityData.Leafs.Append("dist-norm", types.YLeaf{"DistNorm", distance.DistNorm})
    distance.EntityData.Leafs.Append("dist-prio", types.YLeaf{"DistPrio", distance.DistPrio})

    distance.EntityData.YListKeys = []string {}

    return &(distance.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4arp
// Configure Address Resolution Protocol
type InterfaceConfigurations_InterfaceConfiguration_Ipv4arp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable the dynamic learning of ARP entries(for local subnet) on the
    // interface. The type is interface{}.
    LearningLocal interface{}

    // Number of seconds for ARP drop adjacency timeout. The type is interface{}
    // with range: 900..7200. Units are second. The default value is 3600.
    DropAdjTimeout interface{}

    // ARP learning solicited configuration. The type is interface{}.
    LearningSolicited interface{}

    // Ignore the receipt of Gratuitous ARP packets on the interface. The type is
    // interface{}.
    GratuitousIgnore interface{}

    // Proxy ARP configuration. The type is interface{}.
    ProxyArp interface{}

    // Time to delay purging arp entries when the interface goes down. The type is
    // interface{} with range: 1..65535.
    PurgeDelay interface{}

    // Disable the dynamic learning of ARP entries on the interface. The type is
    // interface{}.
    LearningDisable interface{}

    // Local Proxy ARP configuration. The type is interface{}.
    LocalProxyArp interface{}

    // Number of seconds for ARP cache timeout. The type is interface{} with
    // range: 30..2144448000. Units are second.
    Timeout interface{}
}

func (ipv4arp *InterfaceConfigurations_InterfaceConfiguration_Ipv4arp) GetEntityData() *types.CommonEntityData {
    ipv4arp.EntityData.YFilter = ipv4arp.YFilter
    ipv4arp.EntityData.YangName = "ipv4arp"
    ipv4arp.EntityData.BundleName = "cisco_ios_xr"
    ipv4arp.EntityData.ParentYangName = "interface-configuration"
    ipv4arp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"
    ipv4arp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4arp.EntityData.SegmentPath
    ipv4arp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4arp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4arp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4arp.EntityData.Children = types.NewOrderedMap()
    ipv4arp.EntityData.Leafs = types.NewOrderedMap()
    ipv4arp.EntityData.Leafs.Append("learning-local", types.YLeaf{"LearningLocal", ipv4arp.LearningLocal})
    ipv4arp.EntityData.Leafs.Append("drop-adj-timeout", types.YLeaf{"DropAdjTimeout", ipv4arp.DropAdjTimeout})
    ipv4arp.EntityData.Leafs.Append("learning-solicited", types.YLeaf{"LearningSolicited", ipv4arp.LearningSolicited})
    ipv4arp.EntityData.Leafs.Append("gratuitous-ignore", types.YLeaf{"GratuitousIgnore", ipv4arp.GratuitousIgnore})
    ipv4arp.EntityData.Leafs.Append("proxy-arp", types.YLeaf{"ProxyArp", ipv4arp.ProxyArp})
    ipv4arp.EntityData.Leafs.Append("purge-delay", types.YLeaf{"PurgeDelay", ipv4arp.PurgeDelay})
    ipv4arp.EntityData.Leafs.Append("learning-disable", types.YLeaf{"LearningDisable", ipv4arp.LearningDisable})
    ipv4arp.EntityData.Leafs.Append("local-proxy-arp", types.YLeaf{"LocalProxyArp", ipv4arp.LocalProxyArp})
    ipv4arp.EntityData.Leafs.Append("timeout", types.YLeaf{"Timeout", ipv4arp.Timeout})

    ipv4arp.EntityData.YListKeys = []string {}

    return &(ipv4arp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig
// Interface IPv4 dhcp-addres-client-options
// configuration
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // ipv4 address dhcp-client-options is enabled. The type is interface{}. This
    // attribute is mandatory.
    Ipv4DhcpClient interface{}

    // Option 61.
    Option61Config InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option61Config

    // Option 60.
    Option60Config InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option60Config

    // Option 77.
    Option77Config InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option77Config
}

func (ipv4DhcpClientConfig *InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig) GetEntityData() *types.CommonEntityData {
    ipv4DhcpClientConfig.EntityData.YFilter = ipv4DhcpClientConfig.YFilter
    ipv4DhcpClientConfig.EntityData.YangName = "ipv4-dhcp-client-config"
    ipv4DhcpClientConfig.EntityData.BundleName = "cisco_ios_xr"
    ipv4DhcpClientConfig.EntityData.ParentYangName = "interface-configuration"
    ipv4DhcpClientConfig.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-dc-cfg:ipv4-dhcp-client-config"
    ipv4DhcpClientConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4DhcpClientConfig.EntityData.SegmentPath
    ipv4DhcpClientConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DhcpClientConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DhcpClientConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DhcpClientConfig.EntityData.Children = types.NewOrderedMap()
    ipv4DhcpClientConfig.EntityData.Children.Append("option61-config", types.YChild{"Option61Config", &ipv4DhcpClientConfig.Option61Config})
    ipv4DhcpClientConfig.EntityData.Children.Append("option60-config", types.YChild{"Option60Config", &ipv4DhcpClientConfig.Option60Config})
    ipv4DhcpClientConfig.EntityData.Children.Append("option77-config", types.YChild{"Option77Config", &ipv4DhcpClientConfig.Option77Config})
    ipv4DhcpClientConfig.EntityData.Leafs = types.NewOrderedMap()
    ipv4DhcpClientConfig.EntityData.Leafs.Append("ipv4-dhcp-client", types.YLeaf{"Ipv4DhcpClient", ipv4DhcpClientConfig.Ipv4DhcpClient})

    ipv4DhcpClientConfig.EntityData.YListKeys = []string {}

    return &(ipv4DhcpClientConfig.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option61Config
// Option 61
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option61Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Option 61. The type is Option61. This attribute is mandatory.
    Opt61 interface{}

    // Option 61 is enabled. The type is Opt61Sub. This attribute is mandatory.
    Subtype interface{}

    // Enter ascii string. The type is string with length: 1..255. This attribute
    // is mandatory.
    AsciiString interface{}
}

func (option61Config *InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option61Config) GetEntityData() *types.CommonEntityData {
    option61Config.EntityData.YFilter = option61Config.YFilter
    option61Config.EntityData.YangName = "option61-config"
    option61Config.EntityData.BundleName = "cisco_ios_xr"
    option61Config.EntityData.ParentYangName = "ipv4-dhcp-client-config"
    option61Config.EntityData.SegmentPath = "option61-config"
    option61Config.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-dc-cfg:ipv4-dhcp-client-config/" + option61Config.EntityData.SegmentPath
    option61Config.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    option61Config.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    option61Config.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    option61Config.EntityData.Children = types.NewOrderedMap()
    option61Config.EntityData.Leafs = types.NewOrderedMap()
    option61Config.EntityData.Leafs.Append("opt61", types.YLeaf{"Opt61", option61Config.Opt61})
    option61Config.EntityData.Leafs.Append("subtype", types.YLeaf{"Subtype", option61Config.Subtype})
    option61Config.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", option61Config.AsciiString})

    option61Config.EntityData.YListKeys = []string {}

    return &(option61Config.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option60Config
// Option 60
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option60Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Option 60. The type is Option60. This attribute is mandatory.
    Opt60 interface{}

    // Option 60 is enabled. The type is interface{}. This attribute is mandatory.
    Enable interface{}

    // Enter ascii string. The type is string with length: 1..255. This attribute
    // is mandatory.
    AsciiString interface{}
}

func (option60Config *InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option60Config) GetEntityData() *types.CommonEntityData {
    option60Config.EntityData.YFilter = option60Config.YFilter
    option60Config.EntityData.YangName = "option60-config"
    option60Config.EntityData.BundleName = "cisco_ios_xr"
    option60Config.EntityData.ParentYangName = "ipv4-dhcp-client-config"
    option60Config.EntityData.SegmentPath = "option60-config"
    option60Config.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-dc-cfg:ipv4-dhcp-client-config/" + option60Config.EntityData.SegmentPath
    option60Config.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    option60Config.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    option60Config.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    option60Config.EntityData.Children = types.NewOrderedMap()
    option60Config.EntityData.Leafs = types.NewOrderedMap()
    option60Config.EntityData.Leafs.Append("opt60", types.YLeaf{"Opt60", option60Config.Opt60})
    option60Config.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", option60Config.Enable})
    option60Config.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", option60Config.AsciiString})

    option60Config.EntityData.YListKeys = []string {}

    return &(option60Config.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option77Config
// Option 77
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option77Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Option 77. The type is Option77. This attribute is mandatory.
    Opt77 interface{}

    // Option 77 is enabled. The type is interface{}. This attribute is mandatory.
    Enable interface{}

    // Enter ascii string. The type is string with length: 1..255. This attribute
    // is mandatory.
    AsciiString interface{}
}

func (option77Config *InterfaceConfigurations_InterfaceConfiguration_Ipv4DhcpClientConfig_Option77Config) GetEntityData() *types.CommonEntityData {
    option77Config.EntityData.YFilter = option77Config.YFilter
    option77Config.EntityData.YangName = "option77-config"
    option77Config.EntityData.BundleName = "cisco_ios_xr"
    option77Config.EntityData.ParentYangName = "ipv4-dhcp-client-config"
    option77Config.EntityData.SegmentPath = "option77-config"
    option77Config.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-dc-cfg:ipv4-dhcp-client-config/" + option77Config.EntityData.SegmentPath
    option77Config.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    option77Config.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    option77Config.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    option77Config.EntityData.Children = types.NewOrderedMap()
    option77Config.EntityData.Leafs = types.NewOrderedMap()
    option77Config.EntityData.Leafs.Append("opt77", types.YLeaf{"Opt77", option77Config.Opt77})
    option77Config.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", option77Config.Enable})
    option77Config.EntityData.Leafs.Append("ascii-string", types.YLeaf{"AsciiString", option77Config.AsciiString})

    option77Config.EntityData.YListKeys = []string {}

    return &(option77Config.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network
// Interface IPv4 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 forwarding to get enabled on an interface. The type is interface{}.
    ForwardingEnable interface{}

    // The flag for enabling sending of ICMP mask reply messages. The type is
    // interface{}.
    IcmpMaskReply interface{}

    // Enable TCP MSS Adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Disable TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable point-to-point handling for this interface. The type is interface{}.
    PointToPoint interface{}

    // The IP Maximum Transmission Unit. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // Interface ipv4 bgp configuration.
    BgpPa InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa

    // Enable Verify handling for this interface.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify

    // Interface ipv4 bgp configuration.
    Bgp InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp

    // Set the IP address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses

    // The set of IP destination addresses for UDP broadcasts.
    HelperAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
}

func (ipv4Network *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network) GetEntityData() *types.CommonEntityData {
    ipv4Network.EntityData.YFilter = ipv4Network.YFilter
    ipv4Network.EntityData.YangName = "ipv4-network"
    ipv4Network.EntityData.BundleName = "cisco_ios_xr"
    ipv4Network.EntityData.ParentYangName = "interface-configuration"
    ipv4Network.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"
    ipv4Network.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4Network.EntityData.SegmentPath
    ipv4Network.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Network.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Network.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Network.EntityData.Children = types.NewOrderedMap()
    ipv4Network.EntityData.Children.Append("bgp-pa", types.YChild{"BgpPa", &ipv4Network.BgpPa})
    ipv4Network.EntityData.Children.Append("verify", types.YChild{"Verify", &ipv4Network.Verify})
    ipv4Network.EntityData.Children.Append("bgp", types.YChild{"Bgp", &ipv4Network.Bgp})
    ipv4Network.EntityData.Children.Append("addresses", types.YChild{"Addresses", &ipv4Network.Addresses})
    ipv4Network.EntityData.Children.Append("helper-addresses", types.YChild{"HelperAddresses", &ipv4Network.HelperAddresses})
    ipv4Network.EntityData.Leafs = types.NewOrderedMap()
    ipv4Network.EntityData.Leafs.Append("forwarding-enable", types.YLeaf{"ForwardingEnable", ipv4Network.ForwardingEnable})
    ipv4Network.EntityData.Leafs.Append("icmp-mask-reply", types.YLeaf{"IcmpMaskReply", ipv4Network.IcmpMaskReply})
    ipv4Network.EntityData.Leafs.Append("tcp-mss-adjust-enable", types.YLeaf{"TcpMssAdjustEnable", ipv4Network.TcpMssAdjustEnable})
    ipv4Network.EntityData.Leafs.Append("ttl-propagate-disable", types.YLeaf{"TtlPropagateDisable", ipv4Network.TtlPropagateDisable})
    ipv4Network.EntityData.Leafs.Append("point-to-point", types.YLeaf{"PointToPoint", ipv4Network.PointToPoint})
    ipv4Network.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", ipv4Network.Mtu})

    ipv4Network.EntityData.YListKeys = []string {}

    return &(ipv4Network.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input

    // Output.
    Output InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
}

func (bgpPa *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa) GetEntityData() *types.CommonEntityData {
    bgpPa.EntityData.YFilter = bgpPa.YFilter
    bgpPa.EntityData.YangName = "bgp-pa"
    bgpPa.EntityData.BundleName = "cisco_ios_xr"
    bgpPa.EntityData.ParentYangName = "ipv4-network"
    bgpPa.EntityData.SegmentPath = "bgp-pa"
    bgpPa.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/" + bgpPa.EntityData.SegmentPath
    bgpPa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPa.EntityData.Children = types.NewOrderedMap()
    bgpPa.EntityData.Children.Append("input", types.YChild{"Input", &bgpPa.Input})
    bgpPa.EntityData.Children.Append("output", types.YChild{"Output", &bgpPa.Output})
    bgpPa.EntityData.Leafs = types.NewOrderedMap()

    bgpPa.EntityData.YListKeys = []string {}

    return &(bgpPa.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "bgp-pa"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp-pa/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("source-accounting", types.YLeaf{"SourceAccounting", input.SourceAccounting})
    input.EntityData.Leafs.Append("destination-accounting", types.YLeaf{"DestinationAccounting", input.DestinationAccounting})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output
// Output
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP PA configuration on source. The type is bool.
    SourceAccounting interface{}

    // BGP PA configuration on destination. The type is bool.
    DestinationAccounting interface{}
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_BgpPa_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "bgp-pa"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp-pa/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Leafs = types.NewOrderedMap()
    output.EntityData.Leafs.Append("source-accounting", types.YLeaf{"SourceAccounting", output.SourceAccounting})
    output.EntityData.Leafs.Append("destination-accounting", types.YLeaf{"DestinationAccounting", output.DestinationAccounting})

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify
// Enable Verify handling for this interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source is reachable via any interface or interface on which packet was
    // received. The type is Ipv4Reachable.
    Reachable interface{}

    // Allow router to ping itself (opens vulnerability in verification). The type
    // is Ipv4SelfPing.
    SelfPing interface{}

    // Allow default route to match when checking source address. The type is
    // Ipv4DefaultPing.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Verify) GetEntityData() *types.CommonEntityData {
    verify.EntityData.YFilter = verify.YFilter
    verify.EntityData.YangName = "verify"
    verify.EntityData.BundleName = "cisco_ios_xr"
    verify.EntityData.ParentYangName = "ipv4-network"
    verify.EntityData.SegmentPath = "verify"
    verify.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/" + verify.EntityData.SegmentPath
    verify.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    verify.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    verify.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    verify.EntityData.Children = types.NewOrderedMap()
    verify.EntityData.Leafs = types.NewOrderedMap()
    verify.EntityData.Leafs.Append("reachable", types.YLeaf{"Reachable", verify.Reachable})
    verify.EntityData.Leafs.Append("self-ping", types.YLeaf{"SelfPing", verify.SelfPing})
    verify.EntityData.Leafs.Append("default-ping", types.YLeaf{"DefaultPing", verify.DefaultPing})

    verify.EntityData.YListKeys = []string {}

    return &(verify.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp
// Interface ipv4 bgp configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface ipv4 bgp policy propagation configuration.
    Qppb InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb

    // Interface ipv4 bgp policy propagation flow tag configuration.
    FlowTag InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
}

func (bgp *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "ipv4-network"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/" + bgp.EntityData.SegmentPath
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = types.NewOrderedMap()
    bgp.EntityData.Children.Append("qppb", types.YChild{"Qppb", &bgp.Qppb})
    bgp.EntityData.Children.Append("flow-tag", types.YChild{"FlowTag", &bgp.FlowTag})
    bgp.EntityData.Leafs = types.NewOrderedMap()

    bgp.EntityData.YListKeys = []string {}

    return &(bgp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb
// Interface ipv4 bgp policy propagation
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    Input InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
}

func (qppb *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb) GetEntityData() *types.CommonEntityData {
    qppb.EntityData.YFilter = qppb.YFilter
    qppb.EntityData.YangName = "qppb"
    qppb.EntityData.BundleName = "cisco_ios_xr"
    qppb.EntityData.ParentYangName = "bgp"
    qppb.EntityData.SegmentPath = "qppb"
    qppb.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp/" + qppb.EntityData.SegmentPath
    qppb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qppb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qppb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qppb.EntityData.Children = types.NewOrderedMap()
    qppb.EntityData.Children.Append("input", types.YChild{"Input", &qppb.Input})
    qppb.EntityData.Leafs = types.NewOrderedMap()

    qppb.EntityData.YListKeys = []string {}

    return &(qppb.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // QPPB configuration on source. The type is Ipv4InterfaceQppb.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv4InterfaceQppb.
    Destination interface{}
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_Qppb_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qppb"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp/qppb/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("source", types.YLeaf{"Source", input.Source})
    input.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", input.Destination})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag
// Interface ipv4 bgp policy propagation flow tag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    FlowTagInput InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
}

func (flowTag *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag) GetEntityData() *types.CommonEntityData {
    flowTag.EntityData.YFilter = flowTag.YFilter
    flowTag.EntityData.YangName = "flow-tag"
    flowTag.EntityData.BundleName = "cisco_ios_xr"
    flowTag.EntityData.ParentYangName = "bgp"
    flowTag.EntityData.SegmentPath = "flow-tag"
    flowTag.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp/" + flowTag.EntityData.SegmentPath
    flowTag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowTag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowTag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowTag.EntityData.Children = types.NewOrderedMap()
    flowTag.EntityData.Children.Append("flow-tag-input", types.YChild{"FlowTagInput", &flowTag.FlowTagInput})
    flowTag.EntityData.Leafs = types.NewOrderedMap()

    flowTag.EntityData.YListKeys = []string {}

    return &(flowTag.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowTag configuration on source. The type is bool.
    Source interface{}

    // FlowTag configuration on destination. The type is bool.
    Destination interface{}
}

func (flowTagInput *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Bgp_FlowTag_FlowTagInput) GetEntityData() *types.CommonEntityData {
    flowTagInput.EntityData.YFilter = flowTagInput.YFilter
    flowTagInput.EntityData.YangName = "flow-tag-input"
    flowTagInput.EntityData.BundleName = "cisco_ios_xr"
    flowTagInput.EntityData.ParentYangName = "flow-tag"
    flowTagInput.EntityData.SegmentPath = "flow-tag-input"
    flowTagInput.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/bgp/flow-tag/" + flowTagInput.EntityData.SegmentPath
    flowTagInput.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowTagInput.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowTagInput.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowTagInput.EntityData.Children = types.NewOrderedMap()
    flowTagInput.EntityData.Leafs = types.NewOrderedMap()
    flowTagInput.EntityData.Leafs.Append("source", types.YLeaf{"Source", flowTagInput.Source})
    flowTagInput.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", flowTagInput.Destination})

    flowTagInput.EntityData.YListKeys = []string {}

    return &(flowTagInput.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses
// Set the IP address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable IP processing without an explicit address. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    Unnumbered interface{}

    // IPv4 address and Mask negotiated via DHCP. The type is interface{}.
    Dhcp interface{}

    // Specify a secondary address.
    Secondaries InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries

    // IP address and Mask.
    Primary InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses) GetEntityData() *types.CommonEntityData {
    addresses.EntityData.YFilter = addresses.YFilter
    addresses.EntityData.YangName = "addresses"
    addresses.EntityData.BundleName = "cisco_ios_xr"
    addresses.EntityData.ParentYangName = "ipv4-network"
    addresses.EntityData.SegmentPath = "addresses"
    addresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/" + addresses.EntityData.SegmentPath
    addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addresses.EntityData.Children = types.NewOrderedMap()
    addresses.EntityData.Children.Append("secondaries", types.YChild{"Secondaries", &addresses.Secondaries})
    addresses.EntityData.Children.Append("primary", types.YChild{"Primary", &addresses.Primary})
    addresses.EntityData.Leafs = types.NewOrderedMap()
    addresses.EntityData.Leafs.Append("unnumbered", types.YLeaf{"Unnumbered", addresses.Unnumbered})
    addresses.EntityData.Leafs.Append("dhcp", types.YLeaf{"Dhcp", addresses.Dhcp})

    addresses.EntityData.YListKeys = []string {}

    return &(addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries
// Specify a secondary address
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address and Mask. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary.
    Secondary []*InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
}

func (secondaries *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries) GetEntityData() *types.CommonEntityData {
    secondaries.EntityData.YFilter = secondaries.YFilter
    secondaries.EntityData.YangName = "secondaries"
    secondaries.EntityData.BundleName = "cisco_ios_xr"
    secondaries.EntityData.ParentYangName = "addresses"
    secondaries.EntityData.SegmentPath = "secondaries"
    secondaries.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/addresses/" + secondaries.EntityData.SegmentPath
    secondaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaries.EntityData.Children = types.NewOrderedMap()
    secondaries.EntityData.Children.Append("secondary", types.YChild{"Secondary", nil})
    for i := range secondaries.Secondary {
        secondaries.EntityData.Children.Append(types.GetSegmentPath(secondaries.Secondary[i]), types.YChild{"Secondary", secondaries.Secondary[i]})
    }
    secondaries.EntityData.Leafs = types.NewOrderedMap()

    secondaries.EntityData.YListKeys = []string {}

    return &(secondaries.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary
// IP address and Mask
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secondary IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (secondary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Secondaries_Secondary) GetEntityData() *types.CommonEntityData {
    secondary.EntityData.YFilter = secondary.YFilter
    secondary.EntityData.YangName = "secondary"
    secondary.EntityData.BundleName = "cisco_ios_xr"
    secondary.EntityData.ParentYangName = "secondaries"
    secondary.EntityData.SegmentPath = "secondary" + types.AddKeyToken(secondary.Address, "address")
    secondary.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/addresses/secondaries/" + secondary.EntityData.SegmentPath
    secondary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondary.EntityData.Children = types.NewOrderedMap()
    secondary.EntityData.Leafs = types.NewOrderedMap()
    secondary.EntityData.Leafs.Append("address", types.YLeaf{"Address", secondary.Address})
    secondary.EntityData.Leafs.Append("netmask", types.YLeaf{"Netmask", secondary.Netmask})
    secondary.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", secondary.RouteTag})

    secondary.EntityData.YListKeys = []string {"Address"}

    return &(secondary.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary
// IP address and Mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Address interface{}

    // Netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    Netmask interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (primary *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_Addresses_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "addresses"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/addresses/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("address", types.YLeaf{"Address", primary.Address})
    primary.EntityData.Leafs.Append("netmask", types.YLeaf{"Netmask", primary.Netmask})
    primary.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", primary.RouteTag})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses
// The set of IP destination addresses for UDP
// broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IP destination addresses for UDP broadcasts. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress.
    HelperAddress []*InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
}

func (helperAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses) GetEntityData() *types.CommonEntityData {
    helperAddresses.EntityData.YFilter = helperAddresses.YFilter
    helperAddresses.EntityData.YangName = "helper-addresses"
    helperAddresses.EntityData.BundleName = "cisco_ios_xr"
    helperAddresses.EntityData.ParentYangName = "ipv4-network"
    helperAddresses.EntityData.SegmentPath = "helper-addresses"
    helperAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/" + helperAddresses.EntityData.SegmentPath
    helperAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helperAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helperAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helperAddresses.EntityData.Children = types.NewOrderedMap()
    helperAddresses.EntityData.Children.Append("helper-address", types.YChild{"HelperAddress", nil})
    for i := range helperAddresses.HelperAddress {
        helperAddresses.EntityData.Children.Append(types.GetSegmentPath(helperAddresses.HelperAddress[i]), types.YChild{"HelperAddress", helperAddresses.HelperAddress[i]})
    }
    helperAddresses.EntityData.Leafs = types.NewOrderedMap()

    helperAddresses.EntityData.YListKeys = []string {}

    return &(helperAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress
// An IP destination addresses for UDP broadcasts
type InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IP destination address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. VRF name. The type is string with length: 1..32.
    VrfName interface{}
}

func (helperAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv4Network_HelperAddresses_HelperAddress) GetEntityData() *types.CommonEntityData {
    helperAddress.EntityData.YFilter = helperAddress.YFilter
    helperAddress.EntityData.YangName = "helper-address"
    helperAddress.EntityData.BundleName = "cisco_ios_xr"
    helperAddress.EntityData.ParentYangName = "helper-addresses"
    helperAddress.EntityData.SegmentPath = "helper-address" + types.AddKeyToken(helperAddress.Address, "address") + types.AddKeyToken(helperAddress.VrfName, "vrf-name")
    helperAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network/helper-addresses/" + helperAddress.EntityData.SegmentPath
    helperAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helperAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helperAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helperAddress.EntityData.Children = types.NewOrderedMap()
    helperAddress.EntityData.Leafs = types.NewOrderedMap()
    helperAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", helperAddress.Address})
    helperAddress.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", helperAddress.VrfName})

    helperAddress.EntityData.YListKeys = []string {"Address", "VrfName"}

    return &(helperAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding
// Interface IPv4 Network configuration data also
// used for forwarding
type InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable forwarding of directed broadcast. The type is interface{}.
    DirectedBroadcast interface{}

    // Disable sending ICMP unreachables. The type is interface{}.
    Unreachables interface{}

    // Enable sending ICMP Redirect messages. The type is interface{}.
    Redirects interface{}
}

func (ipv4NetworkForwarding *InterfaceConfigurations_InterfaceConfiguration_Ipv4NetworkForwarding) GetEntityData() *types.CommonEntityData {
    ipv4NetworkForwarding.EntityData.YFilter = ipv4NetworkForwarding.YFilter
    ipv4NetworkForwarding.EntityData.YangName = "ipv4-network-forwarding"
    ipv4NetworkForwarding.EntityData.BundleName = "cisco_ios_xr"
    ipv4NetworkForwarding.EntityData.ParentYangName = "interface-configuration"
    ipv4NetworkForwarding.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"
    ipv4NetworkForwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv4NetworkForwarding.EntityData.SegmentPath
    ipv4NetworkForwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4NetworkForwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4NetworkForwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4NetworkForwarding.EntityData.Children = types.NewOrderedMap()
    ipv4NetworkForwarding.EntityData.Leafs = types.NewOrderedMap()
    ipv4NetworkForwarding.EntityData.Leafs.Append("directed-broadcast", types.YLeaf{"DirectedBroadcast", ipv4NetworkForwarding.DirectedBroadcast})
    ipv4NetworkForwarding.EntityData.Leafs.Append("unreachables", types.YLeaf{"Unreachables", ipv4NetworkForwarding.Unreachables})
    ipv4NetworkForwarding.EntityData.Leafs.Append("redirects", types.YLeaf{"Redirects", ipv4NetworkForwarding.Redirects})

    ipv4NetworkForwarding.EntityData.YListKeys = []string {}

    return &(ipv4NetworkForwarding.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network
// Interface IPv6 Network configuration data
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MTU Setting of Interface. The type is interface{} with range: 1280..65535.
    Mtu interface{}

    // Enable IPv6 processing without an explicit address. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    Unnumbered interface{}

    // Disabled TTL propagate on an interface. The type is interface{}.
    TtlPropagateDisable interface{}

    // Enable TCP MSS adjust on an interface. The type is interface{}.
    TcpMssAdjustEnable interface{}

    // Override Sending of ICMP Unreachable Messages. The type is interface{}.
    Unreachables interface{}

    // Configure BGP QoS policy propagation.
    BgpQosPolicyPropagation InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation

    // IPv6 BGP Policy Accounting.
    BgpPolicyAccountings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings

    // IPv6 Verify Unicast Souce Reachable.
    Verify InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify

    // Set the IPv6 address of an interface.
    Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses

    // Interface ipv6 bgp policy propagation flowtag configuration.
    BgpFlowTagPolicyTable InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
}

func (ipv6Network *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network) GetEntityData() *types.CommonEntityData {
    ipv6Network.EntityData.YFilter = ipv6Network.YFilter
    ipv6Network.EntityData.YangName = "ipv6-network"
    ipv6Network.EntityData.BundleName = "cisco_ios_xr"
    ipv6Network.EntityData.ParentYangName = "interface-configuration"
    ipv6Network.EntityData.SegmentPath = "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"
    ipv6Network.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv6Network.EntityData.SegmentPath
    ipv6Network.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Network.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Network.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Network.EntityData.Children = types.NewOrderedMap()
    ipv6Network.EntityData.Children.Append("bgp-qos-policy-propagation", types.YChild{"BgpQosPolicyPropagation", &ipv6Network.BgpQosPolicyPropagation})
    ipv6Network.EntityData.Children.Append("bgp-policy-accountings", types.YChild{"BgpPolicyAccountings", &ipv6Network.BgpPolicyAccountings})
    ipv6Network.EntityData.Children.Append("verify", types.YChild{"Verify", &ipv6Network.Verify})
    ipv6Network.EntityData.Children.Append("addresses", types.YChild{"Addresses", &ipv6Network.Addresses})
    ipv6Network.EntityData.Children.Append("bgp-flow-tag-policy-table", types.YChild{"BgpFlowTagPolicyTable", &ipv6Network.BgpFlowTagPolicyTable})
    ipv6Network.EntityData.Leafs = types.NewOrderedMap()
    ipv6Network.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", ipv6Network.Mtu})
    ipv6Network.EntityData.Leafs.Append("unnumbered", types.YLeaf{"Unnumbered", ipv6Network.Unnumbered})
    ipv6Network.EntityData.Leafs.Append("ttl-propagate-disable", types.YLeaf{"TtlPropagateDisable", ipv6Network.TtlPropagateDisable})
    ipv6Network.EntityData.Leafs.Append("tcp-mss-adjust-enable", types.YLeaf{"TcpMssAdjustEnable", ipv6Network.TcpMssAdjustEnable})
    ipv6Network.EntityData.Leafs.Append("unreachables", types.YLeaf{"Unreachables", ipv6Network.Unreachables})

    ipv6Network.EntityData.YListKeys = []string {}

    return &(ipv6Network.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation
// Configure BGP QoS policy propagation
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // QPPB configuration on source. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Source interface{}

    // QPPB configuration on destination. The type is Ipv6Qppb. This attribute is
    // mandatory.
    Destination interface{}
}

func (bgpQosPolicyPropagation *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpQosPolicyPropagation) GetEntityData() *types.CommonEntityData {
    bgpQosPolicyPropagation.EntityData.YFilter = bgpQosPolicyPropagation.YFilter
    bgpQosPolicyPropagation.EntityData.YangName = "bgp-qos-policy-propagation"
    bgpQosPolicyPropagation.EntityData.BundleName = "cisco_ios_xr"
    bgpQosPolicyPropagation.EntityData.ParentYangName = "ipv6-network"
    bgpQosPolicyPropagation.EntityData.SegmentPath = "bgp-qos-policy-propagation"
    bgpQosPolicyPropagation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/" + bgpQosPolicyPropagation.EntityData.SegmentPath
    bgpQosPolicyPropagation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpQosPolicyPropagation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpQosPolicyPropagation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpQosPolicyPropagation.EntityData.Children = types.NewOrderedMap()
    bgpQosPolicyPropagation.EntityData.Leafs = types.NewOrderedMap()
    bgpQosPolicyPropagation.EntityData.Leafs.Append("source", types.YLeaf{"Source", bgpQosPolicyPropagation.Source})
    bgpQosPolicyPropagation.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", bgpQosPolicyPropagation.Destination})

    bgpQosPolicyPropagation.EntityData.YListKeys = []string {}

    return &(bgpQosPolicyPropagation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings
// IPv6 BGP Policy Accounting
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accounting input or output. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting.
    BgpPolicyAccounting []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
}

func (bgpPolicyAccountings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings) GetEntityData() *types.CommonEntityData {
    bgpPolicyAccountings.EntityData.YFilter = bgpPolicyAccountings.YFilter
    bgpPolicyAccountings.EntityData.YangName = "bgp-policy-accountings"
    bgpPolicyAccountings.EntityData.BundleName = "cisco_ios_xr"
    bgpPolicyAccountings.EntityData.ParentYangName = "ipv6-network"
    bgpPolicyAccountings.EntityData.SegmentPath = "bgp-policy-accountings"
    bgpPolicyAccountings.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/" + bgpPolicyAccountings.EntityData.SegmentPath
    bgpPolicyAccountings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPolicyAccountings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPolicyAccountings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPolicyAccountings.EntityData.Children = types.NewOrderedMap()
    bgpPolicyAccountings.EntityData.Children.Append("bgp-policy-accounting", types.YChild{"BgpPolicyAccounting", nil})
    for i := range bgpPolicyAccountings.BgpPolicyAccounting {
        bgpPolicyAccountings.EntityData.Children.Append(types.GetSegmentPath(bgpPolicyAccountings.BgpPolicyAccounting[i]), types.YChild{"BgpPolicyAccounting", bgpPolicyAccountings.BgpPolicyAccounting[i]})
    }
    bgpPolicyAccountings.EntityData.Leafs = types.NewOrderedMap()

    bgpPolicyAccountings.EntityData.YListKeys = []string {}

    return &(bgpPolicyAccountings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting
// Accounting input or output
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Accouting on input or output. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Direction interface{}

    // Accounting on Destination IP Address. The type is bool. This attribute is
    // mandatory.
    DestinationAccounting interface{}

    // Accounting on Source IP Address. The type is bool. This attribute is
    // mandatory.
    SourceAccounting interface{}
}

func (bgpPolicyAccounting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpPolicyAccountings_BgpPolicyAccounting) GetEntityData() *types.CommonEntityData {
    bgpPolicyAccounting.EntityData.YFilter = bgpPolicyAccounting.YFilter
    bgpPolicyAccounting.EntityData.YangName = "bgp-policy-accounting"
    bgpPolicyAccounting.EntityData.BundleName = "cisco_ios_xr"
    bgpPolicyAccounting.EntityData.ParentYangName = "bgp-policy-accountings"
    bgpPolicyAccounting.EntityData.SegmentPath = "bgp-policy-accounting" + types.AddKeyToken(bgpPolicyAccounting.Direction, "direction")
    bgpPolicyAccounting.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/bgp-policy-accountings/" + bgpPolicyAccounting.EntityData.SegmentPath
    bgpPolicyAccounting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpPolicyAccounting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpPolicyAccounting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpPolicyAccounting.EntityData.Children = types.NewOrderedMap()
    bgpPolicyAccounting.EntityData.Leafs = types.NewOrderedMap()
    bgpPolicyAccounting.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", bgpPolicyAccounting.Direction})
    bgpPolicyAccounting.EntityData.Leafs.Append("destination-accounting", types.YLeaf{"DestinationAccounting", bgpPolicyAccounting.DestinationAccounting})
    bgpPolicyAccounting.EntityData.Leafs.Append("source-accounting", types.YLeaf{"SourceAccounting", bgpPolicyAccounting.SourceAccounting})

    bgpPolicyAccounting.EntityData.YListKeys = []string {"Direction"}

    return &(bgpPolicyAccounting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify
// IPv6 Verify Unicast Souce Reachable
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Source Reachable Interface. The type is Ipv6Reachable. This attribute is
    // mandatory.
    Reachable interface{}

    // Allow Self Ping. The type is Ipv6SelfPing. This attribute is mandatory.
    SelfPing interface{}

    // Allow Default Route. The type is Ipv6DefaultPing. This attribute is
    // mandatory.
    DefaultPing interface{}
}

func (verify *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Verify) GetEntityData() *types.CommonEntityData {
    verify.EntityData.YFilter = verify.YFilter
    verify.EntityData.YangName = "verify"
    verify.EntityData.BundleName = "cisco_ios_xr"
    verify.EntityData.ParentYangName = "ipv6-network"
    verify.EntityData.SegmentPath = "verify"
    verify.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/" + verify.EntityData.SegmentPath
    verify.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    verify.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    verify.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    verify.EntityData.Children = types.NewOrderedMap()
    verify.EntityData.Leafs = types.NewOrderedMap()
    verify.EntityData.Leafs.Append("reachable", types.YLeaf{"Reachable", verify.Reachable})
    verify.EntityData.Leafs.Append("self-ping", types.YLeaf{"SelfPing", verify.SelfPing})
    verify.EntityData.Leafs.Append("default-ping", types.YLeaf{"DefaultPing", verify.DefaultPing})

    verify.EntityData.YListKeys = []string {}

    return &(verify.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses
// Set the IPv6 address of an interface
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Table.
    SegmentRoutings InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings

    // Link local IPv6 address.
    LinkLocalAddress InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress

    // EUI-64 IPv6 address Table.
    Eui64Addresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses

    // Regular IPv6 address Table.
    RegularAddresses InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses

    // Auto IPv6 Interface Configuration.
    AutoConfiguration InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
}

func (addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses) GetEntityData() *types.CommonEntityData {
    addresses.EntityData.YFilter = addresses.YFilter
    addresses.EntityData.YangName = "addresses"
    addresses.EntityData.BundleName = "cisco_ios_xr"
    addresses.EntityData.ParentYangName = "ipv6-network"
    addresses.EntityData.SegmentPath = "addresses"
    addresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/" + addresses.EntityData.SegmentPath
    addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addresses.EntityData.Children = types.NewOrderedMap()
    addresses.EntityData.Children.Append("segment-routings", types.YChild{"SegmentRoutings", &addresses.SegmentRoutings})
    addresses.EntityData.Children.Append("link-local-address", types.YChild{"LinkLocalAddress", &addresses.LinkLocalAddress})
    addresses.EntityData.Children.Append("eui64-addresses", types.YChild{"Eui64Addresses", &addresses.Eui64Addresses})
    addresses.EntityData.Children.Append("regular-addresses", types.YChild{"RegularAddresses", &addresses.RegularAddresses})
    addresses.EntityData.Children.Append("auto-configuration", types.YChild{"AutoConfiguration", &addresses.AutoConfiguration})
    addresses.EntityData.Leafs = types.NewOrderedMap()

    addresses.EntityData.YListKeys = []string {}

    return &(addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings
// Segment Routing Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Submode . The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting.
    SegmentRouting []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
}

func (segmentRoutings *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings) GetEntityData() *types.CommonEntityData {
    segmentRoutings.EntityData.YFilter = segmentRoutings.YFilter
    segmentRoutings.EntityData.YangName = "segment-routings"
    segmentRoutings.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutings.EntityData.ParentYangName = "addresses"
    segmentRoutings.EntityData.SegmentPath = "segment-routings"
    segmentRoutings.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/" + segmentRoutings.EntityData.SegmentPath
    segmentRoutings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutings.EntityData.Children = types.NewOrderedMap()
    segmentRoutings.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", nil})
    for i := range segmentRoutings.SegmentRouting {
        segmentRoutings.EntityData.Children.Append(types.GetSegmentPath(segmentRoutings.SegmentRouting[i]), types.YChild{"SegmentRouting", segmentRoutings.SegmentRouting[i]})
    }
    segmentRoutings.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutings.EntityData.YListKeys = []string {}

    return &(segmentRoutings.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting
// Segment Routing Submode 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Segment Routing Submode. The type is interface{}.
    Enable interface{}

    // Prefix-Sid for Segment Routing.
    Ipv6PrefixSid InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
}

func (segmentRouting *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "segment-routings"
    segmentRouting.EntityData.SegmentPath = "segment-routing" + types.AddKeyToken(segmentRouting.Address, "address")
    segmentRouting.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/segment-routings/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("ipv6-prefix-sid", types.YChild{"Ipv6PrefixSid", &segmentRouting.Ipv6PrefixSid})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()
    segmentRouting.EntityData.Leafs.Append("address", types.YLeaf{"Address", segmentRouting.Address})
    segmentRouting.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", segmentRouting.Enable})

    segmentRouting.EntityData.YListKeys = []string {"Address"}

    return &(segmentRouting.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid
// Prefix-Sid for Segment Routing
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (ipv6PrefixSid *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_SegmentRoutings_SegmentRouting_Ipv6PrefixSid) GetEntityData() *types.CommonEntityData {
    ipv6PrefixSid.EntityData.YFilter = ipv6PrefixSid.YFilter
    ipv6PrefixSid.EntityData.YangName = "ipv6-prefix-sid"
    ipv6PrefixSid.EntityData.BundleName = "cisco_ios_xr"
    ipv6PrefixSid.EntityData.ParentYangName = "segment-routing"
    ipv6PrefixSid.EntityData.SegmentPath = "ipv6-prefix-sid"
    ipv6PrefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/segment-routings/segment-routing/" + ipv6PrefixSid.EntityData.SegmentPath
    ipv6PrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6PrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6PrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6PrefixSid.EntityData.Children = types.NewOrderedMap()
    ipv6PrefixSid.EntityData.Leafs = types.NewOrderedMap()
    ipv6PrefixSid.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6PrefixSid.PrefixLength})
    ipv6PrefixSid.EntityData.Leafs.Append("zone", types.YLeaf{"Zone", ipv6PrefixSid.Zone})
    ipv6PrefixSid.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", ipv6PrefixSid.RouteTag})

    ipv6PrefixSid.EntityData.YListKeys = []string {}

    return &(ipv6PrefixSid.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress
// Link local IPv6 address
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // IPv6 address. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'
    // This attribute is mandatory., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'
    // This attribute is mandatory..
    Address interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (linkLocalAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_LinkLocalAddress) GetEntityData() *types.CommonEntityData {
    linkLocalAddress.EntityData.YFilter = linkLocalAddress.YFilter
    linkLocalAddress.EntityData.YangName = "link-local-address"
    linkLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    linkLocalAddress.EntityData.ParentYangName = "addresses"
    linkLocalAddress.EntityData.SegmentPath = "link-local-address"
    linkLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/" + linkLocalAddress.EntityData.SegmentPath
    linkLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLocalAddress.EntityData.Children = types.NewOrderedMap()
    linkLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    linkLocalAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", linkLocalAddress.Address})
    linkLocalAddress.EntityData.Leafs.Append("zone", types.YLeaf{"Zone", linkLocalAddress.Zone})
    linkLocalAddress.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", linkLocalAddress.RouteTag})

    linkLocalAddress.EntityData.YListKeys = []string {}

    return &(linkLocalAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses
// EUI-64 IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EUI-64 IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address.
    Eui64Address []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
}

func (eui64Addresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses) GetEntityData() *types.CommonEntityData {
    eui64Addresses.EntityData.YFilter = eui64Addresses.YFilter
    eui64Addresses.EntityData.YangName = "eui64-addresses"
    eui64Addresses.EntityData.BundleName = "cisco_ios_xr"
    eui64Addresses.EntityData.ParentYangName = "addresses"
    eui64Addresses.EntityData.SegmentPath = "eui64-addresses"
    eui64Addresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/" + eui64Addresses.EntityData.SegmentPath
    eui64Addresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eui64Addresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eui64Addresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eui64Addresses.EntityData.Children = types.NewOrderedMap()
    eui64Addresses.EntityData.Children.Append("eui64-address", types.YChild{"Eui64Address", nil})
    for i := range eui64Addresses.Eui64Address {
        eui64Addresses.EntityData.Children.Append(types.GetSegmentPath(eui64Addresses.Eui64Address[i]), types.YChild{"Eui64Address", eui64Addresses.Eui64Address[i]})
    }
    eui64Addresses.EntityData.Leafs = types.NewOrderedMap()

    eui64Addresses.EntityData.YListKeys = []string {}

    return &(eui64Addresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address
// EUI-64 IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (eui64Address *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_Eui64Addresses_Eui64Address) GetEntityData() *types.CommonEntityData {
    eui64Address.EntityData.YFilter = eui64Address.YFilter
    eui64Address.EntityData.YangName = "eui64-address"
    eui64Address.EntityData.BundleName = "cisco_ios_xr"
    eui64Address.EntityData.ParentYangName = "eui64-addresses"
    eui64Address.EntityData.SegmentPath = "eui64-address" + types.AddKeyToken(eui64Address.Address, "address")
    eui64Address.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/eui64-addresses/" + eui64Address.EntityData.SegmentPath
    eui64Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eui64Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eui64Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eui64Address.EntityData.Children = types.NewOrderedMap()
    eui64Address.EntityData.Leafs = types.NewOrderedMap()
    eui64Address.EntityData.Leafs.Append("address", types.YLeaf{"Address", eui64Address.Address})
    eui64Address.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", eui64Address.PrefixLength})
    eui64Address.EntityData.Leafs.Append("zone", types.YLeaf{"Zone", eui64Address.Zone})
    eui64Address.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", eui64Address.RouteTag})

    eui64Address.EntityData.YListKeys = []string {"Address"}

    return &(eui64Address.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses
// Regular IPv6 address Table
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Regular IPv6 address. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress.
    RegularAddress []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
}

func (regularAddresses *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses) GetEntityData() *types.CommonEntityData {
    regularAddresses.EntityData.YFilter = regularAddresses.YFilter
    regularAddresses.EntityData.YangName = "regular-addresses"
    regularAddresses.EntityData.BundleName = "cisco_ios_xr"
    regularAddresses.EntityData.ParentYangName = "addresses"
    regularAddresses.EntityData.SegmentPath = "regular-addresses"
    regularAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/" + regularAddresses.EntityData.SegmentPath
    regularAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regularAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regularAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regularAddresses.EntityData.Children = types.NewOrderedMap()
    regularAddresses.EntityData.Children.Append("regular-address", types.YChild{"RegularAddress", nil})
    for i := range regularAddresses.RegularAddress {
        regularAddresses.EntityData.Children.Append(types.GetSegmentPath(regularAddresses.RegularAddress[i]), types.YChild{"RegularAddress", regularAddresses.RegularAddress[i]})
    }
    regularAddresses.EntityData.Leafs = types.NewOrderedMap()

    regularAddresses.EntityData.YListKeys = []string {}

    return &(regularAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress
// Regular IPv6 address
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 address. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..128. This attribute
    // is mandatory.
    PrefixLength interface{}

    // IPv6 address zone. The type is string. The default value is 0.
    Zone interface{}

    // RouteTag. The type is interface{} with range: 1..4294967295.
    RouteTag interface{}
}

func (regularAddress *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_RegularAddresses_RegularAddress) GetEntityData() *types.CommonEntityData {
    regularAddress.EntityData.YFilter = regularAddress.YFilter
    regularAddress.EntityData.YangName = "regular-address"
    regularAddress.EntityData.BundleName = "cisco_ios_xr"
    regularAddress.EntityData.ParentYangName = "regular-addresses"
    regularAddress.EntityData.SegmentPath = "regular-address" + types.AddKeyToken(regularAddress.Address, "address")
    regularAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/regular-addresses/" + regularAddress.EntityData.SegmentPath
    regularAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regularAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regularAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regularAddress.EntityData.Children = types.NewOrderedMap()
    regularAddress.EntityData.Leafs = types.NewOrderedMap()
    regularAddress.EntityData.Leafs.Append("address", types.YLeaf{"Address", regularAddress.Address})
    regularAddress.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", regularAddress.PrefixLength})
    regularAddress.EntityData.Leafs.Append("zone", types.YLeaf{"Zone", regularAddress.Zone})
    regularAddress.EntityData.Leafs.Append("route-tag", types.YLeaf{"RouteTag", regularAddress.RouteTag})

    regularAddress.EntityData.YListKeys = []string {"Address"}

    return &(regularAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration
// Auto IPv6 Interface Configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The flag to enable auto ipv6 interface configuration. The type is
    // interface{}.
    Enable interface{}

    // Enable slaac on Mgmt interface. The type is interface{}.
    AutoConfigSlaac interface{}
}

func (autoConfiguration *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_Addresses_AutoConfiguration) GetEntityData() *types.CommonEntityData {
    autoConfiguration.EntityData.YFilter = autoConfiguration.YFilter
    autoConfiguration.EntityData.YangName = "auto-configuration"
    autoConfiguration.EntityData.BundleName = "cisco_ios_xr"
    autoConfiguration.EntityData.ParentYangName = "addresses"
    autoConfiguration.EntityData.SegmentPath = "auto-configuration"
    autoConfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/addresses/" + autoConfiguration.EntityData.SegmentPath
    autoConfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfiguration.EntityData.Children = types.NewOrderedMap()
    autoConfiguration.EntityData.Leafs = types.NewOrderedMap()
    autoConfiguration.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", autoConfiguration.Enable})
    autoConfiguration.EntityData.Leafs.Append("auto-config-slaac", types.YLeaf{"AutoConfigSlaac", autoConfiguration.AutoConfigSlaac})

    autoConfiguration.EntityData.YListKeys = []string {}

    return &(autoConfiguration.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable
// Interface ipv6 bgp policy propagation flowtag
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Input.
    BgpFlowTagPolicy InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
}

func (bgpFlowTagPolicyTable *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable) GetEntityData() *types.CommonEntityData {
    bgpFlowTagPolicyTable.EntityData.YFilter = bgpFlowTagPolicyTable.YFilter
    bgpFlowTagPolicyTable.EntityData.YangName = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicyTable.EntityData.BundleName = "cisco_ios_xr"
    bgpFlowTagPolicyTable.EntityData.ParentYangName = "ipv6-network"
    bgpFlowTagPolicyTable.EntityData.SegmentPath = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicyTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/" + bgpFlowTagPolicyTable.EntityData.SegmentPath
    bgpFlowTagPolicyTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpFlowTagPolicyTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpFlowTagPolicyTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpFlowTagPolicyTable.EntityData.Children = types.NewOrderedMap()
    bgpFlowTagPolicyTable.EntityData.Children.Append("bgp-flow-tag-policy", types.YChild{"BgpFlowTagPolicy", &bgpFlowTagPolicyTable.BgpFlowTagPolicy})
    bgpFlowTagPolicyTable.EntityData.Leafs = types.NewOrderedMap()

    bgpFlowTagPolicyTable.EntityData.YListKeys = []string {}

    return &(bgpFlowTagPolicyTable.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy
// Input
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flow Tag configuration on source. The type is bool.
    Source interface{}

    // Flow Tag configuration on destination. The type is bool.
    Destination interface{}
}

func (bgpFlowTagPolicy *InterfaceConfigurations_InterfaceConfiguration_Ipv6Network_BgpFlowTagPolicyTable_BgpFlowTagPolicy) GetEntityData() *types.CommonEntityData {
    bgpFlowTagPolicy.EntityData.YFilter = bgpFlowTagPolicy.YFilter
    bgpFlowTagPolicy.EntityData.YangName = "bgp-flow-tag-policy"
    bgpFlowTagPolicy.EntityData.BundleName = "cisco_ios_xr"
    bgpFlowTagPolicy.EntityData.ParentYangName = "bgp-flow-tag-policy-table"
    bgpFlowTagPolicy.EntityData.SegmentPath = "bgp-flow-tag-policy"
    bgpFlowTagPolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network/bgp-flow-tag-policy-table/" + bgpFlowTagPolicy.EntityData.SegmentPath
    bgpFlowTagPolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpFlowTagPolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpFlowTagPolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpFlowTagPolicy.EntityData.Children = types.NewOrderedMap()
    bgpFlowTagPolicy.EntityData.Leafs = types.NewOrderedMap()
    bgpFlowTagPolicy.EntityData.Leafs.Append("source", types.YLeaf{"Source", bgpFlowTagPolicy.Source})
    bgpFlowTagPolicy.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", bgpFlowTagPolicy.Destination})

    bgpFlowTagPolicy.EntityData.YListKeys = []string {}

    return &(bgpFlowTagPolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor
// IPv6 interface neighbor or neighbor discovery
// configuration
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set advertised reachability time in milliseconds. The type is interface{}
    // with range: 0..3600000. Units are millisecond.
    ReachableTime interface{}

    // Unspecify IPv6 Router Advertisement (RA) hop-limit. The type is
    // interface{}.
    RaUnspecifyHoplimit interface{}

    // Set IPv6 duplicate address detection transmits. The type is interface{}
    // with range: 0..600.
    DadAttempts interface{}

    // Set SRP multicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpMulticastEncapsulation interface{}

    // Set advertised NS retransmission interval in milliseconds. The type is
    // interface{} with range: 1000..4294967295. Units are millisecond.
    NsInterval interface{}

    // Set the cache limit for neighbor entries. The type is interface{} with
    // range: 0..128000.
    CacheLimit interface{}

    // Enable sending of ICMP Redirect messages. The type is interface{}.
    Redirect interface{}

    // Set SRP unicast prefer encapsulation. The type is Ipv6srpEncapsulation.
    SrpUnicastEncapsulation interface{}

    // Enable suppress MTU in IPv6 router advertisement. The type is interface{}.
    RamtuSuppress interface{}

    // Host to use stateful protocol for address configuration. The type is
    // interface{}.
    ManagedConfig interface{}

    // Enable unicast IPv6 router advertisement. The type is interface{}.
    RaUnicast interface{}

    // Set IPv6 Router Advertisement (RA) lifetime in seconds. The type is
    // interface{} with range: 0..9000. Units are second.
    RaLifetime interface{}

    // Host to use stateful protocol for non-address configuration. The type is
    // interface{}.
    OtherConfig interface{}

    // Enable suppress IPv6 router advertisement. The type is interface{}.
    RaSuppress interface{}

    // RA Router Preference. The type is Ipv6NdRouterPref.
    RouterPreference interface{}

    // IPv6 Router Advertisement (RA) Specific Route.
    RaspecificRouteS InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS

    // IPv6 Router Advertisement (RA) DNS Search List.
    RadnsSearches InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches

    // IPv6 Router Advertisement (RA) DNS Servre.
    RadnsServers InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers

    // Set IPv6 Router Advertisement (RA) interval in seconds.
    RaInterval InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval

    // Prefixes .
    Ipv6Prefixes InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
}

func (ipv6Neighbor *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor) GetEntityData() *types.CommonEntityData {
    ipv6Neighbor.EntityData.YFilter = ipv6Neighbor.YFilter
    ipv6Neighbor.EntityData.YangName = "ipv6-neighbor"
    ipv6Neighbor.EntityData.BundleName = "cisco_ios_xr"
    ipv6Neighbor.EntityData.ParentYangName = "interface-configuration"
    ipv6Neighbor.EntityData.SegmentPath = "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"
    ipv6Neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ipv6Neighbor.EntityData.SegmentPath
    ipv6Neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Neighbor.EntityData.Children = types.NewOrderedMap()
    ipv6Neighbor.EntityData.Children.Append("raspecific-route-s", types.YChild{"RaspecificRouteS", &ipv6Neighbor.RaspecificRouteS})
    ipv6Neighbor.EntityData.Children.Append("radns-searches", types.YChild{"RadnsSearches", &ipv6Neighbor.RadnsSearches})
    ipv6Neighbor.EntityData.Children.Append("radns-servers", types.YChild{"RadnsServers", &ipv6Neighbor.RadnsServers})
    ipv6Neighbor.EntityData.Children.Append("ra-interval", types.YChild{"RaInterval", &ipv6Neighbor.RaInterval})
    ipv6Neighbor.EntityData.Children.Append("ipv6-prefixes", types.YChild{"Ipv6Prefixes", &ipv6Neighbor.Ipv6Prefixes})
    ipv6Neighbor.EntityData.Leafs = types.NewOrderedMap()
    ipv6Neighbor.EntityData.Leafs.Append("reachable-time", types.YLeaf{"ReachableTime", ipv6Neighbor.ReachableTime})
    ipv6Neighbor.EntityData.Leafs.Append("ra-unspecify-hoplimit", types.YLeaf{"RaUnspecifyHoplimit", ipv6Neighbor.RaUnspecifyHoplimit})
    ipv6Neighbor.EntityData.Leafs.Append("dad-attempts", types.YLeaf{"DadAttempts", ipv6Neighbor.DadAttempts})
    ipv6Neighbor.EntityData.Leafs.Append("srp-multicast-encapsulation", types.YLeaf{"SrpMulticastEncapsulation", ipv6Neighbor.SrpMulticastEncapsulation})
    ipv6Neighbor.EntityData.Leafs.Append("ns-interval", types.YLeaf{"NsInterval", ipv6Neighbor.NsInterval})
    ipv6Neighbor.EntityData.Leafs.Append("cache-limit", types.YLeaf{"CacheLimit", ipv6Neighbor.CacheLimit})
    ipv6Neighbor.EntityData.Leafs.Append("redirect", types.YLeaf{"Redirect", ipv6Neighbor.Redirect})
    ipv6Neighbor.EntityData.Leafs.Append("srp-unicast-encapsulation", types.YLeaf{"SrpUnicastEncapsulation", ipv6Neighbor.SrpUnicastEncapsulation})
    ipv6Neighbor.EntityData.Leafs.Append("ramtu-suppress", types.YLeaf{"RamtuSuppress", ipv6Neighbor.RamtuSuppress})
    ipv6Neighbor.EntityData.Leafs.Append("managed-config", types.YLeaf{"ManagedConfig", ipv6Neighbor.ManagedConfig})
    ipv6Neighbor.EntityData.Leafs.Append("ra-unicast", types.YLeaf{"RaUnicast", ipv6Neighbor.RaUnicast})
    ipv6Neighbor.EntityData.Leafs.Append("ra-lifetime", types.YLeaf{"RaLifetime", ipv6Neighbor.RaLifetime})
    ipv6Neighbor.EntityData.Leafs.Append("other-config", types.YLeaf{"OtherConfig", ipv6Neighbor.OtherConfig})
    ipv6Neighbor.EntityData.Leafs.Append("ra-suppress", types.YLeaf{"RaSuppress", ipv6Neighbor.RaSuppress})
    ipv6Neighbor.EntityData.Leafs.Append("router-preference", types.YLeaf{"RouterPreference", ipv6Neighbor.RouterPreference})

    ipv6Neighbor.EntityData.YListKeys = []string {}

    return &(ipv6Neighbor.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) Specific Route. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute.
    RaspecificRoute []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
}

func (raspecificRouteS *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS) GetEntityData() *types.CommonEntityData {
    raspecificRouteS.EntityData.YFilter = raspecificRouteS.YFilter
    raspecificRouteS.EntityData.YangName = "raspecific-route-s"
    raspecificRouteS.EntityData.BundleName = "cisco_ios_xr"
    raspecificRouteS.EntityData.ParentYangName = "ipv6-neighbor"
    raspecificRouteS.EntityData.SegmentPath = "raspecific-route-s"
    raspecificRouteS.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/" + raspecificRouteS.EntityData.SegmentPath
    raspecificRouteS.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raspecificRouteS.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raspecificRouteS.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raspecificRouteS.EntityData.Children = types.NewOrderedMap()
    raspecificRouteS.EntityData.Children.Append("raspecific-route", types.YChild{"RaspecificRoute", nil})
    for i := range raspecificRouteS.RaspecificRoute {
        raspecificRouteS.EntityData.Children.Append(types.GetSegmentPath(raspecificRouteS.RaspecificRoute[i]), types.YChild{"RaspecificRoute", raspecificRouteS.RaspecificRoute[i]})
    }
    raspecificRouteS.EntityData.Leafs = types.NewOrderedMap()

    raspecificRouteS.EntityData.YListKeys = []string {}

    return &(raspecificRouteS.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute
// IPv6 Router Advertisement (RA) Specific Route
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SpecificRoute interface{}

    // Prefix mask length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    Lifetime interface{}

    // Preference. The type is Ipv6NdRouterPref.
    Preference interface{}
}

func (raspecificRoute *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaspecificRouteS_RaspecificRoute) GetEntityData() *types.CommonEntityData {
    raspecificRoute.EntityData.YFilter = raspecificRoute.YFilter
    raspecificRoute.EntityData.YangName = "raspecific-route"
    raspecificRoute.EntityData.BundleName = "cisco_ios_xr"
    raspecificRoute.EntityData.ParentYangName = "raspecific-route-s"
    raspecificRoute.EntityData.SegmentPath = "raspecific-route" + types.AddKeyToken(raspecificRoute.SpecificRoute, "specific-route")
    raspecificRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/raspecific-route-s/" + raspecificRoute.EntityData.SegmentPath
    raspecificRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raspecificRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raspecificRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raspecificRoute.EntityData.Children = types.NewOrderedMap()
    raspecificRoute.EntityData.Leafs = types.NewOrderedMap()
    raspecificRoute.EntityData.Leafs.Append("specific-route", types.YLeaf{"SpecificRoute", raspecificRoute.SpecificRoute})
    raspecificRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", raspecificRoute.PrefixLength})
    raspecificRoute.EntityData.Leafs.Append("lifetime", types.YLeaf{"Lifetime", raspecificRoute.Lifetime})
    raspecificRoute.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", raspecificRoute.Preference})

    raspecificRoute.EntityData.YListKeys = []string {"SpecificRoute"}

    return &(raspecificRoute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Search List. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch.
    RadnsSearch []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
}

func (radnsSearches *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches) GetEntityData() *types.CommonEntityData {
    radnsSearches.EntityData.YFilter = radnsSearches.YFilter
    radnsSearches.EntityData.YangName = "radns-searches"
    radnsSearches.EntityData.BundleName = "cisco_ios_xr"
    radnsSearches.EntityData.ParentYangName = "ipv6-neighbor"
    radnsSearches.EntityData.SegmentPath = "radns-searches"
    radnsSearches.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/" + radnsSearches.EntityData.SegmentPath
    radnsSearches.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsSearches.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsSearches.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsSearches.EntityData.Children = types.NewOrderedMap()
    radnsSearches.EntityData.Children.Append("radns-search", types.YChild{"RadnsSearch", nil})
    for i := range radnsSearches.RadnsSearch {
        radnsSearches.EntityData.Children.Append(types.GetSegmentPath(radnsSearches.RadnsSearch[i]), types.YChild{"RadnsSearch", radnsSearches.RadnsSearch[i]})
    }
    radnsSearches.EntityData.Leafs = types.NewOrderedMap()

    radnsSearches.EntityData.YListKeys = []string {}

    return &(radnsSearches.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch
// IPv6 Router Advertisement (RA) DNS Search List
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Search List. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    DnsSearchList interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsSearch *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsSearches_RadnsSearch) GetEntityData() *types.CommonEntityData {
    radnsSearch.EntityData.YFilter = radnsSearch.YFilter
    radnsSearch.EntityData.YangName = "radns-search"
    radnsSearch.EntityData.BundleName = "cisco_ios_xr"
    radnsSearch.EntityData.ParentYangName = "radns-searches"
    radnsSearch.EntityData.SegmentPath = "radns-search" + types.AddKeyToken(radnsSearch.DnsSearchList, "dns-search-list")
    radnsSearch.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/radns-searches/" + radnsSearch.EntityData.SegmentPath
    radnsSearch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsSearch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsSearch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsSearch.EntityData.Children = types.NewOrderedMap()
    radnsSearch.EntityData.Leafs = types.NewOrderedMap()
    radnsSearch.EntityData.Leafs.Append("dns-search-list", types.YLeaf{"DnsSearchList", radnsSearch.DnsSearchList})
    radnsSearch.EntityData.Leafs.Append("lifetime", types.YLeaf{"Lifetime", radnsSearch.Lifetime})

    radnsSearch.EntityData.YListKeys = []string {"DnsSearchList"}

    return &(radnsSearch.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Router Advertisement (RA) DNS Servre. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer.
    RadnsServer []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
}

func (radnsServers *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers) GetEntityData() *types.CommonEntityData {
    radnsServers.EntityData.YFilter = radnsServers.YFilter
    radnsServers.EntityData.YangName = "radns-servers"
    radnsServers.EntityData.BundleName = "cisco_ios_xr"
    radnsServers.EntityData.ParentYangName = "ipv6-neighbor"
    radnsServers.EntityData.SegmentPath = "radns-servers"
    radnsServers.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/" + radnsServers.EntityData.SegmentPath
    radnsServers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsServers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsServers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsServers.EntityData.Children = types.NewOrderedMap()
    radnsServers.EntityData.Children.Append("radns-server", types.YChild{"RadnsServer", nil})
    for i := range radnsServers.RadnsServer {
        radnsServers.EntityData.Children.Append(types.GetSegmentPath(radnsServers.RadnsServer[i]), types.YChild{"RadnsServer", radnsServers.RadnsServer[i]})
    }
    radnsServers.EntityData.Leafs = types.NewOrderedMap()

    radnsServers.EntityData.YListKeys = []string {}

    return &(radnsServers.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer
// IPv6 Router Advertisement (RA) DNS Servre
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    DnsServer interface{}

    // Lifetime value in seconds. The type is interface{} with range: 4..3600.
    // This attribute is mandatory.
    Lifetime interface{}
}

func (radnsServer *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RadnsServers_RadnsServer) GetEntityData() *types.CommonEntityData {
    radnsServer.EntityData.YFilter = radnsServer.YFilter
    radnsServer.EntityData.YangName = "radns-server"
    radnsServer.EntityData.BundleName = "cisco_ios_xr"
    radnsServer.EntityData.ParentYangName = "radns-servers"
    radnsServer.EntityData.SegmentPath = "radns-server" + types.AddKeyToken(radnsServer.DnsServer, "dns-server")
    radnsServer.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/radns-servers/" + radnsServer.EntityData.SegmentPath
    radnsServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    radnsServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    radnsServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    radnsServer.EntityData.Children = types.NewOrderedMap()
    radnsServer.EntityData.Leafs = types.NewOrderedMap()
    radnsServer.EntityData.Leafs.Append("dns-server", types.YLeaf{"DnsServer", radnsServer.DnsServer})
    radnsServer.EntityData.Leafs.Append("lifetime", types.YLeaf{"Lifetime", radnsServer.Lifetime})

    radnsServer.EntityData.YListKeys = []string {"DnsServer"}

    return &(radnsServer.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval
// Set IPv6 Router Advertisement (RA) interval in
// seconds
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum RA interval in seconds. The type is interface{} with range:
    // 4..1800. This attribute is mandatory.
    Maximum interface{}

    // Minimum RA interval in seconds. Must be less than 0.75 * maximum interval.
    // The type is interface{} with range: 3..1800.
    Minimum interface{}
}

func (raInterval *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_RaInterval) GetEntityData() *types.CommonEntityData {
    raInterval.EntityData.YFilter = raInterval.YFilter
    raInterval.EntityData.YangName = "ra-interval"
    raInterval.EntityData.BundleName = "cisco_ios_xr"
    raInterval.EntityData.ParentYangName = "ipv6-neighbor"
    raInterval.EntityData.SegmentPath = "ra-interval"
    raInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/" + raInterval.EntityData.SegmentPath
    raInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    raInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    raInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    raInterval.EntityData.Children = types.NewOrderedMap()
    raInterval.EntityData.Leafs = types.NewOrderedMap()
    raInterval.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", raInterval.Maximum})
    raInterval.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", raInterval.Minimum})

    raInterval.EntityData.YListKeys = []string {}

    return &(raInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes
// Prefixes 
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure prefix with paramemters. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix.
    Ipv6Prefix []*InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
}

func (ipv6Prefixes *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes) GetEntityData() *types.CommonEntityData {
    ipv6Prefixes.EntityData.YFilter = ipv6Prefixes.YFilter
    ipv6Prefixes.EntityData.YangName = "ipv6-prefixes"
    ipv6Prefixes.EntityData.BundleName = "cisco_ios_xr"
    ipv6Prefixes.EntityData.ParentYangName = "ipv6-neighbor"
    ipv6Prefixes.EntityData.SegmentPath = "ipv6-prefixes"
    ipv6Prefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/" + ipv6Prefixes.EntityData.SegmentPath
    ipv6Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Prefixes.EntityData.Children = types.NewOrderedMap()
    ipv6Prefixes.EntityData.Children.Append("ipv6-prefix", types.YChild{"Ipv6Prefix", nil})
    for i := range ipv6Prefixes.Ipv6Prefix {
        ipv6Prefixes.EntityData.Children.Append(types.GetSegmentPath(ipv6Prefixes.Ipv6Prefix[i]), types.YChild{"Ipv6Prefix", ipv6Prefixes.Ipv6Prefix[i]})
    }
    ipv6Prefixes.EntityData.Leafs = types.NewOrderedMap()

    ipv6Prefixes.EntityData.YListKeys = []string {}

    return &(ipv6Prefixes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix
// Configure prefix with paramemters
type InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IPv6 prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix zone. The type is string with length: 1..9.
    PrefixZone interface{}

    // Prefix mask length. The type is interface{} with range: 0..128. This
    // attribute is mandatory.
    PrefixLength interface{}

    // Valid Lifetime (seconds). The type is interface{} with range:
    // 0..4294967295.
    ValidLifetime interface{}

    // Preferred Lifetime (seconds) must be <= Valid Lifetime. The type is
    // interface{} with range: 0..4294967295.
    PreferredLifetime interface{}

    // If set, prefix will not be used for onlink determination. The type is bool.
    OffLink interface{}

    // If set, prefix will not be used for auto configuration. The type is bool.
    NoAutoConfig interface{}

    // If set, prefix will not be advertized. The type is bool.
    NoAdvertize interface{}

    // Month to expire valid lifetime. The type is Ipv6ndMonth.
    ExpiryMonth interface{}

    // Date to expire valid lifetime. The type is interface{} with range: 1..31.
    ExpiryDate interface{}

    // Year to expire valid lifetime. The type is interface{} with range:
    // 2003..2035.
    ExpiryYear interface{}

    // Hour to expire valid lifetime. The type is interface{} with range: 0..23.
    ExpiryHour interface{}

    // Minute to expire valid lifetime. The type is interface{} with range: 0..59.
    ExpiryMinute interface{}

    // Month to expire preferred lifetime. The type is Ipv6ndMonth.
    PrefExpiryMonth interface{}

    // Date to expire preferred lifetime. The type is interface{} with range:
    // 1..31.
    PrefExpiryDate interface{}

    // Year to expire preferred lifetime. The type is interface{} with range:
    // 2003..2035.
    PrefExpiryYear interface{}

    // Hour to expire preferred lifetime. The type is interface{} with range:
    // 0..23.
    PrefExpiryHour interface{}

    // Minute to expire preferred lifetime. The type is interface{} with range:
    // 0..59.
    PrefExpiryMinute interface{}
}

func (ipv6Prefix *InterfaceConfigurations_InterfaceConfiguration_Ipv6Neighbor_Ipv6Prefixes_Ipv6Prefix) GetEntityData() *types.CommonEntityData {
    ipv6Prefix.EntityData.YFilter = ipv6Prefix.YFilter
    ipv6Prefix.EntityData.YangName = "ipv6-prefix"
    ipv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    ipv6Prefix.EntityData.ParentYangName = "ipv6-prefixes"
    ipv6Prefix.EntityData.SegmentPath = "ipv6-prefix" + types.AddKeyToken(ipv6Prefix.Prefix, "prefix")
    ipv6Prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor/ipv6-prefixes/" + ipv6Prefix.EntityData.SegmentPath
    ipv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Prefix.EntityData.Children = types.NewOrderedMap()
    ipv6Prefix.EntityData.Leafs = types.NewOrderedMap()
    ipv6Prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Prefix.Prefix})
    ipv6Prefix.EntityData.Leafs.Append("prefix-zone", types.YLeaf{"PrefixZone", ipv6Prefix.PrefixZone})
    ipv6Prefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Prefix.PrefixLength})
    ipv6Prefix.EntityData.Leafs.Append("valid-lifetime", types.YLeaf{"ValidLifetime", ipv6Prefix.ValidLifetime})
    ipv6Prefix.EntityData.Leafs.Append("preferred-lifetime", types.YLeaf{"PreferredLifetime", ipv6Prefix.PreferredLifetime})
    ipv6Prefix.EntityData.Leafs.Append("off-link", types.YLeaf{"OffLink", ipv6Prefix.OffLink})
    ipv6Prefix.EntityData.Leafs.Append("no-auto-config", types.YLeaf{"NoAutoConfig", ipv6Prefix.NoAutoConfig})
    ipv6Prefix.EntityData.Leafs.Append("no-advertize", types.YLeaf{"NoAdvertize", ipv6Prefix.NoAdvertize})
    ipv6Prefix.EntityData.Leafs.Append("expiry-month", types.YLeaf{"ExpiryMonth", ipv6Prefix.ExpiryMonth})
    ipv6Prefix.EntityData.Leafs.Append("expiry-date", types.YLeaf{"ExpiryDate", ipv6Prefix.ExpiryDate})
    ipv6Prefix.EntityData.Leafs.Append("expiry-year", types.YLeaf{"ExpiryYear", ipv6Prefix.ExpiryYear})
    ipv6Prefix.EntityData.Leafs.Append("expiry-hour", types.YLeaf{"ExpiryHour", ipv6Prefix.ExpiryHour})
    ipv6Prefix.EntityData.Leafs.Append("expiry-minute", types.YLeaf{"ExpiryMinute", ipv6Prefix.ExpiryMinute})
    ipv6Prefix.EntityData.Leafs.Append("pref-expiry-month", types.YLeaf{"PrefExpiryMonth", ipv6Prefix.PrefExpiryMonth})
    ipv6Prefix.EntityData.Leafs.Append("pref-expiry-date", types.YLeaf{"PrefExpiryDate", ipv6Prefix.PrefExpiryDate})
    ipv6Prefix.EntityData.Leafs.Append("pref-expiry-year", types.YLeaf{"PrefExpiryYear", ipv6Prefix.PrefExpiryYear})
    ipv6Prefix.EntityData.Leafs.Append("pref-expiry-hour", types.YLeaf{"PrefExpiryHour", ipv6Prefix.PrefExpiryHour})
    ipv6Prefix.EntityData.Leafs.Append("pref-expiry-minute", types.YLeaf{"PrefExpiryMinute", ipv6Prefix.PrefExpiryMinute})

    ipv6Prefix.EntityData.YListKeys = []string {"Prefix"}

    return &(ipv6Prefix.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mpls
// MPLS configuration under an interface
type InterfaceConfigurations_InterfaceConfiguration_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set the MPLS MTU for the interface. The type is interface{} with range:
    // 68..65535.
    Mtu interface{}

    // MPLS label security.
    LabelSecurity InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
}

func (mpls *InterfaceConfigurations_InterfaceConfiguration_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "interface-configuration"
    mpls.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-io-cfg:mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("label-security", types.YChild{"LabelSecurity", &mpls.LabelSecurity})
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", mpls.Mtu})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity
// MPLS label security
type InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable drop of multi-labelled incoming packets on a Interface. The type is
    // interface{}.
    MultiLabelDrop interface{}

    // Enable MPLS RPF for incoming packets on a Interface. The type is
    // interface{}.
    Rpf interface{}
}

func (labelSecurity *InterfaceConfigurations_InterfaceConfiguration_Mpls_LabelSecurity) GetEntityData() *types.CommonEntityData {
    labelSecurity.EntityData.YFilter = labelSecurity.YFilter
    labelSecurity.EntityData.YangName = "label-security"
    labelSecurity.EntityData.BundleName = "cisco_ios_xr"
    labelSecurity.EntityData.ParentYangName = "mpls"
    labelSecurity.EntityData.SegmentPath = "label-security"
    labelSecurity.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-io-cfg:mpls/" + labelSecurity.EntityData.SegmentPath
    labelSecurity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSecurity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSecurity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSecurity.EntityData.Children = types.NewOrderedMap()
    labelSecurity.EntityData.Leafs = types.NewOrderedMap()
    labelSecurity.EntityData.Leafs.Append("multi-label-drop", types.YLeaf{"MultiLabelDrop", labelSecurity.MultiLabelDrop})
    labelSecurity.EntityData.Leafs.Append("rpf", types.YLeaf{"Rpf", labelSecurity.Rpf})

    labelSecurity.EntityData.YListKeys = []string {}

    return &(labelSecurity.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes
// MPLS tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forward class value. The type is interface{} with range: 0..7.
    ForwardClass interface{}

    // Set the destination of the tunnel. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Destination interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Path selection metric to use in path calculation. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Enable the soft-preemption feature on the tunnel. The type is interface{}.
    SoftPreemption interface{}

    // Tunnel loadsharing metric. The type is interface{} with range:
    // 1..4294967295.
    LoadShare interface{}

    // The name of the tunnel to be included in signalling messages. The type is
    // string with length: 1..254.
    SignalledName interface{}

    // Tunnel backup bandwidth requirement.
    BackupBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth

    // BFD over TE LSP.
    BfdOverLsp InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp

    // Allocate MPLS binding segment ID.
    BindingSegmentIdMpls InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls

    // MPLS tunnel path protected configs.
    TunnelPathProtection InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection

    // Tunnel path protection state.
    PathOptionProtects InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects

    // Tunnel Interface Bidirectional configuration data.
    Bidirectional InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional

    // Performs admin operations on the optical tunnel interface.
    AdminMode InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode

    // Specify tunnel LSPs switching capability descriptor.
    Switching InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching

    // PCE config.
    Pce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce

    // Configure path selection properties.
    TunnelPathSelection InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection

    // Tunnel Interface Auto-bandwidth configuration data.
    AutoBandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth

    // Tunnel Setup and Hold Priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority

    // Set the affinity flags and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask

    // Forwarding adjacency announcement to IGP.
    ForwardingAdjacency InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging

    // Tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth

    // Parameters for IGP routing over tunnel.
    Autoroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute

    // Policy classes for PBTS.
    PolicyClasses InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
}

func (tunnelTeAttributes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes) GetEntityData() *types.CommonEntityData {
    tunnelTeAttributes.EntityData.YFilter = tunnelTeAttributes.YFilter
    tunnelTeAttributes.EntityData.YangName = "tunnel-te-attributes"
    tunnelTeAttributes.EntityData.BundleName = "cisco_ios_xr"
    tunnelTeAttributes.EntityData.ParentYangName = "interface-configuration"
    tunnelTeAttributes.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"
    tunnelTeAttributes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + tunnelTeAttributes.EntityData.SegmentPath
    tunnelTeAttributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelTeAttributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelTeAttributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelTeAttributes.EntityData.Children = types.NewOrderedMap()
    tunnelTeAttributes.EntityData.Children.Append("backup-bandwidth", types.YChild{"BackupBandwidth", &tunnelTeAttributes.BackupBandwidth})
    tunnelTeAttributes.EntityData.Children.Append("bfd-over-lsp", types.YChild{"BfdOverLsp", &tunnelTeAttributes.BfdOverLsp})
    tunnelTeAttributes.EntityData.Children.Append("binding-segment-id-mpls", types.YChild{"BindingSegmentIdMpls", &tunnelTeAttributes.BindingSegmentIdMpls})
    tunnelTeAttributes.EntityData.Children.Append("tunnel-path-protection", types.YChild{"TunnelPathProtection", &tunnelTeAttributes.TunnelPathProtection})
    tunnelTeAttributes.EntityData.Children.Append("path-option-protects", types.YChild{"PathOptionProtects", &tunnelTeAttributes.PathOptionProtects})
    tunnelTeAttributes.EntityData.Children.Append("bidirectional", types.YChild{"Bidirectional", &tunnelTeAttributes.Bidirectional})
    tunnelTeAttributes.EntityData.Children.Append("admin-mode", types.YChild{"AdminMode", &tunnelTeAttributes.AdminMode})
    tunnelTeAttributes.EntityData.Children.Append("switching", types.YChild{"Switching", &tunnelTeAttributes.Switching})
    tunnelTeAttributes.EntityData.Children.Append("pce", types.YChild{"Pce", &tunnelTeAttributes.Pce})
    tunnelTeAttributes.EntityData.Children.Append("tunnel-path-selection", types.YChild{"TunnelPathSelection", &tunnelTeAttributes.TunnelPathSelection})
    tunnelTeAttributes.EntityData.Children.Append("auto-bandwidth", types.YChild{"AutoBandwidth", &tunnelTeAttributes.AutoBandwidth})
    tunnelTeAttributes.EntityData.Children.Append("priority", types.YChild{"Priority", &tunnelTeAttributes.Priority})
    tunnelTeAttributes.EntityData.Children.Append("affinity-mask", types.YChild{"AffinityMask", &tunnelTeAttributes.AffinityMask})
    tunnelTeAttributes.EntityData.Children.Append("forwarding-adjacency", types.YChild{"ForwardingAdjacency", &tunnelTeAttributes.ForwardingAdjacency})
    tunnelTeAttributes.EntityData.Children.Append("logging", types.YChild{"Logging", &tunnelTeAttributes.Logging})
    tunnelTeAttributes.EntityData.Children.Append("bandwidth", types.YChild{"Bandwidth", &tunnelTeAttributes.Bandwidth})
    tunnelTeAttributes.EntityData.Children.Append("autoroute", types.YChild{"Autoroute", &tunnelTeAttributes.Autoroute})
    tunnelTeAttributes.EntityData.Children.Append("policy-classes", types.YChild{"PolicyClasses", &tunnelTeAttributes.PolicyClasses})
    tunnelTeAttributes.EntityData.Children.Append("new-style-affinity-affinity-types", types.YChild{"NewStyleAffinityAffinityTypes", &tunnelTeAttributes.NewStyleAffinityAffinityTypes})
    tunnelTeAttributes.EntityData.Children.Append("fast-reroute", types.YChild{"FastReroute", &tunnelTeAttributes.FastReroute})
    tunnelTeAttributes.EntityData.Leafs = types.NewOrderedMap()
    tunnelTeAttributes.EntityData.Leafs.Append("forward-class", types.YLeaf{"ForwardClass", tunnelTeAttributes.ForwardClass})
    tunnelTeAttributes.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", tunnelTeAttributes.Destination})
    tunnelTeAttributes.EntityData.Leafs.Append("record-route", types.YLeaf{"RecordRoute", tunnelTeAttributes.RecordRoute})
    tunnelTeAttributes.EntityData.Leafs.Append("path-selection-metric", types.YLeaf{"PathSelectionMetric", tunnelTeAttributes.PathSelectionMetric})
    tunnelTeAttributes.EntityData.Leafs.Append("soft-preemption", types.YLeaf{"SoftPreemption", tunnelTeAttributes.SoftPreemption})
    tunnelTeAttributes.EntityData.Leafs.Append("load-share", types.YLeaf{"LoadShare", tunnelTeAttributes.LoadShare})
    tunnelTeAttributes.EntityData.Leafs.Append("signalled-name", types.YLeaf{"SignalledName", tunnelTeAttributes.SignalledName})

    tunnelTeAttributes.EntityData.YListKeys = []string {}

    return &(tunnelTeAttributes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth
// Tunnel backup bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Backup bandwidth pool type, relevant only if DSTEType is PreStandardDSTE.
    // The type is MplsTeBackupBandwidthPool.
    PoolType interface{}

    // Backup bandwidth class type, relevant only if DSTEType is StandardDSTE. The
    // type is MplsTeBackupBandwidthClass.
    ClassType interface{}

    // Backup bandwidth limit type. The type is MplsTeBandwidthLimit.
    LimitType interface{}

    // Backup bandwidth requested by this tunnel in kbps. Ignored if bandwidth
    // limit type is unlimited. The type is interface{} with range: 1..4294967295.
    BackupBandwidth interface{}
}

func (backupBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BackupBandwidth) GetEntityData() *types.CommonEntityData {
    backupBandwidth.EntityData.YFilter = backupBandwidth.YFilter
    backupBandwidth.EntityData.YangName = "backup-bandwidth"
    backupBandwidth.EntityData.BundleName = "cisco_ios_xr"
    backupBandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    backupBandwidth.EntityData.SegmentPath = "backup-bandwidth"
    backupBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + backupBandwidth.EntityData.SegmentPath
    backupBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupBandwidth.EntityData.Children = types.NewOrderedMap()
    backupBandwidth.EntityData.Leafs = types.NewOrderedMap()
    backupBandwidth.EntityData.Leafs.Append("dste-type", types.YLeaf{"DsteType", backupBandwidth.DsteType})
    backupBandwidth.EntityData.Leafs.Append("pool-type", types.YLeaf{"PoolType", backupBandwidth.PoolType})
    backupBandwidth.EntityData.Leafs.Append("class-type", types.YLeaf{"ClassType", backupBandwidth.ClassType})
    backupBandwidth.EntityData.Leafs.Append("limit-type", types.YLeaf{"LimitType", backupBandwidth.LimitType})
    backupBandwidth.EntityData.Leafs.Append("backup-bandwidth", types.YLeaf{"BackupBandwidth", backupBandwidth.BackupBandwidth})

    backupBandwidth.EntityData.YListKeys = []string {}

    return &(backupBandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp
// BFD over TE LSP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial delay in milliseconds (default 16000). The type is interface{} with
    // range: 1..518400000.
    DampeningInitialWait interface{}

    // Enable BFD Fast Detect On the tunnel. The type is MplsTebfdSession.
    FastDetect interface{}

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Specify the multiplier for BFD failure detection. The type is interface{}
    // with range: 3..10.
    Multiplier interface{}

    // Wait for session to come up in seconds (default 60). The type is
    // interface{} with range: 10..3600.
    BringupTimeout interface{}

    // Disable Periodic LSP Ping for BFD over LSP. The type is interface{}.
    PeriodicPingDisable interface{}

    // Secondary delay in milliseconds (default 20000). The type is interface{}
    // with range: 1..518400000.
    DampeningSecondaryWait interface{}

    // Periodic LSP Ping Interval in seconds (default 120). The type is
    // interface{} with range: 60..3600.
    PeriodicPingInterval interface{}

    // Maximum delay in milliseconds (default 600000). The type is interface{}
    // with range: 1..518400000.
    DampeningMaximumWait interface{}

    // Specify the minimum interval for BFD failure detection. The type is
    // interface{} with range: 3..30000.
    MinimumInterval interface{}

    // Specify BFD Encap Mode on the tunnel. The type is interface{} with range:
    // 0..1.
    EncapMode interface{}
}

func (bfdOverLsp *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BfdOverLsp) GetEntityData() *types.CommonEntityData {
    bfdOverLsp.EntityData.YFilter = bfdOverLsp.YFilter
    bfdOverLsp.EntityData.YangName = "bfd-over-lsp"
    bfdOverLsp.EntityData.BundleName = "cisco_ios_xr"
    bfdOverLsp.EntityData.ParentYangName = "tunnel-te-attributes"
    bfdOverLsp.EntityData.SegmentPath = "bfd-over-lsp"
    bfdOverLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + bfdOverLsp.EntityData.SegmentPath
    bfdOverLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdOverLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdOverLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdOverLsp.EntityData.Children = types.NewOrderedMap()
    bfdOverLsp.EntityData.Leafs = types.NewOrderedMap()
    bfdOverLsp.EntityData.Leafs.Append("dampening-initial-wait", types.YLeaf{"DampeningInitialWait", bfdOverLsp.DampeningInitialWait})
    bfdOverLsp.EntityData.Leafs.Append("fast-detect", types.YLeaf{"FastDetect", bfdOverLsp.FastDetect})
    bfdOverLsp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", bfdOverLsp.Enable})
    bfdOverLsp.EntityData.Leafs.Append("multiplier", types.YLeaf{"Multiplier", bfdOverLsp.Multiplier})
    bfdOverLsp.EntityData.Leafs.Append("bringup-timeout", types.YLeaf{"BringupTimeout", bfdOverLsp.BringupTimeout})
    bfdOverLsp.EntityData.Leafs.Append("periodic-ping-disable", types.YLeaf{"PeriodicPingDisable", bfdOverLsp.PeriodicPingDisable})
    bfdOverLsp.EntityData.Leafs.Append("dampening-secondary-wait", types.YLeaf{"DampeningSecondaryWait", bfdOverLsp.DampeningSecondaryWait})
    bfdOverLsp.EntityData.Leafs.Append("periodic-ping-interval", types.YLeaf{"PeriodicPingInterval", bfdOverLsp.PeriodicPingInterval})
    bfdOverLsp.EntityData.Leafs.Append("dampening-maximum-wait", types.YLeaf{"DampeningMaximumWait", bfdOverLsp.DampeningMaximumWait})
    bfdOverLsp.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", bfdOverLsp.MinimumInterval})
    bfdOverLsp.EntityData.Leafs.Append("encap-mode", types.YLeaf{"EncapMode", bfdOverLsp.EncapMode})

    bfdOverLsp.EntityData.YListKeys = []string {}

    return &(bfdOverLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls
// Allocate MPLS binding segment ID
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS label value type. The type is BindingSegmentId.
    SegmentIdType interface{}

    // MPLS label. The type is interface{} with range: 16..4015.
    LabelValue interface{}
}

func (bindingSegmentIdMpls *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_BindingSegmentIdMpls) GetEntityData() *types.CommonEntityData {
    bindingSegmentIdMpls.EntityData.YFilter = bindingSegmentIdMpls.YFilter
    bindingSegmentIdMpls.EntityData.YangName = "binding-segment-id-mpls"
    bindingSegmentIdMpls.EntityData.BundleName = "cisco_ios_xr"
    bindingSegmentIdMpls.EntityData.ParentYangName = "tunnel-te-attributes"
    bindingSegmentIdMpls.EntityData.SegmentPath = "binding-segment-id-mpls"
    bindingSegmentIdMpls.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + bindingSegmentIdMpls.EntityData.SegmentPath
    bindingSegmentIdMpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingSegmentIdMpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingSegmentIdMpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingSegmentIdMpls.EntityData.Children = types.NewOrderedMap()
    bindingSegmentIdMpls.EntityData.Leafs = types.NewOrderedMap()
    bindingSegmentIdMpls.EntityData.Leafs.Append("segment-id-type", types.YLeaf{"SegmentIdType", bindingSegmentIdMpls.SegmentIdType})
    bindingSegmentIdMpls.EntityData.Leafs.Append("label-value", types.YLeaf{"LabelValue", bindingSegmentIdMpls.LabelValue})

    bindingSegmentIdMpls.EntityData.YListKeys = []string {}

    return &(bindingSegmentIdMpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection
// MPLS tunnel path protected configs
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Path Protection. The type is interface{}.
    Enable interface{}
}

func (tunnelPathProtection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathProtection) GetEntityData() *types.CommonEntityData {
    tunnelPathProtection.EntityData.YFilter = tunnelPathProtection.YFilter
    tunnelPathProtection.EntityData.YangName = "tunnel-path-protection"
    tunnelPathProtection.EntityData.BundleName = "cisco_ios_xr"
    tunnelPathProtection.EntityData.ParentYangName = "tunnel-te-attributes"
    tunnelPathProtection.EntityData.SegmentPath = "tunnel-path-protection"
    tunnelPathProtection.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + tunnelPathProtection.EntityData.SegmentPath
    tunnelPathProtection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelPathProtection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelPathProtection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelPathProtection.EntityData.Children = types.NewOrderedMap()
    tunnelPathProtection.EntityData.Leafs = types.NewOrderedMap()
    tunnelPathProtection.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", tunnelPathProtection.Enable})

    tunnelPathProtection.EntityData.YListKeys = []string {}

    return &(tunnelPathProtection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects
// Tunnel path protection state
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel path protection. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect.
    PathOptionProtect []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
}

func (pathOptionProtects *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects) GetEntityData() *types.CommonEntityData {
    pathOptionProtects.EntityData.YFilter = pathOptionProtects.YFilter
    pathOptionProtects.EntityData.YangName = "path-option-protects"
    pathOptionProtects.EntityData.BundleName = "cisco_ios_xr"
    pathOptionProtects.EntityData.ParentYangName = "tunnel-te-attributes"
    pathOptionProtects.EntityData.SegmentPath = "path-option-protects"
    pathOptionProtects.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + pathOptionProtects.EntityData.SegmentPath
    pathOptionProtects.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptionProtects.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptionProtects.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptionProtects.EntityData.Children = types.NewOrderedMap()
    pathOptionProtects.EntityData.Children.Append("path-option-protect", types.YChild{"PathOptionProtect", nil})
    for i := range pathOptionProtects.PathOptionProtect {
        pathOptionProtects.EntityData.Children.Append(types.GetSegmentPath(pathOptionProtects.PathOptionProtect[i]), types.YChild{"PathOptionProtect", pathOptionProtects.PathOptionProtect[i]})
    }
    pathOptionProtects.EntityData.Leafs = types.NewOrderedMap()

    pathOptionProtects.EntityData.YListKeys = []string {}

    return &(pathOptionProtects.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect
// Tunnel path protection
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Protection type for this path. The type is
    // MplsTePathOptionProtection.
    Protection interface{}

    // Tunnel path options.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
}

func (pathOptionProtect *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect) GetEntityData() *types.CommonEntityData {
    pathOptionProtect.EntityData.YFilter = pathOptionProtect.YFilter
    pathOptionProtect.EntityData.YangName = "path-option-protect"
    pathOptionProtect.EntityData.BundleName = "cisco_ios_xr"
    pathOptionProtect.EntityData.ParentYangName = "path-option-protects"
    pathOptionProtect.EntityData.SegmentPath = "path-option-protect" + types.AddKeyToken(pathOptionProtect.Protection, "protection")
    pathOptionProtect.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/path-option-protects/" + pathOptionProtect.EntityData.SegmentPath
    pathOptionProtect.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptionProtect.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptionProtect.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptionProtect.EntityData.Children = types.NewOrderedMap()
    pathOptionProtect.EntityData.Children.Append("path-options", types.YChild{"PathOptions", &pathOptionProtect.PathOptions})
    pathOptionProtect.EntityData.Leafs = types.NewOrderedMap()
    pathOptionProtect.EntityData.Leafs.Append("protection", types.YLeaf{"Protection", pathOptionProtect.Protection})

    pathOptionProtect.EntityData.YListKeys = []string {"Protection"}

    return &(pathOptionProtect.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions
// Tunnel path options
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A tunnel path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption.
    PathOption []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions) GetEntityData() *types.CommonEntityData {
    pathOptions.EntityData.YFilter = pathOptions.YFilter
    pathOptions.EntityData.YangName = "path-options"
    pathOptions.EntityData.BundleName = "cisco_ios_xr"
    pathOptions.EntityData.ParentYangName = "path-option-protect"
    pathOptions.EntityData.SegmentPath = "path-options"
    pathOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/path-option-protects/path-option-protect/" + pathOptions.EntityData.SegmentPath
    pathOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptions.EntityData.Children = types.NewOrderedMap()
    pathOptions.EntityData.Children.Append("path-option", types.YChild{"PathOption", nil})
    for i := range pathOptions.PathOption {
        pathOptions.EntityData.Children.Append(types.GetSegmentPath(pathOptions.PathOption[i]), types.YChild{"PathOption", pathOptions.PathOption[i]})
    }
    pathOptions.EntityData.Leafs = types.NewOrderedMap()

    pathOptions.EntityData.YListKeys = []string {}

    return &(pathOptions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption
// A tunnel path option
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption. This attribute
    // is mandatory.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Deprecated. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    PathProperty interface{}

    // Deprecated. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    Interface interface{}

    // Deprecated. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    OutputLabel interface{}

    // Deprecated. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    Destination interface{}

    // Lockdown properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Lockdown interface{}

    // Verbatim properties. The type is MplsTePathOptionProperty. The default
    // value is none.
    Verbatim interface{}

    // PCE properties. The type is MplsTePathOptionProperty. The default value is
    // none.
    Pce interface{}

    // PCE address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    PceAddress interface{}

    // IGP type. The type is MplsTeIgpProtocol. The default value is none.
    IgpType interface{}

    // IGP instance name. The type is string with length: 1..40.
    IgpInstance interface{}

    // IGP area ID in integer format. The type is interface{} with range:
    // 0..4294967295. The default value is 0.
    IgpArea interface{}

    // IGP area ID in IP address format. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // The default value is 0.0.0.0.
    IgpAreaIpAddressId interface{}

    // Path option attribute set name. The type is string.
    PathOptionAttributeSetName interface{}

    // Preference level of the protecting explicit path. Leave unset in order to
    // not use an explicit protecting path. The type is interface{} with range:
    // 1..1000. The default value is 1.
    ProtectedByPreferenceLevel interface{}

    // Deprecated. The type is MplsTePathOptionProperty. The default value is
    // none.
    SegmentRouting interface{}

    // Sticky properties. The type is MplsTePathOptionProperty. The default value
    // is none.
    Sticky interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PathOptionProtects_PathOptionProtect_PathOptions_PathOption) GetEntityData() *types.CommonEntityData {
    pathOption.EntityData.YFilter = pathOption.YFilter
    pathOption.EntityData.YangName = "path-option"
    pathOption.EntityData.BundleName = "cisco_ios_xr"
    pathOption.EntityData.ParentYangName = "path-options"
    pathOption.EntityData.SegmentPath = "path-option" + types.AddKeyToken(pathOption.PreferenceLevel, "preference-level")
    pathOption.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/path-option-protects/path-option-protect/path-options/" + pathOption.EntityData.SegmentPath
    pathOption.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOption.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOption.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOption.EntityData.Children = types.NewOrderedMap()
    pathOption.EntityData.Leafs = types.NewOrderedMap()
    pathOption.EntityData.Leafs.Append("preference-level", types.YLeaf{"PreferenceLevel", pathOption.PreferenceLevel})
    pathOption.EntityData.Leafs.Append("path-type", types.YLeaf{"PathType", pathOption.PathType})
    pathOption.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", pathOption.PathId})
    pathOption.EntityData.Leafs.Append("path-name", types.YLeaf{"PathName", pathOption.PathName})
    pathOption.EntityData.Leafs.Append("path-property", types.YLeaf{"PathProperty", pathOption.PathProperty})
    pathOption.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", pathOption.Interface})
    pathOption.EntityData.Leafs.Append("output-label", types.YLeaf{"OutputLabel", pathOption.OutputLabel})
    pathOption.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", pathOption.Destination})
    pathOption.EntityData.Leafs.Append("lockdown", types.YLeaf{"Lockdown", pathOption.Lockdown})
    pathOption.EntityData.Leafs.Append("verbatim", types.YLeaf{"Verbatim", pathOption.Verbatim})
    pathOption.EntityData.Leafs.Append("pce", types.YLeaf{"Pce", pathOption.Pce})
    pathOption.EntityData.Leafs.Append("pce-address", types.YLeaf{"PceAddress", pathOption.PceAddress})
    pathOption.EntityData.Leafs.Append("igp-type", types.YLeaf{"IgpType", pathOption.IgpType})
    pathOption.EntityData.Leafs.Append("igp-instance", types.YLeaf{"IgpInstance", pathOption.IgpInstance})
    pathOption.EntityData.Leafs.Append("igp-area", types.YLeaf{"IgpArea", pathOption.IgpArea})
    pathOption.EntityData.Leafs.Append("igp-area-ip-address-id", types.YLeaf{"IgpAreaIpAddressId", pathOption.IgpAreaIpAddressId})
    pathOption.EntityData.Leafs.Append("path-option-attribute-set-name", types.YLeaf{"PathOptionAttributeSetName", pathOption.PathOptionAttributeSetName})
    pathOption.EntityData.Leafs.Append("protected-by-preference-level", types.YLeaf{"ProtectedByPreferenceLevel", pathOption.ProtectedByPreferenceLevel})
    pathOption.EntityData.Leafs.Append("segment-routing", types.YLeaf{"SegmentRouting", pathOption.SegmentRouting})
    pathOption.EntityData.Leafs.Append("sticky", types.YLeaf{"Sticky", pathOption.Sticky})

    pathOption.EntityData.YListKeys = []string {"PreferenceLevel"}

    return &(pathOption.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional
// Tunnel Interface Bidirectional configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has bidirectional enabled on it or not. The type is
    // interface{}.
    Enabled interface{}

    // Association Corouted Type.
    AssociationCoroutedType InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType

    // Association ID, Source IP Address, and Global ID.
    AssociationParameters InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
}

func (bidirectional *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional) GetEntityData() *types.CommonEntityData {
    bidirectional.EntityData.YFilter = bidirectional.YFilter
    bidirectional.EntityData.YangName = "bidirectional"
    bidirectional.EntityData.BundleName = "cisco_ios_xr"
    bidirectional.EntityData.ParentYangName = "tunnel-te-attributes"
    bidirectional.EntityData.SegmentPath = "bidirectional"
    bidirectional.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + bidirectional.EntityData.SegmentPath
    bidirectional.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bidirectional.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bidirectional.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bidirectional.EntityData.Children = types.NewOrderedMap()
    bidirectional.EntityData.Children.Append("association-corouted-type", types.YChild{"AssociationCoroutedType", &bidirectional.AssociationCoroutedType})
    bidirectional.EntityData.Children.Append("association-parameters", types.YChild{"AssociationParameters", &bidirectional.AssociationParameters})
    bidirectional.EntityData.Leafs = types.NewOrderedMap()
    bidirectional.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", bidirectional.Enabled})

    bidirectional.EntityData.YListKeys = []string {}

    return &(bidirectional.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType
// Association Corouted Type
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has LSP Wrap protectionenabled on it or
    // not. The type is interface{}.
    WrapProtectionEnable interface{}

    // Controls whether association type is co-routed. The type is interface{}.
    Enable interface{}

    // Disable signaling of RSVP Protection Object. The type is interface{}.
    DisableProtectionObject interface{}

    // Tunnel Fault OAM.
    FaultOam InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
}

func (associationCoroutedType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType) GetEntityData() *types.CommonEntityData {
    associationCoroutedType.EntityData.YFilter = associationCoroutedType.YFilter
    associationCoroutedType.EntityData.YangName = "association-corouted-type"
    associationCoroutedType.EntityData.BundleName = "cisco_ios_xr"
    associationCoroutedType.EntityData.ParentYangName = "bidirectional"
    associationCoroutedType.EntityData.SegmentPath = "association-corouted-type"
    associationCoroutedType.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/bidirectional/" + associationCoroutedType.EntityData.SegmentPath
    associationCoroutedType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associationCoroutedType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associationCoroutedType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associationCoroutedType.EntityData.Children = types.NewOrderedMap()
    associationCoroutedType.EntityData.Children.Append("fault-oam", types.YChild{"FaultOam", &associationCoroutedType.FaultOam})
    associationCoroutedType.EntityData.Leafs = types.NewOrderedMap()
    associationCoroutedType.EntityData.Leafs.Append("wrap-protection-enable", types.YLeaf{"WrapProtectionEnable", associationCoroutedType.WrapProtectionEnable})
    associationCoroutedType.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", associationCoroutedType.Enable})
    associationCoroutedType.EntityData.Leafs.Append("disable-protection-object", types.YLeaf{"DisableProtectionObject", associationCoroutedType.DisableProtectionObject})

    associationCoroutedType.EntityData.YListKeys = []string {}

    return &(associationCoroutedType.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam
// Tunnel Fault OAM
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is only valid for bidirectional tunnel interfaces and it
    // controls whether that interface has fault OAM enabled on it or not. The
    // type is interface{}.
    Enable interface{}
}

func (faultOam *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationCoroutedType_FaultOam) GetEntityData() *types.CommonEntityData {
    faultOam.EntityData.YFilter = faultOam.YFilter
    faultOam.EntityData.YangName = "fault-oam"
    faultOam.EntityData.BundleName = "cisco_ios_xr"
    faultOam.EntityData.ParentYangName = "association-corouted-type"
    faultOam.EntityData.SegmentPath = "fault-oam"
    faultOam.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/bidirectional/association-corouted-type/" + faultOam.EntityData.SegmentPath
    faultOam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultOam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultOam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultOam.EntityData.Children = types.NewOrderedMap()
    faultOam.EntityData.Leafs = types.NewOrderedMap()
    faultOam.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", faultOam.Enable})

    faultOam.EntityData.YListKeys = []string {}

    return &(faultOam.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters
// Association ID, Source IP Address, and Global
// ID
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Association ID. The type is interface{} with range: 0..65535. This
    // attribute is mandatory.
    AssociationId interface{}

    // Association Source IP Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    // This attribute is mandatory.
    AssociationSourceAddress interface{}

    // Is Association Global ID Configured. The type is bool.
    AssociationIsGlobalIdConfigured interface{}

    // Association Global ID. The type is interface{} with range: 0..4294967295.
    AssociationGlobalId interface{}
}

func (associationParameters *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bidirectional_AssociationParameters) GetEntityData() *types.CommonEntityData {
    associationParameters.EntityData.YFilter = associationParameters.YFilter
    associationParameters.EntityData.YangName = "association-parameters"
    associationParameters.EntityData.BundleName = "cisco_ios_xr"
    associationParameters.EntityData.ParentYangName = "bidirectional"
    associationParameters.EntityData.SegmentPath = "association-parameters"
    associationParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/bidirectional/" + associationParameters.EntityData.SegmentPath
    associationParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associationParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associationParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associationParameters.EntityData.Children = types.NewOrderedMap()
    associationParameters.EntityData.Leafs = types.NewOrderedMap()
    associationParameters.EntityData.Leafs.Append("association-id", types.YLeaf{"AssociationId", associationParameters.AssociationId})
    associationParameters.EntityData.Leafs.Append("association-source-address", types.YLeaf{"AssociationSourceAddress", associationParameters.AssociationSourceAddress})
    associationParameters.EntityData.Leafs.Append("association-is-global-id-configured", types.YLeaf{"AssociationIsGlobalIdConfigured", associationParameters.AssociationIsGlobalIdConfigured})
    associationParameters.EntityData.Leafs.Append("association-global-id", types.YLeaf{"AssociationGlobalId", associationParameters.AssociationGlobalId})

    associationParameters.EntityData.YListKeys = []string {}

    return &(associationParameters.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode
// Performs admin operations on the optical tunnel
// interface
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Performs signalling operation to deactivate optical tunnel. The type is
    // interface{}.
    DeactivateTunnel interface{}
}

func (adminMode *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AdminMode) GetEntityData() *types.CommonEntityData {
    adminMode.EntityData.YFilter = adminMode.YFilter
    adminMode.EntityData.YangName = "admin-mode"
    adminMode.EntityData.BundleName = "cisco_ios_xr"
    adminMode.EntityData.ParentYangName = "tunnel-te-attributes"
    adminMode.EntityData.SegmentPath = "admin-mode"
    adminMode.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + adminMode.EntityData.SegmentPath
    adminMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adminMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adminMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adminMode.EntityData.Children = types.NewOrderedMap()
    adminMode.EntityData.Leafs = types.NewOrderedMap()
    adminMode.EntityData.Leafs.Append("deactivate-tunnel", types.YLeaf{"DeactivateTunnel", adminMode.DeactivateTunnel})

    adminMode.EntityData.YListKeys = []string {}

    return &(adminMode.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching
// Specify tunnel LSPs switching capability
// descriptor
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify transit switching descriptor parameters.
    Transit InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit

    // Specify end point switching descriptor parameters.
    Endpoint InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
}

func (switching *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching) GetEntityData() *types.CommonEntityData {
    switching.EntityData.YFilter = switching.YFilter
    switching.EntityData.YangName = "switching"
    switching.EntityData.BundleName = "cisco_ios_xr"
    switching.EntityData.ParentYangName = "tunnel-te-attributes"
    switching.EntityData.SegmentPath = "switching"
    switching.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + switching.EntityData.SegmentPath
    switching.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switching.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switching.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switching.EntityData.Children = types.NewOrderedMap()
    switching.EntityData.Children.Append("transit", types.YChild{"Transit", &switching.Transit})
    switching.EntityData.Children.Append("endpoint", types.YChild{"Endpoint", &switching.Endpoint})
    switching.EntityData.Leafs = types.NewOrderedMap()

    switching.EntityData.YListKeys = []string {}

    return &(switching.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit
// Specify transit switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (transit *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Transit) GetEntityData() *types.CommonEntityData {
    transit.EntityData.YFilter = transit.YFilter
    transit.EntityData.YangName = "transit"
    transit.EntityData.BundleName = "cisco_ios_xr"
    transit.EntityData.ParentYangName = "switching"
    transit.EntityData.SegmentPath = "transit"
    transit.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/switching/" + transit.EntityData.SegmentPath
    transit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transit.EntityData.Children = types.NewOrderedMap()
    transit.EntityData.Leafs = types.NewOrderedMap()
    transit.EntityData.Leafs.Append("capability", types.YLeaf{"Capability", transit.Capability})
    transit.EntityData.Leafs.Append("encoding", types.YLeaf{"Encoding", transit.Encoding})

    transit.EntityData.YListKeys = []string {}

    return &(transit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint
// Specify end point switching descriptor
// parameters
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Switching capability. The type is MplsTeSwitchingCap. This attribute is
    // mandatory.
    Capability interface{}

    // LSP encoding. The type is MplsTeSwitchingEncode.
    Encoding interface{}
}

func (endpoint *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Switching_Endpoint) GetEntityData() *types.CommonEntityData {
    endpoint.EntityData.YFilter = endpoint.YFilter
    endpoint.EntityData.YangName = "endpoint"
    endpoint.EntityData.BundleName = "cisco_ios_xr"
    endpoint.EntityData.ParentYangName = "switching"
    endpoint.EntityData.SegmentPath = "endpoint"
    endpoint.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/switching/" + endpoint.EntityData.SegmentPath
    endpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endpoint.EntityData.Children = types.NewOrderedMap()
    endpoint.EntityData.Leafs = types.NewOrderedMap()
    endpoint.EntityData.Leafs.Append("capability", types.YLeaf{"Capability", endpoint.Capability})
    endpoint.EntityData.Leafs.Append("encoding", types.YLeaf{"Encoding", endpoint.Encoding})

    endpoint.EntityData.YListKeys = []string {}

    return &(endpoint.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce
// PCE config
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Enable PCE Delegation. The type is interface{}.
    Delegation interface{}
}

func (pce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Pce) GetEntityData() *types.CommonEntityData {
    pce.EntityData.YFilter = pce.YFilter
    pce.EntityData.YangName = "pce"
    pce.EntityData.BundleName = "cisco_ios_xr"
    pce.EntityData.ParentYangName = "tunnel-te-attributes"
    pce.EntityData.SegmentPath = "pce"
    pce.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + pce.EntityData.SegmentPath
    pce.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pce.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pce.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pce.EntityData.Children = types.NewOrderedMap()
    pce.EntityData.Leafs = types.NewOrderedMap()
    pce.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", pce.Enable})
    pce.EntityData.Leafs.Append("delegation", types.YLeaf{"Delegation", pce.Delegation})

    pce.EntityData.YListKeys = []string {}

    return &(pce.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection
// Configure path selection properties
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CSPF tiebreaker to use in path calculation. The type is
    // MplsTePathSelectionTiebreaker.
    Tiebreaker interface{}

    // Path selection hop limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..255.
    PathSelectionHopLimit interface{}

    // Path selection delay limit (usec) configuration for this specific tunnel.
    // The type is interface{} with range: 1..4294967295.
    PathSelectionDelayLimit interface{}

    // Path selection cost limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..4294967295.
    PathSelectionCostLimit interface{}

    // Deprecated.
    Invalidation InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
}

func (tunnelPathSelection *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection) GetEntityData() *types.CommonEntityData {
    tunnelPathSelection.EntityData.YFilter = tunnelPathSelection.YFilter
    tunnelPathSelection.EntityData.YangName = "tunnel-path-selection"
    tunnelPathSelection.EntityData.BundleName = "cisco_ios_xr"
    tunnelPathSelection.EntityData.ParentYangName = "tunnel-te-attributes"
    tunnelPathSelection.EntityData.SegmentPath = "tunnel-path-selection"
    tunnelPathSelection.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + tunnelPathSelection.EntityData.SegmentPath
    tunnelPathSelection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelPathSelection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelPathSelection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelPathSelection.EntityData.Children = types.NewOrderedMap()
    tunnelPathSelection.EntityData.Children.Append("invalidation", types.YChild{"Invalidation", &tunnelPathSelection.Invalidation})
    tunnelPathSelection.EntityData.Leafs = types.NewOrderedMap()
    tunnelPathSelection.EntityData.Leafs.Append("tiebreaker", types.YLeaf{"Tiebreaker", tunnelPathSelection.Tiebreaker})
    tunnelPathSelection.EntityData.Leafs.Append("path-selection-hop-limit", types.YLeaf{"PathSelectionHopLimit", tunnelPathSelection.PathSelectionHopLimit})
    tunnelPathSelection.EntityData.Leafs.Append("path-selection-delay-limit", types.YLeaf{"PathSelectionDelayLimit", tunnelPathSelection.PathSelectionDelayLimit})
    tunnelPathSelection.EntityData.Leafs.Append("path-selection-cost-limit", types.YLeaf{"PathSelectionCostLimit", tunnelPathSelection.PathSelectionCostLimit})

    tunnelPathSelection.EntityData.YListKeys = []string {}

    return &(tunnelPathSelection.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation
// Deprecated
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_TunnelPathSelection_Invalidation) GetEntityData() *types.CommonEntityData {
    invalidation.EntityData.YFilter = invalidation.YFilter
    invalidation.EntityData.YangName = "invalidation"
    invalidation.EntityData.BundleName = "cisco_ios_xr"
    invalidation.EntityData.ParentYangName = "tunnel-path-selection"
    invalidation.EntityData.SegmentPath = "invalidation"
    invalidation.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/tunnel-path-selection/" + invalidation.EntityData.SegmentPath
    invalidation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidation.EntityData.Children = types.NewOrderedMap()
    invalidation.EntityData.Leafs = types.NewOrderedMap()
    invalidation.EntityData.Leafs.Append("path-invalidation-timeout", types.YLeaf{"PathInvalidationTimeout", invalidation.PathInvalidationTimeout})
    invalidation.EntityData.Leafs.Append("path-invalidation-action", types.YLeaf{"PathInvalidationAction", invalidation.PathInvalidationAction})

    invalidation.EntityData.YListKeys = []string {}

    return &(invalidation.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth
// Tunnel Interface Auto-bandwidth configuration
// data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable auto bandwidth underflow detection. The type is bool.
    UnderflowEnable interface{}

    // Set the tunnel auto-bw resignal last bandwidth time-out in seconds. The
    // type is interface{} with range: 1..3600000. Units are second.
    ResignalLastBandwidthTimeOut interface{}

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has auto-bw enabled on it or not.The object must be set
    // before any other auto-bw configuration is supplied for the interface, and
    // must be the last auto-bw configuration object to be removed . The type is
    // bool.
    Enabled interface{}

    // Set the tunnel auto-bw application frequency in minutes. The type is
    // interface{} with range: 5..10080. Units are minute.
    ApplicationFrequency interface{}

    // Enable auto bandwidth overflow detection. The type is bool.
    OverflowEnable interface{}

    // Enable bandwidth collection only, no auto-bw adjustment. The type is
    // interface{}.
    CollectionOnly interface{}

    // Configuring the tunnel underflow detection.
    Underflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow

    // Configuring the tunnel overflow detection.
    Overflow InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow

    // Set min/max bandwidth auto-bw can apply on a tunnel.
    BandwidthLimits InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits

    // Set the bandwidth change threshold to trigger adjustment.
    AdjustmentThreshold InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold

    // Tunnel auto-capacity configuration data.
    AutoCapacity InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity
}

func (autoBandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth) GetEntityData() *types.CommonEntityData {
    autoBandwidth.EntityData.YFilter = autoBandwidth.YFilter
    autoBandwidth.EntityData.YangName = "auto-bandwidth"
    autoBandwidth.EntityData.BundleName = "cisco_ios_xr"
    autoBandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    autoBandwidth.EntityData.SegmentPath = "auto-bandwidth"
    autoBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + autoBandwidth.EntityData.SegmentPath
    autoBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoBandwidth.EntityData.Children = types.NewOrderedMap()
    autoBandwidth.EntityData.Children.Append("underflow", types.YChild{"Underflow", &autoBandwidth.Underflow})
    autoBandwidth.EntityData.Children.Append("overflow", types.YChild{"Overflow", &autoBandwidth.Overflow})
    autoBandwidth.EntityData.Children.Append("bandwidth-limits", types.YChild{"BandwidthLimits", &autoBandwidth.BandwidthLimits})
    autoBandwidth.EntityData.Children.Append("adjustment-threshold", types.YChild{"AdjustmentThreshold", &autoBandwidth.AdjustmentThreshold})
    autoBandwidth.EntityData.Children.Append("auto-capacity", types.YChild{"AutoCapacity", &autoBandwidth.AutoCapacity})
    autoBandwidth.EntityData.Leafs = types.NewOrderedMap()
    autoBandwidth.EntityData.Leafs.Append("underflow-enable", types.YLeaf{"UnderflowEnable", autoBandwidth.UnderflowEnable})
    autoBandwidth.EntityData.Leafs.Append("resignal-last-bandwidth-time-out", types.YLeaf{"ResignalLastBandwidthTimeOut", autoBandwidth.ResignalLastBandwidthTimeOut})
    autoBandwidth.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", autoBandwidth.Enabled})
    autoBandwidth.EntityData.Leafs.Append("application-frequency", types.YLeaf{"ApplicationFrequency", autoBandwidth.ApplicationFrequency})
    autoBandwidth.EntityData.Leafs.Append("overflow-enable", types.YLeaf{"OverflowEnable", autoBandwidth.OverflowEnable})
    autoBandwidth.EntityData.Leafs.Append("collection-only", types.YLeaf{"CollectionOnly", autoBandwidth.CollectionOnly})

    autoBandwidth.EntityData.YListKeys = []string {}

    return &(autoBandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow
// Configuring the tunnel underflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bandwidth change percent to trigger an underflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    UnderflowThresholdPercent interface{}

    // Bandwidth change value to trigger an underflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    UnderflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    UnderflowThresholdLimit interface{}
}

func (underflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Underflow) GetEntityData() *types.CommonEntityData {
    underflow.EntityData.YFilter = underflow.YFilter
    underflow.EntityData.YangName = "underflow"
    underflow.EntityData.BundleName = "cisco_ios_xr"
    underflow.EntityData.ParentYangName = "auto-bandwidth"
    underflow.EntityData.SegmentPath = "underflow"
    underflow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/auto-bandwidth/" + underflow.EntityData.SegmentPath
    underflow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underflow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underflow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underflow.EntityData.Children = types.NewOrderedMap()
    underflow.EntityData.Leafs = types.NewOrderedMap()
    underflow.EntityData.Leafs.Append("underflow-threshold-percent", types.YLeaf{"UnderflowThresholdPercent", underflow.UnderflowThresholdPercent})
    underflow.EntityData.Leafs.Append("underflow-threshold-value", types.YLeaf{"UnderflowThresholdValue", underflow.UnderflowThresholdValue})
    underflow.EntityData.Leafs.Append("underflow-threshold-limit", types.YLeaf{"UnderflowThresholdLimit", underflow.UnderflowThresholdLimit})

    underflow.EntityData.YListKeys = []string {}

    return &(underflow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow
// Configuring the tunnel overflow detection
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bandwidth change percent to trigger an overflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    OverflowThresholdPercent interface{}

    // Bandwidth change value to trigger an overflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    OverflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    OverflowThresholdLimit interface{}
}

func (overflow *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_Overflow) GetEntityData() *types.CommonEntityData {
    overflow.EntityData.YFilter = overflow.YFilter
    overflow.EntityData.YangName = "overflow"
    overflow.EntityData.BundleName = "cisco_ios_xr"
    overflow.EntityData.ParentYangName = "auto-bandwidth"
    overflow.EntityData.SegmentPath = "overflow"
    overflow.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/auto-bandwidth/" + overflow.EntityData.SegmentPath
    overflow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overflow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overflow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overflow.EntityData.Children = types.NewOrderedMap()
    overflow.EntityData.Leafs = types.NewOrderedMap()
    overflow.EntityData.Leafs.Append("overflow-threshold-percent", types.YLeaf{"OverflowThresholdPercent", overflow.OverflowThresholdPercent})
    overflow.EntityData.Leafs.Append("overflow-threshold-value", types.YLeaf{"OverflowThresholdValue", overflow.OverflowThresholdValue})
    overflow.EntityData.Leafs.Append("overflow-threshold-limit", types.YLeaf{"OverflowThresholdLimit", overflow.OverflowThresholdLimit})

    overflow.EntityData.YListKeys = []string {}

    return &(overflow.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits
// Set min/max bandwidth auto-bw can apply on a
// tunnel
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Set minimum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMinLimit interface{}

    // Set maximum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMaxLimit interface{}
}

func (bandwidthLimits *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_BandwidthLimits) GetEntityData() *types.CommonEntityData {
    bandwidthLimits.EntityData.YFilter = bandwidthLimits.YFilter
    bandwidthLimits.EntityData.YangName = "bandwidth-limits"
    bandwidthLimits.EntityData.BundleName = "cisco_ios_xr"
    bandwidthLimits.EntityData.ParentYangName = "auto-bandwidth"
    bandwidthLimits.EntityData.SegmentPath = "bandwidth-limits"
    bandwidthLimits.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/auto-bandwidth/" + bandwidthLimits.EntityData.SegmentPath
    bandwidthLimits.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthLimits.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthLimits.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthLimits.EntityData.Children = types.NewOrderedMap()
    bandwidthLimits.EntityData.Leafs = types.NewOrderedMap()
    bandwidthLimits.EntityData.Leafs.Append("bandwidth-min-limit", types.YLeaf{"BandwidthMinLimit", bandwidthLimits.BandwidthMinLimit})
    bandwidthLimits.EntityData.Leafs.Append("bandwidth-max-limit", types.YLeaf{"BandwidthMaxLimit", bandwidthLimits.BandwidthMaxLimit})

    bandwidthLimits.EntityData.YListKeys = []string {}

    return &(bandwidthLimits.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold
// Set the bandwidth change threshold to trigger
// adjustment
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bandwidth change percent to trigger adjustment. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    AdjustmentThresholdPercent interface{}

    // Bandwidth change value to trigger adjustment (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    AdjustmentThresholdValue interface{}
}

func (adjustmentThreshold *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AdjustmentThreshold) GetEntityData() *types.CommonEntityData {
    adjustmentThreshold.EntityData.YFilter = adjustmentThreshold.YFilter
    adjustmentThreshold.EntityData.YangName = "adjustment-threshold"
    adjustmentThreshold.EntityData.BundleName = "cisco_ios_xr"
    adjustmentThreshold.EntityData.ParentYangName = "auto-bandwidth"
    adjustmentThreshold.EntityData.SegmentPath = "adjustment-threshold"
    adjustmentThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/auto-bandwidth/" + adjustmentThreshold.EntityData.SegmentPath
    adjustmentThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjustmentThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjustmentThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjustmentThreshold.EntityData.Children = types.NewOrderedMap()
    adjustmentThreshold.EntityData.Leafs = types.NewOrderedMap()
    adjustmentThreshold.EntityData.Leafs.Append("adjustment-threshold-percent", types.YLeaf{"AdjustmentThresholdPercent", adjustmentThreshold.AdjustmentThresholdPercent})
    adjustmentThreshold.EntityData.Leafs.Append("adjustment-threshold-value", types.YLeaf{"AdjustmentThresholdValue", adjustmentThreshold.AdjustmentThresholdValue})

    adjustmentThreshold.EntityData.YListKeys = []string {}

    return &(adjustmentThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity
// Tunnel auto-capacity configuration data
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth value used to compute the desired number of tunnels for
    // auto-capacity. The type is interface{} with range: 0..4294967295. Units are
    // kbit/s.
    NominalBandwidth interface{}

    // Enable auto-capacityThe object must be set before any other auto capacity
    // configuration is supplied for the tunnel,and must be the last auto-capacity
    // configuration object to be removed. The type is bool.
    Enable interface{}

    // Lower limit on the number of clones can be created for the tunnel. The type
    // is interface{} with range: 0..63. The default value is 0.
    ClonesMinimum interface{}

    // Upper bandwidth limit that causes the tunnel to be split. The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    SplitBandwidth interface{}

    // Lower bandwidth limit that causes the tunnel to be merged. The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MergeBandwidth interface{}

    // Upper limit on the number of clones can be created for the tunnel. The type
    // is interface{} with range: 0..63. The default value is 63.
    ClonesMaximum interface{}
}

func (autoCapacity *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AutoBandwidth_AutoCapacity) GetEntityData() *types.CommonEntityData {
    autoCapacity.EntityData.YFilter = autoCapacity.YFilter
    autoCapacity.EntityData.YangName = "auto-capacity"
    autoCapacity.EntityData.BundleName = "cisco_ios_xr"
    autoCapacity.EntityData.ParentYangName = "auto-bandwidth"
    autoCapacity.EntityData.SegmentPath = "auto-capacity"
    autoCapacity.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/auto-bandwidth/" + autoCapacity.EntityData.SegmentPath
    autoCapacity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoCapacity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoCapacity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoCapacity.EntityData.Children = types.NewOrderedMap()
    autoCapacity.EntityData.Leafs = types.NewOrderedMap()
    autoCapacity.EntityData.Leafs.Append("nominal-bandwidth", types.YLeaf{"NominalBandwidth", autoCapacity.NominalBandwidth})
    autoCapacity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", autoCapacity.Enable})
    autoCapacity.EntityData.Leafs.Append("clones-minimum", types.YLeaf{"ClonesMinimum", autoCapacity.ClonesMinimum})
    autoCapacity.EntityData.Leafs.Append("split-bandwidth", types.YLeaf{"SplitBandwidth", autoCapacity.SplitBandwidth})
    autoCapacity.EntityData.Leafs.Append("merge-bandwidth", types.YLeaf{"MergeBandwidth", autoCapacity.MergeBandwidth})
    autoCapacity.EntityData.Leafs.Append("clones-maximum", types.YLeaf{"ClonesMaximum", autoCapacity.ClonesMaximum})

    autoCapacity.EntityData.YListKeys = []string {}

    return &(autoCapacity.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Priority) GetEntityData() *types.CommonEntityData {
    priority.EntityData.YFilter = priority.YFilter
    priority.EntityData.YangName = "priority"
    priority.EntityData.BundleName = "cisco_ios_xr"
    priority.EntityData.ParentYangName = "tunnel-te-attributes"
    priority.EntityData.SegmentPath = "priority"
    priority.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + priority.EntityData.SegmentPath
    priority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priority.EntityData.Children = types.NewOrderedMap()
    priority.EntityData.Leafs = types.NewOrderedMap()
    priority.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", priority.SetupPriority})
    priority.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", priority.HoldPriority})

    priority.EntityData.YListKeys = []string {}

    return &(priority.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Affinity flags. The type is string with pattern: b'[0-9a-fA-F]{1,8}'. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: b'[0-9a-fA-F]{1,8}'. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_AffinityMask) GetEntityData() *types.CommonEntityData {
    affinityMask.EntityData.YFilter = affinityMask.YFilter
    affinityMask.EntityData.YangName = "affinity-mask"
    affinityMask.EntityData.BundleName = "cisco_ios_xr"
    affinityMask.EntityData.ParentYangName = "tunnel-te-attributes"
    affinityMask.EntityData.SegmentPath = "affinity-mask"
    affinityMask.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + affinityMask.EntityData.SegmentPath
    affinityMask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    affinityMask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    affinityMask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    affinityMask.EntityData.Children = types.NewOrderedMap()
    affinityMask.EntityData.Leafs = types.NewOrderedMap()
    affinityMask.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", affinityMask.Affinity})
    affinityMask.EntityData.Leafs.Append("mask", types.YLeaf{"Mask", affinityMask.Mask})

    affinityMask.EntityData.YListKeys = []string {}

    return &(affinityMask.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency
// Forwarding adjacency announcement to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable forwarding adjacency. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 forwarding adjacency also. The
    // type is interface{}.
    IncludeIpv6 interface{}

    // Specify the holdtime for the tunnel as forwarding adjacency. The type is
    // interface{} with range: 0..20000.
    HoldTime interface{}
}

func (forwardingAdjacency *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_ForwardingAdjacency) GetEntityData() *types.CommonEntityData {
    forwardingAdjacency.EntityData.YFilter = forwardingAdjacency.YFilter
    forwardingAdjacency.EntityData.YangName = "forwarding-adjacency"
    forwardingAdjacency.EntityData.BundleName = "cisco_ios_xr"
    forwardingAdjacency.EntityData.ParentYangName = "tunnel-te-attributes"
    forwardingAdjacency.EntityData.SegmentPath = "forwarding-adjacency"
    forwardingAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + forwardingAdjacency.EntityData.SegmentPath
    forwardingAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAdjacency.EntityData.Children = types.NewOrderedMap()
    forwardingAdjacency.EntityData.Leafs = types.NewOrderedMap()
    forwardingAdjacency.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", forwardingAdjacency.Enable})
    forwardingAdjacency.EntityData.Leafs.Append("include-ipv6", types.YLeaf{"IncludeIpv6", forwardingAdjacency.IncludeIpv6})
    forwardingAdjacency.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", forwardingAdjacency.HoldTime})

    forwardingAdjacency.EntityData.YListKeys = []string {}

    return &(forwardingAdjacency.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    LspSwitchOverChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Log tunnel record-route messages. The type is interface{}.
    RecordRouteMesssage interface{}

    // Enable BFD session state change alarm. The type is interface{}.
    BfdStateMessage interface{}

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Logging) GetEntityData() *types.CommonEntityData {
    logging.EntityData.YFilter = logging.YFilter
    logging.EntityData.YangName = "logging"
    logging.EntityData.BundleName = "cisco_ios_xr"
    logging.EntityData.ParentYangName = "tunnel-te-attributes"
    logging.EntityData.SegmentPath = "logging"
    logging.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + logging.EntityData.SegmentPath
    logging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logging.EntityData.Children = types.NewOrderedMap()
    logging.EntityData.Leafs = types.NewOrderedMap()
    logging.EntityData.Leafs.Append("lsp-switch-over-change-message", types.YLeaf{"LspSwitchOverChangeMessage", logging.LspSwitchOverChangeMessage})
    logging.EntityData.Leafs.Append("all", types.YLeaf{"All", logging.All})
    logging.EntityData.Leafs.Append("record-route-messsage", types.YLeaf{"RecordRouteMesssage", logging.RecordRouteMesssage})
    logging.EntityData.Leafs.Append("bfd-state-message", types.YLeaf{"BfdStateMessage", logging.BfdStateMessage})
    logging.EntityData.Leafs.Append("bandwidth-change-message", types.YLeaf{"BandwidthChangeMessage", logging.BandwidthChangeMessage})
    logging.EntityData.Leafs.Append("reoptimize-attempts-message", types.YLeaf{"ReoptimizeAttemptsMessage", logging.ReoptimizeAttemptsMessage})
    logging.EntityData.Leafs.Append("reroute-messsage", types.YLeaf{"RerouteMesssage", logging.RerouteMesssage})
    logging.EntityData.Leafs.Append("state-message", types.YLeaf{"StateMessage", logging.StateMessage})
    logging.EntityData.Leafs.Append("insufficient-bw-message", types.YLeaf{"InsufficientBwMessage", logging.InsufficientBwMessage})
    logging.EntityData.Leafs.Append("reoptimized-message", types.YLeaf{"ReoptimizedMessage", logging.ReoptimizedMessage})
    logging.EntityData.Leafs.Append("pcalc-failure-message", types.YLeaf{"PcalcFailureMessage", logging.PcalcFailureMessage})

    logging.EntityData.YListKeys = []string {}

    return &(logging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "tunnel-te-attributes"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + bandwidth.EntityData.SegmentPath
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = types.NewOrderedMap()
    bandwidth.EntityData.Leafs = types.NewOrderedMap()
    bandwidth.EntityData.Leafs.Append("dste-type", types.YLeaf{"DsteType", bandwidth.DsteType})
    bandwidth.EntityData.Leafs.Append("class-or-pool-type", types.YLeaf{"ClassOrPoolType", bandwidth.ClassOrPoolType})
    bandwidth.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", bandwidth.Bandwidth})

    bandwidth.EntityData.YListKeys = []string {}

    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute
// Parameters for IGP routing over tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Announce tunnel to IGP.
    AutorouteAnnounce InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce

    // Tunnel Autoroute Destination(s).
    Destinations InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
}

func (autoroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute) GetEntityData() *types.CommonEntityData {
    autoroute.EntityData.YFilter = autoroute.YFilter
    autoroute.EntityData.YangName = "autoroute"
    autoroute.EntityData.BundleName = "cisco_ios_xr"
    autoroute.EntityData.ParentYangName = "tunnel-te-attributes"
    autoroute.EntityData.SegmentPath = "autoroute"
    autoroute.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + autoroute.EntityData.SegmentPath
    autoroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoroute.EntityData.Children = types.NewOrderedMap()
    autoroute.EntityData.Children.Append("autoroute-announce", types.YChild{"AutorouteAnnounce", &autoroute.AutorouteAnnounce})
    autoroute.EntityData.Children.Append("destinations", types.YChild{"Destinations", &autoroute.Destinations})
    autoroute.EntityData.Leafs = types.NewOrderedMap()

    autoroute.EntityData.YListKeys = []string {}

    return &(autoroute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce
// Announce tunnel to IGP
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable autoroute announce. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 autoroute announce also. The type
    // is interface{}.
    IncludeIpv6 interface{}

    // Exclude traffic on autorouted tunnel.
    ExcludeTraffic InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic

    // Specify MPLS tunnel metric.
    Metric InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
}

func (autorouteAnnounce *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce) GetEntityData() *types.CommonEntityData {
    autorouteAnnounce.EntityData.YFilter = autorouteAnnounce.YFilter
    autorouteAnnounce.EntityData.YangName = "autoroute-announce"
    autorouteAnnounce.EntityData.BundleName = "cisco_ios_xr"
    autorouteAnnounce.EntityData.ParentYangName = "autoroute"
    autorouteAnnounce.EntityData.SegmentPath = "autoroute-announce"
    autorouteAnnounce.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/autoroute/" + autorouteAnnounce.EntityData.SegmentPath
    autorouteAnnounce.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autorouteAnnounce.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autorouteAnnounce.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autorouteAnnounce.EntityData.Children = types.NewOrderedMap()
    autorouteAnnounce.EntityData.Children.Append("exclude-traffic", types.YChild{"ExcludeTraffic", &autorouteAnnounce.ExcludeTraffic})
    autorouteAnnounce.EntityData.Children.Append("metric", types.YChild{"Metric", &autorouteAnnounce.Metric})
    autorouteAnnounce.EntityData.Leafs = types.NewOrderedMap()
    autorouteAnnounce.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", autorouteAnnounce.Enable})
    autorouteAnnounce.EntityData.Leafs.Append("include-ipv6", types.YLeaf{"IncludeIpv6", autorouteAnnounce.IncludeIpv6})

    autorouteAnnounce.EntityData.YListKeys = []string {}

    return &(autorouteAnnounce.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic
// Exclude traffic on autorouted tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude tunnel in IGP for SR prefixes. The type is interface{}.
    SegmentRouting interface{}
}

func (excludeTraffic *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetEntityData() *types.CommonEntityData {
    excludeTraffic.EntityData.YFilter = excludeTraffic.YFilter
    excludeTraffic.EntityData.YangName = "exclude-traffic"
    excludeTraffic.EntityData.BundleName = "cisco_ios_xr"
    excludeTraffic.EntityData.ParentYangName = "autoroute-announce"
    excludeTraffic.EntityData.SegmentPath = "exclude-traffic"
    excludeTraffic.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/autoroute/autoroute-announce/" + excludeTraffic.EntityData.SegmentPath
    excludeTraffic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeTraffic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeTraffic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeTraffic.EntityData.Children = types.NewOrderedMap()
    excludeTraffic.EntityData.Leafs = types.NewOrderedMap()
    excludeTraffic.EntityData.Leafs.Append("segment-routing", types.YLeaf{"SegmentRouting", excludeTraffic.SegmentRouting})

    excludeTraffic.EntityData.YListKeys = []string {}

    return &(excludeTraffic.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric
// Specify MPLS tunnel metric
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autoroute tunnel metric type. The type is MplsTeAutorouteMetric.
    MetricType interface{}

    // The absolute metric value. The type is interface{} with range:
    // 1..2147483647.
    AbsoluteMetric interface{}

    // The value of the adjustment. The type is interface{} with range: -10..10.
    RelativeMetric interface{}

    // The constant metric value. The type is interface{} with range:
    // 1..2147483647.
    ConstantMetric interface{}
}

func (metric *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_AutorouteAnnounce_Metric) GetEntityData() *types.CommonEntityData {
    metric.EntityData.YFilter = metric.YFilter
    metric.EntityData.YangName = "metric"
    metric.EntityData.BundleName = "cisco_ios_xr"
    metric.EntityData.ParentYangName = "autoroute-announce"
    metric.EntityData.SegmentPath = "metric"
    metric.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/autoroute/autoroute-announce/" + metric.EntityData.SegmentPath
    metric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    metric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    metric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    metric.EntityData.Children = types.NewOrderedMap()
    metric.EntityData.Leafs = types.NewOrderedMap()
    metric.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", metric.MetricType})
    metric.EntityData.Leafs.Append("absolute-metric", types.YLeaf{"AbsoluteMetric", metric.AbsoluteMetric})
    metric.EntityData.Leafs.Append("relative-metric", types.YLeaf{"RelativeMetric", metric.RelativeMetric})
    metric.EntityData.Leafs.Append("constant-metric", types.YLeaf{"ConstantMetric", metric.ConstantMetric})

    metric.EntityData.YListKeys = []string {}

    return &(metric.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations
// Tunnel Autoroute Destination(s)
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address to add in RIB. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination.
    Destination []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
}

func (destinations *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations) GetEntityData() *types.CommonEntityData {
    destinations.EntityData.YFilter = destinations.YFilter
    destinations.EntityData.YangName = "destinations"
    destinations.EntityData.BundleName = "cisco_ios_xr"
    destinations.EntityData.ParentYangName = "autoroute"
    destinations.EntityData.SegmentPath = "destinations"
    destinations.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/autoroute/" + destinations.EntityData.SegmentPath
    destinations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinations.EntityData.Children = types.NewOrderedMap()
    destinations.EntityData.Children.Append("destination", types.YChild{"Destination", nil})
    for i := range destinations.Destination {
        destinations.EntityData.Children.Append(types.GetSegmentPath(destinations.Destination[i]), types.YChild{"Destination", destinations.Destination[i]})
    }
    destinations.EntityData.Leafs = types.NewOrderedMap()

    destinations.EntityData.YListKeys = []string {}

    return &(destinations.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination
// Destination address to add in RIB
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IP address of destination. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_Autoroute_Destinations_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "destinations"
    destination.EntityData.SegmentPath = "destination" + types.AddKeyToken(destination.DestinationAddress, "destination-address")
    destination.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/autoroute/destinations/" + destination.EntityData.SegmentPath
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", destination.DestinationAddress})

    destination.EntityData.YListKeys = []string {"DestinationAddress"}

    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses
// Policy classes for PBTS
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of Policy class. The type is slice of interface{} with range: 1..8.
    PolicyClass []interface{}
}

func (policyClasses *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_PolicyClasses) GetEntityData() *types.CommonEntityData {
    policyClasses.EntityData.YFilter = policyClasses.YFilter
    policyClasses.EntityData.YangName = "policy-classes"
    policyClasses.EntityData.BundleName = "cisco_ios_xr"
    policyClasses.EntityData.ParentYangName = "tunnel-te-attributes"
    policyClasses.EntityData.SegmentPath = "policy-classes"
    policyClasses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + policyClasses.EntityData.SegmentPath
    policyClasses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyClasses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyClasses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyClasses.EntityData.Children = types.NewOrderedMap()
    policyClasses.EntityData.Leafs = types.NewOrderedMap()
    policyClasses.EntityData.Leafs.Append("policy-class", types.YLeaf{"PolicyClass", policyClasses.PolicyClass})

    policyClasses.EntityData.YListKeys = []string {}

    return &(policyClasses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []*InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypes.EntityData.YFilter = newStyleAffinityAffinityTypes.YFilter
    newStyleAffinityAffinityTypes.EntityData.YangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypes.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypes.EntityData.ParentYangName = "tunnel-te-attributes"
    newStyleAffinityAffinityTypes.EntityData.SegmentPath = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + newStyleAffinityAffinityTypes.EntityData.SegmentPath
    newStyleAffinityAffinityTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypes.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type", types.YChild{"NewStyleAffinityAffinityType", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]), types.YChild{"NewStyleAffinityAffinityType", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1", types.YChild{"NewStyleAffinityAffinityTypeAffinity1", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Children.Append("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10", types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", nil})
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        newStyleAffinityAffinityTypes.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]), types.YChild{"NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10", newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]})
    }
    newStyleAffinityAffinityTypes.EntityData.Leafs = types.NewOrderedMap()

    newStyleAffinityAffinityTypes.EntityData.YListKeys = []string {}

    return &(newStyleAffinityAffinityTypes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityType.EntityData.YFilter = newStyleAffinityAffinityType.YFilter
    newStyleAffinityAffinityType.EntityData.YangName = "new-style-affinity-affinity-type"
    newStyleAffinityAffinityType.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityType.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityType.EntityData.SegmentPath = "new-style-affinity-affinity-type" + types.AddKeyToken(newStyleAffinityAffinityType.AffinityType, "affinity-type")
    newStyleAffinityAffinityType.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityType.EntityData.SegmentPath
    newStyleAffinityAffinityType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityType.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityType.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityType.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityType.AffinityType})

    newStyleAffinityAffinityType.EntityData.YListKeys = []string {"AffinityType"}

    return &(newStyleAffinityAffinityType.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1.YFilter
    newStyleAffinityAffinityTypeAffinity1.EntityData.YangName = "new-style-affinity-affinity-type-affinity1"
    newStyleAffinityAffinityTypeAffinity1.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1.Affinity1, "affinity1")
    newStyleAffinityAffinityTypeAffinity1.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1.AffinityType})
    newStyleAffinityAffinityTypeAffinity1.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1.Affinity1})

    newStyleAffinityAffinityTypeAffinity1.EntityData.YListKeys = []string {"AffinityType", "Affinity1"}

    return &(newStyleAffinityAffinityTypeAffinity1.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2, "affinity2")
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2})

    newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3, "affinity3")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4, "affinity4")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5, "affinity5")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6, "affinity6")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6, "affinity6") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7, "affinity7")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.Leafs.Append("affinity7", types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6", "Affinity7"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6, "affinity6") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7, "affinity7") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8, "affinity8")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity7", types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.Leafs.Append("affinity8", types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6", "Affinity7", "Affinity8"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6, "affinity6") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7, "affinity7") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8, "affinity8") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9, "affinity9")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity7", types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity8", types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.Leafs.Append("affinity9", types.YLeaf{"Affinity9", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6", "Affinity7", "Affinity8", "Affinity9"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetEntityData() *types.CommonEntityData {
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.YFilter = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.YangName = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.ParentYangName = "new-style-affinity-affinity-types"
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.SegmentPath = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6, "affinity6") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7, "affinity7") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8, "affinity8") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9, "affinity9") + types.AddKeyToken(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10, "affinity10")
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/new-style-affinity-affinity-types/" + newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.SegmentPath
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Children = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity7", types.YLeaf{"Affinity7", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity8", types.YLeaf{"Affinity8", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity9", types.YLeaf{"Affinity9", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9})
    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.Leafs.Append("affinity10", types.YLeaf{"Affinity10", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10})

    newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6", "Affinity7", "Affinity8", "Affinity9", "Affinity10"}

    return &(newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *InterfaceConfigurations_InterfaceConfiguration_TunnelTeAttributes_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "tunnel-te-attributes"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes/" + fastReroute.EntityData.SegmentPath
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = types.NewOrderedMap()
    fastReroute.EntityData.Leafs = types.NewOrderedMap()
    fastReroute.EntityData.Leafs.Append("bandwidth-protection", types.YLeaf{"BandwidthProtection", fastReroute.BandwidthProtection})
    fastReroute.EntityData.Leafs.Append("node-protection", types.YLeaf{"NodeProtection", fastReroute.NodeProtection})

    fastReroute.EntityData.YListKeys = []string {}

    return &(fastReroute.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel
// MPLS-TP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Transport profile node identifier in IPv4 address format. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Configure BFD parameters.
    Bfd InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd

    // Working LSP.
    WorkingLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp

    // Node identifier and optional global identifier and tunnel identifier at
    // destination.
    Destination InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination

    // Fault management.
    Fault InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault

    // Protect LSP.
    ProtectLsp InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
}

func (transportProfileTunnel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel) GetEntityData() *types.CommonEntityData {
    transportProfileTunnel.EntityData.YFilter = transportProfileTunnel.YFilter
    transportProfileTunnel.EntityData.YangName = "transport-profile-tunnel"
    transportProfileTunnel.EntityData.BundleName = "cisco_ios_xr"
    transportProfileTunnel.EntityData.ParentYangName = "interface-configuration"
    transportProfileTunnel.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"
    transportProfileTunnel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + transportProfileTunnel.EntityData.SegmentPath
    transportProfileTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transportProfileTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transportProfileTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transportProfileTunnel.EntityData.Children = types.NewOrderedMap()
    transportProfileTunnel.EntityData.Children.Append("bfd", types.YChild{"Bfd", &transportProfileTunnel.Bfd})
    transportProfileTunnel.EntityData.Children.Append("working-lsp", types.YChild{"WorkingLsp", &transportProfileTunnel.WorkingLsp})
    transportProfileTunnel.EntityData.Children.Append("destination", types.YChild{"Destination", &transportProfileTunnel.Destination})
    transportProfileTunnel.EntityData.Children.Append("fault", types.YChild{"Fault", &transportProfileTunnel.Fault})
    transportProfileTunnel.EntityData.Children.Append("protect-lsp", types.YChild{"ProtectLsp", &transportProfileTunnel.ProtectLsp})
    transportProfileTunnel.EntityData.Leafs = types.NewOrderedMap()
    transportProfileTunnel.EntityData.Leafs.Append("source", types.YLeaf{"Source", transportProfileTunnel.Source})

    transportProfileTunnel.EntityData.YListKeys = []string {}

    return &(transportProfileTunnel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd
// Configure BFD parameters
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..10.
    DetectionMultiplier interface{}

    // Configure BFD parameters. The type is interface{}.
    Enable interface{}

    // Detect multiplier for standby transport profile LSP. The type is
    // interface{} with range: 2..10.
    MultiplierStandby interface{}

    // Hello interval, either in milli-seconds or in micro-seconds.
    MinInterval InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval

    // Hello interval for standby transport profile LSP, either in milli-seconds
    // or in micro-seconds.
    MinIntervalStandby InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "transport-profile-tunnel"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Children.Append("min-interval", types.YChild{"MinInterval", &bfd.MinInterval})
    bfd.EntityData.Children.Append("min-interval-standby", types.YChild{"MinIntervalStandby", &bfd.MinIntervalStandby})
    bfd.EntityData.Leafs = types.NewOrderedMap()
    bfd.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier})
    bfd.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", bfd.Enable})
    bfd.EntityData.Leafs.Append("multiplier-standby", types.YLeaf{"MultiplierStandby", bfd.MultiplierStandby})

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval
// Hello interval, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalUs interface{}
}

func (minInterval *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinInterval) GetEntityData() *types.CommonEntityData {
    minInterval.EntityData.YFilter = minInterval.YFilter
    minInterval.EntityData.YangName = "min-interval"
    minInterval.EntityData.BundleName = "cisco_ios_xr"
    minInterval.EntityData.ParentYangName = "bfd"
    minInterval.EntityData.SegmentPath = "min-interval"
    minInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/bfd/" + minInterval.EntityData.SegmentPath
    minInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minInterval.EntityData.Children = types.NewOrderedMap()
    minInterval.EntityData.Leafs = types.NewOrderedMap()
    minInterval.EntityData.Leafs.Append("interval-ms", types.YLeaf{"IntervalMs", minInterval.IntervalMs})
    minInterval.EntityData.Leafs.Append("interval-us", types.YLeaf{"IntervalUs", minInterval.IntervalUs})

    minInterval.EntityData.YListKeys = []string {}

    return &(minInterval.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby
// Hello interval for standby transport profile
// LSP, either in milli-seconds or in
// micro-seconds
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000.
    IntervalStandbyMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000.
    IntervalStandbyUs interface{}
}

func (minIntervalStandby *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Bfd_MinIntervalStandby) GetEntityData() *types.CommonEntityData {
    minIntervalStandby.EntityData.YFilter = minIntervalStandby.YFilter
    minIntervalStandby.EntityData.YangName = "min-interval-standby"
    minIntervalStandby.EntityData.BundleName = "cisco_ios_xr"
    minIntervalStandby.EntityData.ParentYangName = "bfd"
    minIntervalStandby.EntityData.SegmentPath = "min-interval-standby"
    minIntervalStandby.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/bfd/" + minIntervalStandby.EntityData.SegmentPath
    minIntervalStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minIntervalStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minIntervalStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minIntervalStandby.EntityData.Children = types.NewOrderedMap()
    minIntervalStandby.EntityData.Leafs = types.NewOrderedMap()
    minIntervalStandby.EntityData.Leafs.Append("interval-standby-ms", types.YLeaf{"IntervalStandbyMs", minIntervalStandby.IntervalStandbyMs})
    minIntervalStandby.EntityData.Leafs.Append("interval-standby-us", types.YLeaf{"IntervalStandbyUs", minIntervalStandby.IntervalStandbyUs})

    minIntervalStandby.EntityData.YListKeys = []string {}

    return &(minIntervalStandby.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp
// Working LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Incoming MPLS label of the working LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of working LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the working LSP. The type is interface{} with range:
    // 0..65535. The default value is 0.
    LspId interface{}

    // Outgoing MPLS label of the working LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
}

func (workingLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp) GetEntityData() *types.CommonEntityData {
    workingLsp.EntityData.YFilter = workingLsp.YFilter
    workingLsp.EntityData.YangName = "working-lsp"
    workingLsp.EntityData.BundleName = "cisco_ios_xr"
    workingLsp.EntityData.ParentYangName = "transport-profile-tunnel"
    workingLsp.EntityData.SegmentPath = "working-lsp"
    workingLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/" + workingLsp.EntityData.SegmentPath
    workingLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    workingLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    workingLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    workingLsp.EntityData.Children = types.NewOrderedMap()
    workingLsp.EntityData.Children.Append("out-label", types.YChild{"OutLabel", &workingLsp.OutLabel})
    workingLsp.EntityData.Leafs = types.NewOrderedMap()
    workingLsp.EntityData.Leafs.Append("in-label", types.YLeaf{"InLabel", workingLsp.InLabel})
    workingLsp.EntityData.Leafs.Append("lockout", types.YLeaf{"Lockout", workingLsp.Lockout})
    workingLsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", workingLsp.LspId})

    workingLsp.EntityData.YListKeys = []string {}

    return &(workingLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel
// Outgoing MPLS label of the working LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_WorkingLsp_OutLabel) GetEntityData() *types.CommonEntityData {
    outLabel.EntityData.YFilter = outLabel.YFilter
    outLabel.EntityData.YangName = "out-label"
    outLabel.EntityData.BundleName = "cisco_ios_xr"
    outLabel.EntityData.ParentYangName = "working-lsp"
    outLabel.EntityData.SegmentPath = "out-label"
    outLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/working-lsp/" + outLabel.EntityData.SegmentPath
    outLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outLabel.EntityData.Children = types.NewOrderedMap()
    outLabel.EntityData.Leafs = types.NewOrderedMap()
    outLabel.EntityData.Leafs.Append("label", types.YLeaf{"Label", outLabel.Label})
    outLabel.EntityData.Leafs.Append("link", types.YLeaf{"Link", outLabel.Link})

    outLabel.EntityData.YListKeys = []string {}

    return &(outLabel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination
// Node identifier and optional global identifier
// and tunnel identifier at destination
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node identifier in IPv4 address format. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeId interface{}

    // Numeric global identifier. The type is interface{} with range: 1..65535.
    GlobalId interface{}

    // Numeric tunnel identifier. The type is interface{} with range: 0..65535.
    TunnelId interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "transport-profile-tunnel"
    destination.EntityData.SegmentPath = "destination"
    destination.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/" + destination.EntityData.SegmentPath
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", destination.NodeId})
    destination.EntityData.Leafs.Append("global-id", types.YLeaf{"GlobalId", destination.GlobalId})
    destination.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", destination.TunnelId})

    destination.EntityData.YListKeys = []string {}

    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault
// Fault management
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter transport profile tunnel fault configuration. The type is
    // interface{}.
    Enable interface{}

    // OAM events that trigger protection switching.
    ProtectionTrigger InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
}

func (fault *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault) GetEntityData() *types.CommonEntityData {
    fault.EntityData.YFilter = fault.YFilter
    fault.EntityData.YangName = "fault"
    fault.EntityData.BundleName = "cisco_ios_xr"
    fault.EntityData.ParentYangName = "transport-profile-tunnel"
    fault.EntityData.SegmentPath = "fault"
    fault.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/" + fault.EntityData.SegmentPath
    fault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fault.EntityData.Children = types.NewOrderedMap()
    fault.EntityData.Children.Append("protection-trigger", types.YChild{"ProtectionTrigger", &fault.ProtectionTrigger})
    fault.EntityData.Leafs = types.NewOrderedMap()
    fault.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", fault.Enable})

    fault.EntityData.YListKeys = []string {}

    return &(fault.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger
// OAM events that trigger protection switching
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable protection switching due to LDI event. The type is bool.
    Ldi interface{}

    // Enable protection switching due to AIS event. The type is bool.
    Ais interface{}

    // Enable protection switching due to LKR event. The type is bool.
    Lkr interface{}
}

func (protectionTrigger *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_Fault_ProtectionTrigger) GetEntityData() *types.CommonEntityData {
    protectionTrigger.EntityData.YFilter = protectionTrigger.YFilter
    protectionTrigger.EntityData.YangName = "protection-trigger"
    protectionTrigger.EntityData.BundleName = "cisco_ios_xr"
    protectionTrigger.EntityData.ParentYangName = "fault"
    protectionTrigger.EntityData.SegmentPath = "protection-trigger"
    protectionTrigger.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/fault/" + protectionTrigger.EntityData.SegmentPath
    protectionTrigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectionTrigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectionTrigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectionTrigger.EntityData.Children = types.NewOrderedMap()
    protectionTrigger.EntityData.Leafs = types.NewOrderedMap()
    protectionTrigger.EntityData.Leafs.Append("ldi", types.YLeaf{"Ldi", protectionTrigger.Ldi})
    protectionTrigger.EntityData.Leafs.Append("ais", types.YLeaf{"Ais", protectionTrigger.Ais})
    protectionTrigger.EntityData.Leafs.Append("lkr", types.YLeaf{"Lkr", protectionTrigger.Lkr})

    protectionTrigger.EntityData.YListKeys = []string {}

    return &(protectionTrigger.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp
// Protect LSP
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Incoming MPLS label of the protect LSP. The type is interface{} with range:
    // 16..4015.
    InLabel interface{}

    // Enable lockout of protect LSP. The type is interface{}.
    Lockout interface{}

    // LSP Identifier of the protect LSP. The type is interface{} with range:
    // 0..65535. The default value is 1.
    LspId interface{}

    // Outgoing MPLS label of the protect LSP.
    OutLabel InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
}

func (protectLsp *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp) GetEntityData() *types.CommonEntityData {
    protectLsp.EntityData.YFilter = protectLsp.YFilter
    protectLsp.EntityData.YangName = "protect-lsp"
    protectLsp.EntityData.BundleName = "cisco_ios_xr"
    protectLsp.EntityData.ParentYangName = "transport-profile-tunnel"
    protectLsp.EntityData.SegmentPath = "protect-lsp"
    protectLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/" + protectLsp.EntityData.SegmentPath
    protectLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectLsp.EntityData.Children = types.NewOrderedMap()
    protectLsp.EntityData.Children.Append("out-label", types.YChild{"OutLabel", &protectLsp.OutLabel})
    protectLsp.EntityData.Leafs = types.NewOrderedMap()
    protectLsp.EntityData.Leafs.Append("in-label", types.YLeaf{"InLabel", protectLsp.InLabel})
    protectLsp.EntityData.Leafs.Append("lockout", types.YLeaf{"Lockout", protectLsp.Lockout})
    protectLsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", protectLsp.LspId})

    protectLsp.EntityData.YListKeys = []string {}

    return &(protectLsp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel
// Outgoing MPLS label of the protect LSP
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // MPLS label. The type is interface{} with range: 16..1048575.
    Label interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    Link interface{}
}

func (outLabel *InterfaceConfigurations_InterfaceConfiguration_TransportProfileTunnel_ProtectLsp_OutLabel) GetEntityData() *types.CommonEntityData {
    outLabel.EntityData.YFilter = outLabel.YFilter
    outLabel.EntityData.YangName = "out-label"
    outLabel.EntityData.BundleName = "cisco_ios_xr"
    outLabel.EntityData.ParentYangName = "protect-lsp"
    outLabel.EntityData.SegmentPath = "out-label"
    outLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel/protect-lsp/" + outLabel.EntityData.SegmentPath
    outLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outLabel.EntityData.Children = types.NewOrderedMap()
    outLabel.EntityData.Leafs = types.NewOrderedMap()
    outLabel.EntityData.Leafs.Append("label", types.YLeaf{"Label", outLabel.Label})
    outLabel.EntityData.Leafs.Append("link", types.YLeaf{"Link", outLabel.Link})

    outLabel.EntityData.YListKeys = []string {}

    return &(outLabel.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes
// MPLS P2MP tunnel attributes
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Record route used by individual P2MP S2L(s). The type is interface{}.
    RecordRoute interface{}

    // The name of the P2MP tunnel to be included in signalling messages. The type
    // is string with length: 1..254.
    SignalledName interface{}

    // Path selection configuration for this specific tunnel. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // P2MP tunnel ipv6 signalled payload. The type is string with pattern:
    // b'[0-9a-fA-F]{1,8}'.
    SignalledPayload interface{}

    // Specify P2MP tunnel can be fast-rerouted. The type is interface{}.
    FastReroute interface{}

    // Impose an explicit null bellow the TE label. The type is interface{}.
    ImposeExplicitNull interface{}

    // P2MP destination table.
    DestinationLeafs InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs

    // P2MP tunnel setup and hold priorities.
    Priority InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority

    // P2MP tunnel new style affinity attributes table.
    NewStyleAffinities InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities

    // P2MP tunnel bandwidth requirement.
    Bandwidth InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth

    // P2MP tunnel affinity and mask.
    AffinityMask InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask

    // Log tunnel LSP messages.
    Logging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
}

func (mteTunnelAttributes *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes) GetEntityData() *types.CommonEntityData {
    mteTunnelAttributes.EntityData.YFilter = mteTunnelAttributes.YFilter
    mteTunnelAttributes.EntityData.YangName = "mte-tunnel-attributes"
    mteTunnelAttributes.EntityData.BundleName = "cisco_ios_xr"
    mteTunnelAttributes.EntityData.ParentYangName = "interface-configuration"
    mteTunnelAttributes.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"
    mteTunnelAttributes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + mteTunnelAttributes.EntityData.SegmentPath
    mteTunnelAttributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mteTunnelAttributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mteTunnelAttributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mteTunnelAttributes.EntityData.Children = types.NewOrderedMap()
    mteTunnelAttributes.EntityData.Children.Append("destination-leafs", types.YChild{"DestinationLeafs", &mteTunnelAttributes.DestinationLeafs})
    mteTunnelAttributes.EntityData.Children.Append("priority", types.YChild{"Priority", &mteTunnelAttributes.Priority})
    mteTunnelAttributes.EntityData.Children.Append("new-style-affinities", types.YChild{"NewStyleAffinities", &mteTunnelAttributes.NewStyleAffinities})
    mteTunnelAttributes.EntityData.Children.Append("bandwidth", types.YChild{"Bandwidth", &mteTunnelAttributes.Bandwidth})
    mteTunnelAttributes.EntityData.Children.Append("affinity-mask", types.YChild{"AffinityMask", &mteTunnelAttributes.AffinityMask})
    mteTunnelAttributes.EntityData.Children.Append("logging", types.YChild{"Logging", &mteTunnelAttributes.Logging})
    mteTunnelAttributes.EntityData.Leafs = types.NewOrderedMap()
    mteTunnelAttributes.EntityData.Leafs.Append("record-route", types.YLeaf{"RecordRoute", mteTunnelAttributes.RecordRoute})
    mteTunnelAttributes.EntityData.Leafs.Append("signalled-name", types.YLeaf{"SignalledName", mteTunnelAttributes.SignalledName})
    mteTunnelAttributes.EntityData.Leafs.Append("path-selection-metric", types.YLeaf{"PathSelectionMetric", mteTunnelAttributes.PathSelectionMetric})
    mteTunnelAttributes.EntityData.Leafs.Append("signalled-payload", types.YLeaf{"SignalledPayload", mteTunnelAttributes.SignalledPayload})
    mteTunnelAttributes.EntityData.Leafs.Append("fast-reroute", types.YLeaf{"FastReroute", mteTunnelAttributes.FastReroute})
    mteTunnelAttributes.EntityData.Leafs.Append("impose-explicit-null", types.YLeaf{"ImposeExplicitNull", mteTunnelAttributes.ImposeExplicitNull})

    mteTunnelAttributes.EntityData.YListKeys = []string {}

    return &(mteTunnelAttributes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs
// P2MP destination table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2MP destination leaf. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf.
    DestinationLeaf []*InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
}

func (destinationLeafs *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs) GetEntityData() *types.CommonEntityData {
    destinationLeafs.EntityData.YFilter = destinationLeafs.YFilter
    destinationLeafs.EntityData.YangName = "destination-leafs"
    destinationLeafs.EntityData.BundleName = "cisco_ios_xr"
    destinationLeafs.EntityData.ParentYangName = "mte-tunnel-attributes"
    destinationLeafs.EntityData.SegmentPath = "destination-leafs"
    destinationLeafs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + destinationLeafs.EntityData.SegmentPath
    destinationLeafs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationLeafs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationLeafs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationLeafs.EntityData.Children = types.NewOrderedMap()
    destinationLeafs.EntityData.Children.Append("destination-leaf", types.YChild{"DestinationLeaf", nil})
    for i := range destinationLeafs.DestinationLeaf {
        destinationLeafs.EntityData.Children.Append(types.GetSegmentPath(destinationLeafs.DestinationLeaf[i]), types.YChild{"DestinationLeaf", destinationLeafs.DestinationLeaf[i]})
    }
    destinationLeafs.EntityData.Leafs = types.NewOrderedMap()

    destinationLeafs.EntityData.YListKeys = []string {}

    return &(destinationLeafs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf
// P2MP destination leaf
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of P2MP destination. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Disables P2MP destination. The type is interface{}.
    DestinationDisable interface{}

    // Always set to true. The type is interface{}.
    Destination interface{}

    // Log tunnel destination s2l messages.
    S2lLogging InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2lLogging

    // P2MP destination path-options attributes table.
    PathOptions InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
}

func (destinationLeaf *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf) GetEntityData() *types.CommonEntityData {
    destinationLeaf.EntityData.YFilter = destinationLeaf.YFilter
    destinationLeaf.EntityData.YangName = "destination-leaf"
    destinationLeaf.EntityData.BundleName = "cisco_ios_xr"
    destinationLeaf.EntityData.ParentYangName = "destination-leafs"
    destinationLeaf.EntityData.SegmentPath = "destination-leaf" + types.AddKeyToken(destinationLeaf.Address, "address")
    destinationLeaf.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/destination-leafs/" + destinationLeaf.EntityData.SegmentPath
    destinationLeaf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationLeaf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationLeaf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationLeaf.EntityData.Children = types.NewOrderedMap()
    destinationLeaf.EntityData.Children.Append("s2l-logging", types.YChild{"S2lLogging", &destinationLeaf.S2lLogging})
    destinationLeaf.EntityData.Children.Append("path-options", types.YChild{"PathOptions", &destinationLeaf.PathOptions})
    destinationLeaf.EntityData.Leafs = types.NewOrderedMap()
    destinationLeaf.EntityData.Leafs.Append("address", types.YLeaf{"Address", destinationLeaf.Address})
    destinationLeaf.EntityData.Leafs.Append("destination-disable", types.YLeaf{"DestinationDisable", destinationLeaf.DestinationDisable})
    destinationLeaf.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", destinationLeaf.Destination})

    destinationLeaf.EntityData.YListKeys = []string {"Address"}

    return &(destinationLeaf.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2lLogging
// Log tunnel destination s2l messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2lLogging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel destination s2l rereoute messages. The type is interface{}.
    S2lRerouteMesssage interface{}

    // Log tunnel destination s2l insufficient BW messages. The type is
    // interface{}.
    S2lInsufficientBwMesssage interface{}

    // Enable logging for destination s2l path-calculation failures. The type is
    // interface{}.
    S2lPcalcFailureMessage interface{}

    // Log tunnel destination s2l state messages. The type is interface{}.
    S2lStateMessage interface{}
}

func (s2lLogging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_S2lLogging) GetEntityData() *types.CommonEntityData {
    s2lLogging.EntityData.YFilter = s2lLogging.YFilter
    s2lLogging.EntityData.YangName = "s2l-logging"
    s2lLogging.EntityData.BundleName = "cisco_ios_xr"
    s2lLogging.EntityData.ParentYangName = "destination-leaf"
    s2lLogging.EntityData.SegmentPath = "s2l-logging"
    s2lLogging.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/destination-leafs/destination-leaf/" + s2lLogging.EntityData.SegmentPath
    s2lLogging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lLogging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lLogging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lLogging.EntityData.Children = types.NewOrderedMap()
    s2lLogging.EntityData.Leafs = types.NewOrderedMap()
    s2lLogging.EntityData.Leafs.Append("s2l-reroute-messsage", types.YLeaf{"S2lRerouteMesssage", s2lLogging.S2lRerouteMesssage})
    s2lLogging.EntityData.Leafs.Append("s2l-insufficient-bw-messsage", types.YLeaf{"S2lInsufficientBwMesssage", s2lLogging.S2lInsufficientBwMesssage})
    s2lLogging.EntityData.Leafs.Append("s2l-pcalc-failure-message", types.YLeaf{"S2lPcalcFailureMessage", s2lLogging.S2lPcalcFailureMessage})
    s2lLogging.EntityData.Leafs.Append("s2l-state-message", types.YLeaf{"S2lStateMessage", s2lLogging.S2lStateMessage})

    s2lLogging.EntityData.YListKeys = []string {}

    return &(s2lLogging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions
// P2MP destination path-options attributes
// table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2MP destination path option. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption.
    PathOption []*InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
}

func (pathOptions *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions) GetEntityData() *types.CommonEntityData {
    pathOptions.EntityData.YFilter = pathOptions.YFilter
    pathOptions.EntityData.YangName = "path-options"
    pathOptions.EntityData.BundleName = "cisco_ios_xr"
    pathOptions.EntityData.ParentYangName = "destination-leaf"
    pathOptions.EntityData.SegmentPath = "path-options"
    pathOptions.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/destination-leafs/destination-leaf/" + pathOptions.EntityData.SegmentPath
    pathOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOptions.EntityData.Children = types.NewOrderedMap()
    pathOptions.EntityData.Children.Append("path-option", types.YChild{"PathOption", nil})
    for i := range pathOptions.PathOption {
        pathOptions.EntityData.Children.Append(types.GetSegmentPath(pathOptions.PathOption[i]), types.YChild{"PathOption", pathOptions.PathOption[i]})
    }
    pathOptions.EntityData.Leafs = types.NewOrderedMap()

    pathOptions.EntityData.YListKeys = []string {}

    return &(pathOptions.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption
// P2MP destination path option
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Lockdown interface{}

    // Path option properties. The type is MplsTePathOptionProperty.
    Verbatim interface{}
}

func (pathOption *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_DestinationLeafs_DestinationLeaf_PathOptions_PathOption) GetEntityData() *types.CommonEntityData {
    pathOption.EntityData.YFilter = pathOption.YFilter
    pathOption.EntityData.YangName = "path-option"
    pathOption.EntityData.BundleName = "cisco_ios_xr"
    pathOption.EntityData.ParentYangName = "path-options"
    pathOption.EntityData.SegmentPath = "path-option" + types.AddKeyToken(pathOption.PreferenceLevel, "preference-level")
    pathOption.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/destination-leafs/destination-leaf/path-options/" + pathOption.EntityData.SegmentPath
    pathOption.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathOption.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathOption.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathOption.EntityData.Children = types.NewOrderedMap()
    pathOption.EntityData.Leafs = types.NewOrderedMap()
    pathOption.EntityData.Leafs.Append("preference-level", types.YLeaf{"PreferenceLevel", pathOption.PreferenceLevel})
    pathOption.EntityData.Leafs.Append("path-type", types.YLeaf{"PathType", pathOption.PathType})
    pathOption.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", pathOption.PathId})
    pathOption.EntityData.Leafs.Append("path-name", types.YLeaf{"PathName", pathOption.PathName})
    pathOption.EntityData.Leafs.Append("lockdown", types.YLeaf{"Lockdown", pathOption.Lockdown})
    pathOption.EntityData.Leafs.Append("verbatim", types.YLeaf{"Verbatim", pathOption.Verbatim})

    pathOption.EntityData.YListKeys = []string {"PreferenceLevel"}

    return &(pathOption.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority
// P2MP tunnel setup and hold priorities
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Priority) GetEntityData() *types.CommonEntityData {
    priority.EntityData.YFilter = priority.YFilter
    priority.EntityData.YangName = "priority"
    priority.EntityData.BundleName = "cisco_ios_xr"
    priority.EntityData.ParentYangName = "mte-tunnel-attributes"
    priority.EntityData.SegmentPath = "priority"
    priority.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + priority.EntityData.SegmentPath
    priority.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    priority.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    priority.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    priority.EntityData.Children = types.NewOrderedMap()
    priority.EntityData.Leafs = types.NewOrderedMap()
    priority.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", priority.SetupPriority})
    priority.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", priority.HoldPriority})

    priority.EntityData.YListKeys = []string {}

    return &(priority.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities
// P2MP tunnel new style affinity attributes table
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity.
    NewStyleAffinity []*InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
}

func (newStyleAffinities *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities) GetEntityData() *types.CommonEntityData {
    newStyleAffinities.EntityData.YFilter = newStyleAffinities.YFilter
    newStyleAffinities.EntityData.YangName = "new-style-affinities"
    newStyleAffinities.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinities.EntityData.ParentYangName = "mte-tunnel-attributes"
    newStyleAffinities.EntityData.SegmentPath = "new-style-affinities"
    newStyleAffinities.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + newStyleAffinities.EntityData.SegmentPath
    newStyleAffinities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinities.EntityData.Children = types.NewOrderedMap()
    newStyleAffinities.EntityData.Children.Append("new-style-affinity", types.YChild{"NewStyleAffinity", nil})
    for i := range newStyleAffinities.NewStyleAffinity {
        newStyleAffinities.EntityData.Children.Append(types.GetSegmentPath(newStyleAffinities.NewStyleAffinity[i]), types.YChild{"NewStyleAffinity", newStyleAffinities.NewStyleAffinity[i]})
    }
    newStyleAffinities.EntityData.Leafs = types.NewOrderedMap()

    newStyleAffinities.EntityData.YListKeys = []string {}

    return &(newStyleAffinities.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity
// Tunnel new style affinity attribute
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Affinity10 interface{}
}

func (newStyleAffinity *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_NewStyleAffinities_NewStyleAffinity) GetEntityData() *types.CommonEntityData {
    newStyleAffinity.EntityData.YFilter = newStyleAffinity.YFilter
    newStyleAffinity.EntityData.YangName = "new-style-affinity"
    newStyleAffinity.EntityData.BundleName = "cisco_ios_xr"
    newStyleAffinity.EntityData.ParentYangName = "new-style-affinities"
    newStyleAffinity.EntityData.SegmentPath = "new-style-affinity" + types.AddKeyToken(newStyleAffinity.AffinityType, "affinity-type") + types.AddKeyToken(newStyleAffinity.Affinity1, "affinity1") + types.AddKeyToken(newStyleAffinity.Affinity2, "affinity2") + types.AddKeyToken(newStyleAffinity.Affinity3, "affinity3") + types.AddKeyToken(newStyleAffinity.Affinity4, "affinity4") + types.AddKeyToken(newStyleAffinity.Affinity5, "affinity5") + types.AddKeyToken(newStyleAffinity.Affinity6, "affinity6") + types.AddKeyToken(newStyleAffinity.Affinity7, "affinity7") + types.AddKeyToken(newStyleAffinity.Affinity8, "affinity8") + types.AddKeyToken(newStyleAffinity.Affinity9, "affinity9") + types.AddKeyToken(newStyleAffinity.Affinity10, "affinity10")
    newStyleAffinity.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/new-style-affinities/" + newStyleAffinity.EntityData.SegmentPath
    newStyleAffinity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newStyleAffinity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newStyleAffinity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newStyleAffinity.EntityData.Children = types.NewOrderedMap()
    newStyleAffinity.EntityData.Leafs = types.NewOrderedMap()
    newStyleAffinity.EntityData.Leafs.Append("affinity-type", types.YLeaf{"AffinityType", newStyleAffinity.AffinityType})
    newStyleAffinity.EntityData.Leafs.Append("affinity1", types.YLeaf{"Affinity1", newStyleAffinity.Affinity1})
    newStyleAffinity.EntityData.Leafs.Append("affinity2", types.YLeaf{"Affinity2", newStyleAffinity.Affinity2})
    newStyleAffinity.EntityData.Leafs.Append("affinity3", types.YLeaf{"Affinity3", newStyleAffinity.Affinity3})
    newStyleAffinity.EntityData.Leafs.Append("affinity4", types.YLeaf{"Affinity4", newStyleAffinity.Affinity4})
    newStyleAffinity.EntityData.Leafs.Append("affinity5", types.YLeaf{"Affinity5", newStyleAffinity.Affinity5})
    newStyleAffinity.EntityData.Leafs.Append("affinity6", types.YLeaf{"Affinity6", newStyleAffinity.Affinity6})
    newStyleAffinity.EntityData.Leafs.Append("affinity7", types.YLeaf{"Affinity7", newStyleAffinity.Affinity7})
    newStyleAffinity.EntityData.Leafs.Append("affinity8", types.YLeaf{"Affinity8", newStyleAffinity.Affinity8})
    newStyleAffinity.EntityData.Leafs.Append("affinity9", types.YLeaf{"Affinity9", newStyleAffinity.Affinity9})
    newStyleAffinity.EntityData.Leafs.Append("affinity10", types.YLeaf{"Affinity10", newStyleAffinity.Affinity10})

    newStyleAffinity.EntityData.YListKeys = []string {"AffinityType", "Affinity1", "Affinity2", "Affinity3", "Affinity4", "Affinity5", "Affinity6", "Affinity7", "Affinity8", "Affinity9", "Affinity10"}

    return &(newStyleAffinity.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth
// P2MP tunnel bandwidth requirement
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295.
    Bandwidth interface{}
}

func (bandwidth *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "cisco_ios_xr"
    bandwidth.EntityData.ParentYangName = "mte-tunnel-attributes"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + bandwidth.EntityData.SegmentPath
    bandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidth.EntityData.Children = types.NewOrderedMap()
    bandwidth.EntityData.Leafs = types.NewOrderedMap()
    bandwidth.EntityData.Leafs.Append("dste-type", types.YLeaf{"DsteType", bandwidth.DsteType})
    bandwidth.EntityData.Leafs.Append("class-or-pool-type", types.YLeaf{"ClassOrPoolType", bandwidth.ClassOrPoolType})
    bandwidth.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", bandwidth.Bandwidth})

    bandwidth.EntityData.YListKeys = []string {}

    return &(bandwidth.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask
// P2MP tunnel affinity and mask
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: b'[0-9a-fA-F]{1,8}'.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: b'[0-9a-fA-F]{1,8}'.
    Mask interface{}
}

func (affinityMask *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_AffinityMask) GetEntityData() *types.CommonEntityData {
    affinityMask.EntityData.YFilter = affinityMask.YFilter
    affinityMask.EntityData.YangName = "affinity-mask"
    affinityMask.EntityData.BundleName = "cisco_ios_xr"
    affinityMask.EntityData.ParentYangName = "mte-tunnel-attributes"
    affinityMask.EntityData.SegmentPath = "affinity-mask"
    affinityMask.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + affinityMask.EntityData.SegmentPath
    affinityMask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    affinityMask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    affinityMask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    affinityMask.EntityData.Children = types.NewOrderedMap()
    affinityMask.EntityData.Leafs = types.NewOrderedMap()
    affinityMask.EntityData.Leafs.Append("affinity", types.YLeaf{"Affinity", affinityMask.Affinity})
    affinityMask.EntityData.Leafs.Append("mask", types.YLeaf{"Mask", affinityMask.Mask})

    affinityMask.EntityData.YListKeys = []string {}

    return &(affinityMask.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging
// Log tunnel LSP messages
type InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Log tunnel bandwidth change messages. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log all tunnel sub-LSP state messages. The type is interface{}.
    SubLspStateMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}
}

func (logging *InterfaceConfigurations_InterfaceConfiguration_MteTunnelAttributes_Logging) GetEntityData() *types.CommonEntityData {
    logging.EntityData.YFilter = logging.YFilter
    logging.EntityData.YangName = "logging"
    logging.EntityData.BundleName = "cisco_ios_xr"
    logging.EntityData.ParentYangName = "mte-tunnel-attributes"
    logging.EntityData.SegmentPath = "logging"
    logging.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes/" + logging.EntityData.SegmentPath
    logging.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logging.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logging.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logging.EntityData.Children = types.NewOrderedMap()
    logging.EntityData.Leafs = types.NewOrderedMap()
    logging.EntityData.Leafs.Append("insufficient-bw-message", types.YLeaf{"InsufficientBwMessage", logging.InsufficientBwMessage})
    logging.EntityData.Leafs.Append("reoptimized-message", types.YLeaf{"ReoptimizedMessage", logging.ReoptimizedMessage})
    logging.EntityData.Leafs.Append("bandwidth-change-message", types.YLeaf{"BandwidthChangeMessage", logging.BandwidthChangeMessage})
    logging.EntityData.Leafs.Append("all", types.YLeaf{"All", logging.All})
    logging.EntityData.Leafs.Append("pcalc-failure-message", types.YLeaf{"PcalcFailureMessage", logging.PcalcFailureMessage})
    logging.EntityData.Leafs.Append("state-message", types.YLeaf{"StateMessage", logging.StateMessage})
    logging.EntityData.Leafs.Append("reoptimize-attempts-message", types.YLeaf{"ReoptimizeAttemptsMessage", logging.ReoptimizeAttemptsMessage})
    logging.EntityData.Leafs.Append("sub-lsp-state-message", types.YLeaf{"SubLspStateMessage", logging.SubLspStateMessage})
    logging.EntityData.Leafs.Append("reroute-messsage", types.YLeaf{"RerouteMesssage", logging.RerouteMesssage})

    logging.EntityData.YListKeys = []string {}

    return &(logging.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pbr
// Interface PBR configuration
type InterfaceConfigurations_InterfaceConfiguration_Pbr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Class for subscriber ingress policy. The type is string.
    ServicePolicyIn interface{}

    // Ingress service policy.
    ServicePolicies InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies
}

func (pbr *InterfaceConfigurations_InterfaceConfiguration_Pbr) GetEntityData() *types.CommonEntityData {
    pbr.EntityData.YFilter = pbr.YFilter
    pbr.EntityData.YangName = "pbr"
    pbr.EntityData.BundleName = "cisco_ios_xr"
    pbr.EntityData.ParentYangName = "interface-configuration"
    pbr.EntityData.SegmentPath = "Cisco-IOS-XR-pbr-cfg:pbr"
    pbr.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + pbr.EntityData.SegmentPath
    pbr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pbr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pbr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pbr.EntityData.Children = types.NewOrderedMap()
    pbr.EntityData.Children.Append("service-policies", types.YChild{"ServicePolicies", &pbr.ServicePolicies})
    pbr.EntityData.Leafs = types.NewOrderedMap()
    pbr.EntityData.Leafs.Append("service-policy-in", types.YLeaf{"ServicePolicyIn", pbr.ServicePolicyIn})

    pbr.EntityData.YListKeys = []string {}

    return &(pbr.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies_ServicePolicy
}

func (servicePolicies *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies) GetEntityData() *types.CommonEntityData {
    servicePolicies.EntityData.YFilter = servicePolicies.YFilter
    servicePolicies.EntityData.YangName = "service-policies"
    servicePolicies.EntityData.BundleName = "cisco_ios_xr"
    servicePolicies.EntityData.ParentYangName = "pbr"
    servicePolicies.EntityData.SegmentPath = "service-policies"
    servicePolicies.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pbr-cfg:pbr/" + servicePolicies.EntityData.SegmentPath
    servicePolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicies.EntityData.Children = types.NewOrderedMap()
    servicePolicies.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range servicePolicies.ServicePolicy {
        servicePolicies.EntityData.Children.Append(types.GetSegmentPath(servicePolicies.ServicePolicy[i]), types.YChild{"ServicePolicy", servicePolicies.ServicePolicy[i]})
    }
    servicePolicies.EntityData.Leafs = types.NewOrderedMap()

    servicePolicies.EntityData.YListKeys = []string {}

    return &(servicePolicies.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 1..64.
    ServicePolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Pbr_ServicePolicies_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "service-policies"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicy, "service-policy")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pbr-cfg:pbr/service-policies/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy", types.YLeaf{"ServicePolicy", servicePolicy.ServicePolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicy"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement
// Configure pm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set STM threshold.
    StmHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24

    // set opr min threshold.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp

    // set Sonet threshold.
    SonetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15

    // Configure pm parameters of gfp 24 hour interval.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp

    // Configure pm parameters of 24 hour interval.
    EthernetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24

    // set opr min threshold.
    Minute15otnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms

    // set Oc threshold.
    OcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24

    // set opr min threshold.
    EthernetMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15

    // set HO_VC threshold.
    HoVcHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24

    // Configure optics performance monitoring for 30 sec.
    Second30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30

    // Configure pm parameters of tcm's 24 hour interval.
    Hour24otnTcms InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms

    // set STS threshold.
    StsMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15

    // Configure pm parameters of 24 hour interval.
    Hour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24

    // set HO_VC threshold.
    HoVcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15

    // set STS threshold.
    StsHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24

    // set STM threshold.
    StmMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15

    // set Sonet threshold.
    SonetHour24 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24

    // set opr min threshold.
    Minute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path

    // set OC threshold.
    OcMinute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15

    // Configure ethernet performance monitoring for 30 sec.
    EthernetSecond30 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30

    // Configure pm parameters of pathmonitor 24 hour interval.
    Hour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path

    // set opr min threshold.
    Minute15 InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
}

func (performanceManagement *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement) GetEntityData() *types.CommonEntityData {
    performanceManagement.EntityData.YFilter = performanceManagement.YFilter
    performanceManagement.EntityData.YangName = "performance-management"
    performanceManagement.EntityData.BundleName = "cisco_ios_xr"
    performanceManagement.EntityData.ParentYangName = "interface-configuration"
    performanceManagement.EntityData.SegmentPath = "Cisco-IOS-XR-pmengine-cfg:performance-management"
    performanceManagement.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + performanceManagement.EntityData.SegmentPath
    performanceManagement.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    performanceManagement.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    performanceManagement.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    performanceManagement.EntityData.Children = types.NewOrderedMap()
    performanceManagement.EntityData.Children.Append("stm-hour24", types.YChild{"StmHour24", &performanceManagement.StmHour24})
    performanceManagement.EntityData.Children.Append("minute15-gfp", types.YChild{"Minute15Gfp", &performanceManagement.Minute15Gfp})
    performanceManagement.EntityData.Children.Append("sonet-minute15", types.YChild{"SonetMinute15", &performanceManagement.SonetMinute15})
    performanceManagement.EntityData.Children.Append("hour24-gfp", types.YChild{"Hour24Gfp", &performanceManagement.Hour24Gfp})
    performanceManagement.EntityData.Children.Append("ethernet-hour24", types.YChild{"EthernetHour24", &performanceManagement.EthernetHour24})
    performanceManagement.EntityData.Children.Append("minute15otn-tcms", types.YChild{"Minute15otnTcms", &performanceManagement.Minute15otnTcms})
    performanceManagement.EntityData.Children.Append("oc-hour24", types.YChild{"OcHour24", &performanceManagement.OcHour24})
    performanceManagement.EntityData.Children.Append("ethernet-minute15", types.YChild{"EthernetMinute15", &performanceManagement.EthernetMinute15})
    performanceManagement.EntityData.Children.Append("ho-vc-hour24", types.YChild{"HoVcHour24", &performanceManagement.HoVcHour24})
    performanceManagement.EntityData.Children.Append("second30", types.YChild{"Second30", &performanceManagement.Second30})
    performanceManagement.EntityData.Children.Append("hour24otn-tcms", types.YChild{"Hour24otnTcms", &performanceManagement.Hour24otnTcms})
    performanceManagement.EntityData.Children.Append("sts-minute15", types.YChild{"StsMinute15", &performanceManagement.StsMinute15})
    performanceManagement.EntityData.Children.Append("hour24", types.YChild{"Hour24", &performanceManagement.Hour24})
    performanceManagement.EntityData.Children.Append("ho-vc-minute15", types.YChild{"HoVcMinute15", &performanceManagement.HoVcMinute15})
    performanceManagement.EntityData.Children.Append("sts-hour24", types.YChild{"StsHour24", &performanceManagement.StsHour24})
    performanceManagement.EntityData.Children.Append("stm-minute15", types.YChild{"StmMinute15", &performanceManagement.StmMinute15})
    performanceManagement.EntityData.Children.Append("sonet-hour24", types.YChild{"SonetHour24", &performanceManagement.SonetHour24})
    performanceManagement.EntityData.Children.Append("minute15-path", types.YChild{"Minute15Path", &performanceManagement.Minute15Path})
    performanceManagement.EntityData.Children.Append("oc-minute15", types.YChild{"OcMinute15", &performanceManagement.OcMinute15})
    performanceManagement.EntityData.Children.Append("ethernet-second30", types.YChild{"EthernetSecond30", &performanceManagement.EthernetSecond30})
    performanceManagement.EntityData.Children.Append("hour24-path", types.YChild{"Hour24Path", &performanceManagement.Hour24Path})
    performanceManagement.EntityData.Children.Append("minute15", types.YChild{"Minute15", &performanceManagement.Minute15})
    performanceManagement.EntityData.Leafs = types.NewOrderedMap()

    performanceManagement.EntityData.YListKeys = []string {}

    return &(performanceManagement.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmHour24Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
}

func (stmHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24) GetEntityData() *types.CommonEntityData {
    stmHour24.EntityData.YFilter = stmHour24.YFilter
    stmHour24.EntityData.YangName = "stm-hour24"
    stmHour24.EntityData.BundleName = "cisco_ios_xr"
    stmHour24.EntityData.ParentYangName = "performance-management"
    stmHour24.EntityData.SegmentPath = "stm-hour24"
    stmHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + stmHour24.EntityData.SegmentPath
    stmHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24.EntityData.Children = types.NewOrderedMap()
    stmHour24.EntityData.Children.Append("stm-hour24-stm", types.YChild{"StmHour24Stm", &stmHour24.StmHour24Stm})
    stmHour24.EntityData.Leafs = types.NewOrderedMap()

    stmHour24.EntityData.YListKeys = []string {}

    return &(stmHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmHour24StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports

    // Configure threshold on stm parameters.
    StmHour24StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
}

func (stmHour24Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm) GetEntityData() *types.CommonEntityData {
    stmHour24Stm.EntityData.YFilter = stmHour24Stm.YFilter
    stmHour24Stm.EntityData.YangName = "stm-hour24-stm"
    stmHour24Stm.EntityData.BundleName = "cisco_ios_xr"
    stmHour24Stm.EntityData.ParentYangName = "stm-hour24"
    stmHour24Stm.EntityData.SegmentPath = "stm-hour24-stm"
    stmHour24Stm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-hour24/" + stmHour24Stm.EntityData.SegmentPath
    stmHour24Stm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24Stm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24Stm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24Stm.EntityData.Children = types.NewOrderedMap()
    stmHour24Stm.EntityData.Children.Append("stm-hour24-stm-reports", types.YChild{"StmHour24StmReports", &stmHour24Stm.StmHour24StmReports})
    stmHour24Stm.EntityData.Children.Append("stm-hour24-stm-thresholds", types.YChild{"StmHour24StmThresholds", &stmHour24Stm.StmHour24StmThresholds})
    stmHour24Stm.EntityData.Leafs = types.NewOrderedMap()

    stmHour24Stm.EntityData.YListKeys = []string {}

    return &(stmHour24Stm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport.
    StmHour24StmReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
}

func (stmHour24StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports) GetEntityData() *types.CommonEntityData {
    stmHour24StmReports.EntityData.YFilter = stmHour24StmReports.YFilter
    stmHour24StmReports.EntityData.YangName = "stm-hour24-stm-reports"
    stmHour24StmReports.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmReports.EntityData.ParentYangName = "stm-hour24-stm"
    stmHour24StmReports.EntityData.SegmentPath = "stm-hour24-stm-reports"
    stmHour24StmReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-hour24/stm-hour24-stm/" + stmHour24StmReports.EntityData.SegmentPath
    stmHour24StmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmReports.EntityData.Children = types.NewOrderedMap()
    stmHour24StmReports.EntityData.Children.Append("stm-hour24-stm-report", types.YChild{"StmHour24StmReport", nil})
    for i := range stmHour24StmReports.StmHour24StmReport {
        stmHour24StmReports.EntityData.Children.Append(types.GetSegmentPath(stmHour24StmReports.StmHour24StmReport[i]), types.YChild{"StmHour24StmReport", stmHour24StmReports.StmHour24StmReport[i]})
    }
    stmHour24StmReports.EntityData.Leafs = types.NewOrderedMap()

    stmHour24StmReports.EntityData.YListKeys = []string {}

    return &(stmHour24StmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmHour24StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmReports_StmHour24StmReport) GetEntityData() *types.CommonEntityData {
    stmHour24StmReport.EntityData.YFilter = stmHour24StmReport.YFilter
    stmHour24StmReport.EntityData.YangName = "stm-hour24-stm-report"
    stmHour24StmReport.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmReport.EntityData.ParentYangName = "stm-hour24-stm-reports"
    stmHour24StmReport.EntityData.SegmentPath = "stm-hour24-stm-report" + types.AddKeyToken(stmHour24StmReport.StmReport, "stm-report")
    stmHour24StmReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-hour24/stm-hour24-stm/stm-hour24-stm-reports/" + stmHour24StmReport.EntityData.SegmentPath
    stmHour24StmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmReport.EntityData.Children = types.NewOrderedMap()
    stmHour24StmReport.EntityData.Leafs = types.NewOrderedMap()
    stmHour24StmReport.EntityData.Leafs.Append("stm-report", types.YLeaf{"StmReport", stmHour24StmReport.StmReport})
    stmHour24StmReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", stmHour24StmReport.Enable})

    stmHour24StmReport.EntityData.YListKeys = []string {"StmReport"}

    return &(stmHour24StmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold.
    StmHour24StmThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
}

func (stmHour24StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds) GetEntityData() *types.CommonEntityData {
    stmHour24StmThresholds.EntityData.YFilter = stmHour24StmThresholds.YFilter
    stmHour24StmThresholds.EntityData.YangName = "stm-hour24-stm-thresholds"
    stmHour24StmThresholds.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmThresholds.EntityData.ParentYangName = "stm-hour24-stm"
    stmHour24StmThresholds.EntityData.SegmentPath = "stm-hour24-stm-thresholds"
    stmHour24StmThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-hour24/stm-hour24-stm/" + stmHour24StmThresholds.EntityData.SegmentPath
    stmHour24StmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmThresholds.EntityData.Children = types.NewOrderedMap()
    stmHour24StmThresholds.EntityData.Children.Append("stm-hour24-stm-threshold", types.YChild{"StmHour24StmThreshold", nil})
    for i := range stmHour24StmThresholds.StmHour24StmThreshold {
        stmHour24StmThresholds.EntityData.Children.Append(types.GetSegmentPath(stmHour24StmThresholds.StmHour24StmThreshold[i]), types.YChild{"StmHour24StmThreshold", stmHour24StmThresholds.StmHour24StmThreshold[i]})
    }
    stmHour24StmThresholds.EntityData.Leafs = types.NewOrderedMap()

    stmHour24StmThresholds.EntityData.YListKeys = []string {}

    return &(stmHour24StmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmHour24StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmHour24_StmHour24Stm_StmHour24StmThresholds_StmHour24StmThreshold) GetEntityData() *types.CommonEntityData {
    stmHour24StmThreshold.EntityData.YFilter = stmHour24StmThreshold.YFilter
    stmHour24StmThreshold.EntityData.YangName = "stm-hour24-stm-threshold"
    stmHour24StmThreshold.EntityData.BundleName = "cisco_ios_xr"
    stmHour24StmThreshold.EntityData.ParentYangName = "stm-hour24-stm-thresholds"
    stmHour24StmThreshold.EntityData.SegmentPath = "stm-hour24-stm-threshold" + types.AddKeyToken(stmHour24StmThreshold.StmThreshold, "stm-threshold")
    stmHour24StmThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-hour24/stm-hour24-stm/stm-hour24-stm-thresholds/" + stmHour24StmThreshold.EntityData.SegmentPath
    stmHour24StmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmHour24StmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmHour24StmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmHour24StmThreshold.EntityData.Children = types.NewOrderedMap()
    stmHour24StmThreshold.EntityData.Leafs = types.NewOrderedMap()
    stmHour24StmThreshold.EntityData.Leafs.Append("stm-threshold", types.YLeaf{"StmThreshold", stmHour24StmThreshold.StmThreshold})
    stmHour24StmThreshold.EntityData.Leafs.Append("stm-threshold-value", types.YLeaf{"StmThresholdValue", stmHour24StmThreshold.StmThresholdValue})

    stmHour24StmThreshold.EntityData.YListKeys = []string {"StmThreshold"}

    return &(stmHour24StmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Minute15Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp) GetEntityData() *types.CommonEntityData {
    minute15Gfp.EntityData.YFilter = minute15Gfp.YFilter
    minute15Gfp.EntityData.YangName = "minute15-gfp"
    minute15Gfp.EntityData.BundleName = "cisco_ios_xr"
    minute15Gfp.EntityData.ParentYangName = "performance-management"
    minute15Gfp.EntityData.SegmentPath = "minute15-gfp"
    minute15Gfp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + minute15Gfp.EntityData.SegmentPath
    minute15Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Gfp.EntityData.Children = types.NewOrderedMap()
    minute15Gfp.EntityData.Children.Append("minute15-gfp", types.YChild{"Minute15Gfp", &minute15Gfp.Minute15Gfp})
    minute15Gfp.EntityData.Leafs = types.NewOrderedMap()

    minute15Gfp.EntityData.YListKeys = []string {}

    return &(minute15Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Minute15GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports

    // Configure threshold on gfp parameters.
    Minute15GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds
}

func (minute15Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp) GetEntityData() *types.CommonEntityData {
    minute15Gfp.EntityData.YFilter = minute15Gfp.YFilter
    minute15Gfp.EntityData.YangName = "minute15-gfp"
    minute15Gfp.EntityData.BundleName = "cisco_ios_xr"
    minute15Gfp.EntityData.ParentYangName = "minute15-gfp"
    minute15Gfp.EntityData.SegmentPath = "minute15-gfp"
    minute15Gfp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-gfp/" + minute15Gfp.EntityData.SegmentPath
    minute15Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Gfp.EntityData.Children = types.NewOrderedMap()
    minute15Gfp.EntityData.Children.Append("minute15-gfp-reports", types.YChild{"Minute15GfpReports", &minute15Gfp.Minute15GfpReports})
    minute15Gfp.EntityData.Children.Append("minute15-gfp-thresholds", types.YChild{"Minute15GfpThresholds", &minute15Gfp.Minute15GfpThresholds})
    minute15Gfp.EntityData.Leafs = types.NewOrderedMap()

    minute15Gfp.EntityData.YListKeys = []string {}

    return &(minute15Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport.
    Minute15GfpReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport
}

func (minute15GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports) GetEntityData() *types.CommonEntityData {
    minute15GfpReports.EntityData.YFilter = minute15GfpReports.YFilter
    minute15GfpReports.EntityData.YangName = "minute15-gfp-reports"
    minute15GfpReports.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpReports.EntityData.ParentYangName = "minute15-gfp"
    minute15GfpReports.EntityData.SegmentPath = "minute15-gfp-reports"
    minute15GfpReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-gfp/minute15-gfp/" + minute15GfpReports.EntityData.SegmentPath
    minute15GfpReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpReports.EntityData.Children = types.NewOrderedMap()
    minute15GfpReports.EntityData.Children.Append("minute15-gfp-report", types.YChild{"Minute15GfpReport", nil})
    for i := range minute15GfpReports.Minute15GfpReport {
        minute15GfpReports.EntityData.Children.Append(types.GetSegmentPath(minute15GfpReports.Minute15GfpReport[i]), types.YChild{"Minute15GfpReport", minute15GfpReports.Minute15GfpReport[i]})
    }
    minute15GfpReports.EntityData.Leafs = types.NewOrderedMap()

    minute15GfpReports.EntityData.YListKeys = []string {}

    return &(minute15GfpReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (minute15GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpReports_Minute15GfpReport) GetEntityData() *types.CommonEntityData {
    minute15GfpReport.EntityData.YFilter = minute15GfpReport.YFilter
    minute15GfpReport.EntityData.YangName = "minute15-gfp-report"
    minute15GfpReport.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpReport.EntityData.ParentYangName = "minute15-gfp-reports"
    minute15GfpReport.EntityData.SegmentPath = "minute15-gfp-report" + types.AddKeyToken(minute15GfpReport.GfpReport, "gfp-report")
    minute15GfpReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-gfp/minute15-gfp/minute15-gfp-reports/" + minute15GfpReport.EntityData.SegmentPath
    minute15GfpReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpReport.EntityData.Children = types.NewOrderedMap()
    minute15GfpReport.EntityData.Leafs = types.NewOrderedMap()
    minute15GfpReport.EntityData.Leafs.Append("gfp-report", types.YLeaf{"GfpReport", minute15GfpReport.GfpReport})

    minute15GfpReport.EntityData.YListKeys = []string {"GfpReport"}

    return &(minute15GfpReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold.
    Minute15GfpThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold
}

func (minute15GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds) GetEntityData() *types.CommonEntityData {
    minute15GfpThresholds.EntityData.YFilter = minute15GfpThresholds.YFilter
    minute15GfpThresholds.EntityData.YangName = "minute15-gfp-thresholds"
    minute15GfpThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpThresholds.EntityData.ParentYangName = "minute15-gfp"
    minute15GfpThresholds.EntityData.SegmentPath = "minute15-gfp-thresholds"
    minute15GfpThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-gfp/minute15-gfp/" + minute15GfpThresholds.EntityData.SegmentPath
    minute15GfpThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpThresholds.EntityData.Children = types.NewOrderedMap()
    minute15GfpThresholds.EntityData.Children.Append("minute15-gfp-threshold", types.YChild{"Minute15GfpThreshold", nil})
    for i := range minute15GfpThresholds.Minute15GfpThreshold {
        minute15GfpThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15GfpThresholds.Minute15GfpThreshold[i]), types.YChild{"Minute15GfpThreshold", minute15GfpThresholds.Minute15GfpThreshold[i]})
    }
    minute15GfpThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15GfpThresholds.EntityData.YListKeys = []string {}

    return &(minute15GfpThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    GfpThresholdValue interface{}
}

func (minute15GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Gfp_Minute15Gfp_Minute15GfpThresholds_Minute15GfpThreshold) GetEntityData() *types.CommonEntityData {
    minute15GfpThreshold.EntityData.YFilter = minute15GfpThreshold.YFilter
    minute15GfpThreshold.EntityData.YangName = "minute15-gfp-threshold"
    minute15GfpThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15GfpThreshold.EntityData.ParentYangName = "minute15-gfp-thresholds"
    minute15GfpThreshold.EntityData.SegmentPath = "minute15-gfp-threshold" + types.AddKeyToken(minute15GfpThreshold.GfpThreshold, "gfp-threshold")
    minute15GfpThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-gfp/minute15-gfp/minute15-gfp-thresholds/" + minute15GfpThreshold.EntityData.SegmentPath
    minute15GfpThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15GfpThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15GfpThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15GfpThreshold.EntityData.Children = types.NewOrderedMap()
    minute15GfpThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15GfpThreshold.EntityData.Leafs.Append("gfp-threshold", types.YLeaf{"GfpThreshold", minute15GfpThreshold.GfpThreshold})
    minute15GfpThreshold.EntityData.Leafs.Append("gfp-threshold-value", types.YLeaf{"GfpThresholdValue", minute15GfpThreshold.GfpThresholdValue})

    minute15GfpThreshold.EntityData.YListKeys = []string {"GfpThreshold"}

    return &(minute15GfpThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path

    // Configure ocn performance monitoring.
    SonetMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
}

func (sonetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15) GetEntityData() *types.CommonEntityData {
    sonetMinute15.EntityData.YFilter = sonetMinute15.YFilter
    sonetMinute15.EntityData.YangName = "sonet-minute15"
    sonetMinute15.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15.EntityData.ParentYangName = "performance-management"
    sonetMinute15.EntityData.SegmentPath = "sonet-minute15"
    sonetMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + sonetMinute15.EntityData.SegmentPath
    sonetMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15.EntityData.Children = types.NewOrderedMap()
    sonetMinute15.EntityData.Children.Append("sonet-minute15-path", types.YChild{"SonetMinute15Path", &sonetMinute15.SonetMinute15Path})
    sonetMinute15.EntityData.Children.Append("sonet-minute15-ocn", types.YChild{"SonetMinute15Ocn", &sonetMinute15.SonetMinute15Ocn})
    sonetMinute15.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15.EntityData.YListKeys = []string {}

    return &(sonetMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    SonetMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports

    // Configure threshold on Path parameters.
    SonetMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
}

func (sonetMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path) GetEntityData() *types.CommonEntityData {
    sonetMinute15Path.EntityData.YFilter = sonetMinute15Path.YFilter
    sonetMinute15Path.EntityData.YangName = "sonet-minute15-path"
    sonetMinute15Path.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15Path.EntityData.ParentYangName = "sonet-minute15"
    sonetMinute15Path.EntityData.SegmentPath = "sonet-minute15-path"
    sonetMinute15Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/" + sonetMinute15Path.EntityData.SegmentPath
    sonetMinute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15Path.EntityData.Children = types.NewOrderedMap()
    sonetMinute15Path.EntityData.Children.Append("sonet-minute15-path-reports", types.YChild{"SonetMinute15PathReports", &sonetMinute15Path.SonetMinute15PathReports})
    sonetMinute15Path.EntityData.Children.Append("sonet-minute15-path-thresholds", types.YChild{"SonetMinute15PathThresholds", &sonetMinute15Path.SonetMinute15PathThresholds})
    sonetMinute15Path.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15Path.EntityData.YListKeys = []string {}

    return &(sonetMinute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport.
    SonetMinute15PathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
}

func (sonetMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathReports.EntityData.YFilter = sonetMinute15PathReports.YFilter
    sonetMinute15PathReports.EntityData.YangName = "sonet-minute15-path-reports"
    sonetMinute15PathReports.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathReports.EntityData.ParentYangName = "sonet-minute15-path"
    sonetMinute15PathReports.EntityData.SegmentPath = "sonet-minute15-path-reports"
    sonetMinute15PathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-path/" + sonetMinute15PathReports.EntityData.SegmentPath
    sonetMinute15PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathReports.EntityData.Children = types.NewOrderedMap()
    sonetMinute15PathReports.EntityData.Children.Append("sonet-minute15-path-report", types.YChild{"SonetMinute15PathReport", nil})
    for i := range sonetMinute15PathReports.SonetMinute15PathReport {
        sonetMinute15PathReports.EntityData.Children.Append(types.GetSegmentPath(sonetMinute15PathReports.SonetMinute15PathReport[i]), types.YChild{"SonetMinute15PathReport", sonetMinute15PathReports.SonetMinute15PathReport[i]})
    }
    sonetMinute15PathReports.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15PathReports.EntityData.YListKeys = []string {}

    return &(sonetMinute15PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathReports_SonetMinute15PathReport) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathReport.EntityData.YFilter = sonetMinute15PathReport.YFilter
    sonetMinute15PathReport.EntityData.YangName = "sonet-minute15-path-report"
    sonetMinute15PathReport.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathReport.EntityData.ParentYangName = "sonet-minute15-path-reports"
    sonetMinute15PathReport.EntityData.SegmentPath = "sonet-minute15-path-report" + types.AddKeyToken(sonetMinute15PathReport.PathReport, "path-report")
    sonetMinute15PathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-path/sonet-minute15-path-reports/" + sonetMinute15PathReport.EntityData.SegmentPath
    sonetMinute15PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathReport.EntityData.Children = types.NewOrderedMap()
    sonetMinute15PathReport.EntityData.Leafs = types.NewOrderedMap()
    sonetMinute15PathReport.EntityData.Leafs.Append("path-report", types.YLeaf{"PathReport", sonetMinute15PathReport.PathReport})

    sonetMinute15PathReport.EntityData.YListKeys = []string {"PathReport"}

    return &(sonetMinute15PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold.
    SonetMinute15PathThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
}

func (sonetMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathThresholds.EntityData.YFilter = sonetMinute15PathThresholds.YFilter
    sonetMinute15PathThresholds.EntityData.YangName = "sonet-minute15-path-thresholds"
    sonetMinute15PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathThresholds.EntityData.ParentYangName = "sonet-minute15-path"
    sonetMinute15PathThresholds.EntityData.SegmentPath = "sonet-minute15-path-thresholds"
    sonetMinute15PathThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-path/" + sonetMinute15PathThresholds.EntityData.SegmentPath
    sonetMinute15PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathThresholds.EntityData.Children = types.NewOrderedMap()
    sonetMinute15PathThresholds.EntityData.Children.Append("sonet-minute15-path-threshold", types.YChild{"SonetMinute15PathThreshold", nil})
    for i := range sonetMinute15PathThresholds.SonetMinute15PathThreshold {
        sonetMinute15PathThresholds.EntityData.Children.Append(types.GetSegmentPath(sonetMinute15PathThresholds.SonetMinute15PathThreshold[i]), types.YChild{"SonetMinute15PathThreshold", sonetMinute15PathThresholds.SonetMinute15PathThreshold[i]})
    }
    sonetMinute15PathThresholds.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15PathThresholds.EntityData.YListKeys = []string {}

    return &(sonetMinute15PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Path_SonetMinute15PathThresholds_SonetMinute15PathThreshold) GetEntityData() *types.CommonEntityData {
    sonetMinute15PathThreshold.EntityData.YFilter = sonetMinute15PathThreshold.YFilter
    sonetMinute15PathThreshold.EntityData.YangName = "sonet-minute15-path-threshold"
    sonetMinute15PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15PathThreshold.EntityData.ParentYangName = "sonet-minute15-path-thresholds"
    sonetMinute15PathThreshold.EntityData.SegmentPath = "sonet-minute15-path-threshold" + types.AddKeyToken(sonetMinute15PathThreshold.PathThreshold, "path-threshold")
    sonetMinute15PathThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-path/sonet-minute15-path-thresholds/" + sonetMinute15PathThreshold.EntityData.SegmentPath
    sonetMinute15PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15PathThreshold.EntityData.Children = types.NewOrderedMap()
    sonetMinute15PathThreshold.EntityData.Leafs = types.NewOrderedMap()
    sonetMinute15PathThreshold.EntityData.Leafs.Append("path-threshold", types.YLeaf{"PathThreshold", sonetMinute15PathThreshold.PathThreshold})
    sonetMinute15PathThreshold.EntityData.Leafs.Append("path-threshold-value", types.YLeaf{"PathThresholdValue", sonetMinute15PathThreshold.PathThresholdValue})

    sonetMinute15PathThreshold.EntityData.YListKeys = []string {"PathThreshold"}

    return &(sonetMinute15PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    SonetMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports

    // Configure threshold on ocn parameters.
    SonetMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
}

func (sonetMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn) GetEntityData() *types.CommonEntityData {
    sonetMinute15Ocn.EntityData.YFilter = sonetMinute15Ocn.YFilter
    sonetMinute15Ocn.EntityData.YangName = "sonet-minute15-ocn"
    sonetMinute15Ocn.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15Ocn.EntityData.ParentYangName = "sonet-minute15"
    sonetMinute15Ocn.EntityData.SegmentPath = "sonet-minute15-ocn"
    sonetMinute15Ocn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/" + sonetMinute15Ocn.EntityData.SegmentPath
    sonetMinute15Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15Ocn.EntityData.Children = types.NewOrderedMap()
    sonetMinute15Ocn.EntityData.Children.Append("sonet-minute15-ocn-reports", types.YChild{"SonetMinute15OcnReports", &sonetMinute15Ocn.SonetMinute15OcnReports})
    sonetMinute15Ocn.EntityData.Children.Append("sonet-minute15-ocn-thresholds", types.YChild{"SonetMinute15OcnThresholds", &sonetMinute15Ocn.SonetMinute15OcnThresholds})
    sonetMinute15Ocn.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15Ocn.EntityData.YListKeys = []string {}

    return &(sonetMinute15Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport.
    SonetMinute15OcnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
}

func (sonetMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnReports.EntityData.YFilter = sonetMinute15OcnReports.YFilter
    sonetMinute15OcnReports.EntityData.YangName = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReports.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnReports.EntityData.ParentYangName = "sonet-minute15-ocn"
    sonetMinute15OcnReports.EntityData.SegmentPath = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-ocn/" + sonetMinute15OcnReports.EntityData.SegmentPath
    sonetMinute15OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnReports.EntityData.Children = types.NewOrderedMap()
    sonetMinute15OcnReports.EntityData.Children.Append("sonet-minute15-ocn-report", types.YChild{"SonetMinute15OcnReport", nil})
    for i := range sonetMinute15OcnReports.SonetMinute15OcnReport {
        sonetMinute15OcnReports.EntityData.Children.Append(types.GetSegmentPath(sonetMinute15OcnReports.SonetMinute15OcnReport[i]), types.YChild{"SonetMinute15OcnReport", sonetMinute15OcnReports.SonetMinute15OcnReport[i]})
    }
    sonetMinute15OcnReports.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15OcnReports.EntityData.YListKeys = []string {}

    return &(sonetMinute15OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnReports_SonetMinute15OcnReport) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnReport.EntityData.YFilter = sonetMinute15OcnReport.YFilter
    sonetMinute15OcnReport.EntityData.YangName = "sonet-minute15-ocn-report"
    sonetMinute15OcnReport.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnReport.EntityData.ParentYangName = "sonet-minute15-ocn-reports"
    sonetMinute15OcnReport.EntityData.SegmentPath = "sonet-minute15-ocn-report" + types.AddKeyToken(sonetMinute15OcnReport.OcnReport, "ocn-report")
    sonetMinute15OcnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-ocn/sonet-minute15-ocn-reports/" + sonetMinute15OcnReport.EntityData.SegmentPath
    sonetMinute15OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnReport.EntityData.Children = types.NewOrderedMap()
    sonetMinute15OcnReport.EntityData.Leafs = types.NewOrderedMap()
    sonetMinute15OcnReport.EntityData.Leafs.Append("ocn-report", types.YLeaf{"OcnReport", sonetMinute15OcnReport.OcnReport})

    sonetMinute15OcnReport.EntityData.YListKeys = []string {"OcnReport"}

    return &(sonetMinute15OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold.
    SonetMinute15OcnThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
}

func (sonetMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnThresholds.EntityData.YFilter = sonetMinute15OcnThresholds.YFilter
    sonetMinute15OcnThresholds.EntityData.YangName = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnThresholds.EntityData.ParentYangName = "sonet-minute15-ocn"
    sonetMinute15OcnThresholds.EntityData.SegmentPath = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-ocn/" + sonetMinute15OcnThresholds.EntityData.SegmentPath
    sonetMinute15OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnThresholds.EntityData.Children = types.NewOrderedMap()
    sonetMinute15OcnThresholds.EntityData.Children.Append("sonet-minute15-ocn-threshold", types.YChild{"SonetMinute15OcnThreshold", nil})
    for i := range sonetMinute15OcnThresholds.SonetMinute15OcnThreshold {
        sonetMinute15OcnThresholds.EntityData.Children.Append(types.GetSegmentPath(sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i]), types.YChild{"SonetMinute15OcnThreshold", sonetMinute15OcnThresholds.SonetMinute15OcnThreshold[i]})
    }
    sonetMinute15OcnThresholds.EntityData.Leafs = types.NewOrderedMap()

    sonetMinute15OcnThresholds.EntityData.YListKeys = []string {}

    return &(sonetMinute15OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetMinute15_SonetMinute15Ocn_SonetMinute15OcnThresholds_SonetMinute15OcnThreshold) GetEntityData() *types.CommonEntityData {
    sonetMinute15OcnThreshold.EntityData.YFilter = sonetMinute15OcnThreshold.YFilter
    sonetMinute15OcnThreshold.EntityData.YangName = "sonet-minute15-ocn-threshold"
    sonetMinute15OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetMinute15OcnThreshold.EntityData.ParentYangName = "sonet-minute15-ocn-thresholds"
    sonetMinute15OcnThreshold.EntityData.SegmentPath = "sonet-minute15-ocn-threshold" + types.AddKeyToken(sonetMinute15OcnThreshold.OcnThreshold, "ocn-threshold")
    sonetMinute15OcnThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-minute15/sonet-minute15-ocn/sonet-minute15-ocn-thresholds/" + sonetMinute15OcnThreshold.EntityData.SegmentPath
    sonetMinute15OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetMinute15OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetMinute15OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetMinute15OcnThreshold.EntityData.Children = types.NewOrderedMap()
    sonetMinute15OcnThreshold.EntityData.Leafs = types.NewOrderedMap()
    sonetMinute15OcnThreshold.EntityData.Leafs.Append("ocn-threshold", types.YLeaf{"OcnThreshold", sonetMinute15OcnThreshold.OcnThreshold})
    sonetMinute15OcnThreshold.EntityData.Leafs.Append("ocn-threshold-value", types.YLeaf{"OcnThresholdValue", sonetMinute15OcnThreshold.OcnThresholdValue})

    sonetMinute15OcnThreshold.EntityData.YListKeys = []string {"OcnThreshold"}

    return &(sonetMinute15OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp
// Configure pm parameters of gfp 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure gfp performance monitoring.
    Hour24Gfp InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp) GetEntityData() *types.CommonEntityData {
    hour24Gfp.EntityData.YFilter = hour24Gfp.YFilter
    hour24Gfp.EntityData.YangName = "hour24-gfp"
    hour24Gfp.EntityData.BundleName = "cisco_ios_xr"
    hour24Gfp.EntityData.ParentYangName = "performance-management"
    hour24Gfp.EntityData.SegmentPath = "hour24-gfp"
    hour24Gfp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hour24Gfp.EntityData.SegmentPath
    hour24Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Gfp.EntityData.Children = types.NewOrderedMap()
    hour24Gfp.EntityData.Children.Append("hour24-gfp", types.YChild{"Hour24Gfp", &hour24Gfp.Hour24Gfp})
    hour24Gfp.EntityData.Leafs = types.NewOrderedMap()

    hour24Gfp.EntityData.YListKeys = []string {}

    return &(hour24Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp
// Configure gfp performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set gfp TCA reporting status.
    Hour24GfpReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports

    // Configure threshold on gfp parameters.
    Hour24GfpThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds
}

func (hour24Gfp *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp) GetEntityData() *types.CommonEntityData {
    hour24Gfp.EntityData.YFilter = hour24Gfp.YFilter
    hour24Gfp.EntityData.YangName = "hour24-gfp"
    hour24Gfp.EntityData.BundleName = "cisco_ios_xr"
    hour24Gfp.EntityData.ParentYangName = "hour24-gfp"
    hour24Gfp.EntityData.SegmentPath = "hour24-gfp"
    hour24Gfp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-gfp/" + hour24Gfp.EntityData.SegmentPath
    hour24Gfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Gfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Gfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Gfp.EntityData.Children = types.NewOrderedMap()
    hour24Gfp.EntityData.Children.Append("hour24-gfp-reports", types.YChild{"Hour24GfpReports", &hour24Gfp.Hour24GfpReports})
    hour24Gfp.EntityData.Children.Append("hour24-gfp-thresholds", types.YChild{"Hour24GfpThresholds", &hour24Gfp.Hour24GfpThresholds})
    hour24Gfp.EntityData.Leafs = types.NewOrderedMap()

    hour24Gfp.EntityData.YListKeys = []string {}

    return &(hour24Gfp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports
// set gfp TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport.
    Hour24GfpReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport
}

func (hour24GfpReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports) GetEntityData() *types.CommonEntityData {
    hour24GfpReports.EntityData.YFilter = hour24GfpReports.YFilter
    hour24GfpReports.EntityData.YangName = "hour24-gfp-reports"
    hour24GfpReports.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpReports.EntityData.ParentYangName = "hour24-gfp"
    hour24GfpReports.EntityData.SegmentPath = "hour24-gfp-reports"
    hour24GfpReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-gfp/hour24-gfp/" + hour24GfpReports.EntityData.SegmentPath
    hour24GfpReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpReports.EntityData.Children = types.NewOrderedMap()
    hour24GfpReports.EntityData.Children.Append("hour24-gfp-report", types.YChild{"Hour24GfpReport", nil})
    for i := range hour24GfpReports.Hour24GfpReport {
        hour24GfpReports.EntityData.Children.Append(types.GetSegmentPath(hour24GfpReports.Hour24GfpReport[i]), types.YChild{"Hour24GfpReport", hour24GfpReports.Hour24GfpReport[i]})
    }
    hour24GfpReports.EntityData.Leafs = types.NewOrderedMap()

    hour24GfpReports.EntityData.YListKeys = []string {}

    return &(hour24GfpReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Gfp Report Type. The type is GfpReport.
    GfpReport interface{}
}

func (hour24GfpReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpReports_Hour24GfpReport) GetEntityData() *types.CommonEntityData {
    hour24GfpReport.EntityData.YFilter = hour24GfpReport.YFilter
    hour24GfpReport.EntityData.YangName = "hour24-gfp-report"
    hour24GfpReport.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpReport.EntityData.ParentYangName = "hour24-gfp-reports"
    hour24GfpReport.EntityData.SegmentPath = "hour24-gfp-report" + types.AddKeyToken(hour24GfpReport.GfpReport, "gfp-report")
    hour24GfpReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-gfp/hour24-gfp/hour24-gfp-reports/" + hour24GfpReport.EntityData.SegmentPath
    hour24GfpReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpReport.EntityData.Children = types.NewOrderedMap()
    hour24GfpReport.EntityData.Leafs = types.NewOrderedMap()
    hour24GfpReport.EntityData.Leafs.Append("gfp-report", types.YLeaf{"GfpReport", hour24GfpReport.GfpReport})

    hour24GfpReport.EntityData.YListKeys = []string {"GfpReport"}

    return &(hour24GfpReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds
// Configure threshold on gfp parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold.
    Hour24GfpThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold
}

func (hour24GfpThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds) GetEntityData() *types.CommonEntityData {
    hour24GfpThresholds.EntityData.YFilter = hour24GfpThresholds.YFilter
    hour24GfpThresholds.EntityData.YangName = "hour24-gfp-thresholds"
    hour24GfpThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpThresholds.EntityData.ParentYangName = "hour24-gfp"
    hour24GfpThresholds.EntityData.SegmentPath = "hour24-gfp-thresholds"
    hour24GfpThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-gfp/hour24-gfp/" + hour24GfpThresholds.EntityData.SegmentPath
    hour24GfpThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpThresholds.EntityData.Children = types.NewOrderedMap()
    hour24GfpThresholds.EntityData.Children.Append("hour24-gfp-threshold", types.YChild{"Hour24GfpThreshold", nil})
    for i := range hour24GfpThresholds.Hour24GfpThreshold {
        hour24GfpThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24GfpThresholds.Hour24GfpThreshold[i]), types.YChild{"Hour24GfpThreshold", hour24GfpThresholds.Hour24GfpThreshold[i]})
    }
    hour24GfpThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24GfpThresholds.EntityData.YListKeys = []string {}

    return &(hour24GfpThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Gfp Threshold Type. The type is GfpThreshold.
    GfpThreshold interface{}

    // Gfp Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    GfpThresholdValue interface{}
}

func (hour24GfpThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Gfp_Hour24Gfp_Hour24GfpThresholds_Hour24GfpThreshold) GetEntityData() *types.CommonEntityData {
    hour24GfpThreshold.EntityData.YFilter = hour24GfpThreshold.YFilter
    hour24GfpThreshold.EntityData.YangName = "hour24-gfp-threshold"
    hour24GfpThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24GfpThreshold.EntityData.ParentYangName = "hour24-gfp-thresholds"
    hour24GfpThreshold.EntityData.SegmentPath = "hour24-gfp-threshold" + types.AddKeyToken(hour24GfpThreshold.GfpThreshold, "gfp-threshold")
    hour24GfpThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-gfp/hour24-gfp/hour24-gfp-thresholds/" + hour24GfpThreshold.EntityData.SegmentPath
    hour24GfpThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24GfpThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24GfpThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24GfpThreshold.EntityData.Children = types.NewOrderedMap()
    hour24GfpThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24GfpThreshold.EntityData.Leafs.Append("gfp-threshold", types.YLeaf{"GfpThreshold", hour24GfpThreshold.GfpThreshold})
    hour24GfpThreshold.EntityData.Leafs.Append("gfp-threshold-value", types.YLeaf{"GfpThresholdValue", hour24GfpThreshold.GfpThresholdValue})

    hour24GfpThreshold.EntityData.YListKeys = []string {"GfpThreshold"}

    return &(hour24GfpThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Hour24Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
}

func (ethernetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24) GetEntityData() *types.CommonEntityData {
    ethernetHour24.EntityData.YFilter = ethernetHour24.YFilter
    ethernetHour24.EntityData.YangName = "ethernet-hour24"
    ethernetHour24.EntityData.BundleName = "cisco_ios_xr"
    ethernetHour24.EntityData.ParentYangName = "performance-management"
    ethernetHour24.EntityData.SegmentPath = "ethernet-hour24"
    ethernetHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + ethernetHour24.EntityData.SegmentPath
    ethernetHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetHour24.EntityData.Children = types.NewOrderedMap()
    ethernetHour24.EntityData.Children.Append("hour24-ether", types.YChild{"Hour24Ether", &ethernetHour24.Hour24Ether})
    ethernetHour24.EntityData.Leafs = types.NewOrderedMap()

    ethernetHour24.EntityData.YListKeys = []string {}

    return &(ethernetHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Hour24EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds

    // set ether TCA reporting status.
    Hour24EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
}

func (hour24Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether) GetEntityData() *types.CommonEntityData {
    hour24Ether.EntityData.YFilter = hour24Ether.YFilter
    hour24Ether.EntityData.YangName = "hour24-ether"
    hour24Ether.EntityData.BundleName = "cisco_ios_xr"
    hour24Ether.EntityData.ParentYangName = "ethernet-hour24"
    hour24Ether.EntityData.SegmentPath = "hour24-ether"
    hour24Ether.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-hour24/" + hour24Ether.EntityData.SegmentPath
    hour24Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Ether.EntityData.Children = types.NewOrderedMap()
    hour24Ether.EntityData.Children.Append("hour24-ether-thresholds", types.YChild{"Hour24EtherThresholds", &hour24Ether.Hour24EtherThresholds})
    hour24Ether.EntityData.Children.Append("hour24-ether-reports", types.YChild{"Hour24EtherReports", &hour24Ether.Hour24EtherReports})
    hour24Ether.EntityData.Leafs = types.NewOrderedMap()

    hour24Ether.EntityData.YListKeys = []string {}

    return &(hour24Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold.
    Hour24EtherThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
}

func (hour24EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds) GetEntityData() *types.CommonEntityData {
    hour24EtherThresholds.EntityData.YFilter = hour24EtherThresholds.YFilter
    hour24EtherThresholds.EntityData.YangName = "hour24-ether-thresholds"
    hour24EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherThresholds.EntityData.ParentYangName = "hour24-ether"
    hour24EtherThresholds.EntityData.SegmentPath = "hour24-ether-thresholds"
    hour24EtherThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-hour24/hour24-ether/" + hour24EtherThresholds.EntityData.SegmentPath
    hour24EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherThresholds.EntityData.Children = types.NewOrderedMap()
    hour24EtherThresholds.EntityData.Children.Append("hour24-ether-threshold", types.YChild{"Hour24EtherThreshold", nil})
    for i := range hour24EtherThresholds.Hour24EtherThreshold {
        hour24EtherThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24EtherThresholds.Hour24EtherThreshold[i]), types.YChild{"Hour24EtherThreshold", hour24EtherThresholds.Hour24EtherThreshold[i]})
    }
    hour24EtherThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24EtherThresholds.EntityData.YListKeys = []string {}

    return &(hour24EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    EtherThresholdValue interface{}
}

func (hour24EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherThresholds_Hour24EtherThreshold) GetEntityData() *types.CommonEntityData {
    hour24EtherThreshold.EntityData.YFilter = hour24EtherThreshold.YFilter
    hour24EtherThreshold.EntityData.YangName = "hour24-ether-threshold"
    hour24EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherThreshold.EntityData.ParentYangName = "hour24-ether-thresholds"
    hour24EtherThreshold.EntityData.SegmentPath = "hour24-ether-threshold" + types.AddKeyToken(hour24EtherThreshold.EtherThreshold, "ether-threshold")
    hour24EtherThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-hour24/hour24-ether/hour24-ether-thresholds/" + hour24EtherThreshold.EntityData.SegmentPath
    hour24EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherThreshold.EntityData.Children = types.NewOrderedMap()
    hour24EtherThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24EtherThreshold.EntityData.Leafs.Append("ether-threshold", types.YLeaf{"EtherThreshold", hour24EtherThreshold.EtherThreshold})
    hour24EtherThreshold.EntityData.Leafs.Append("ether-threshold-value", types.YLeaf{"EtherThresholdValue", hour24EtherThreshold.EtherThresholdValue})

    hour24EtherThreshold.EntityData.YListKeys = []string {"EtherThreshold"}

    return &(hour24EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport.
    Hour24EtherReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
}

func (hour24EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports) GetEntityData() *types.CommonEntityData {
    hour24EtherReports.EntityData.YFilter = hour24EtherReports.YFilter
    hour24EtherReports.EntityData.YangName = "hour24-ether-reports"
    hour24EtherReports.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherReports.EntityData.ParentYangName = "hour24-ether"
    hour24EtherReports.EntityData.SegmentPath = "hour24-ether-reports"
    hour24EtherReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-hour24/hour24-ether/" + hour24EtherReports.EntityData.SegmentPath
    hour24EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherReports.EntityData.Children = types.NewOrderedMap()
    hour24EtherReports.EntityData.Children.Append("hour24-ether-report", types.YChild{"Hour24EtherReport", nil})
    for i := range hour24EtherReports.Hour24EtherReport {
        hour24EtherReports.EntityData.Children.Append(types.GetSegmentPath(hour24EtherReports.Hour24EtherReport[i]), types.YChild{"Hour24EtherReport", hour24EtherReports.Hour24EtherReport[i]})
    }
    hour24EtherReports.EntityData.Leafs = types.NewOrderedMap()

    hour24EtherReports.EntityData.YListKeys = []string {}

    return &(hour24EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (hour24EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetHour24_Hour24Ether_Hour24EtherReports_Hour24EtherReport) GetEntityData() *types.CommonEntityData {
    hour24EtherReport.EntityData.YFilter = hour24EtherReport.YFilter
    hour24EtherReport.EntityData.YangName = "hour24-ether-report"
    hour24EtherReport.EntityData.BundleName = "cisco_ios_xr"
    hour24EtherReport.EntityData.ParentYangName = "hour24-ether-reports"
    hour24EtherReport.EntityData.SegmentPath = "hour24-ether-report" + types.AddKeyToken(hour24EtherReport.EtherReport, "ether-report")
    hour24EtherReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-hour24/hour24-ether/hour24-ether-reports/" + hour24EtherReport.EntityData.SegmentPath
    hour24EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24EtherReport.EntityData.Children = types.NewOrderedMap()
    hour24EtherReport.EntityData.Leafs = types.NewOrderedMap()
    hour24EtherReport.EntityData.Leafs.Append("ether-report", types.YLeaf{"EtherReport", hour24EtherReport.EtherReport})

    hour24EtherReport.EntityData.YListKeys = []string {"EtherReport"}

    return &(hour24EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm.
    Minute15otnTcm []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm
}

func (minute15otnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms) GetEntityData() *types.CommonEntityData {
    minute15otnTcms.EntityData.YFilter = minute15otnTcms.YFilter
    minute15otnTcms.EntityData.YangName = "minute15otn-tcms"
    minute15otnTcms.EntityData.BundleName = "cisco_ios_xr"
    minute15otnTcms.EntityData.ParentYangName = "performance-management"
    minute15otnTcms.EntityData.SegmentPath = "minute15otn-tcms"
    minute15otnTcms.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + minute15otnTcms.EntityData.SegmentPath
    minute15otnTcms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnTcms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnTcms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnTcms.EntityData.Children = types.NewOrderedMap()
    minute15otnTcms.EntityData.Children.Append("minute15otn-tcm", types.YChild{"Minute15otnTcm", nil})
    for i := range minute15otnTcms.Minute15otnTcm {
        minute15otnTcms.EntityData.Children.Append(types.GetSegmentPath(minute15otnTcms.Minute15otnTcm[i]), types.YChild{"Minute15otnTcm", minute15otnTcms.Minute15otnTcm[i]})
    }
    minute15otnTcms.EntityData.Leafs = types.NewOrderedMap()

    minute15otnTcms.EntityData.YListKeys = []string {}

    return &(minute15otnTcms.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TCM number. The type is interface{} with range:
    // 0..4294967295.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Min15OtnTcmThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes

    // set otn TCA reporting status.
    Minute15otnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports
}

func (minute15otnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm) GetEntityData() *types.CommonEntityData {
    minute15otnTcm.EntityData.YFilter = minute15otnTcm.YFilter
    minute15otnTcm.EntityData.YangName = "minute15otn-tcm"
    minute15otnTcm.EntityData.BundleName = "cisco_ios_xr"
    minute15otnTcm.EntityData.ParentYangName = "minute15otn-tcms"
    minute15otnTcm.EntityData.SegmentPath = "minute15otn-tcm" + types.AddKeyToken(minute15otnTcm.TcmNumber, "tcm-number")
    minute15otnTcm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15otn-tcms/" + minute15otnTcm.EntityData.SegmentPath
    minute15otnTcm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnTcm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnTcm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnTcm.EntityData.Children = types.NewOrderedMap()
    minute15otnTcm.EntityData.Children.Append("min15-otn-tcm-threshes", types.YChild{"Min15OtnTcmThreshes", &minute15otnTcm.Min15OtnTcmThreshes})
    minute15otnTcm.EntityData.Children.Append("minute15otn-tcm-reports", types.YChild{"Minute15otnTcmReports", &minute15otnTcm.Minute15otnTcmReports})
    minute15otnTcm.EntityData.Leafs = types.NewOrderedMap()
    minute15otnTcm.EntityData.Leafs.Append("tcm-number", types.YLeaf{"TcmNumber", minute15otnTcm.TcmNumber})

    minute15otnTcm.EntityData.YListKeys = []string {"TcmNumber"}

    return &(minute15otnTcm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh.
    Min15OtnTcmThresh []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
}

func (min15OtnTcmThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnTcmThreshes.EntityData.YFilter = min15OtnTcmThreshes.YFilter
    min15OtnTcmThreshes.EntityData.YangName = "min15-otn-tcm-threshes"
    min15OtnTcmThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnTcmThreshes.EntityData.ParentYangName = "minute15otn-tcm"
    min15OtnTcmThreshes.EntityData.SegmentPath = "min15-otn-tcm-threshes"
    min15OtnTcmThreshes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15otn-tcms/minute15otn-tcm/" + min15OtnTcmThreshes.EntityData.SegmentPath
    min15OtnTcmThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnTcmThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnTcmThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnTcmThreshes.EntityData.Children = types.NewOrderedMap()
    min15OtnTcmThreshes.EntityData.Children.Append("min15-otn-tcm-thresh", types.YChild{"Min15OtnTcmThresh", nil})
    for i := range min15OtnTcmThreshes.Min15OtnTcmThresh {
        min15OtnTcmThreshes.EntityData.Children.Append(types.GetSegmentPath(min15OtnTcmThreshes.Min15OtnTcmThresh[i]), types.YChild{"Min15OtnTcmThresh", min15OtnTcmThreshes.Min15OtnTcmThresh[i]})
    }
    min15OtnTcmThreshes.EntityData.Leafs = types.NewOrderedMap()

    min15OtnTcmThreshes.EntityData.YListKeys = []string {}

    return &(min15OtnTcmThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnTcmThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Min15OtnTcmThreshes_Min15OtnTcmThresh) GetEntityData() *types.CommonEntityData {
    min15OtnTcmThresh.EntityData.YFilter = min15OtnTcmThresh.YFilter
    min15OtnTcmThresh.EntityData.YangName = "min15-otn-tcm-thresh"
    min15OtnTcmThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnTcmThresh.EntityData.ParentYangName = "min15-otn-tcm-threshes"
    min15OtnTcmThresh.EntityData.SegmentPath = "min15-otn-tcm-thresh" + types.AddKeyToken(min15OtnTcmThresh.OtnThreshold, "otn-threshold")
    min15OtnTcmThresh.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15otn-tcms/minute15otn-tcm/min15-otn-tcm-threshes/" + min15OtnTcmThresh.EntityData.SegmentPath
    min15OtnTcmThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnTcmThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnTcmThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnTcmThresh.EntityData.Children = types.NewOrderedMap()
    min15OtnTcmThresh.EntityData.Leafs = types.NewOrderedMap()
    min15OtnTcmThresh.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", min15OtnTcmThresh.OtnThreshold})
    min15OtnTcmThresh.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", min15OtnTcmThresh.OtnThresholdValue})

    min15OtnTcmThresh.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(min15OtnTcmThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports_Minute15otnTcmReport.
    Minute15otnTcmReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports_Minute15otnTcmReport
}

func (minute15otnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports) GetEntityData() *types.CommonEntityData {
    minute15otnTcmReports.EntityData.YFilter = minute15otnTcmReports.YFilter
    minute15otnTcmReports.EntityData.YangName = "minute15otn-tcm-reports"
    minute15otnTcmReports.EntityData.BundleName = "cisco_ios_xr"
    minute15otnTcmReports.EntityData.ParentYangName = "minute15otn-tcm"
    minute15otnTcmReports.EntityData.SegmentPath = "minute15otn-tcm-reports"
    minute15otnTcmReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15otn-tcms/minute15otn-tcm/" + minute15otnTcmReports.EntityData.SegmentPath
    minute15otnTcmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnTcmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnTcmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnTcmReports.EntityData.Children = types.NewOrderedMap()
    minute15otnTcmReports.EntityData.Children.Append("minute15otn-tcm-report", types.YChild{"Minute15otnTcmReport", nil})
    for i := range minute15otnTcmReports.Minute15otnTcmReport {
        minute15otnTcmReports.EntityData.Children.Append(types.GetSegmentPath(minute15otnTcmReports.Minute15otnTcmReport[i]), types.YChild{"Minute15otnTcmReport", minute15otnTcmReports.Minute15otnTcmReport[i]})
    }
    minute15otnTcmReports.EntityData.Leafs = types.NewOrderedMap()

    minute15otnTcmReports.EntityData.YListKeys = []string {}

    return &(minute15otnTcmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports_Minute15otnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports_Minute15otnTcmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15otnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15otnTcms_Minute15otnTcm_Minute15otnTcmReports_Minute15otnTcmReport) GetEntityData() *types.CommonEntityData {
    minute15otnTcmReport.EntityData.YFilter = minute15otnTcmReport.YFilter
    minute15otnTcmReport.EntityData.YangName = "minute15otn-tcm-report"
    minute15otnTcmReport.EntityData.BundleName = "cisco_ios_xr"
    minute15otnTcmReport.EntityData.ParentYangName = "minute15otn-tcm-reports"
    minute15otnTcmReport.EntityData.SegmentPath = "minute15otn-tcm-report" + types.AddKeyToken(minute15otnTcmReport.OtnReport, "otn-report")
    minute15otnTcmReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15otn-tcms/minute15otn-tcm/minute15otn-tcm-reports/" + minute15otnTcmReport.EntityData.SegmentPath
    minute15otnTcmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnTcmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnTcmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnTcmReport.EntityData.Children = types.NewOrderedMap()
    minute15otnTcmReport.EntityData.Leafs = types.NewOrderedMap()
    minute15otnTcmReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", minute15otnTcmReport.OtnReport})
    minute15otnTcmReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15otnTcmReport.Enable})

    minute15otnTcmReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(minute15otnTcmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24
// set Oc threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
}

func (ocHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24) GetEntityData() *types.CommonEntityData {
    ocHour24.EntityData.YFilter = ocHour24.YFilter
    ocHour24.EntityData.YangName = "oc-hour24"
    ocHour24.EntityData.BundleName = "cisco_ios_xr"
    ocHour24.EntityData.ParentYangName = "performance-management"
    ocHour24.EntityData.SegmentPath = "oc-hour24"
    ocHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + ocHour24.EntityData.SegmentPath
    ocHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24.EntityData.Children = types.NewOrderedMap()
    ocHour24.EntityData.Children.Append("oc-hour24-ocn", types.YChild{"OcHour24Ocn", &ocHour24.OcHour24Ocn})
    ocHour24.EntityData.Leafs = types.NewOrderedMap()

    ocHour24.EntityData.YListKeys = []string {}

    return &(ocHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports

    // Configure threshold on ocn parameters.
    OcHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
}

func (ocHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn) GetEntityData() *types.CommonEntityData {
    ocHour24Ocn.EntityData.YFilter = ocHour24Ocn.YFilter
    ocHour24Ocn.EntityData.YangName = "oc-hour24-ocn"
    ocHour24Ocn.EntityData.BundleName = "cisco_ios_xr"
    ocHour24Ocn.EntityData.ParentYangName = "oc-hour24"
    ocHour24Ocn.EntityData.SegmentPath = "oc-hour24-ocn"
    ocHour24Ocn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-hour24/" + ocHour24Ocn.EntityData.SegmentPath
    ocHour24Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24Ocn.EntityData.Children = types.NewOrderedMap()
    ocHour24Ocn.EntityData.Children.Append("oc-hour24-ocn-reports", types.YChild{"OcHour24OcnReports", &ocHour24Ocn.OcHour24OcnReports})
    ocHour24Ocn.EntityData.Children.Append("oc-hour24-ocn-thresholds", types.YChild{"OcHour24OcnThresholds", &ocHour24Ocn.OcHour24OcnThresholds})
    ocHour24Ocn.EntityData.Leafs = types.NewOrderedMap()

    ocHour24Ocn.EntityData.YListKeys = []string {}

    return &(ocHour24Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport.
    OcHour24OcnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
}

func (ocHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports) GetEntityData() *types.CommonEntityData {
    ocHour24OcnReports.EntityData.YFilter = ocHour24OcnReports.YFilter
    ocHour24OcnReports.EntityData.YangName = "oc-hour24-ocn-reports"
    ocHour24OcnReports.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnReports.EntityData.ParentYangName = "oc-hour24-ocn"
    ocHour24OcnReports.EntityData.SegmentPath = "oc-hour24-ocn-reports"
    ocHour24OcnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-hour24/oc-hour24-ocn/" + ocHour24OcnReports.EntityData.SegmentPath
    ocHour24OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnReports.EntityData.Children = types.NewOrderedMap()
    ocHour24OcnReports.EntityData.Children.Append("oc-hour24-ocn-report", types.YChild{"OcHour24OcnReport", nil})
    for i := range ocHour24OcnReports.OcHour24OcnReport {
        ocHour24OcnReports.EntityData.Children.Append(types.GetSegmentPath(ocHour24OcnReports.OcHour24OcnReport[i]), types.YChild{"OcHour24OcnReport", ocHour24OcnReports.OcHour24OcnReport[i]})
    }
    ocHour24OcnReports.EntityData.Leafs = types.NewOrderedMap()

    ocHour24OcnReports.EntityData.YListKeys = []string {}

    return &(ocHour24OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnReports_OcHour24OcnReport) GetEntityData() *types.CommonEntityData {
    ocHour24OcnReport.EntityData.YFilter = ocHour24OcnReport.YFilter
    ocHour24OcnReport.EntityData.YangName = "oc-hour24-ocn-report"
    ocHour24OcnReport.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnReport.EntityData.ParentYangName = "oc-hour24-ocn-reports"
    ocHour24OcnReport.EntityData.SegmentPath = "oc-hour24-ocn-report" + types.AddKeyToken(ocHour24OcnReport.OcnReport, "ocn-report")
    ocHour24OcnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-hour24/oc-hour24-ocn/oc-hour24-ocn-reports/" + ocHour24OcnReport.EntityData.SegmentPath
    ocHour24OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnReport.EntityData.Children = types.NewOrderedMap()
    ocHour24OcnReport.EntityData.Leafs = types.NewOrderedMap()
    ocHour24OcnReport.EntityData.Leafs.Append("ocn-report", types.YLeaf{"OcnReport", ocHour24OcnReport.OcnReport})
    ocHour24OcnReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", ocHour24OcnReport.Enable})

    ocHour24OcnReport.EntityData.YListKeys = []string {"OcnReport"}

    return &(ocHour24OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold.
    OcHour24OcnThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
}

func (ocHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds) GetEntityData() *types.CommonEntityData {
    ocHour24OcnThresholds.EntityData.YFilter = ocHour24OcnThresholds.YFilter
    ocHour24OcnThresholds.EntityData.YangName = "oc-hour24-ocn-thresholds"
    ocHour24OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnThresholds.EntityData.ParentYangName = "oc-hour24-ocn"
    ocHour24OcnThresholds.EntityData.SegmentPath = "oc-hour24-ocn-thresholds"
    ocHour24OcnThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-hour24/oc-hour24-ocn/" + ocHour24OcnThresholds.EntityData.SegmentPath
    ocHour24OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnThresholds.EntityData.Children = types.NewOrderedMap()
    ocHour24OcnThresholds.EntityData.Children.Append("oc-hour24-ocn-threshold", types.YChild{"OcHour24OcnThreshold", nil})
    for i := range ocHour24OcnThresholds.OcHour24OcnThreshold {
        ocHour24OcnThresholds.EntityData.Children.Append(types.GetSegmentPath(ocHour24OcnThresholds.OcHour24OcnThreshold[i]), types.YChild{"OcHour24OcnThreshold", ocHour24OcnThresholds.OcHour24OcnThreshold[i]})
    }
    ocHour24OcnThresholds.EntityData.Leafs = types.NewOrderedMap()

    ocHour24OcnThresholds.EntityData.YListKeys = []string {}

    return &(ocHour24OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcHour24_OcHour24Ocn_OcHour24OcnThresholds_OcHour24OcnThreshold) GetEntityData() *types.CommonEntityData {
    ocHour24OcnThreshold.EntityData.YFilter = ocHour24OcnThreshold.YFilter
    ocHour24OcnThreshold.EntityData.YangName = "oc-hour24-ocn-threshold"
    ocHour24OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    ocHour24OcnThreshold.EntityData.ParentYangName = "oc-hour24-ocn-thresholds"
    ocHour24OcnThreshold.EntityData.SegmentPath = "oc-hour24-ocn-threshold" + types.AddKeyToken(ocHour24OcnThreshold.OcnThreshold, "ocn-threshold")
    ocHour24OcnThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-hour24/oc-hour24-ocn/oc-hour24-ocn-thresholds/" + ocHour24OcnThreshold.EntityData.SegmentPath
    ocHour24OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocHour24OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocHour24OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocHour24OcnThreshold.EntityData.Children = types.NewOrderedMap()
    ocHour24OcnThreshold.EntityData.Leafs = types.NewOrderedMap()
    ocHour24OcnThreshold.EntityData.Leafs.Append("ocn-threshold", types.YLeaf{"OcnThreshold", ocHour24OcnThreshold.OcnThreshold})
    ocHour24OcnThreshold.EntityData.Leafs.Append("ocn-threshold-value", types.YLeaf{"OcnThresholdValue", ocHour24OcnThreshold.OcnThresholdValue})

    ocHour24OcnThreshold.EntityData.YListKeys = []string {"OcnThreshold"}

    return &(ocHour24OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Minute15Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
}

func (ethernetMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15) GetEntityData() *types.CommonEntityData {
    ethernetMinute15.EntityData.YFilter = ethernetMinute15.YFilter
    ethernetMinute15.EntityData.YangName = "ethernet-minute15"
    ethernetMinute15.EntityData.BundleName = "cisco_ios_xr"
    ethernetMinute15.EntityData.ParentYangName = "performance-management"
    ethernetMinute15.EntityData.SegmentPath = "ethernet-minute15"
    ethernetMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + ethernetMinute15.EntityData.SegmentPath
    ethernetMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetMinute15.EntityData.Children = types.NewOrderedMap()
    ethernetMinute15.EntityData.Children.Append("minute15-ether", types.YChild{"Minute15Ether", &ethernetMinute15.Minute15Ether})
    ethernetMinute15.EntityData.Leafs = types.NewOrderedMap()

    ethernetMinute15.EntityData.YListKeys = []string {}

    return &(ethernetMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Minute15EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds

    // set ether TCA reporting status.
    Minute15EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
}

func (minute15Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether) GetEntityData() *types.CommonEntityData {
    minute15Ether.EntityData.YFilter = minute15Ether.YFilter
    minute15Ether.EntityData.YangName = "minute15-ether"
    minute15Ether.EntityData.BundleName = "cisco_ios_xr"
    minute15Ether.EntityData.ParentYangName = "ethernet-minute15"
    minute15Ether.EntityData.SegmentPath = "minute15-ether"
    minute15Ether.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-minute15/" + minute15Ether.EntityData.SegmentPath
    minute15Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Ether.EntityData.Children = types.NewOrderedMap()
    minute15Ether.EntityData.Children.Append("minute15-ether-thresholds", types.YChild{"Minute15EtherThresholds", &minute15Ether.Minute15EtherThresholds})
    minute15Ether.EntityData.Children.Append("minute15-ether-reports", types.YChild{"Minute15EtherReports", &minute15Ether.Minute15EtherReports})
    minute15Ether.EntityData.Leafs = types.NewOrderedMap()

    minute15Ether.EntityData.YListKeys = []string {}

    return &(minute15Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold.
    Minute15EtherThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
}

func (minute15EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds) GetEntityData() *types.CommonEntityData {
    minute15EtherThresholds.EntityData.YFilter = minute15EtherThresholds.YFilter
    minute15EtherThresholds.EntityData.YangName = "minute15-ether-thresholds"
    minute15EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherThresholds.EntityData.ParentYangName = "minute15-ether"
    minute15EtherThresholds.EntityData.SegmentPath = "minute15-ether-thresholds"
    minute15EtherThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-minute15/minute15-ether/" + minute15EtherThresholds.EntityData.SegmentPath
    minute15EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherThresholds.EntityData.Children = types.NewOrderedMap()
    minute15EtherThresholds.EntityData.Children.Append("minute15-ether-threshold", types.YChild{"Minute15EtherThreshold", nil})
    for i := range minute15EtherThresholds.Minute15EtherThreshold {
        minute15EtherThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15EtherThresholds.Minute15EtherThreshold[i]), types.YChild{"Minute15EtherThreshold", minute15EtherThresholds.Minute15EtherThreshold[i]})
    }
    minute15EtherThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15EtherThresholds.EntityData.YListKeys = []string {}

    return &(minute15EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (minute15EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherThresholds_Minute15EtherThreshold) GetEntityData() *types.CommonEntityData {
    minute15EtherThreshold.EntityData.YFilter = minute15EtherThreshold.YFilter
    minute15EtherThreshold.EntityData.YangName = "minute15-ether-threshold"
    minute15EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherThreshold.EntityData.ParentYangName = "minute15-ether-thresholds"
    minute15EtherThreshold.EntityData.SegmentPath = "minute15-ether-threshold" + types.AddKeyToken(minute15EtherThreshold.EtherThreshold, "ether-threshold")
    minute15EtherThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-minute15/minute15-ether/minute15-ether-thresholds/" + minute15EtherThreshold.EntityData.SegmentPath
    minute15EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherThreshold.EntityData.Children = types.NewOrderedMap()
    minute15EtherThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15EtherThreshold.EntityData.Leafs.Append("ether-threshold", types.YLeaf{"EtherThreshold", minute15EtherThreshold.EtherThreshold})
    minute15EtherThreshold.EntityData.Leafs.Append("ether-threshold-value", types.YLeaf{"EtherThresholdValue", minute15EtherThreshold.EtherThresholdValue})

    minute15EtherThreshold.EntityData.YListKeys = []string {"EtherThreshold"}

    return &(minute15EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport.
    Minute15EtherReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
}

func (minute15EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports) GetEntityData() *types.CommonEntityData {
    minute15EtherReports.EntityData.YFilter = minute15EtherReports.YFilter
    minute15EtherReports.EntityData.YangName = "minute15-ether-reports"
    minute15EtherReports.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherReports.EntityData.ParentYangName = "minute15-ether"
    minute15EtherReports.EntityData.SegmentPath = "minute15-ether-reports"
    minute15EtherReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-minute15/minute15-ether/" + minute15EtherReports.EntityData.SegmentPath
    minute15EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherReports.EntityData.Children = types.NewOrderedMap()
    minute15EtherReports.EntityData.Children.Append("minute15-ether-report", types.YChild{"Minute15EtherReport", nil})
    for i := range minute15EtherReports.Minute15EtherReport {
        minute15EtherReports.EntityData.Children.Append(types.GetSegmentPath(minute15EtherReports.Minute15EtherReport[i]), types.YChild{"Minute15EtherReport", minute15EtherReports.Minute15EtherReport[i]})
    }
    minute15EtherReports.EntityData.Leafs = types.NewOrderedMap()

    minute15EtherReports.EntityData.YListKeys = []string {}

    return &(minute15EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (minute15EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetMinute15_Minute15Ether_Minute15EtherReports_Minute15EtherReport) GetEntityData() *types.CommonEntityData {
    minute15EtherReport.EntityData.YFilter = minute15EtherReport.YFilter
    minute15EtherReport.EntityData.YangName = "minute15-ether-report"
    minute15EtherReport.EntityData.BundleName = "cisco_ios_xr"
    minute15EtherReport.EntityData.ParentYangName = "minute15-ether-reports"
    minute15EtherReport.EntityData.SegmentPath = "minute15-ether-report" + types.AddKeyToken(minute15EtherReport.EtherReport, "ether-report")
    minute15EtherReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-minute15/minute15-ether/minute15-ether-reports/" + minute15EtherReport.EntityData.SegmentPath
    minute15EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15EtherReport.EntityData.Children = types.NewOrderedMap()
    minute15EtherReport.EntityData.Leafs = types.NewOrderedMap()
    minute15EtherReport.EntityData.Leafs.Append("ether-report", types.YLeaf{"EtherReport", minute15EtherReport.EtherReport})

    minute15EtherReport.EntityData.YListKeys = []string {"EtherReport"}

    return &(minute15EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcHour24hoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc
}

func (hoVcHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24) GetEntityData() *types.CommonEntityData {
    hoVcHour24.EntityData.YFilter = hoVcHour24.YFilter
    hoVcHour24.EntityData.YangName = "ho-vc-hour24"
    hoVcHour24.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24.EntityData.ParentYangName = "performance-management"
    hoVcHour24.EntityData.SegmentPath = "ho-vc-hour24"
    hoVcHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hoVcHour24.EntityData.SegmentPath
    hoVcHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24.EntityData.Children = types.NewOrderedMap()
    hoVcHour24.EntityData.Children.Append("ho-vc-hour24ho-vc", types.YChild{"HoVcHour24hoVc", &hoVcHour24.HoVcHour24hoVc})
    hoVcHour24.EntityData.Leafs = types.NewOrderedMap()

    hoVcHour24.EntityData.YListKeys = []string {}

    return &(hoVcHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcHour24hoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcHour24hoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds
}

func (hoVcHour24hoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc) GetEntityData() *types.CommonEntityData {
    hoVcHour24hoVc.EntityData.YFilter = hoVcHour24hoVc.YFilter
    hoVcHour24hoVc.EntityData.YangName = "ho-vc-hour24ho-vc"
    hoVcHour24hoVc.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24hoVc.EntityData.ParentYangName = "ho-vc-hour24"
    hoVcHour24hoVc.EntityData.SegmentPath = "ho-vc-hour24ho-vc"
    hoVcHour24hoVc.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-hour24/" + hoVcHour24hoVc.EntityData.SegmentPath
    hoVcHour24hoVc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24hoVc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24hoVc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24hoVc.EntityData.Children = types.NewOrderedMap()
    hoVcHour24hoVc.EntityData.Children.Append("ho-vc-hour24ho-vc-reports", types.YChild{"HoVcHour24hoVcReports", &hoVcHour24hoVc.HoVcHour24hoVcReports})
    hoVcHour24hoVc.EntityData.Children.Append("ho-vc-hour24ho-vc-thresholds", types.YChild{"HoVcHour24hoVcThresholds", &hoVcHour24hoVc.HoVcHour24hoVcThresholds})
    hoVcHour24hoVc.EntityData.Leafs = types.NewOrderedMap()

    hoVcHour24hoVc.EntityData.YListKeys = []string {}

    return &(hoVcHour24hoVc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports_HoVcHour24hoVcReport.
    HoVcHour24hoVcReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports_HoVcHour24hoVcReport
}

func (hoVcHour24hoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports) GetEntityData() *types.CommonEntityData {
    hoVcHour24hoVcReports.EntityData.YFilter = hoVcHour24hoVcReports.YFilter
    hoVcHour24hoVcReports.EntityData.YangName = "ho-vc-hour24ho-vc-reports"
    hoVcHour24hoVcReports.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24hoVcReports.EntityData.ParentYangName = "ho-vc-hour24ho-vc"
    hoVcHour24hoVcReports.EntityData.SegmentPath = "ho-vc-hour24ho-vc-reports"
    hoVcHour24hoVcReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-hour24/ho-vc-hour24ho-vc/" + hoVcHour24hoVcReports.EntityData.SegmentPath
    hoVcHour24hoVcReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24hoVcReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24hoVcReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24hoVcReports.EntityData.Children = types.NewOrderedMap()
    hoVcHour24hoVcReports.EntityData.Children.Append("ho-vc-hour24ho-vc-report", types.YChild{"HoVcHour24hoVcReport", nil})
    for i := range hoVcHour24hoVcReports.HoVcHour24hoVcReport {
        hoVcHour24hoVcReports.EntityData.Children.Append(types.GetSegmentPath(hoVcHour24hoVcReports.HoVcHour24hoVcReport[i]), types.YChild{"HoVcHour24hoVcReport", hoVcHour24hoVcReports.HoVcHour24hoVcReport[i]})
    }
    hoVcHour24hoVcReports.EntityData.Leafs = types.NewOrderedMap()

    hoVcHour24hoVcReports.EntityData.YListKeys = []string {}

    return &(hoVcHour24hoVcReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports_HoVcHour24hoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports_HoVcHour24hoVcReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcHour24hoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcReports_HoVcHour24hoVcReport) GetEntityData() *types.CommonEntityData {
    hoVcHour24hoVcReport.EntityData.YFilter = hoVcHour24hoVcReport.YFilter
    hoVcHour24hoVcReport.EntityData.YangName = "ho-vc-hour24ho-vc-report"
    hoVcHour24hoVcReport.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24hoVcReport.EntityData.ParentYangName = "ho-vc-hour24ho-vc-reports"
    hoVcHour24hoVcReport.EntityData.SegmentPath = "ho-vc-hour24ho-vc-report" + types.AddKeyToken(hoVcHour24hoVcReport.HoVcReport, "ho-vc-report")
    hoVcHour24hoVcReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-hour24/ho-vc-hour24ho-vc/ho-vc-hour24ho-vc-reports/" + hoVcHour24hoVcReport.EntityData.SegmentPath
    hoVcHour24hoVcReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24hoVcReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24hoVcReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24hoVcReport.EntityData.Children = types.NewOrderedMap()
    hoVcHour24hoVcReport.EntityData.Leafs = types.NewOrderedMap()
    hoVcHour24hoVcReport.EntityData.Leafs.Append("ho-vc-report", types.YLeaf{"HoVcReport", hoVcHour24hoVcReport.HoVcReport})
    hoVcHour24hoVcReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hoVcHour24hoVcReport.Enable})

    hoVcHour24hoVcReport.EntityData.YListKeys = []string {"HoVcReport"}

    return &(hoVcHour24hoVcReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds_HoVcHour24hoVcThreshold.
    HoVcHour24hoVcThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds_HoVcHour24hoVcThreshold
}

func (hoVcHour24hoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds) GetEntityData() *types.CommonEntityData {
    hoVcHour24hoVcThresholds.EntityData.YFilter = hoVcHour24hoVcThresholds.YFilter
    hoVcHour24hoVcThresholds.EntityData.YangName = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24hoVcThresholds.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24hoVcThresholds.EntityData.ParentYangName = "ho-vc-hour24ho-vc"
    hoVcHour24hoVcThresholds.EntityData.SegmentPath = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24hoVcThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-hour24/ho-vc-hour24ho-vc/" + hoVcHour24hoVcThresholds.EntityData.SegmentPath
    hoVcHour24hoVcThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24hoVcThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24hoVcThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24hoVcThresholds.EntityData.Children = types.NewOrderedMap()
    hoVcHour24hoVcThresholds.EntityData.Children.Append("ho-vc-hour24ho-vc-threshold", types.YChild{"HoVcHour24hoVcThreshold", nil})
    for i := range hoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold {
        hoVcHour24hoVcThresholds.EntityData.Children.Append(types.GetSegmentPath(hoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold[i]), types.YChild{"HoVcHour24hoVcThreshold", hoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold[i]})
    }
    hoVcHour24hoVcThresholds.EntityData.Leafs = types.NewOrderedMap()

    hoVcHour24hoVcThresholds.EntityData.YListKeys = []string {}

    return &(hoVcHour24hoVcThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds_HoVcHour24hoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds_HoVcHour24hoVcThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcHour24hoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcHour24_HoVcHour24hoVc_HoVcHour24hoVcThresholds_HoVcHour24hoVcThreshold) GetEntityData() *types.CommonEntityData {
    hoVcHour24hoVcThreshold.EntityData.YFilter = hoVcHour24hoVcThreshold.YFilter
    hoVcHour24hoVcThreshold.EntityData.YangName = "ho-vc-hour24ho-vc-threshold"
    hoVcHour24hoVcThreshold.EntityData.BundleName = "cisco_ios_xr"
    hoVcHour24hoVcThreshold.EntityData.ParentYangName = "ho-vc-hour24ho-vc-thresholds"
    hoVcHour24hoVcThreshold.EntityData.SegmentPath = "ho-vc-hour24ho-vc-threshold" + types.AddKeyToken(hoVcHour24hoVcThreshold.HoVcThreshold, "ho-vc-threshold")
    hoVcHour24hoVcThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-hour24/ho-vc-hour24ho-vc/ho-vc-hour24ho-vc-thresholds/" + hoVcHour24hoVcThreshold.EntityData.SegmentPath
    hoVcHour24hoVcThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcHour24hoVcThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcHour24hoVcThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcHour24hoVcThreshold.EntityData.Children = types.NewOrderedMap()
    hoVcHour24hoVcThreshold.EntityData.Leafs = types.NewOrderedMap()
    hoVcHour24hoVcThreshold.EntityData.Leafs.Append("ho-vc-threshold", types.YLeaf{"HoVcThreshold", hoVcHour24hoVcThreshold.HoVcThreshold})
    hoVcHour24hoVcThreshold.EntityData.Leafs.Append("ho-vc-threshold-value", types.YLeaf{"HoVcThresholdValue", hoVcHour24hoVcThreshold.HoVcThresholdValue})

    hoVcHour24hoVcThreshold.EntityData.YListKeys = []string {"HoVcThreshold"}

    return &(hoVcHour24hoVcThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30
// Configure optics performance monitoring for 30
// sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure pcs performance monitoring.
    Second30pcs InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs

    // Configure fec g709 performance monitoring.
    Second30fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec

    // Configure optics performance monitoring.
    Second30Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics

    // Configure secy-if performance monitoring.
    Second30secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif

    // Configure secy-rx performance monitoring.
    Second30secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx

    // configure otn g709 performance monitoring.
    Second30otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn

    // Configure secy-tx performance monitoring.
    Second30secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx
}

func (second30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30) GetEntityData() *types.CommonEntityData {
    second30.EntityData.YFilter = second30.YFilter
    second30.EntityData.YangName = "second30"
    second30.EntityData.BundleName = "cisco_ios_xr"
    second30.EntityData.ParentYangName = "performance-management"
    second30.EntityData.SegmentPath = "second30"
    second30.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + second30.EntityData.SegmentPath
    second30.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30.EntityData.Children = types.NewOrderedMap()
    second30.EntityData.Children.Append("second30pcs", types.YChild{"Second30pcs", &second30.Second30pcs})
    second30.EntityData.Children.Append("second30fec", types.YChild{"Second30fec", &second30.Second30fec})
    second30.EntityData.Children.Append("second30-optics", types.YChild{"Second30Optics", &second30.Second30Optics})
    second30.EntityData.Children.Append("second30secyif", types.YChild{"Second30secyif", &second30.Second30secyif})
    second30.EntityData.Children.Append("second30secyrx", types.YChild{"Second30secyrx", &second30.Second30secyrx})
    second30.EntityData.Children.Append("second30otn", types.YChild{"Second30otn", &second30.Second30otn})
    second30.EntityData.Children.Append("second30secytx", types.YChild{"Second30secytx", &second30.Second30secytx})
    second30.EntityData.Leafs = types.NewOrderedMap()

    second30.EntityData.YListKeys = []string {}

    return &(second30.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs
// Configure pcs performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure pcs threshold.
    Second30pcsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds

    // set pcs TCA reporting status.
    Second30pcsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports
}

func (second30pcs *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs) GetEntityData() *types.CommonEntityData {
    second30pcs.EntityData.YFilter = second30pcs.YFilter
    second30pcs.EntityData.YangName = "second30pcs"
    second30pcs.EntityData.BundleName = "cisco_ios_xr"
    second30pcs.EntityData.ParentYangName = "second30"
    second30pcs.EntityData.SegmentPath = "second30pcs"
    second30pcs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30pcs.EntityData.SegmentPath
    second30pcs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30pcs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30pcs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30pcs.EntityData.Children = types.NewOrderedMap()
    second30pcs.EntityData.Children.Append("second30pcs-thresholds", types.YChild{"Second30pcsThresholds", &second30pcs.Second30pcsThresholds})
    second30pcs.EntityData.Children.Append("second30pcs-reports", types.YChild{"Second30pcsReports", &second30pcs.Second30pcsReports})
    second30pcs.EntityData.Leafs = types.NewOrderedMap()

    second30pcs.EntityData.YListKeys = []string {}

    return &(second30pcs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds
// Configure pcs threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds_Second30pcsThreshold.
    Second30pcsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds_Second30pcsThreshold
}

func (second30pcsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds) GetEntityData() *types.CommonEntityData {
    second30pcsThresholds.EntityData.YFilter = second30pcsThresholds.YFilter
    second30pcsThresholds.EntityData.YangName = "second30pcs-thresholds"
    second30pcsThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30pcsThresholds.EntityData.ParentYangName = "second30pcs"
    second30pcsThresholds.EntityData.SegmentPath = "second30pcs-thresholds"
    second30pcsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30pcs/" + second30pcsThresholds.EntityData.SegmentPath
    second30pcsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30pcsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30pcsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30pcsThresholds.EntityData.Children = types.NewOrderedMap()
    second30pcsThresholds.EntityData.Children.Append("second30pcs-threshold", types.YChild{"Second30pcsThreshold", nil})
    for i := range second30pcsThresholds.Second30pcsThreshold {
        second30pcsThresholds.EntityData.Children.Append(types.GetSegmentPath(second30pcsThresholds.Second30pcsThreshold[i]), types.YChild{"Second30pcsThreshold", second30pcsThresholds.Second30pcsThreshold[i]})
    }
    second30pcsThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30pcsThresholds.EntityData.YListKeys = []string {}

    return &(second30pcsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds_Second30pcsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds_Second30pcsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Threshold Type. The type is PcsThreshold.
    PcsThreshold interface{}

    // Pcs Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    PcsThresholdValue interface{}
}

func (second30pcsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsThresholds_Second30pcsThreshold) GetEntityData() *types.CommonEntityData {
    second30pcsThreshold.EntityData.YFilter = second30pcsThreshold.YFilter
    second30pcsThreshold.EntityData.YangName = "second30pcs-threshold"
    second30pcsThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30pcsThreshold.EntityData.ParentYangName = "second30pcs-thresholds"
    second30pcsThreshold.EntityData.SegmentPath = "second30pcs-threshold" + types.AddKeyToken(second30pcsThreshold.PcsThreshold, "pcs-threshold")
    second30pcsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30pcs/second30pcs-thresholds/" + second30pcsThreshold.EntityData.SegmentPath
    second30pcsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30pcsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30pcsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30pcsThreshold.EntityData.Children = types.NewOrderedMap()
    second30pcsThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30pcsThreshold.EntityData.Leafs.Append("pcs-threshold", types.YLeaf{"PcsThreshold", second30pcsThreshold.PcsThreshold})
    second30pcsThreshold.EntityData.Leafs.Append("pcs-threshold-value", types.YLeaf{"PcsThresholdValue", second30pcsThreshold.PcsThresholdValue})

    second30pcsThreshold.EntityData.YListKeys = []string {"PcsThreshold"}

    return &(second30pcsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports
// set pcs TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports_Second30pcsReport.
    Second30pcsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports_Second30pcsReport
}

func (second30pcsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports) GetEntityData() *types.CommonEntityData {
    second30pcsReports.EntityData.YFilter = second30pcsReports.YFilter
    second30pcsReports.EntityData.YangName = "second30pcs-reports"
    second30pcsReports.EntityData.BundleName = "cisco_ios_xr"
    second30pcsReports.EntityData.ParentYangName = "second30pcs"
    second30pcsReports.EntityData.SegmentPath = "second30pcs-reports"
    second30pcsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30pcs/" + second30pcsReports.EntityData.SegmentPath
    second30pcsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30pcsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30pcsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30pcsReports.EntityData.Children = types.NewOrderedMap()
    second30pcsReports.EntityData.Children.Append("second30pcs-report", types.YChild{"Second30pcsReport", nil})
    for i := range second30pcsReports.Second30pcsReport {
        second30pcsReports.EntityData.Children.Append(types.GetSegmentPath(second30pcsReports.Second30pcsReport[i]), types.YChild{"Second30pcsReport", second30pcsReports.Second30pcsReport[i]})
    }
    second30pcsReports.EntityData.Leafs = types.NewOrderedMap()

    second30pcsReports.EntityData.YListKeys = []string {}

    return &(second30pcsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports_Second30pcsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports_Second30pcsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Report Type. The type is PcsReport.
    PcsReport interface{}

    // PCS Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30pcsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30pcs_Second30pcsReports_Second30pcsReport) GetEntityData() *types.CommonEntityData {
    second30pcsReport.EntityData.YFilter = second30pcsReport.YFilter
    second30pcsReport.EntityData.YangName = "second30pcs-report"
    second30pcsReport.EntityData.BundleName = "cisco_ios_xr"
    second30pcsReport.EntityData.ParentYangName = "second30pcs-reports"
    second30pcsReport.EntityData.SegmentPath = "second30pcs-report" + types.AddKeyToken(second30pcsReport.PcsReport, "pcs-report")
    second30pcsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30pcs/second30pcs-reports/" + second30pcsReport.EntityData.SegmentPath
    second30pcsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30pcsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30pcsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30pcsReport.EntityData.Children = types.NewOrderedMap()
    second30pcsReport.EntityData.Leafs = types.NewOrderedMap()
    second30pcsReport.EntityData.Leafs.Append("pcs-report", types.YLeaf{"PcsReport", second30pcsReport.PcsReport})
    second30pcsReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30pcsReport.Enable})

    second30pcsReport.EntityData.YListKeys = []string {"PcsReport"}

    return &(second30pcsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Second30fecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds

    // set fec TCA reporting status.
    Second30fecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports
}

func (second30fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec) GetEntityData() *types.CommonEntityData {
    second30fec.EntityData.YFilter = second30fec.YFilter
    second30fec.EntityData.YangName = "second30fec"
    second30fec.EntityData.BundleName = "cisco_ios_xr"
    second30fec.EntityData.ParentYangName = "second30"
    second30fec.EntityData.SegmentPath = "second30fec"
    second30fec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30fec.EntityData.SegmentPath
    second30fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30fec.EntityData.Children = types.NewOrderedMap()
    second30fec.EntityData.Children.Append("second30fec-thresholds", types.YChild{"Second30fecThresholds", &second30fec.Second30fecThresholds})
    second30fec.EntityData.Children.Append("second30fec-reports", types.YChild{"Second30fecReports", &second30fec.Second30fecReports})
    second30fec.EntityData.Leafs = types.NewOrderedMap()

    second30fec.EntityData.YListKeys = []string {}

    return &(second30fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds_Second30fecThreshold.
    Second30fecThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds_Second30fecThreshold
}

func (second30fecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds) GetEntityData() *types.CommonEntityData {
    second30fecThresholds.EntityData.YFilter = second30fecThresholds.YFilter
    second30fecThresholds.EntityData.YangName = "second30fec-thresholds"
    second30fecThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30fecThresholds.EntityData.ParentYangName = "second30fec"
    second30fecThresholds.EntityData.SegmentPath = "second30fec-thresholds"
    second30fecThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30fec/" + second30fecThresholds.EntityData.SegmentPath
    second30fecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30fecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30fecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30fecThresholds.EntityData.Children = types.NewOrderedMap()
    second30fecThresholds.EntityData.Children.Append("second30fec-threshold", types.YChild{"Second30fecThreshold", nil})
    for i := range second30fecThresholds.Second30fecThreshold {
        second30fecThresholds.EntityData.Children.Append(types.GetSegmentPath(second30fecThresholds.Second30fecThreshold[i]), types.YChild{"Second30fecThreshold", second30fecThresholds.Second30fecThreshold[i]})
    }
    second30fecThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30fecThresholds.EntityData.YListKeys = []string {}

    return &(second30fecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds_Second30fecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds_Second30fecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (second30fecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecThresholds_Second30fecThreshold) GetEntityData() *types.CommonEntityData {
    second30fecThreshold.EntityData.YFilter = second30fecThreshold.YFilter
    second30fecThreshold.EntityData.YangName = "second30fec-threshold"
    second30fecThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30fecThreshold.EntityData.ParentYangName = "second30fec-thresholds"
    second30fecThreshold.EntityData.SegmentPath = "second30fec-threshold" + types.AddKeyToken(second30fecThreshold.FecThreshold, "fec-threshold")
    second30fecThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30fec/second30fec-thresholds/" + second30fecThreshold.EntityData.SegmentPath
    second30fecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30fecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30fecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30fecThreshold.EntityData.Children = types.NewOrderedMap()
    second30fecThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30fecThreshold.EntityData.Leafs.Append("fec-threshold", types.YLeaf{"FecThreshold", second30fecThreshold.FecThreshold})
    second30fecThreshold.EntityData.Leafs.Append("fec-threshold-value", types.YLeaf{"FecThresholdValue", second30fecThreshold.FecThresholdValue})

    second30fecThreshold.EntityData.YListKeys = []string {"FecThreshold"}

    return &(second30fecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports_Second30fecReport.
    Second30fecReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports_Second30fecReport
}

func (second30fecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports) GetEntityData() *types.CommonEntityData {
    second30fecReports.EntityData.YFilter = second30fecReports.YFilter
    second30fecReports.EntityData.YangName = "second30fec-reports"
    second30fecReports.EntityData.BundleName = "cisco_ios_xr"
    second30fecReports.EntityData.ParentYangName = "second30fec"
    second30fecReports.EntityData.SegmentPath = "second30fec-reports"
    second30fecReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30fec/" + second30fecReports.EntityData.SegmentPath
    second30fecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30fecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30fecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30fecReports.EntityData.Children = types.NewOrderedMap()
    second30fecReports.EntityData.Children.Append("second30fec-report", types.YChild{"Second30fecReport", nil})
    for i := range second30fecReports.Second30fecReport {
        second30fecReports.EntityData.Children.Append(types.GetSegmentPath(second30fecReports.Second30fecReport[i]), types.YChild{"Second30fecReport", second30fecReports.Second30fecReport[i]})
    }
    second30fecReports.EntityData.Leafs = types.NewOrderedMap()

    second30fecReports.EntityData.YListKeys = []string {}

    return &(second30fecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports_Second30fecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports_Second30fecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30fecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30fec_Second30fecReports_Second30fecReport) GetEntityData() *types.CommonEntityData {
    second30fecReport.EntityData.YFilter = second30fecReport.YFilter
    second30fecReport.EntityData.YangName = "second30fec-report"
    second30fecReport.EntityData.BundleName = "cisco_ios_xr"
    second30fecReport.EntityData.ParentYangName = "second30fec-reports"
    second30fecReport.EntityData.SegmentPath = "second30fec-report" + types.AddKeyToken(second30fecReport.FecReport, "fec-report")
    second30fecReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30fec/second30fec-reports/" + second30fecReport.EntityData.SegmentPath
    second30fecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30fecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30fecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30fecReport.EntityData.Children = types.NewOrderedMap()
    second30fecReport.EntityData.Leafs = types.NewOrderedMap()
    second30fecReport.EntityData.Leafs.Append("fec-report", types.YLeaf{"FecReport", second30fecReport.FecReport})
    second30fecReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30fecReport.Enable})

    second30fecReport.EntityData.YListKeys = []string {"FecReport"}

    return &(second30fecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set optics TCA reporting status.
    Second30OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports

    // Configure threshold on optics parameters.
    Second30OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
}

func (second30Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics) GetEntityData() *types.CommonEntityData {
    second30Optics.EntityData.YFilter = second30Optics.YFilter
    second30Optics.EntityData.YangName = "second30-optics"
    second30Optics.EntityData.BundleName = "cisco_ios_xr"
    second30Optics.EntityData.ParentYangName = "second30"
    second30Optics.EntityData.SegmentPath = "second30-optics"
    second30Optics.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30Optics.EntityData.SegmentPath
    second30Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Optics.EntityData.Children = types.NewOrderedMap()
    second30Optics.EntityData.Children.Append("second30-optics-reports", types.YChild{"Second30OpticsReports", &second30Optics.Second30OpticsReports})
    second30Optics.EntityData.Children.Append("second30-optics-thresholds", types.YChild{"Second30OpticsThresholds", &second30Optics.Second30OpticsThresholds})
    second30Optics.EntityData.Leafs = types.NewOrderedMap()

    second30Optics.EntityData.YListKeys = []string {}

    return &(second30Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport.
    Second30OpticsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
}

func (second30OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports) GetEntityData() *types.CommonEntityData {
    second30OpticsReports.EntityData.YFilter = second30OpticsReports.YFilter
    second30OpticsReports.EntityData.YangName = "second30-optics-reports"
    second30OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsReports.EntityData.ParentYangName = "second30-optics"
    second30OpticsReports.EntityData.SegmentPath = "second30-optics-reports"
    second30OpticsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30-optics/" + second30OpticsReports.EntityData.SegmentPath
    second30OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsReports.EntityData.Children = types.NewOrderedMap()
    second30OpticsReports.EntityData.Children.Append("second30-optics-report", types.YChild{"Second30OpticsReport", nil})
    for i := range second30OpticsReports.Second30OpticsReport {
        second30OpticsReports.EntityData.Children.Append(types.GetSegmentPath(second30OpticsReports.Second30OpticsReport[i]), types.YChild{"Second30OpticsReport", second30OpticsReports.Second30OpticsReport[i]})
    }
    second30OpticsReports.EntityData.Leafs = types.NewOrderedMap()

    second30OpticsReports.EntityData.YListKeys = []string {}

    return &(second30OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (second30OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsReports_Second30OpticsReport) GetEntityData() *types.CommonEntityData {
    second30OpticsReport.EntityData.YFilter = second30OpticsReport.YFilter
    second30OpticsReport.EntityData.YangName = "second30-optics-report"
    second30OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsReport.EntityData.ParentYangName = "second30-optics-reports"
    second30OpticsReport.EntityData.SegmentPath = "second30-optics-report" + types.AddKeyToken(second30OpticsReport.OpticsReport, "optics-report")
    second30OpticsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30-optics/second30-optics-reports/" + second30OpticsReport.EntityData.SegmentPath
    second30OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsReport.EntityData.Children = types.NewOrderedMap()
    second30OpticsReport.EntityData.Leafs = types.NewOrderedMap()
    second30OpticsReport.EntityData.Leafs.Append("optics-report", types.YLeaf{"OpticsReport", second30OpticsReport.OpticsReport})

    second30OpticsReport.EntityData.YListKeys = []string {"OpticsReport"}

    return &(second30OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold.
    Second30OpticsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
}

func (second30OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds) GetEntityData() *types.CommonEntityData {
    second30OpticsThresholds.EntityData.YFilter = second30OpticsThresholds.YFilter
    second30OpticsThresholds.EntityData.YangName = "second30-optics-thresholds"
    second30OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsThresholds.EntityData.ParentYangName = "second30-optics"
    second30OpticsThresholds.EntityData.SegmentPath = "second30-optics-thresholds"
    second30OpticsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30-optics/" + second30OpticsThresholds.EntityData.SegmentPath
    second30OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsThresholds.EntityData.Children = types.NewOrderedMap()
    second30OpticsThresholds.EntityData.Children.Append("second30-optics-threshold", types.YChild{"Second30OpticsThreshold", nil})
    for i := range second30OpticsThresholds.Second30OpticsThreshold {
        second30OpticsThresholds.EntityData.Children.Append(types.GetSegmentPath(second30OpticsThresholds.Second30OpticsThreshold[i]), types.YChild{"Second30OpticsThreshold", second30OpticsThresholds.Second30OpticsThreshold[i]})
    }
    second30OpticsThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30OpticsThresholds.EntityData.YListKeys = []string {}

    return &(second30OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: 0..4294967295. The default value is 0.
    Dbm interface{}
}

func (second30OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30Optics_Second30OpticsThresholds_Second30OpticsThreshold) GetEntityData() *types.CommonEntityData {
    second30OpticsThreshold.EntityData.YFilter = second30OpticsThreshold.YFilter
    second30OpticsThreshold.EntityData.YangName = "second30-optics-threshold"
    second30OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30OpticsThreshold.EntityData.ParentYangName = "second30-optics-thresholds"
    second30OpticsThreshold.EntityData.SegmentPath = "second30-optics-threshold" + types.AddKeyToken(second30OpticsThreshold.OpticsThreshold, "optics-threshold")
    second30OpticsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30-optics/second30-optics-thresholds/" + second30OpticsThreshold.EntityData.SegmentPath
    second30OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OpticsThreshold.EntityData.Children = types.NewOrderedMap()
    second30OpticsThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30OpticsThreshold.EntityData.Leafs.Append("optics-threshold", types.YLeaf{"OpticsThreshold", second30OpticsThreshold.OpticsThreshold})
    second30OpticsThreshold.EntityData.Leafs.Append("optics-threshold-value", types.YLeaf{"OpticsThresholdValue", second30OpticsThreshold.OpticsThresholdValue})
    second30OpticsThreshold.EntityData.Leafs.Append("dbm", types.YLeaf{"Dbm", second30OpticsThreshold.Dbm})

    second30OpticsThreshold.EntityData.YListKeys = []string {"OpticsThreshold"}

    return &(second30OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secyif parameters.
    Second30secyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds

    // set secyif TCA reporting status.
    Second30secyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports
}

func (second30secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif) GetEntityData() *types.CommonEntityData {
    second30secyif.EntityData.YFilter = second30secyif.YFilter
    second30secyif.EntityData.YangName = "second30secyif"
    second30secyif.EntityData.BundleName = "cisco_ios_xr"
    second30secyif.EntityData.ParentYangName = "second30"
    second30secyif.EntityData.SegmentPath = "second30secyif"
    second30secyif.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30secyif.EntityData.SegmentPath
    second30secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyif.EntityData.Children = types.NewOrderedMap()
    second30secyif.EntityData.Children.Append("second30secyif-thresholds", types.YChild{"Second30secyifThresholds", &second30secyif.Second30secyifThresholds})
    second30secyif.EntityData.Children.Append("second30secyif-reports", types.YChild{"Second30secyifReports", &second30secyif.Second30secyifReports})
    second30secyif.EntityData.Leafs = types.NewOrderedMap()

    second30secyif.EntityData.YListKeys = []string {}

    return &(second30secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds_Second30secyifThreshold.
    Second30secyifThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds_Second30secyifThreshold
}

func (second30secyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds) GetEntityData() *types.CommonEntityData {
    second30secyifThresholds.EntityData.YFilter = second30secyifThresholds.YFilter
    second30secyifThresholds.EntityData.YangName = "second30secyif-thresholds"
    second30secyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30secyifThresholds.EntityData.ParentYangName = "second30secyif"
    second30secyifThresholds.EntityData.SegmentPath = "second30secyif-thresholds"
    second30secyifThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyif/" + second30secyifThresholds.EntityData.SegmentPath
    second30secyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyifThresholds.EntityData.Children = types.NewOrderedMap()
    second30secyifThresholds.EntityData.Children.Append("second30secyif-threshold", types.YChild{"Second30secyifThreshold", nil})
    for i := range second30secyifThresholds.Second30secyifThreshold {
        second30secyifThresholds.EntityData.Children.Append(types.GetSegmentPath(second30secyifThresholds.Second30secyifThreshold[i]), types.YChild{"Second30secyifThreshold", second30secyifThresholds.Second30secyifThreshold[i]})
    }
    second30secyifThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30secyifThresholds.EntityData.YListKeys = []string {}

    return &(second30secyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds_Second30secyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds_Second30secyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (second30secyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifThresholds_Second30secyifThreshold) GetEntityData() *types.CommonEntityData {
    second30secyifThreshold.EntityData.YFilter = second30secyifThreshold.YFilter
    second30secyifThreshold.EntityData.YangName = "second30secyif-threshold"
    second30secyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30secyifThreshold.EntityData.ParentYangName = "second30secyif-thresholds"
    second30secyifThreshold.EntityData.SegmentPath = "second30secyif-threshold" + types.AddKeyToken(second30secyifThreshold.SecyifThreshold, "secyif-threshold")
    second30secyifThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyif/second30secyif-thresholds/" + second30secyifThreshold.EntityData.SegmentPath
    second30secyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyifThreshold.EntityData.Children = types.NewOrderedMap()
    second30secyifThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30secyifThreshold.EntityData.Leafs.Append("secyif-threshold", types.YLeaf{"SecyifThreshold", second30secyifThreshold.SecyifThreshold})
    second30secyifThreshold.EntityData.Leafs.Append("secyif-threshold-value", types.YLeaf{"SecyifThresholdValue", second30secyifThreshold.SecyifThresholdValue})

    second30secyifThreshold.EntityData.YListKeys = []string {"SecyifThreshold"}

    return &(second30secyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports_Second30secyifReport.
    Second30secyifReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports_Second30secyifReport
}

func (second30secyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports) GetEntityData() *types.CommonEntityData {
    second30secyifReports.EntityData.YFilter = second30secyifReports.YFilter
    second30secyifReports.EntityData.YangName = "second30secyif-reports"
    second30secyifReports.EntityData.BundleName = "cisco_ios_xr"
    second30secyifReports.EntityData.ParentYangName = "second30secyif"
    second30secyifReports.EntityData.SegmentPath = "second30secyif-reports"
    second30secyifReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyif/" + second30secyifReports.EntityData.SegmentPath
    second30secyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyifReports.EntityData.Children = types.NewOrderedMap()
    second30secyifReports.EntityData.Children.Append("second30secyif-report", types.YChild{"Second30secyifReport", nil})
    for i := range second30secyifReports.Second30secyifReport {
        second30secyifReports.EntityData.Children.Append(types.GetSegmentPath(second30secyifReports.Second30secyifReport[i]), types.YChild{"Second30secyifReport", second30secyifReports.Second30secyifReport[i]})
    }
    second30secyifReports.EntityData.Leafs = types.NewOrderedMap()

    second30secyifReports.EntityData.YListKeys = []string {}

    return &(second30secyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports_Second30secyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports_Second30secyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30secyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyif_Second30secyifReports_Second30secyifReport) GetEntityData() *types.CommonEntityData {
    second30secyifReport.EntityData.YFilter = second30secyifReport.YFilter
    second30secyifReport.EntityData.YangName = "second30secyif-report"
    second30secyifReport.EntityData.BundleName = "cisco_ios_xr"
    second30secyifReport.EntityData.ParentYangName = "second30secyif-reports"
    second30secyifReport.EntityData.SegmentPath = "second30secyif-report" + types.AddKeyToken(second30secyifReport.SecyifReport, "secyif-report")
    second30secyifReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyif/second30secyif-reports/" + second30secyifReport.EntityData.SegmentPath
    second30secyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyifReport.EntityData.Children = types.NewOrderedMap()
    second30secyifReport.EntityData.Leafs = types.NewOrderedMap()
    second30secyifReport.EntityData.Leafs.Append("secyif-report", types.YLeaf{"SecyifReport", second30secyifReport.SecyifReport})
    second30secyifReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30secyifReport.Enable})

    second30secyifReport.EntityData.YListKeys = []string {"SecyifReport"}

    return &(second30secyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secyrx parameters.
    Second30secyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds

    // set secyrx TCA reporting status.
    Second30secyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports
}

func (second30secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx) GetEntityData() *types.CommonEntityData {
    second30secyrx.EntityData.YFilter = second30secyrx.YFilter
    second30secyrx.EntityData.YangName = "second30secyrx"
    second30secyrx.EntityData.BundleName = "cisco_ios_xr"
    second30secyrx.EntityData.ParentYangName = "second30"
    second30secyrx.EntityData.SegmentPath = "second30secyrx"
    second30secyrx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30secyrx.EntityData.SegmentPath
    second30secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyrx.EntityData.Children = types.NewOrderedMap()
    second30secyrx.EntityData.Children.Append("second30secyrx-thresholds", types.YChild{"Second30secyrxThresholds", &second30secyrx.Second30secyrxThresholds})
    second30secyrx.EntityData.Children.Append("second30secyrx-reports", types.YChild{"Second30secyrxReports", &second30secyrx.Second30secyrxReports})
    second30secyrx.EntityData.Leafs = types.NewOrderedMap()

    second30secyrx.EntityData.YListKeys = []string {}

    return &(second30secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds_Second30secyrxThreshold.
    Second30secyrxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds_Second30secyrxThreshold
}

func (second30secyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds) GetEntityData() *types.CommonEntityData {
    second30secyrxThresholds.EntityData.YFilter = second30secyrxThresholds.YFilter
    second30secyrxThresholds.EntityData.YangName = "second30secyrx-thresholds"
    second30secyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30secyrxThresholds.EntityData.ParentYangName = "second30secyrx"
    second30secyrxThresholds.EntityData.SegmentPath = "second30secyrx-thresholds"
    second30secyrxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyrx/" + second30secyrxThresholds.EntityData.SegmentPath
    second30secyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyrxThresholds.EntityData.Children = types.NewOrderedMap()
    second30secyrxThresholds.EntityData.Children.Append("second30secyrx-threshold", types.YChild{"Second30secyrxThreshold", nil})
    for i := range second30secyrxThresholds.Second30secyrxThreshold {
        second30secyrxThresholds.EntityData.Children.Append(types.GetSegmentPath(second30secyrxThresholds.Second30secyrxThreshold[i]), types.YChild{"Second30secyrxThreshold", second30secyrxThresholds.Second30secyrxThreshold[i]})
    }
    second30secyrxThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30secyrxThresholds.EntityData.YListKeys = []string {}

    return &(second30secyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds_Second30secyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds_Second30secyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (second30secyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxThresholds_Second30secyrxThreshold) GetEntityData() *types.CommonEntityData {
    second30secyrxThreshold.EntityData.YFilter = second30secyrxThreshold.YFilter
    second30secyrxThreshold.EntityData.YangName = "second30secyrx-threshold"
    second30secyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30secyrxThreshold.EntityData.ParentYangName = "second30secyrx-thresholds"
    second30secyrxThreshold.EntityData.SegmentPath = "second30secyrx-threshold" + types.AddKeyToken(second30secyrxThreshold.SecyrxThreshold, "secyrx-threshold")
    second30secyrxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyrx/second30secyrx-thresholds/" + second30secyrxThreshold.EntityData.SegmentPath
    second30secyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyrxThreshold.EntityData.Children = types.NewOrderedMap()
    second30secyrxThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold", types.YLeaf{"SecyrxThreshold", second30secyrxThreshold.SecyrxThreshold})
    second30secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold-value", types.YLeaf{"SecyrxThresholdValue", second30secyrxThreshold.SecyrxThresholdValue})

    second30secyrxThreshold.EntityData.YListKeys = []string {"SecyrxThreshold"}

    return &(second30secyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports_Second30secyrxReport.
    Second30secyrxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports_Second30secyrxReport
}

func (second30secyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports) GetEntityData() *types.CommonEntityData {
    second30secyrxReports.EntityData.YFilter = second30secyrxReports.YFilter
    second30secyrxReports.EntityData.YangName = "second30secyrx-reports"
    second30secyrxReports.EntityData.BundleName = "cisco_ios_xr"
    second30secyrxReports.EntityData.ParentYangName = "second30secyrx"
    second30secyrxReports.EntityData.SegmentPath = "second30secyrx-reports"
    second30secyrxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyrx/" + second30secyrxReports.EntityData.SegmentPath
    second30secyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyrxReports.EntityData.Children = types.NewOrderedMap()
    second30secyrxReports.EntityData.Children.Append("second30secyrx-report", types.YChild{"Second30secyrxReport", nil})
    for i := range second30secyrxReports.Second30secyrxReport {
        second30secyrxReports.EntityData.Children.Append(types.GetSegmentPath(second30secyrxReports.Second30secyrxReport[i]), types.YChild{"Second30secyrxReport", second30secyrxReports.Second30secyrxReport[i]})
    }
    second30secyrxReports.EntityData.Leafs = types.NewOrderedMap()

    second30secyrxReports.EntityData.YListKeys = []string {}

    return &(second30secyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports_Second30secyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports_Second30secyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30secyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secyrx_Second30secyrxReports_Second30secyrxReport) GetEntityData() *types.CommonEntityData {
    second30secyrxReport.EntityData.YFilter = second30secyrxReport.YFilter
    second30secyrxReport.EntityData.YangName = "second30secyrx-report"
    second30secyrxReport.EntityData.BundleName = "cisco_ios_xr"
    second30secyrxReport.EntityData.ParentYangName = "second30secyrx-reports"
    second30secyrxReport.EntityData.SegmentPath = "second30secyrx-report" + types.AddKeyToken(second30secyrxReport.SecyrxReport, "secyrx-report")
    second30secyrxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secyrx/second30secyrx-reports/" + second30secyrxReport.EntityData.SegmentPath
    second30secyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secyrxReport.EntityData.Children = types.NewOrderedMap()
    second30secyrxReport.EntityData.Leafs = types.NewOrderedMap()
    second30secyrxReport.EntityData.Leafs.Append("secyrx-report", types.YLeaf{"SecyrxReport", second30secyrxReport.SecyrxReport})
    second30secyrxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30secyrxReport.Enable})

    second30secyrxReport.EntityData.YListKeys = []string {"SecyrxReport"}

    return &(second30secyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Second30OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes

    // set otn TCA reporting status.
    Second30otnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports
}

func (second30otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn) GetEntityData() *types.CommonEntityData {
    second30otn.EntityData.YFilter = second30otn.YFilter
    second30otn.EntityData.YangName = "second30otn"
    second30otn.EntityData.BundleName = "cisco_ios_xr"
    second30otn.EntityData.ParentYangName = "second30"
    second30otn.EntityData.SegmentPath = "second30otn"
    second30otn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30otn.EntityData.SegmentPath
    second30otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30otn.EntityData.Children = types.NewOrderedMap()
    second30otn.EntityData.Children.Append("second30-otn-threshes", types.YChild{"Second30OtnThreshes", &second30otn.Second30OtnThreshes})
    second30otn.EntityData.Children.Append("second30otn-reports", types.YChild{"Second30otnReports", &second30otn.Second30otnReports})
    second30otn.EntityData.Leafs = types.NewOrderedMap()

    second30otn.EntityData.YListKeys = []string {}

    return &(second30otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes_Second30OtnThresh.
    Second30OtnThresh []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes_Second30OtnThresh
}

func (second30OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes) GetEntityData() *types.CommonEntityData {
    second30OtnThreshes.EntityData.YFilter = second30OtnThreshes.YFilter
    second30OtnThreshes.EntityData.YangName = "second30-otn-threshes"
    second30OtnThreshes.EntityData.BundleName = "cisco_ios_xr"
    second30OtnThreshes.EntityData.ParentYangName = "second30otn"
    second30OtnThreshes.EntityData.SegmentPath = "second30-otn-threshes"
    second30OtnThreshes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30otn/" + second30OtnThreshes.EntityData.SegmentPath
    second30OtnThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnThreshes.EntityData.Children = types.NewOrderedMap()
    second30OtnThreshes.EntityData.Children.Append("second30-otn-thresh", types.YChild{"Second30OtnThresh", nil})
    for i := range second30OtnThreshes.Second30OtnThresh {
        second30OtnThreshes.EntityData.Children.Append(types.GetSegmentPath(second30OtnThreshes.Second30OtnThresh[i]), types.YChild{"Second30OtnThresh", second30OtnThreshes.Second30OtnThresh[i]})
    }
    second30OtnThreshes.EntityData.Leafs = types.NewOrderedMap()

    second30OtnThreshes.EntityData.YListKeys = []string {}

    return &(second30OtnThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes_Second30OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes_Second30OtnThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (second30OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30OtnThreshes_Second30OtnThresh) GetEntityData() *types.CommonEntityData {
    second30OtnThresh.EntityData.YFilter = second30OtnThresh.YFilter
    second30OtnThresh.EntityData.YangName = "second30-otn-thresh"
    second30OtnThresh.EntityData.BundleName = "cisco_ios_xr"
    second30OtnThresh.EntityData.ParentYangName = "second30-otn-threshes"
    second30OtnThresh.EntityData.SegmentPath = "second30-otn-thresh" + types.AddKeyToken(second30OtnThresh.OtnThreshold, "otn-threshold")
    second30OtnThresh.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30otn/second30-otn-threshes/" + second30OtnThresh.EntityData.SegmentPath
    second30OtnThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30OtnThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30OtnThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30OtnThresh.EntityData.Children = types.NewOrderedMap()
    second30OtnThresh.EntityData.Leafs = types.NewOrderedMap()
    second30OtnThresh.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", second30OtnThresh.OtnThreshold})
    second30OtnThresh.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", second30OtnThresh.OtnThresholdValue})

    second30OtnThresh.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(second30OtnThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports_Second30otnReport.
    Second30otnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports_Second30otnReport
}

func (second30otnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports) GetEntityData() *types.CommonEntityData {
    second30otnReports.EntityData.YFilter = second30otnReports.YFilter
    second30otnReports.EntityData.YangName = "second30otn-reports"
    second30otnReports.EntityData.BundleName = "cisco_ios_xr"
    second30otnReports.EntityData.ParentYangName = "second30otn"
    second30otnReports.EntityData.SegmentPath = "second30otn-reports"
    second30otnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30otn/" + second30otnReports.EntityData.SegmentPath
    second30otnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30otnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30otnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30otnReports.EntityData.Children = types.NewOrderedMap()
    second30otnReports.EntityData.Children.Append("second30otn-report", types.YChild{"Second30otnReport", nil})
    for i := range second30otnReports.Second30otnReport {
        second30otnReports.EntityData.Children.Append(types.GetSegmentPath(second30otnReports.Second30otnReport[i]), types.YChild{"Second30otnReport", second30otnReports.Second30otnReport[i]})
    }
    second30otnReports.EntityData.Leafs = types.NewOrderedMap()

    second30otnReports.EntityData.YListKeys = []string {}

    return &(second30otnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports_Second30otnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports_Second30otnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30otnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30otn_Second30otnReports_Second30otnReport) GetEntityData() *types.CommonEntityData {
    second30otnReport.EntityData.YFilter = second30otnReport.YFilter
    second30otnReport.EntityData.YangName = "second30otn-report"
    second30otnReport.EntityData.BundleName = "cisco_ios_xr"
    second30otnReport.EntityData.ParentYangName = "second30otn-reports"
    second30otnReport.EntityData.SegmentPath = "second30otn-report" + types.AddKeyToken(second30otnReport.OtnReport, "otn-report")
    second30otnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30otn/second30otn-reports/" + second30otnReport.EntityData.SegmentPath
    second30otnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30otnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30otnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30otnReport.EntityData.Children = types.NewOrderedMap()
    second30otnReport.EntityData.Leafs = types.NewOrderedMap()
    second30otnReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", second30otnReport.OtnReport})
    second30otnReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30otnReport.Enable})

    second30otnReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(second30otnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on secytx parameters.
    Second30secytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds

    // set secytx TCA reporting status.
    Second30secytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports
}

func (second30secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx) GetEntityData() *types.CommonEntityData {
    second30secytx.EntityData.YFilter = second30secytx.YFilter
    second30secytx.EntityData.YangName = "second30secytx"
    second30secytx.EntityData.BundleName = "cisco_ios_xr"
    second30secytx.EntityData.ParentYangName = "second30"
    second30secytx.EntityData.SegmentPath = "second30secytx"
    second30secytx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/" + second30secytx.EntityData.SegmentPath
    second30secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secytx.EntityData.Children = types.NewOrderedMap()
    second30secytx.EntityData.Children.Append("second30secytx-thresholds", types.YChild{"Second30secytxThresholds", &second30secytx.Second30secytxThresholds})
    second30secytx.EntityData.Children.Append("second30secytx-reports", types.YChild{"Second30secytxReports", &second30secytx.Second30secytxReports})
    second30secytx.EntityData.Leafs = types.NewOrderedMap()

    second30secytx.EntityData.YListKeys = []string {}

    return &(second30secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds_Second30secytxThreshold.
    Second30secytxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds_Second30secytxThreshold
}

func (second30secytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds) GetEntityData() *types.CommonEntityData {
    second30secytxThresholds.EntityData.YFilter = second30secytxThresholds.YFilter
    second30secytxThresholds.EntityData.YangName = "second30secytx-thresholds"
    second30secytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30secytxThresholds.EntityData.ParentYangName = "second30secytx"
    second30secytxThresholds.EntityData.SegmentPath = "second30secytx-thresholds"
    second30secytxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secytx/" + second30secytxThresholds.EntityData.SegmentPath
    second30secytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secytxThresholds.EntityData.Children = types.NewOrderedMap()
    second30secytxThresholds.EntityData.Children.Append("second30secytx-threshold", types.YChild{"Second30secytxThreshold", nil})
    for i := range second30secytxThresholds.Second30secytxThreshold {
        second30secytxThresholds.EntityData.Children.Append(types.GetSegmentPath(second30secytxThresholds.Second30secytxThreshold[i]), types.YChild{"Second30secytxThreshold", second30secytxThresholds.Second30secytxThreshold[i]})
    }
    second30secytxThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30secytxThresholds.EntityData.YListKeys = []string {}

    return &(second30secytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds_Second30secytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds_Second30secytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (second30secytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxThresholds_Second30secytxThreshold) GetEntityData() *types.CommonEntityData {
    second30secytxThreshold.EntityData.YFilter = second30secytxThreshold.YFilter
    second30secytxThreshold.EntityData.YangName = "second30secytx-threshold"
    second30secytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30secytxThreshold.EntityData.ParentYangName = "second30secytx-thresholds"
    second30secytxThreshold.EntityData.SegmentPath = "second30secytx-threshold" + types.AddKeyToken(second30secytxThreshold.SecytxThreshold, "secytx-threshold")
    second30secytxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secytx/second30secytx-thresholds/" + second30secytxThreshold.EntityData.SegmentPath
    second30secytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secytxThreshold.EntityData.Children = types.NewOrderedMap()
    second30secytxThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30secytxThreshold.EntityData.Leafs.Append("secytx-threshold", types.YLeaf{"SecytxThreshold", second30secytxThreshold.SecytxThreshold})
    second30secytxThreshold.EntityData.Leafs.Append("secytx-threshold-value", types.YLeaf{"SecytxThresholdValue", second30secytxThreshold.SecytxThresholdValue})

    second30secytxThreshold.EntityData.YListKeys = []string {"SecytxThreshold"}

    return &(second30secytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports_Second30secytxReport.
    Second30secytxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports_Second30secytxReport
}

func (second30secytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports) GetEntityData() *types.CommonEntityData {
    second30secytxReports.EntityData.YFilter = second30secytxReports.YFilter
    second30secytxReports.EntityData.YangName = "second30secytx-reports"
    second30secytxReports.EntityData.BundleName = "cisco_ios_xr"
    second30secytxReports.EntityData.ParentYangName = "second30secytx"
    second30secytxReports.EntityData.SegmentPath = "second30secytx-reports"
    second30secytxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secytx/" + second30secytxReports.EntityData.SegmentPath
    second30secytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secytxReports.EntityData.Children = types.NewOrderedMap()
    second30secytxReports.EntityData.Children.Append("second30secytx-report", types.YChild{"Second30secytxReport", nil})
    for i := range second30secytxReports.Second30secytxReport {
        second30secytxReports.EntityData.Children.Append(types.GetSegmentPath(second30secytxReports.Second30secytxReport[i]), types.YChild{"Second30secytxReport", second30secytxReports.Second30secytxReport[i]})
    }
    second30secytxReports.EntityData.Leafs = types.NewOrderedMap()

    second30secytxReports.EntityData.YListKeys = []string {}

    return &(second30secytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports_Second30secytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports_Second30secytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (second30secytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Second30_Second30secytx_Second30secytxReports_Second30secytxReport) GetEntityData() *types.CommonEntityData {
    second30secytxReport.EntityData.YFilter = second30secytxReport.YFilter
    second30secytxReport.EntityData.YangName = "second30secytx-report"
    second30secytxReport.EntityData.BundleName = "cisco_ios_xr"
    second30secytxReport.EntityData.ParentYangName = "second30secytx-reports"
    second30secytxReport.EntityData.SegmentPath = "second30secytx-report" + types.AddKeyToken(second30secytxReport.SecytxReport, "secytx-report")
    second30secytxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/second30/second30secytx/second30secytx-reports/" + second30secytxReport.EntityData.SegmentPath
    second30secytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30secytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30secytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30secytxReport.EntityData.Children = types.NewOrderedMap()
    second30secytxReport.EntityData.Leafs = types.NewOrderedMap()
    second30secytxReport.EntityData.Leafs.Append("secytx-report", types.YLeaf{"SecytxReport", second30secytxReport.SecytxReport})
    second30secytxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", second30secytxReport.Enable})

    second30secytxReport.EntityData.YListKeys = []string {"SecytxReport"}

    return &(second30secytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms
// Configure pm parameters of tcm's 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 tcm's performance monitoring. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm.
    Hour24otnTcm []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm
}

func (hour24otnTcms *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms) GetEntityData() *types.CommonEntityData {
    hour24otnTcms.EntityData.YFilter = hour24otnTcms.YFilter
    hour24otnTcms.EntityData.YangName = "hour24otn-tcms"
    hour24otnTcms.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcms.EntityData.ParentYangName = "performance-management"
    hour24otnTcms.EntityData.SegmentPath = "hour24otn-tcms"
    hour24otnTcms.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hour24otnTcms.EntityData.SegmentPath
    hour24otnTcms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcms.EntityData.Children = types.NewOrderedMap()
    hour24otnTcms.EntityData.Children.Append("hour24otn-tcm", types.YChild{"Hour24otnTcm", nil})
    for i := range hour24otnTcms.Hour24otnTcm {
        hour24otnTcms.EntityData.Children.Append(types.GetSegmentPath(hour24otnTcms.Hour24otnTcm[i]), types.YChild{"Hour24otnTcm", hour24otnTcms.Hour24otnTcm[i]})
    }
    hour24otnTcms.EntityData.Leafs = types.NewOrderedMap()

    hour24otnTcms.EntityData.YListKeys = []string {}

    return &(hour24otnTcms.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm
// configure otn g709 tcm's performance
// monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TCM number. The type is interface{} with range:
    // 0..4294967295.
    TcmNumber interface{}

    // Configure threshold on otn parameters.
    Hour24otnTcmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds

    // set otn TCA reporting status.
    Hour24otnTcmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports
}

func (hour24otnTcm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm) GetEntityData() *types.CommonEntityData {
    hour24otnTcm.EntityData.YFilter = hour24otnTcm.YFilter
    hour24otnTcm.EntityData.YangName = "hour24otn-tcm"
    hour24otnTcm.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcm.EntityData.ParentYangName = "hour24otn-tcms"
    hour24otnTcm.EntityData.SegmentPath = "hour24otn-tcm" + types.AddKeyToken(hour24otnTcm.TcmNumber, "tcm-number")
    hour24otnTcm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24otn-tcms/" + hour24otnTcm.EntityData.SegmentPath
    hour24otnTcm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcm.EntityData.Children = types.NewOrderedMap()
    hour24otnTcm.EntityData.Children.Append("hour24otn-tcm-thresholds", types.YChild{"Hour24otnTcmThresholds", &hour24otnTcm.Hour24otnTcmThresholds})
    hour24otnTcm.EntityData.Children.Append("hour24otn-tcm-reports", types.YChild{"Hour24otnTcmReports", &hour24otnTcm.Hour24otnTcmReports})
    hour24otnTcm.EntityData.Leafs = types.NewOrderedMap()
    hour24otnTcm.EntityData.Leafs.Append("tcm-number", types.YLeaf{"TcmNumber", hour24otnTcm.TcmNumber})

    hour24otnTcm.EntityData.YListKeys = []string {"TcmNumber"}

    return &(hour24otnTcm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds_Hour24otnTcmThreshold.
    Hour24otnTcmThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds_Hour24otnTcmThreshold
}

func (hour24otnTcmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds) GetEntityData() *types.CommonEntityData {
    hour24otnTcmThresholds.EntityData.YFilter = hour24otnTcmThresholds.YFilter
    hour24otnTcmThresholds.EntityData.YangName = "hour24otn-tcm-thresholds"
    hour24otnTcmThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcmThresholds.EntityData.ParentYangName = "hour24otn-tcm"
    hour24otnTcmThresholds.EntityData.SegmentPath = "hour24otn-tcm-thresholds"
    hour24otnTcmThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24otn-tcms/hour24otn-tcm/" + hour24otnTcmThresholds.EntityData.SegmentPath
    hour24otnTcmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcmThresholds.EntityData.Children = types.NewOrderedMap()
    hour24otnTcmThresholds.EntityData.Children.Append("hour24otn-tcm-threshold", types.YChild{"Hour24otnTcmThreshold", nil})
    for i := range hour24otnTcmThresholds.Hour24otnTcmThreshold {
        hour24otnTcmThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24otnTcmThresholds.Hour24otnTcmThreshold[i]), types.YChild{"Hour24otnTcmThreshold", hour24otnTcmThresholds.Hour24otnTcmThreshold[i]})
    }
    hour24otnTcmThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24otnTcmThresholds.EntityData.YListKeys = []string {}

    return &(hour24otnTcmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds_Hour24otnTcmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds_Hour24otnTcmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnTcmThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24otnTcmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmThresholds_Hour24otnTcmThreshold) GetEntityData() *types.CommonEntityData {
    hour24otnTcmThreshold.EntityData.YFilter = hour24otnTcmThreshold.YFilter
    hour24otnTcmThreshold.EntityData.YangName = "hour24otn-tcm-threshold"
    hour24otnTcmThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcmThreshold.EntityData.ParentYangName = "hour24otn-tcm-thresholds"
    hour24otnTcmThreshold.EntityData.SegmentPath = "hour24otn-tcm-threshold" + types.AddKeyToken(hour24otnTcmThreshold.OtnThreshold, "otn-threshold")
    hour24otnTcmThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24otn-tcms/hour24otn-tcm/hour24otn-tcm-thresholds/" + hour24otnTcmThreshold.EntityData.SegmentPath
    hour24otnTcmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcmThreshold.EntityData.Children = types.NewOrderedMap()
    hour24otnTcmThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24otnTcmThreshold.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", hour24otnTcmThreshold.OtnThreshold})
    hour24otnTcmThreshold.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", hour24otnTcmThreshold.OtnThresholdValue})

    hour24otnTcmThreshold.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(hour24otnTcmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports_Hour24otnTcmReport.
    Hour24otnTcmReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports_Hour24otnTcmReport
}

func (hour24otnTcmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports) GetEntityData() *types.CommonEntityData {
    hour24otnTcmReports.EntityData.YFilter = hour24otnTcmReports.YFilter
    hour24otnTcmReports.EntityData.YangName = "hour24otn-tcm-reports"
    hour24otnTcmReports.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcmReports.EntityData.ParentYangName = "hour24otn-tcm"
    hour24otnTcmReports.EntityData.SegmentPath = "hour24otn-tcm-reports"
    hour24otnTcmReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24otn-tcms/hour24otn-tcm/" + hour24otnTcmReports.EntityData.SegmentPath
    hour24otnTcmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcmReports.EntityData.Children = types.NewOrderedMap()
    hour24otnTcmReports.EntityData.Children.Append("hour24otn-tcm-report", types.YChild{"Hour24otnTcmReport", nil})
    for i := range hour24otnTcmReports.Hour24otnTcmReport {
        hour24otnTcmReports.EntityData.Children.Append(types.GetSegmentPath(hour24otnTcmReports.Hour24otnTcmReport[i]), types.YChild{"Hour24otnTcmReport", hour24otnTcmReports.Hour24otnTcmReport[i]})
    }
    hour24otnTcmReports.EntityData.Leafs = types.NewOrderedMap()

    hour24otnTcmReports.EntityData.YListKeys = []string {}

    return &(hour24otnTcmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports_Hour24otnTcmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports_Hour24otnTcmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnTcmReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24otnTcmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24otnTcms_Hour24otnTcm_Hour24otnTcmReports_Hour24otnTcmReport) GetEntityData() *types.CommonEntityData {
    hour24otnTcmReport.EntityData.YFilter = hour24otnTcmReport.YFilter
    hour24otnTcmReport.EntityData.YangName = "hour24otn-tcm-report"
    hour24otnTcmReport.EntityData.BundleName = "cisco_ios_xr"
    hour24otnTcmReport.EntityData.ParentYangName = "hour24otn-tcm-reports"
    hour24otnTcmReport.EntityData.SegmentPath = "hour24otn-tcm-report" + types.AddKeyToken(hour24otnTcmReport.OtnReport, "otn-report")
    hour24otnTcmReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24otn-tcms/hour24otn-tcm/hour24otn-tcm-reports/" + hour24otnTcmReport.EntityData.SegmentPath
    hour24otnTcmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnTcmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnTcmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnTcmReport.EntityData.Children = types.NewOrderedMap()
    hour24otnTcmReport.EntityData.Leafs = types.NewOrderedMap()
    hour24otnTcmReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", hour24otnTcmReport.OtnReport})
    hour24otnTcmReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24otnTcmReport.Enable})

    hour24otnTcmReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(hour24otnTcmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsMinute15Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
}

func (stsMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15) GetEntityData() *types.CommonEntityData {
    stsMinute15.EntityData.YFilter = stsMinute15.YFilter
    stsMinute15.EntityData.YangName = "sts-minute15"
    stsMinute15.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15.EntityData.ParentYangName = "performance-management"
    stsMinute15.EntityData.SegmentPath = "sts-minute15"
    stsMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + stsMinute15.EntityData.SegmentPath
    stsMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15.EntityData.Children = types.NewOrderedMap()
    stsMinute15.EntityData.Children.Append("sts-minute15-path", types.YChild{"StsMinute15Path", &stsMinute15.StsMinute15Path})
    stsMinute15.EntityData.Leafs = types.NewOrderedMap()

    stsMinute15.EntityData.YListKeys = []string {}

    return &(stsMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set Path TCA reporting status.
    StsMinute15PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports

    // Configure threshold on Path parameters.
    StsMinute15PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
}

func (stsMinute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path) GetEntityData() *types.CommonEntityData {
    stsMinute15Path.EntityData.YFilter = stsMinute15Path.YFilter
    stsMinute15Path.EntityData.YangName = "sts-minute15-path"
    stsMinute15Path.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15Path.EntityData.ParentYangName = "sts-minute15"
    stsMinute15Path.EntityData.SegmentPath = "sts-minute15-path"
    stsMinute15Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-minute15/" + stsMinute15Path.EntityData.SegmentPath
    stsMinute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15Path.EntityData.Children = types.NewOrderedMap()
    stsMinute15Path.EntityData.Children.Append("sts-minute15-path-reports", types.YChild{"StsMinute15PathReports", &stsMinute15Path.StsMinute15PathReports})
    stsMinute15Path.EntityData.Children.Append("sts-minute15-path-thresholds", types.YChild{"StsMinute15PathThresholds", &stsMinute15Path.StsMinute15PathThresholds})
    stsMinute15Path.EntityData.Leafs = types.NewOrderedMap()

    stsMinute15Path.EntityData.YListKeys = []string {}

    return &(stsMinute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport.
    StsMinute15PathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
}

func (stsMinute15PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports) GetEntityData() *types.CommonEntityData {
    stsMinute15PathReports.EntityData.YFilter = stsMinute15PathReports.YFilter
    stsMinute15PathReports.EntityData.YangName = "sts-minute15-path-reports"
    stsMinute15PathReports.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathReports.EntityData.ParentYangName = "sts-minute15-path"
    stsMinute15PathReports.EntityData.SegmentPath = "sts-minute15-path-reports"
    stsMinute15PathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-minute15/sts-minute15-path/" + stsMinute15PathReports.EntityData.SegmentPath
    stsMinute15PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathReports.EntityData.Children = types.NewOrderedMap()
    stsMinute15PathReports.EntityData.Children.Append("sts-minute15-path-report", types.YChild{"StsMinute15PathReport", nil})
    for i := range stsMinute15PathReports.StsMinute15PathReport {
        stsMinute15PathReports.EntityData.Children.Append(types.GetSegmentPath(stsMinute15PathReports.StsMinute15PathReport[i]), types.YChild{"StsMinute15PathReport", stsMinute15PathReports.StsMinute15PathReport[i]})
    }
    stsMinute15PathReports.EntityData.Leafs = types.NewOrderedMap()

    stsMinute15PathReports.EntityData.YListKeys = []string {}

    return &(stsMinute15PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsMinute15PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathReports_StsMinute15PathReport) GetEntityData() *types.CommonEntityData {
    stsMinute15PathReport.EntityData.YFilter = stsMinute15PathReport.YFilter
    stsMinute15PathReport.EntityData.YangName = "sts-minute15-path-report"
    stsMinute15PathReport.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathReport.EntityData.ParentYangName = "sts-minute15-path-reports"
    stsMinute15PathReport.EntityData.SegmentPath = "sts-minute15-path-report" + types.AddKeyToken(stsMinute15PathReport.PathReport, "path-report")
    stsMinute15PathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-minute15/sts-minute15-path/sts-minute15-path-reports/" + stsMinute15PathReport.EntityData.SegmentPath
    stsMinute15PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathReport.EntityData.Children = types.NewOrderedMap()
    stsMinute15PathReport.EntityData.Leafs = types.NewOrderedMap()
    stsMinute15PathReport.EntityData.Leafs.Append("path-report", types.YLeaf{"PathReport", stsMinute15PathReport.PathReport})
    stsMinute15PathReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", stsMinute15PathReport.Enable})

    stsMinute15PathReport.EntityData.YListKeys = []string {"PathReport"}

    return &(stsMinute15PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold.
    StsMinute15PathThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
}

func (stsMinute15PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds) GetEntityData() *types.CommonEntityData {
    stsMinute15PathThresholds.EntityData.YFilter = stsMinute15PathThresholds.YFilter
    stsMinute15PathThresholds.EntityData.YangName = "sts-minute15-path-thresholds"
    stsMinute15PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathThresholds.EntityData.ParentYangName = "sts-minute15-path"
    stsMinute15PathThresholds.EntityData.SegmentPath = "sts-minute15-path-thresholds"
    stsMinute15PathThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-minute15/sts-minute15-path/" + stsMinute15PathThresholds.EntityData.SegmentPath
    stsMinute15PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathThresholds.EntityData.Children = types.NewOrderedMap()
    stsMinute15PathThresholds.EntityData.Children.Append("sts-minute15-path-threshold", types.YChild{"StsMinute15PathThreshold", nil})
    for i := range stsMinute15PathThresholds.StsMinute15PathThreshold {
        stsMinute15PathThresholds.EntityData.Children.Append(types.GetSegmentPath(stsMinute15PathThresholds.StsMinute15PathThreshold[i]), types.YChild{"StsMinute15PathThreshold", stsMinute15PathThresholds.StsMinute15PathThreshold[i]})
    }
    stsMinute15PathThresholds.EntityData.Leafs = types.NewOrderedMap()

    stsMinute15PathThresholds.EntityData.YListKeys = []string {}

    return &(stsMinute15PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsMinute15PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsMinute15_StsMinute15Path_StsMinute15PathThresholds_StsMinute15PathThreshold) GetEntityData() *types.CommonEntityData {
    stsMinute15PathThreshold.EntityData.YFilter = stsMinute15PathThreshold.YFilter
    stsMinute15PathThreshold.EntityData.YangName = "sts-minute15-path-threshold"
    stsMinute15PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    stsMinute15PathThreshold.EntityData.ParentYangName = "sts-minute15-path-thresholds"
    stsMinute15PathThreshold.EntityData.SegmentPath = "sts-minute15-path-threshold" + types.AddKeyToken(stsMinute15PathThreshold.PathThreshold, "path-threshold")
    stsMinute15PathThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-minute15/sts-minute15-path/sts-minute15-path-thresholds/" + stsMinute15PathThreshold.EntityData.SegmentPath
    stsMinute15PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsMinute15PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsMinute15PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsMinute15PathThreshold.EntityData.Children = types.NewOrderedMap()
    stsMinute15PathThreshold.EntityData.Leafs = types.NewOrderedMap()
    stsMinute15PathThreshold.EntityData.Leafs.Append("path-threshold", types.YLeaf{"PathThreshold", stsMinute15PathThreshold.PathThreshold})
    stsMinute15PathThreshold.EntityData.Leafs.Append("path-threshold-value", types.YLeaf{"PathThresholdValue", stsMinute15PathThreshold.PathThresholdValue})

    stsMinute15PathThreshold.EntityData.YListKeys = []string {"PathThreshold"}

    return &(stsMinute15PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24
// Configure pm parameters of 24 hour interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn

    // Configure optics performance monitoring.
    Hour24Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics

    // Configure pcs performance monitoring.
    Hour24pcs InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs

    // Configure fec g709 performance monitoring.
    Hour24fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec

    // Configure secy-if performance monitoring.
    Hour24secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif

    // Configure secy-rx performance monitoring.
    Hour24secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx

    // Configure secy-tx performance monitoring.
    Hour24secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx
}

func (hour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24) GetEntityData() *types.CommonEntityData {
    hour24.EntityData.YFilter = hour24.YFilter
    hour24.EntityData.YangName = "hour24"
    hour24.EntityData.BundleName = "cisco_ios_xr"
    hour24.EntityData.ParentYangName = "performance-management"
    hour24.EntityData.SegmentPath = "hour24"
    hour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hour24.EntityData.SegmentPath
    hour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24.EntityData.Children = types.NewOrderedMap()
    hour24.EntityData.Children.Append("hour24otn", types.YChild{"Hour24otn", &hour24.Hour24otn})
    hour24.EntityData.Children.Append("hour24-optics", types.YChild{"Hour24Optics", &hour24.Hour24Optics})
    hour24.EntityData.Children.Append("hour24pcs", types.YChild{"Hour24pcs", &hour24.Hour24pcs})
    hour24.EntityData.Children.Append("hour24fec", types.YChild{"Hour24fec", &hour24.Hour24fec})
    hour24.EntityData.Children.Append("hour24secyif", types.YChild{"Hour24secyif", &hour24.Hour24secyif})
    hour24.EntityData.Children.Append("hour24secyrx", types.YChild{"Hour24secyrx", &hour24.Hour24secyrx})
    hour24.EntityData.Children.Append("hour24secytx", types.YChild{"Hour24secytx", &hour24.Hour24secytx})
    hour24.EntityData.Leafs = types.NewOrderedMap()

    hour24.EntityData.YListKeys = []string {}

    return &(hour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Hour24otnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds

    // set otn TCA reporting status.
    Hour24otnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports
}

func (hour24otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn) GetEntityData() *types.CommonEntityData {
    hour24otn.EntityData.YFilter = hour24otn.YFilter
    hour24otn.EntityData.YangName = "hour24otn"
    hour24otn.EntityData.BundleName = "cisco_ios_xr"
    hour24otn.EntityData.ParentYangName = "hour24"
    hour24otn.EntityData.SegmentPath = "hour24otn"
    hour24otn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24otn.EntityData.SegmentPath
    hour24otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otn.EntityData.Children = types.NewOrderedMap()
    hour24otn.EntityData.Children.Append("hour24otn-thresholds", types.YChild{"Hour24otnThresholds", &hour24otn.Hour24otnThresholds})
    hour24otn.EntityData.Children.Append("hour24otn-reports", types.YChild{"Hour24otnReports", &hour24otn.Hour24otnReports})
    hour24otn.EntityData.Leafs = types.NewOrderedMap()

    hour24otn.EntityData.YListKeys = []string {}

    return &(hour24otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds_Hour24otnThreshold.
    Hour24otnThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds_Hour24otnThreshold
}

func (hour24otnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds) GetEntityData() *types.CommonEntityData {
    hour24otnThresholds.EntityData.YFilter = hour24otnThresholds.YFilter
    hour24otnThresholds.EntityData.YangName = "hour24otn-thresholds"
    hour24otnThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24otnThresholds.EntityData.ParentYangName = "hour24otn"
    hour24otnThresholds.EntityData.SegmentPath = "hour24otn-thresholds"
    hour24otnThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24otn/" + hour24otnThresholds.EntityData.SegmentPath
    hour24otnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnThresholds.EntityData.Children = types.NewOrderedMap()
    hour24otnThresholds.EntityData.Children.Append("hour24otn-threshold", types.YChild{"Hour24otnThreshold", nil})
    for i := range hour24otnThresholds.Hour24otnThreshold {
        hour24otnThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24otnThresholds.Hour24otnThreshold[i]), types.YChild{"Hour24otnThreshold", hour24otnThresholds.Hour24otnThreshold[i]})
    }
    hour24otnThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24otnThresholds.EntityData.YListKeys = []string {}

    return &(hour24otnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds_Hour24otnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds_Hour24otnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24otnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnThresholds_Hour24otnThreshold) GetEntityData() *types.CommonEntityData {
    hour24otnThreshold.EntityData.YFilter = hour24otnThreshold.YFilter
    hour24otnThreshold.EntityData.YangName = "hour24otn-threshold"
    hour24otnThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24otnThreshold.EntityData.ParentYangName = "hour24otn-thresholds"
    hour24otnThreshold.EntityData.SegmentPath = "hour24otn-threshold" + types.AddKeyToken(hour24otnThreshold.OtnThreshold, "otn-threshold")
    hour24otnThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24otn/hour24otn-thresholds/" + hour24otnThreshold.EntityData.SegmentPath
    hour24otnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnThreshold.EntityData.Children = types.NewOrderedMap()
    hour24otnThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24otnThreshold.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", hour24otnThreshold.OtnThreshold})
    hour24otnThreshold.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", hour24otnThreshold.OtnThresholdValue})

    hour24otnThreshold.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(hour24otnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports_Hour24otnReport.
    Hour24otnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports_Hour24otnReport
}

func (hour24otnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports) GetEntityData() *types.CommonEntityData {
    hour24otnReports.EntityData.YFilter = hour24otnReports.YFilter
    hour24otnReports.EntityData.YangName = "hour24otn-reports"
    hour24otnReports.EntityData.BundleName = "cisco_ios_xr"
    hour24otnReports.EntityData.ParentYangName = "hour24otn"
    hour24otnReports.EntityData.SegmentPath = "hour24otn-reports"
    hour24otnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24otn/" + hour24otnReports.EntityData.SegmentPath
    hour24otnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnReports.EntityData.Children = types.NewOrderedMap()
    hour24otnReports.EntityData.Children.Append("hour24otn-report", types.YChild{"Hour24otnReport", nil})
    for i := range hour24otnReports.Hour24otnReport {
        hour24otnReports.EntityData.Children.Append(types.GetSegmentPath(hour24otnReports.Hour24otnReport[i]), types.YChild{"Hour24otnReport", hour24otnReports.Hour24otnReport[i]})
    }
    hour24otnReports.EntityData.Leafs = types.NewOrderedMap()

    hour24otnReports.EntityData.YListKeys = []string {}

    return &(hour24otnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports_Hour24otnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports_Hour24otnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24otnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24otn_Hour24otnReports_Hour24otnReport) GetEntityData() *types.CommonEntityData {
    hour24otnReport.EntityData.YFilter = hour24otnReport.YFilter
    hour24otnReport.EntityData.YangName = "hour24otn-report"
    hour24otnReport.EntityData.BundleName = "cisco_ios_xr"
    hour24otnReport.EntityData.ParentYangName = "hour24otn-reports"
    hour24otnReport.EntityData.SegmentPath = "hour24otn-report" + types.AddKeyToken(hour24otnReport.OtnReport, "otn-report")
    hour24otnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24otn/hour24otn-reports/" + hour24otnReport.EntityData.SegmentPath
    hour24otnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnReport.EntityData.Children = types.NewOrderedMap()
    hour24otnReport.EntityData.Leafs = types.NewOrderedMap()
    hour24otnReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", hour24otnReport.OtnReport})
    hour24otnReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24otnReport.Enable})

    hour24otnReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(hour24otnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Hour24OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds

    // set optics TCA reporting status.
    Hour24OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
}

func (hour24Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics) GetEntityData() *types.CommonEntityData {
    hour24Optics.EntityData.YFilter = hour24Optics.YFilter
    hour24Optics.EntityData.YangName = "hour24-optics"
    hour24Optics.EntityData.BundleName = "cisco_ios_xr"
    hour24Optics.EntityData.ParentYangName = "hour24"
    hour24Optics.EntityData.SegmentPath = "hour24-optics"
    hour24Optics.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24Optics.EntityData.SegmentPath
    hour24Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Optics.EntityData.Children = types.NewOrderedMap()
    hour24Optics.EntityData.Children.Append("hour24-optics-thresholds", types.YChild{"Hour24OpticsThresholds", &hour24Optics.Hour24OpticsThresholds})
    hour24Optics.EntityData.Children.Append("hour24-optics-reports", types.YChild{"Hour24OpticsReports", &hour24Optics.Hour24OpticsReports})
    hour24Optics.EntityData.Leafs = types.NewOrderedMap()

    hour24Optics.EntityData.YListKeys = []string {}

    return &(hour24Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold.
    Hour24OpticsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
}

func (hour24OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds) GetEntityData() *types.CommonEntityData {
    hour24OpticsThresholds.EntityData.YFilter = hour24OpticsThresholds.YFilter
    hour24OpticsThresholds.EntityData.YangName = "hour24-optics-thresholds"
    hour24OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsThresholds.EntityData.ParentYangName = "hour24-optics"
    hour24OpticsThresholds.EntityData.SegmentPath = "hour24-optics-thresholds"
    hour24OpticsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24-optics/" + hour24OpticsThresholds.EntityData.SegmentPath
    hour24OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsThresholds.EntityData.Children = types.NewOrderedMap()
    hour24OpticsThresholds.EntityData.Children.Append("hour24-optics-threshold", types.YChild{"Hour24OpticsThreshold", nil})
    for i := range hour24OpticsThresholds.Hour24OpticsThreshold {
        hour24OpticsThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24OpticsThresholds.Hour24OpticsThreshold[i]), types.YChild{"Hour24OpticsThreshold", hour24OpticsThresholds.Hour24OpticsThreshold[i]})
    }
    hour24OpticsThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24OpticsThresholds.EntityData.YListKeys = []string {}

    return &(hour24OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Thresh Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: 0..4294967295. The default value is 0.
    Dbm interface{}
}

func (hour24OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsThresholds_Hour24OpticsThreshold) GetEntityData() *types.CommonEntityData {
    hour24OpticsThreshold.EntityData.YFilter = hour24OpticsThreshold.YFilter
    hour24OpticsThreshold.EntityData.YangName = "hour24-optics-threshold"
    hour24OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsThreshold.EntityData.ParentYangName = "hour24-optics-thresholds"
    hour24OpticsThreshold.EntityData.SegmentPath = "hour24-optics-threshold" + types.AddKeyToken(hour24OpticsThreshold.OpticsThreshold, "optics-threshold")
    hour24OpticsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24-optics/hour24-optics-thresholds/" + hour24OpticsThreshold.EntityData.SegmentPath
    hour24OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsThreshold.EntityData.Children = types.NewOrderedMap()
    hour24OpticsThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24OpticsThreshold.EntityData.Leafs.Append("optics-threshold", types.YLeaf{"OpticsThreshold", hour24OpticsThreshold.OpticsThreshold})
    hour24OpticsThreshold.EntityData.Leafs.Append("optics-threshold-value", types.YLeaf{"OpticsThresholdValue", hour24OpticsThreshold.OpticsThresholdValue})
    hour24OpticsThreshold.EntityData.Leafs.Append("dbm", types.YLeaf{"Dbm", hour24OpticsThreshold.Dbm})

    hour24OpticsThreshold.EntityData.YListKeys = []string {"OpticsThreshold"}

    return &(hour24OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport.
    Hour24OpticsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
}

func (hour24OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports) GetEntityData() *types.CommonEntityData {
    hour24OpticsReports.EntityData.YFilter = hour24OpticsReports.YFilter
    hour24OpticsReports.EntityData.YangName = "hour24-optics-reports"
    hour24OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsReports.EntityData.ParentYangName = "hour24-optics"
    hour24OpticsReports.EntityData.SegmentPath = "hour24-optics-reports"
    hour24OpticsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24-optics/" + hour24OpticsReports.EntityData.SegmentPath
    hour24OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsReports.EntityData.Children = types.NewOrderedMap()
    hour24OpticsReports.EntityData.Children.Append("hour24-optics-report", types.YChild{"Hour24OpticsReport", nil})
    for i := range hour24OpticsReports.Hour24OpticsReport {
        hour24OpticsReports.EntityData.Children.Append(types.GetSegmentPath(hour24OpticsReports.Hour24OpticsReport[i]), types.YChild{"Hour24OpticsReport", hour24OpticsReports.Hour24OpticsReport[i]})
    }
    hour24OpticsReports.EntityData.Leafs = types.NewOrderedMap()

    hour24OpticsReports.EntityData.YListKeys = []string {}

    return &(hour24OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (hour24OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24Optics_Hour24OpticsReports_Hour24OpticsReport) GetEntityData() *types.CommonEntityData {
    hour24OpticsReport.EntityData.YFilter = hour24OpticsReport.YFilter
    hour24OpticsReport.EntityData.YangName = "hour24-optics-report"
    hour24OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    hour24OpticsReport.EntityData.ParentYangName = "hour24-optics-reports"
    hour24OpticsReport.EntityData.SegmentPath = "hour24-optics-report" + types.AddKeyToken(hour24OpticsReport.OpticsReport, "optics-report")
    hour24OpticsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24-optics/hour24-optics-reports/" + hour24OpticsReport.EntityData.SegmentPath
    hour24OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24OpticsReport.EntityData.Children = types.NewOrderedMap()
    hour24OpticsReport.EntityData.Leafs = types.NewOrderedMap()
    hour24OpticsReport.EntityData.Leafs.Append("optics-report", types.YLeaf{"OpticsReport", hour24OpticsReport.OpticsReport})

    hour24OpticsReport.EntityData.YListKeys = []string {"OpticsReport"}

    return &(hour24OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs
// Configure pcs performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure pcs threshold.
    Hour24pcsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds

    // set pcs TCA reporting status.
    Hour24pcsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports
}

func (hour24pcs *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs) GetEntityData() *types.CommonEntityData {
    hour24pcs.EntityData.YFilter = hour24pcs.YFilter
    hour24pcs.EntityData.YangName = "hour24pcs"
    hour24pcs.EntityData.BundleName = "cisco_ios_xr"
    hour24pcs.EntityData.ParentYangName = "hour24"
    hour24pcs.EntityData.SegmentPath = "hour24pcs"
    hour24pcs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24pcs.EntityData.SegmentPath
    hour24pcs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24pcs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24pcs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24pcs.EntityData.Children = types.NewOrderedMap()
    hour24pcs.EntityData.Children.Append("hour24pcs-thresholds", types.YChild{"Hour24pcsThresholds", &hour24pcs.Hour24pcsThresholds})
    hour24pcs.EntityData.Children.Append("hour24pcs-reports", types.YChild{"Hour24pcsReports", &hour24pcs.Hour24pcsReports})
    hour24pcs.EntityData.Leafs = types.NewOrderedMap()

    hour24pcs.EntityData.YListKeys = []string {}

    return &(hour24pcs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds
// Configure pcs threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds_Hour24pcsThreshold.
    Hour24pcsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds_Hour24pcsThreshold
}

func (hour24pcsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds) GetEntityData() *types.CommonEntityData {
    hour24pcsThresholds.EntityData.YFilter = hour24pcsThresholds.YFilter
    hour24pcsThresholds.EntityData.YangName = "hour24pcs-thresholds"
    hour24pcsThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24pcsThresholds.EntityData.ParentYangName = "hour24pcs"
    hour24pcsThresholds.EntityData.SegmentPath = "hour24pcs-thresholds"
    hour24pcsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24pcs/" + hour24pcsThresholds.EntityData.SegmentPath
    hour24pcsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24pcsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24pcsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24pcsThresholds.EntityData.Children = types.NewOrderedMap()
    hour24pcsThresholds.EntityData.Children.Append("hour24pcs-threshold", types.YChild{"Hour24pcsThreshold", nil})
    for i := range hour24pcsThresholds.Hour24pcsThreshold {
        hour24pcsThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24pcsThresholds.Hour24pcsThreshold[i]), types.YChild{"Hour24pcsThreshold", hour24pcsThresholds.Hour24pcsThreshold[i]})
    }
    hour24pcsThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24pcsThresholds.EntityData.YListKeys = []string {}

    return &(hour24pcsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds_Hour24pcsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds_Hour24pcsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Threshold Type. The type is PcsThreshold.
    PcsThreshold interface{}

    // Pcs Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    PcsThresholdValue interface{}
}

func (hour24pcsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsThresholds_Hour24pcsThreshold) GetEntityData() *types.CommonEntityData {
    hour24pcsThreshold.EntityData.YFilter = hour24pcsThreshold.YFilter
    hour24pcsThreshold.EntityData.YangName = "hour24pcs-threshold"
    hour24pcsThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24pcsThreshold.EntityData.ParentYangName = "hour24pcs-thresholds"
    hour24pcsThreshold.EntityData.SegmentPath = "hour24pcs-threshold" + types.AddKeyToken(hour24pcsThreshold.PcsThreshold, "pcs-threshold")
    hour24pcsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24pcs/hour24pcs-thresholds/" + hour24pcsThreshold.EntityData.SegmentPath
    hour24pcsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24pcsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24pcsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24pcsThreshold.EntityData.Children = types.NewOrderedMap()
    hour24pcsThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24pcsThreshold.EntityData.Leafs.Append("pcs-threshold", types.YLeaf{"PcsThreshold", hour24pcsThreshold.PcsThreshold})
    hour24pcsThreshold.EntityData.Leafs.Append("pcs-threshold-value", types.YLeaf{"PcsThresholdValue", hour24pcsThreshold.PcsThresholdValue})

    hour24pcsThreshold.EntityData.YListKeys = []string {"PcsThreshold"}

    return &(hour24pcsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports
// set pcs TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports_Hour24pcsReport.
    Hour24pcsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports_Hour24pcsReport
}

func (hour24pcsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports) GetEntityData() *types.CommonEntityData {
    hour24pcsReports.EntityData.YFilter = hour24pcsReports.YFilter
    hour24pcsReports.EntityData.YangName = "hour24pcs-reports"
    hour24pcsReports.EntityData.BundleName = "cisco_ios_xr"
    hour24pcsReports.EntityData.ParentYangName = "hour24pcs"
    hour24pcsReports.EntityData.SegmentPath = "hour24pcs-reports"
    hour24pcsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24pcs/" + hour24pcsReports.EntityData.SegmentPath
    hour24pcsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24pcsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24pcsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24pcsReports.EntityData.Children = types.NewOrderedMap()
    hour24pcsReports.EntityData.Children.Append("hour24pcs-report", types.YChild{"Hour24pcsReport", nil})
    for i := range hour24pcsReports.Hour24pcsReport {
        hour24pcsReports.EntityData.Children.Append(types.GetSegmentPath(hour24pcsReports.Hour24pcsReport[i]), types.YChild{"Hour24pcsReport", hour24pcsReports.Hour24pcsReport[i]})
    }
    hour24pcsReports.EntityData.Leafs = types.NewOrderedMap()

    hour24pcsReports.EntityData.YListKeys = []string {}

    return &(hour24pcsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports_Hour24pcsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports_Hour24pcsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Report Type. The type is PcsReport.
    PcsReport interface{}

    // PCS Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24pcsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24pcs_Hour24pcsReports_Hour24pcsReport) GetEntityData() *types.CommonEntityData {
    hour24pcsReport.EntityData.YFilter = hour24pcsReport.YFilter
    hour24pcsReport.EntityData.YangName = "hour24pcs-report"
    hour24pcsReport.EntityData.BundleName = "cisco_ios_xr"
    hour24pcsReport.EntityData.ParentYangName = "hour24pcs-reports"
    hour24pcsReport.EntityData.SegmentPath = "hour24pcs-report" + types.AddKeyToken(hour24pcsReport.PcsReport, "pcs-report")
    hour24pcsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24pcs/hour24pcs-reports/" + hour24pcsReport.EntityData.SegmentPath
    hour24pcsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24pcsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24pcsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24pcsReport.EntityData.Children = types.NewOrderedMap()
    hour24pcsReport.EntityData.Leafs = types.NewOrderedMap()
    hour24pcsReport.EntityData.Leafs.Append("pcs-report", types.YLeaf{"PcsReport", hour24pcsReport.PcsReport})
    hour24pcsReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24pcsReport.Enable})

    hour24pcsReport.EntityData.YListKeys = []string {"PcsReport"}

    return &(hour24pcsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Hour24fecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds

    // set fec TCA reporting status.
    Hour24fecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports
}

func (hour24fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec) GetEntityData() *types.CommonEntityData {
    hour24fec.EntityData.YFilter = hour24fec.YFilter
    hour24fec.EntityData.YangName = "hour24fec"
    hour24fec.EntityData.BundleName = "cisco_ios_xr"
    hour24fec.EntityData.ParentYangName = "hour24"
    hour24fec.EntityData.SegmentPath = "hour24fec"
    hour24fec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24fec.EntityData.SegmentPath
    hour24fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24fec.EntityData.Children = types.NewOrderedMap()
    hour24fec.EntityData.Children.Append("hour24fec-thresholds", types.YChild{"Hour24fecThresholds", &hour24fec.Hour24fecThresholds})
    hour24fec.EntityData.Children.Append("hour24fec-reports", types.YChild{"Hour24fecReports", &hour24fec.Hour24fecReports})
    hour24fec.EntityData.Leafs = types.NewOrderedMap()

    hour24fec.EntityData.YListKeys = []string {}

    return &(hour24fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds_Hour24fecThreshold.
    Hour24fecThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds_Hour24fecThreshold
}

func (hour24fecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds) GetEntityData() *types.CommonEntityData {
    hour24fecThresholds.EntityData.YFilter = hour24fecThresholds.YFilter
    hour24fecThresholds.EntityData.YangName = "hour24fec-thresholds"
    hour24fecThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24fecThresholds.EntityData.ParentYangName = "hour24fec"
    hour24fecThresholds.EntityData.SegmentPath = "hour24fec-thresholds"
    hour24fecThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24fec/" + hour24fecThresholds.EntityData.SegmentPath
    hour24fecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24fecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24fecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24fecThresholds.EntityData.Children = types.NewOrderedMap()
    hour24fecThresholds.EntityData.Children.Append("hour24fec-threshold", types.YChild{"Hour24fecThreshold", nil})
    for i := range hour24fecThresholds.Hour24fecThreshold {
        hour24fecThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24fecThresholds.Hour24fecThreshold[i]), types.YChild{"Hour24fecThreshold", hour24fecThresholds.Hour24fecThreshold[i]})
    }
    hour24fecThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24fecThresholds.EntityData.YListKeys = []string {}

    return &(hour24fecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds_Hour24fecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds_Hour24fecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec threshold value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (hour24fecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecThresholds_Hour24fecThreshold) GetEntityData() *types.CommonEntityData {
    hour24fecThreshold.EntityData.YFilter = hour24fecThreshold.YFilter
    hour24fecThreshold.EntityData.YangName = "hour24fec-threshold"
    hour24fecThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24fecThreshold.EntityData.ParentYangName = "hour24fec-thresholds"
    hour24fecThreshold.EntityData.SegmentPath = "hour24fec-threshold" + types.AddKeyToken(hour24fecThreshold.FecThreshold, "fec-threshold")
    hour24fecThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24fec/hour24fec-thresholds/" + hour24fecThreshold.EntityData.SegmentPath
    hour24fecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24fecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24fecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24fecThreshold.EntityData.Children = types.NewOrderedMap()
    hour24fecThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24fecThreshold.EntityData.Leafs.Append("fec-threshold", types.YLeaf{"FecThreshold", hour24fecThreshold.FecThreshold})
    hour24fecThreshold.EntityData.Leafs.Append("fec-threshold-value", types.YLeaf{"FecThresholdValue", hour24fecThreshold.FecThresholdValue})

    hour24fecThreshold.EntityData.YListKeys = []string {"FecThreshold"}

    return &(hour24fecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports_Hour24fecReport.
    Hour24fecReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports_Hour24fecReport
}

func (hour24fecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports) GetEntityData() *types.CommonEntityData {
    hour24fecReports.EntityData.YFilter = hour24fecReports.YFilter
    hour24fecReports.EntityData.YangName = "hour24fec-reports"
    hour24fecReports.EntityData.BundleName = "cisco_ios_xr"
    hour24fecReports.EntityData.ParentYangName = "hour24fec"
    hour24fecReports.EntityData.SegmentPath = "hour24fec-reports"
    hour24fecReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24fec/" + hour24fecReports.EntityData.SegmentPath
    hour24fecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24fecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24fecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24fecReports.EntityData.Children = types.NewOrderedMap()
    hour24fecReports.EntityData.Children.Append("hour24fec-report", types.YChild{"Hour24fecReport", nil})
    for i := range hour24fecReports.Hour24fecReport {
        hour24fecReports.EntityData.Children.Append(types.GetSegmentPath(hour24fecReports.Hour24fecReport[i]), types.YChild{"Hour24fecReport", hour24fecReports.Hour24fecReport[i]})
    }
    hour24fecReports.EntityData.Leafs = types.NewOrderedMap()

    hour24fecReports.EntityData.YListKeys = []string {}

    return &(hour24fecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports_Hour24fecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports_Hour24fecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Report type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24fecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24fec_Hour24fecReports_Hour24fecReport) GetEntityData() *types.CommonEntityData {
    hour24fecReport.EntityData.YFilter = hour24fecReport.YFilter
    hour24fecReport.EntityData.YangName = "hour24fec-report"
    hour24fecReport.EntityData.BundleName = "cisco_ios_xr"
    hour24fecReport.EntityData.ParentYangName = "hour24fec-reports"
    hour24fecReport.EntityData.SegmentPath = "hour24fec-report" + types.AddKeyToken(hour24fecReport.FecReport, "fec-report")
    hour24fecReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24fec/hour24fec-reports/" + hour24fecReport.EntityData.SegmentPath
    hour24fecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24fecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24fecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24fecReport.EntityData.Children = types.NewOrderedMap()
    hour24fecReport.EntityData.Leafs = types.NewOrderedMap()
    hour24fecReport.EntityData.Leafs.Append("fec-report", types.YLeaf{"FecReport", hour24fecReport.FecReport})
    hour24fecReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24fecReport.Enable})

    hour24fecReport.EntityData.YListKeys = []string {"FecReport"}

    return &(hour24fecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Hour24secyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports

    // Configure secyif threshold.
    Hour24secyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds
}

func (hour24secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif) GetEntityData() *types.CommonEntityData {
    hour24secyif.EntityData.YFilter = hour24secyif.YFilter
    hour24secyif.EntityData.YangName = "hour24secyif"
    hour24secyif.EntityData.BundleName = "cisco_ios_xr"
    hour24secyif.EntityData.ParentYangName = "hour24"
    hour24secyif.EntityData.SegmentPath = "hour24secyif"
    hour24secyif.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24secyif.EntityData.SegmentPath
    hour24secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyif.EntityData.Children = types.NewOrderedMap()
    hour24secyif.EntityData.Children.Append("hour24secyif-reports", types.YChild{"Hour24secyifReports", &hour24secyif.Hour24secyifReports})
    hour24secyif.EntityData.Children.Append("hour24secyif-thresholds", types.YChild{"Hour24secyifThresholds", &hour24secyif.Hour24secyifThresholds})
    hour24secyif.EntityData.Leafs = types.NewOrderedMap()

    hour24secyif.EntityData.YListKeys = []string {}

    return &(hour24secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports_Hour24secyifReport.
    Hour24secyifReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports_Hour24secyifReport
}

func (hour24secyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports) GetEntityData() *types.CommonEntityData {
    hour24secyifReports.EntityData.YFilter = hour24secyifReports.YFilter
    hour24secyifReports.EntityData.YangName = "hour24secyif-reports"
    hour24secyifReports.EntityData.BundleName = "cisco_ios_xr"
    hour24secyifReports.EntityData.ParentYangName = "hour24secyif"
    hour24secyifReports.EntityData.SegmentPath = "hour24secyif-reports"
    hour24secyifReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyif/" + hour24secyifReports.EntityData.SegmentPath
    hour24secyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyifReports.EntityData.Children = types.NewOrderedMap()
    hour24secyifReports.EntityData.Children.Append("hour24secyif-report", types.YChild{"Hour24secyifReport", nil})
    for i := range hour24secyifReports.Hour24secyifReport {
        hour24secyifReports.EntityData.Children.Append(types.GetSegmentPath(hour24secyifReports.Hour24secyifReport[i]), types.YChild{"Hour24secyifReport", hour24secyifReports.Hour24secyifReport[i]})
    }
    hour24secyifReports.EntityData.Leafs = types.NewOrderedMap()

    hour24secyifReports.EntityData.YListKeys = []string {}

    return &(hour24secyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports_Hour24secyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports_Hour24secyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Report type. The type is SecyifReport.
    SecyifReport interface{}

    // Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24secyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifReports_Hour24secyifReport) GetEntityData() *types.CommonEntityData {
    hour24secyifReport.EntityData.YFilter = hour24secyifReport.YFilter
    hour24secyifReport.EntityData.YangName = "hour24secyif-report"
    hour24secyifReport.EntityData.BundleName = "cisco_ios_xr"
    hour24secyifReport.EntityData.ParentYangName = "hour24secyif-reports"
    hour24secyifReport.EntityData.SegmentPath = "hour24secyif-report" + types.AddKeyToken(hour24secyifReport.SecyifReport, "secyif-report")
    hour24secyifReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyif/hour24secyif-reports/" + hour24secyifReport.EntityData.SegmentPath
    hour24secyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyifReport.EntityData.Children = types.NewOrderedMap()
    hour24secyifReport.EntityData.Leafs = types.NewOrderedMap()
    hour24secyifReport.EntityData.Leafs.Append("secyif-report", types.YLeaf{"SecyifReport", hour24secyifReport.SecyifReport})
    hour24secyifReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24secyifReport.Enable})

    hour24secyifReport.EntityData.YListKeys = []string {"SecyifReport"}

    return &(hour24secyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds
// Configure secyif threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds_Hour24secyifThreshold.
    Hour24secyifThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds_Hour24secyifThreshold
}

func (hour24secyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds) GetEntityData() *types.CommonEntityData {
    hour24secyifThresholds.EntityData.YFilter = hour24secyifThresholds.YFilter
    hour24secyifThresholds.EntityData.YangName = "hour24secyif-thresholds"
    hour24secyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24secyifThresholds.EntityData.ParentYangName = "hour24secyif"
    hour24secyifThresholds.EntityData.SegmentPath = "hour24secyif-thresholds"
    hour24secyifThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyif/" + hour24secyifThresholds.EntityData.SegmentPath
    hour24secyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyifThresholds.EntityData.Children = types.NewOrderedMap()
    hour24secyifThresholds.EntityData.Children.Append("hour24secyif-threshold", types.YChild{"Hour24secyifThreshold", nil})
    for i := range hour24secyifThresholds.Hour24secyifThreshold {
        hour24secyifThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24secyifThresholds.Hour24secyifThreshold[i]), types.YChild{"Hour24secyifThreshold", hour24secyifThresholds.Hour24secyifThreshold[i]})
    }
    hour24secyifThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24secyifThresholds.EntityData.YListKeys = []string {}

    return &(hour24secyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds_Hour24secyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds_Hour24secyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif threshold value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (hour24secyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyif_Hour24secyifThresholds_Hour24secyifThreshold) GetEntityData() *types.CommonEntityData {
    hour24secyifThreshold.EntityData.YFilter = hour24secyifThreshold.YFilter
    hour24secyifThreshold.EntityData.YangName = "hour24secyif-threshold"
    hour24secyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24secyifThreshold.EntityData.ParentYangName = "hour24secyif-thresholds"
    hour24secyifThreshold.EntityData.SegmentPath = "hour24secyif-threshold" + types.AddKeyToken(hour24secyifThreshold.SecyifThreshold, "secyif-threshold")
    hour24secyifThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyif/hour24secyif-thresholds/" + hour24secyifThreshold.EntityData.SegmentPath
    hour24secyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyifThreshold.EntityData.Children = types.NewOrderedMap()
    hour24secyifThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24secyifThreshold.EntityData.Leafs.Append("secyif-threshold", types.YLeaf{"SecyifThreshold", hour24secyifThreshold.SecyifThreshold})
    hour24secyifThreshold.EntityData.Leafs.Append("secyif-threshold-value", types.YLeaf{"SecyifThresholdValue", hour24secyifThreshold.SecyifThresholdValue})

    hour24secyifThreshold.EntityData.YListKeys = []string {"SecyifThreshold"}

    return &(hour24secyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Hour24secyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports

    // Configure secyrx threshold.
    Hour24secyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds
}

func (hour24secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx) GetEntityData() *types.CommonEntityData {
    hour24secyrx.EntityData.YFilter = hour24secyrx.YFilter
    hour24secyrx.EntityData.YangName = "hour24secyrx"
    hour24secyrx.EntityData.BundleName = "cisco_ios_xr"
    hour24secyrx.EntityData.ParentYangName = "hour24"
    hour24secyrx.EntityData.SegmentPath = "hour24secyrx"
    hour24secyrx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24secyrx.EntityData.SegmentPath
    hour24secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyrx.EntityData.Children = types.NewOrderedMap()
    hour24secyrx.EntityData.Children.Append("hour24secyrx-reports", types.YChild{"Hour24secyrxReports", &hour24secyrx.Hour24secyrxReports})
    hour24secyrx.EntityData.Children.Append("hour24secyrx-thresholds", types.YChild{"Hour24secyrxThresholds", &hour24secyrx.Hour24secyrxThresholds})
    hour24secyrx.EntityData.Leafs = types.NewOrderedMap()

    hour24secyrx.EntityData.YListKeys = []string {}

    return &(hour24secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports_Hour24secyrxReport.
    Hour24secyrxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports_Hour24secyrxReport
}

func (hour24secyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports) GetEntityData() *types.CommonEntityData {
    hour24secyrxReports.EntityData.YFilter = hour24secyrxReports.YFilter
    hour24secyrxReports.EntityData.YangName = "hour24secyrx-reports"
    hour24secyrxReports.EntityData.BundleName = "cisco_ios_xr"
    hour24secyrxReports.EntityData.ParentYangName = "hour24secyrx"
    hour24secyrxReports.EntityData.SegmentPath = "hour24secyrx-reports"
    hour24secyrxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyrx/" + hour24secyrxReports.EntityData.SegmentPath
    hour24secyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyrxReports.EntityData.Children = types.NewOrderedMap()
    hour24secyrxReports.EntityData.Children.Append("hour24secyrx-report", types.YChild{"Hour24secyrxReport", nil})
    for i := range hour24secyrxReports.Hour24secyrxReport {
        hour24secyrxReports.EntityData.Children.Append(types.GetSegmentPath(hour24secyrxReports.Hour24secyrxReport[i]), types.YChild{"Hour24secyrxReport", hour24secyrxReports.Hour24secyrxReport[i]})
    }
    hour24secyrxReports.EntityData.Leafs = types.NewOrderedMap()

    hour24secyrxReports.EntityData.YListKeys = []string {}

    return &(hour24secyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports_Hour24secyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports_Hour24secyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Report type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24secyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxReports_Hour24secyrxReport) GetEntityData() *types.CommonEntityData {
    hour24secyrxReport.EntityData.YFilter = hour24secyrxReport.YFilter
    hour24secyrxReport.EntityData.YangName = "hour24secyrx-report"
    hour24secyrxReport.EntityData.BundleName = "cisco_ios_xr"
    hour24secyrxReport.EntityData.ParentYangName = "hour24secyrx-reports"
    hour24secyrxReport.EntityData.SegmentPath = "hour24secyrx-report" + types.AddKeyToken(hour24secyrxReport.SecyrxReport, "secyrx-report")
    hour24secyrxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyrx/hour24secyrx-reports/" + hour24secyrxReport.EntityData.SegmentPath
    hour24secyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyrxReport.EntityData.Children = types.NewOrderedMap()
    hour24secyrxReport.EntityData.Leafs = types.NewOrderedMap()
    hour24secyrxReport.EntityData.Leafs.Append("secyrx-report", types.YLeaf{"SecyrxReport", hour24secyrxReport.SecyrxReport})
    hour24secyrxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24secyrxReport.Enable})

    hour24secyrxReport.EntityData.YListKeys = []string {"SecyrxReport"}

    return &(hour24secyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds
// Configure secyrx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds_Hour24secyrxThreshold.
    Hour24secyrxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds_Hour24secyrxThreshold
}

func (hour24secyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds) GetEntityData() *types.CommonEntityData {
    hour24secyrxThresholds.EntityData.YFilter = hour24secyrxThresholds.YFilter
    hour24secyrxThresholds.EntityData.YangName = "hour24secyrx-thresholds"
    hour24secyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24secyrxThresholds.EntityData.ParentYangName = "hour24secyrx"
    hour24secyrxThresholds.EntityData.SegmentPath = "hour24secyrx-thresholds"
    hour24secyrxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyrx/" + hour24secyrxThresholds.EntityData.SegmentPath
    hour24secyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyrxThresholds.EntityData.Children = types.NewOrderedMap()
    hour24secyrxThresholds.EntityData.Children.Append("hour24secyrx-threshold", types.YChild{"Hour24secyrxThreshold", nil})
    for i := range hour24secyrxThresholds.Hour24secyrxThreshold {
        hour24secyrxThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24secyrxThresholds.Hour24secyrxThreshold[i]), types.YChild{"Hour24secyrxThreshold", hour24secyrxThresholds.Hour24secyrxThreshold[i]})
    }
    hour24secyrxThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24secyrxThresholds.EntityData.YListKeys = []string {}

    return &(hour24secyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds_Hour24secyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds_Hour24secyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx threshold value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (hour24secyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secyrx_Hour24secyrxThresholds_Hour24secyrxThreshold) GetEntityData() *types.CommonEntityData {
    hour24secyrxThreshold.EntityData.YFilter = hour24secyrxThreshold.YFilter
    hour24secyrxThreshold.EntityData.YangName = "hour24secyrx-threshold"
    hour24secyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24secyrxThreshold.EntityData.ParentYangName = "hour24secyrx-thresholds"
    hour24secyrxThreshold.EntityData.SegmentPath = "hour24secyrx-threshold" + types.AddKeyToken(hour24secyrxThreshold.SecyrxThreshold, "secyrx-threshold")
    hour24secyrxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secyrx/hour24secyrx-thresholds/" + hour24secyrxThreshold.EntityData.SegmentPath
    hour24secyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secyrxThreshold.EntityData.Children = types.NewOrderedMap()
    hour24secyrxThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold", types.YLeaf{"SecyrxThreshold", hour24secyrxThreshold.SecyrxThreshold})
    hour24secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold-value", types.YLeaf{"SecyrxThresholdValue", hour24secyrxThreshold.SecyrxThresholdValue})

    hour24secyrxThreshold.EntityData.YListKeys = []string {"SecyrxThreshold"}

    return &(hour24secyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure secytx threshold.
    Hour24secytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds

    // set secytx TCA reporting status.
    Hour24secytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports
}

func (hour24secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx) GetEntityData() *types.CommonEntityData {
    hour24secytx.EntityData.YFilter = hour24secytx.YFilter
    hour24secytx.EntityData.YangName = "hour24secytx"
    hour24secytx.EntityData.BundleName = "cisco_ios_xr"
    hour24secytx.EntityData.ParentYangName = "hour24"
    hour24secytx.EntityData.SegmentPath = "hour24secytx"
    hour24secytx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/" + hour24secytx.EntityData.SegmentPath
    hour24secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secytx.EntityData.Children = types.NewOrderedMap()
    hour24secytx.EntityData.Children.Append("hour24secytx-thresholds", types.YChild{"Hour24secytxThresholds", &hour24secytx.Hour24secytxThresholds})
    hour24secytx.EntityData.Children.Append("hour24secytx-reports", types.YChild{"Hour24secytxReports", &hour24secytx.Hour24secytxReports})
    hour24secytx.EntityData.Leafs = types.NewOrderedMap()

    hour24secytx.EntityData.YListKeys = []string {}

    return &(hour24secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds
// Configure secytx threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds_Hour24secytxThreshold.
    Hour24secytxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds_Hour24secytxThreshold
}

func (hour24secytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds) GetEntityData() *types.CommonEntityData {
    hour24secytxThresholds.EntityData.YFilter = hour24secytxThresholds.YFilter
    hour24secytxThresholds.EntityData.YangName = "hour24secytx-thresholds"
    hour24secytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24secytxThresholds.EntityData.ParentYangName = "hour24secytx"
    hour24secytxThresholds.EntityData.SegmentPath = "hour24secytx-thresholds"
    hour24secytxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secytx/" + hour24secytxThresholds.EntityData.SegmentPath
    hour24secytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secytxThresholds.EntityData.Children = types.NewOrderedMap()
    hour24secytxThresholds.EntityData.Children.Append("hour24secytx-threshold", types.YChild{"Hour24secytxThreshold", nil})
    for i := range hour24secytxThresholds.Hour24secytxThreshold {
        hour24secytxThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24secytxThresholds.Hour24secytxThreshold[i]), types.YChild{"Hour24secytxThreshold", hour24secytxThresholds.Hour24secytxThreshold[i]})
    }
    hour24secytxThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24secytxThresholds.EntityData.YListKeys = []string {}

    return &(hour24secytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds_Hour24secytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds_Hour24secytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx threshold value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (hour24secytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxThresholds_Hour24secytxThreshold) GetEntityData() *types.CommonEntityData {
    hour24secytxThreshold.EntityData.YFilter = hour24secytxThreshold.YFilter
    hour24secytxThreshold.EntityData.YangName = "hour24secytx-threshold"
    hour24secytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24secytxThreshold.EntityData.ParentYangName = "hour24secytx-thresholds"
    hour24secytxThreshold.EntityData.SegmentPath = "hour24secytx-threshold" + types.AddKeyToken(hour24secytxThreshold.SecytxThreshold, "secytx-threshold")
    hour24secytxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secytx/hour24secytx-thresholds/" + hour24secytxThreshold.EntityData.SegmentPath
    hour24secytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secytxThreshold.EntityData.Children = types.NewOrderedMap()
    hour24secytxThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24secytxThreshold.EntityData.Leafs.Append("secytx-threshold", types.YLeaf{"SecytxThreshold", hour24secytxThreshold.SecytxThreshold})
    hour24secytxThreshold.EntityData.Leafs.Append("secytx-threshold-value", types.YLeaf{"SecytxThresholdValue", hour24secytxThreshold.SecytxThresholdValue})

    hour24secytxThreshold.EntityData.YListKeys = []string {"SecytxThreshold"}

    return &(hour24secytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports_Hour24secytxReport.
    Hour24secytxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports_Hour24secytxReport
}

func (hour24secytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports) GetEntityData() *types.CommonEntityData {
    hour24secytxReports.EntityData.YFilter = hour24secytxReports.YFilter
    hour24secytxReports.EntityData.YangName = "hour24secytx-reports"
    hour24secytxReports.EntityData.BundleName = "cisco_ios_xr"
    hour24secytxReports.EntityData.ParentYangName = "hour24secytx"
    hour24secytxReports.EntityData.SegmentPath = "hour24secytx-reports"
    hour24secytxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secytx/" + hour24secytxReports.EntityData.SegmentPath
    hour24secytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secytxReports.EntityData.Children = types.NewOrderedMap()
    hour24secytxReports.EntityData.Children.Append("hour24secytx-report", types.YChild{"Hour24secytxReport", nil})
    for i := range hour24secytxReports.Hour24secytxReport {
        hour24secytxReports.EntityData.Children.Append(types.GetSegmentPath(hour24secytxReports.Hour24secytxReport[i]), types.YChild{"Hour24secytxReport", hour24secytxReports.Hour24secytxReport[i]})
    }
    hour24secytxReports.EntityData.Leafs = types.NewOrderedMap()

    hour24secytxReports.EntityData.YListKeys = []string {}

    return &(hour24secytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports_Hour24secytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports_Hour24secytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Report type. The type is SecytxReport.
    SecytxReport interface{}

    // Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24secytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24_Hour24secytx_Hour24secytxReports_Hour24secytxReport) GetEntityData() *types.CommonEntityData {
    hour24secytxReport.EntityData.YFilter = hour24secytxReport.YFilter
    hour24secytxReport.EntityData.YangName = "hour24secytx-report"
    hour24secytxReport.EntityData.BundleName = "cisco_ios_xr"
    hour24secytxReport.EntityData.ParentYangName = "hour24secytx-reports"
    hour24secytxReport.EntityData.SegmentPath = "hour24secytx-report" + types.AddKeyToken(hour24secytxReport.SecytxReport, "secytx-report")
    hour24secytxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24/hour24secytx/hour24secytx-reports/" + hour24secytxReport.EntityData.SegmentPath
    hour24secytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24secytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24secytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24secytxReport.EntityData.Children = types.NewOrderedMap()
    hour24secytxReport.EntityData.Leafs = types.NewOrderedMap()
    hour24secytxReport.EntityData.Leafs.Append("secytx-report", types.YLeaf{"SecytxReport", hour24secytxReport.SecytxReport})
    hour24secytxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24secytxReport.Enable})

    hour24secytxReport.EntityData.YListKeys = []string {"SecytxReport"}

    return &(hour24secytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15
// set HO_VC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ho_vc performance monitoring.
    HoVcMinute15hoVc InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc
}

func (hoVcMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15) GetEntityData() *types.CommonEntityData {
    hoVcMinute15.EntityData.YFilter = hoVcMinute15.YFilter
    hoVcMinute15.EntityData.YangName = "ho-vc-minute15"
    hoVcMinute15.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15.EntityData.ParentYangName = "performance-management"
    hoVcMinute15.EntityData.SegmentPath = "ho-vc-minute15"
    hoVcMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hoVcMinute15.EntityData.SegmentPath
    hoVcMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15.EntityData.Children.Append("ho-vc-minute15ho-vc", types.YChild{"HoVcMinute15hoVc", &hoVcMinute15.HoVcMinute15hoVc})
    hoVcMinute15.EntityData.Leafs = types.NewOrderedMap()

    hoVcMinute15.EntityData.YListKeys = []string {}

    return &(hoVcMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc
// Configure ho_vc performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ho_vc TCA reporting status.
    HoVcMinute15hoVcReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports

    // Configure threshold on ho_vc parameters.
    HoVcMinute15hoVcThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds
}

func (hoVcMinute15hoVc *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc) GetEntityData() *types.CommonEntityData {
    hoVcMinute15hoVc.EntityData.YFilter = hoVcMinute15hoVc.YFilter
    hoVcMinute15hoVc.EntityData.YangName = "ho-vc-minute15ho-vc"
    hoVcMinute15hoVc.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15hoVc.EntityData.ParentYangName = "ho-vc-minute15"
    hoVcMinute15hoVc.EntityData.SegmentPath = "ho-vc-minute15ho-vc"
    hoVcMinute15hoVc.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-minute15/" + hoVcMinute15hoVc.EntityData.SegmentPath
    hoVcMinute15hoVc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15hoVc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15hoVc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15hoVc.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15hoVc.EntityData.Children.Append("ho-vc-minute15ho-vc-reports", types.YChild{"HoVcMinute15hoVcReports", &hoVcMinute15hoVc.HoVcMinute15hoVcReports})
    hoVcMinute15hoVc.EntityData.Children.Append("ho-vc-minute15ho-vc-thresholds", types.YChild{"HoVcMinute15hoVcThresholds", &hoVcMinute15hoVc.HoVcMinute15hoVcThresholds})
    hoVcMinute15hoVc.EntityData.Leafs = types.NewOrderedMap()

    hoVcMinute15hoVc.EntityData.YListKeys = []string {}

    return &(hoVcMinute15hoVc.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports
// set ho_vc TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports_HoVcMinute15hoVcReport.
    HoVcMinute15hoVcReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports_HoVcMinute15hoVcReport
}

func (hoVcMinute15hoVcReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports) GetEntityData() *types.CommonEntityData {
    hoVcMinute15hoVcReports.EntityData.YFilter = hoVcMinute15hoVcReports.YFilter
    hoVcMinute15hoVcReports.EntityData.YangName = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15hoVcReports.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15hoVcReports.EntityData.ParentYangName = "ho-vc-minute15ho-vc"
    hoVcMinute15hoVcReports.EntityData.SegmentPath = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15hoVcReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-minute15/ho-vc-minute15ho-vc/" + hoVcMinute15hoVcReports.EntityData.SegmentPath
    hoVcMinute15hoVcReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15hoVcReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15hoVcReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15hoVcReports.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15hoVcReports.EntityData.Children.Append("ho-vc-minute15ho-vc-report", types.YChild{"HoVcMinute15hoVcReport", nil})
    for i := range hoVcMinute15hoVcReports.HoVcMinute15hoVcReport {
        hoVcMinute15hoVcReports.EntityData.Children.Append(types.GetSegmentPath(hoVcMinute15hoVcReports.HoVcMinute15hoVcReport[i]), types.YChild{"HoVcMinute15hoVcReport", hoVcMinute15hoVcReports.HoVcMinute15hoVcReport[i]})
    }
    hoVcMinute15hoVcReports.EntityData.Leafs = types.NewOrderedMap()

    hoVcMinute15hoVcReports.EntityData.YListKeys = []string {}

    return &(hoVcMinute15hoVcReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports_HoVcMinute15hoVcReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports_HoVcMinute15hoVcReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ho_vc Report Type. The type is HoVcReport.
    HoVcReport interface{}

    // ho_vc Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hoVcMinute15hoVcReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcReports_HoVcMinute15hoVcReport) GetEntityData() *types.CommonEntityData {
    hoVcMinute15hoVcReport.EntityData.YFilter = hoVcMinute15hoVcReport.YFilter
    hoVcMinute15hoVcReport.EntityData.YangName = "ho-vc-minute15ho-vc-report"
    hoVcMinute15hoVcReport.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15hoVcReport.EntityData.ParentYangName = "ho-vc-minute15ho-vc-reports"
    hoVcMinute15hoVcReport.EntityData.SegmentPath = "ho-vc-minute15ho-vc-report" + types.AddKeyToken(hoVcMinute15hoVcReport.HoVcReport, "ho-vc-report")
    hoVcMinute15hoVcReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-minute15/ho-vc-minute15ho-vc/ho-vc-minute15ho-vc-reports/" + hoVcMinute15hoVcReport.EntityData.SegmentPath
    hoVcMinute15hoVcReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15hoVcReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15hoVcReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15hoVcReport.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15hoVcReport.EntityData.Leafs = types.NewOrderedMap()
    hoVcMinute15hoVcReport.EntityData.Leafs.Append("ho-vc-report", types.YLeaf{"HoVcReport", hoVcMinute15hoVcReport.HoVcReport})
    hoVcMinute15hoVcReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hoVcMinute15hoVcReport.Enable})

    hoVcMinute15hoVcReport.EntityData.YListKeys = []string {"HoVcReport"}

    return &(hoVcMinute15hoVcReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds
// Configure threshold on ho_vc parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds_HoVcMinute15hoVcThreshold.
    HoVcMinute15hoVcThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds_HoVcMinute15hoVcThreshold
}

func (hoVcMinute15hoVcThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds) GetEntityData() *types.CommonEntityData {
    hoVcMinute15hoVcThresholds.EntityData.YFilter = hoVcMinute15hoVcThresholds.YFilter
    hoVcMinute15hoVcThresholds.EntityData.YangName = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15hoVcThresholds.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15hoVcThresholds.EntityData.ParentYangName = "ho-vc-minute15ho-vc"
    hoVcMinute15hoVcThresholds.EntityData.SegmentPath = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15hoVcThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-minute15/ho-vc-minute15ho-vc/" + hoVcMinute15hoVcThresholds.EntityData.SegmentPath
    hoVcMinute15hoVcThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15hoVcThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15hoVcThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15hoVcThresholds.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15hoVcThresholds.EntityData.Children.Append("ho-vc-minute15ho-vc-threshold", types.YChild{"HoVcMinute15hoVcThreshold", nil})
    for i := range hoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold {
        hoVcMinute15hoVcThresholds.EntityData.Children.Append(types.GetSegmentPath(hoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold[i]), types.YChild{"HoVcMinute15hoVcThreshold", hoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold[i]})
    }
    hoVcMinute15hoVcThresholds.EntityData.Leafs = types.NewOrderedMap()

    hoVcMinute15hoVcThresholds.EntityData.YListKeys = []string {}

    return &(hoVcMinute15hoVcThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds_HoVcMinute15hoVcThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds_HoVcMinute15hoVcThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. ho_vc Threshold Type. The type is HoVcThreshold.
    HoVcThreshold interface{}

    // ho_vc Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    HoVcThresholdValue interface{}
}

func (hoVcMinute15hoVcThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_HoVcMinute15_HoVcMinute15hoVc_HoVcMinute15hoVcThresholds_HoVcMinute15hoVcThreshold) GetEntityData() *types.CommonEntityData {
    hoVcMinute15hoVcThreshold.EntityData.YFilter = hoVcMinute15hoVcThreshold.YFilter
    hoVcMinute15hoVcThreshold.EntityData.YangName = "ho-vc-minute15ho-vc-threshold"
    hoVcMinute15hoVcThreshold.EntityData.BundleName = "cisco_ios_xr"
    hoVcMinute15hoVcThreshold.EntityData.ParentYangName = "ho-vc-minute15ho-vc-thresholds"
    hoVcMinute15hoVcThreshold.EntityData.SegmentPath = "ho-vc-minute15ho-vc-threshold" + types.AddKeyToken(hoVcMinute15hoVcThreshold.HoVcThreshold, "ho-vc-threshold")
    hoVcMinute15hoVcThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ho-vc-minute15/ho-vc-minute15ho-vc/ho-vc-minute15ho-vc-thresholds/" + hoVcMinute15hoVcThreshold.EntityData.SegmentPath
    hoVcMinute15hoVcThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hoVcMinute15hoVcThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hoVcMinute15hoVcThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hoVcMinute15hoVcThreshold.EntityData.Children = types.NewOrderedMap()
    hoVcMinute15hoVcThreshold.EntityData.Leafs = types.NewOrderedMap()
    hoVcMinute15hoVcThreshold.EntityData.Leafs.Append("ho-vc-threshold", types.YLeaf{"HoVcThreshold", hoVcMinute15hoVcThreshold.HoVcThreshold})
    hoVcMinute15hoVcThreshold.EntityData.Leafs.Append("ho-vc-threshold-value", types.YLeaf{"HoVcThresholdValue", hoVcMinute15hoVcThreshold.HoVcThresholdValue})

    hoVcMinute15hoVcThreshold.EntityData.YListKeys = []string {"HoVcThreshold"}

    return &(hoVcMinute15hoVcThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24
// set STS threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    StsHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
}

func (stsHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24) GetEntityData() *types.CommonEntityData {
    stsHour24.EntityData.YFilter = stsHour24.YFilter
    stsHour24.EntityData.YangName = "sts-hour24"
    stsHour24.EntityData.BundleName = "cisco_ios_xr"
    stsHour24.EntityData.ParentYangName = "performance-management"
    stsHour24.EntityData.SegmentPath = "sts-hour24"
    stsHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + stsHour24.EntityData.SegmentPath
    stsHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24.EntityData.Children = types.NewOrderedMap()
    stsHour24.EntityData.Children.Append("sts-hour24-path", types.YChild{"StsHour24Path", &stsHour24.StsHour24Path})
    stsHour24.EntityData.Leafs = types.NewOrderedMap()

    stsHour24.EntityData.YListKeys = []string {}

    return &(stsHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    StsHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds

    // set Path TCA reporting status.
    StsHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
}

func (stsHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path) GetEntityData() *types.CommonEntityData {
    stsHour24Path.EntityData.YFilter = stsHour24Path.YFilter
    stsHour24Path.EntityData.YangName = "sts-hour24-path"
    stsHour24Path.EntityData.BundleName = "cisco_ios_xr"
    stsHour24Path.EntityData.ParentYangName = "sts-hour24"
    stsHour24Path.EntityData.SegmentPath = "sts-hour24-path"
    stsHour24Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-hour24/" + stsHour24Path.EntityData.SegmentPath
    stsHour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24Path.EntityData.Children = types.NewOrderedMap()
    stsHour24Path.EntityData.Children.Append("sts-hour24-path-thresholds", types.YChild{"StsHour24PathThresholds", &stsHour24Path.StsHour24PathThresholds})
    stsHour24Path.EntityData.Children.Append("sts-hour24-path-reports", types.YChild{"StsHour24PathReports", &stsHour24Path.StsHour24PathReports})
    stsHour24Path.EntityData.Leafs = types.NewOrderedMap()

    stsHour24Path.EntityData.YListKeys = []string {}

    return &(stsHour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold.
    StsHour24PathThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
}

func (stsHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds) GetEntityData() *types.CommonEntityData {
    stsHour24PathThresholds.EntityData.YFilter = stsHour24PathThresholds.YFilter
    stsHour24PathThresholds.EntityData.YangName = "sts-hour24-path-thresholds"
    stsHour24PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathThresholds.EntityData.ParentYangName = "sts-hour24-path"
    stsHour24PathThresholds.EntityData.SegmentPath = "sts-hour24-path-thresholds"
    stsHour24PathThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-hour24/sts-hour24-path/" + stsHour24PathThresholds.EntityData.SegmentPath
    stsHour24PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathThresholds.EntityData.Children = types.NewOrderedMap()
    stsHour24PathThresholds.EntityData.Children.Append("sts-hour24-path-threshold", types.YChild{"StsHour24PathThreshold", nil})
    for i := range stsHour24PathThresholds.StsHour24PathThreshold {
        stsHour24PathThresholds.EntityData.Children.Append(types.GetSegmentPath(stsHour24PathThresholds.StsHour24PathThreshold[i]), types.YChild{"StsHour24PathThreshold", stsHour24PathThresholds.StsHour24PathThreshold[i]})
    }
    stsHour24PathThresholds.EntityData.Leafs = types.NewOrderedMap()

    stsHour24PathThresholds.EntityData.YListKeys = []string {}

    return &(stsHour24PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Threshold Type. The type is StsThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    PathThresholdValue interface{}
}

func (stsHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathThresholds_StsHour24PathThreshold) GetEntityData() *types.CommonEntityData {
    stsHour24PathThreshold.EntityData.YFilter = stsHour24PathThreshold.YFilter
    stsHour24PathThreshold.EntityData.YangName = "sts-hour24-path-threshold"
    stsHour24PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathThreshold.EntityData.ParentYangName = "sts-hour24-path-thresholds"
    stsHour24PathThreshold.EntityData.SegmentPath = "sts-hour24-path-threshold" + types.AddKeyToken(stsHour24PathThreshold.PathThreshold, "path-threshold")
    stsHour24PathThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-hour24/sts-hour24-path/sts-hour24-path-thresholds/" + stsHour24PathThreshold.EntityData.SegmentPath
    stsHour24PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathThreshold.EntityData.Children = types.NewOrderedMap()
    stsHour24PathThreshold.EntityData.Leafs = types.NewOrderedMap()
    stsHour24PathThreshold.EntityData.Leafs.Append("path-threshold", types.YLeaf{"PathThreshold", stsHour24PathThreshold.PathThreshold})
    stsHour24PathThreshold.EntityData.Leafs.Append("path-threshold-value", types.YLeaf{"PathThresholdValue", stsHour24PathThreshold.PathThresholdValue})

    stsHour24PathThreshold.EntityData.YListKeys = []string {"PathThreshold"}

    return &(stsHour24PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport.
    StsHour24PathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
}

func (stsHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports) GetEntityData() *types.CommonEntityData {
    stsHour24PathReports.EntityData.YFilter = stsHour24PathReports.YFilter
    stsHour24PathReports.EntityData.YangName = "sts-hour24-path-reports"
    stsHour24PathReports.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathReports.EntityData.ParentYangName = "sts-hour24-path"
    stsHour24PathReports.EntityData.SegmentPath = "sts-hour24-path-reports"
    stsHour24PathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-hour24/sts-hour24-path/" + stsHour24PathReports.EntityData.SegmentPath
    stsHour24PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathReports.EntityData.Children = types.NewOrderedMap()
    stsHour24PathReports.EntityData.Children.Append("sts-hour24-path-report", types.YChild{"StsHour24PathReport", nil})
    for i := range stsHour24PathReports.StsHour24PathReport {
        stsHour24PathReports.EntityData.Children.Append(types.GetSegmentPath(stsHour24PathReports.StsHour24PathReport[i]), types.YChild{"StsHour24PathReport", stsHour24PathReports.StsHour24PathReport[i]})
    }
    stsHour24PathReports.EntityData.Leafs = types.NewOrderedMap()

    stsHour24PathReports.EntityData.YListKeys = []string {}

    return &(stsHour24PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Report Type. The type is StsReport.
    PathReport interface{}

    // Path Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stsHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StsHour24_StsHour24Path_StsHour24PathReports_StsHour24PathReport) GetEntityData() *types.CommonEntityData {
    stsHour24PathReport.EntityData.YFilter = stsHour24PathReport.YFilter
    stsHour24PathReport.EntityData.YangName = "sts-hour24-path-report"
    stsHour24PathReport.EntityData.BundleName = "cisco_ios_xr"
    stsHour24PathReport.EntityData.ParentYangName = "sts-hour24-path-reports"
    stsHour24PathReport.EntityData.SegmentPath = "sts-hour24-path-report" + types.AddKeyToken(stsHour24PathReport.PathReport, "path-report")
    stsHour24PathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sts-hour24/sts-hour24-path/sts-hour24-path-reports/" + stsHour24PathReport.EntityData.SegmentPath
    stsHour24PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stsHour24PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stsHour24PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stsHour24PathReport.EntityData.Children = types.NewOrderedMap()
    stsHour24PathReport.EntityData.Leafs = types.NewOrderedMap()
    stsHour24PathReport.EntityData.Leafs.Append("path-report", types.YLeaf{"PathReport", stsHour24PathReport.PathReport})
    stsHour24PathReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", stsHour24PathReport.Enable})

    stsHour24PathReport.EntityData.YListKeys = []string {"PathReport"}

    return &(stsHour24PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15
// set STM threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure stm performance monitoring.
    StmMinute15Stm InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
}

func (stmMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15) GetEntityData() *types.CommonEntityData {
    stmMinute15.EntityData.YFilter = stmMinute15.YFilter
    stmMinute15.EntityData.YangName = "stm-minute15"
    stmMinute15.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15.EntityData.ParentYangName = "performance-management"
    stmMinute15.EntityData.SegmentPath = "stm-minute15"
    stmMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + stmMinute15.EntityData.SegmentPath
    stmMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15.EntityData.Children = types.NewOrderedMap()
    stmMinute15.EntityData.Children.Append("stm-minute15-stm", types.YChild{"StmMinute15Stm", &stmMinute15.StmMinute15Stm})
    stmMinute15.EntityData.Leafs = types.NewOrderedMap()

    stmMinute15.EntityData.YListKeys = []string {}

    return &(stmMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm
// Configure stm performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set stm TCA reporting status.
    StmMinute15StmReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports

    // Configure threshold on stm parameters.
    StmMinute15StmThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
}

func (stmMinute15Stm *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm) GetEntityData() *types.CommonEntityData {
    stmMinute15Stm.EntityData.YFilter = stmMinute15Stm.YFilter
    stmMinute15Stm.EntityData.YangName = "stm-minute15-stm"
    stmMinute15Stm.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15Stm.EntityData.ParentYangName = "stm-minute15"
    stmMinute15Stm.EntityData.SegmentPath = "stm-minute15-stm"
    stmMinute15Stm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-minute15/" + stmMinute15Stm.EntityData.SegmentPath
    stmMinute15Stm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15Stm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15Stm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15Stm.EntityData.Children = types.NewOrderedMap()
    stmMinute15Stm.EntityData.Children.Append("stm-minute15-stm-reports", types.YChild{"StmMinute15StmReports", &stmMinute15Stm.StmMinute15StmReports})
    stmMinute15Stm.EntityData.Children.Append("stm-minute15-stm-thresholds", types.YChild{"StmMinute15StmThresholds", &stmMinute15Stm.StmMinute15StmThresholds})
    stmMinute15Stm.EntityData.Leafs = types.NewOrderedMap()

    stmMinute15Stm.EntityData.YListKeys = []string {}

    return &(stmMinute15Stm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports
// set stm TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport.
    StmMinute15StmReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
}

func (stmMinute15StmReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports) GetEntityData() *types.CommonEntityData {
    stmMinute15StmReports.EntityData.YFilter = stmMinute15StmReports.YFilter
    stmMinute15StmReports.EntityData.YangName = "stm-minute15-stm-reports"
    stmMinute15StmReports.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmReports.EntityData.ParentYangName = "stm-minute15-stm"
    stmMinute15StmReports.EntityData.SegmentPath = "stm-minute15-stm-reports"
    stmMinute15StmReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-minute15/stm-minute15-stm/" + stmMinute15StmReports.EntityData.SegmentPath
    stmMinute15StmReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmReports.EntityData.Children = types.NewOrderedMap()
    stmMinute15StmReports.EntityData.Children.Append("stm-minute15-stm-report", types.YChild{"StmMinute15StmReport", nil})
    for i := range stmMinute15StmReports.StmMinute15StmReport {
        stmMinute15StmReports.EntityData.Children.Append(types.GetSegmentPath(stmMinute15StmReports.StmMinute15StmReport[i]), types.YChild{"StmMinute15StmReport", stmMinute15StmReports.StmMinute15StmReport[i]})
    }
    stmMinute15StmReports.EntityData.Leafs = types.NewOrderedMap()

    stmMinute15StmReports.EntityData.YListKeys = []string {}

    return &(stmMinute15StmReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Stm Report Type. The type is StmReport.
    StmReport interface{}

    // Stm Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (stmMinute15StmReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmReports_StmMinute15StmReport) GetEntityData() *types.CommonEntityData {
    stmMinute15StmReport.EntityData.YFilter = stmMinute15StmReport.YFilter
    stmMinute15StmReport.EntityData.YangName = "stm-minute15-stm-report"
    stmMinute15StmReport.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmReport.EntityData.ParentYangName = "stm-minute15-stm-reports"
    stmMinute15StmReport.EntityData.SegmentPath = "stm-minute15-stm-report" + types.AddKeyToken(stmMinute15StmReport.StmReport, "stm-report")
    stmMinute15StmReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-minute15/stm-minute15-stm/stm-minute15-stm-reports/" + stmMinute15StmReport.EntityData.SegmentPath
    stmMinute15StmReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmReport.EntityData.Children = types.NewOrderedMap()
    stmMinute15StmReport.EntityData.Leafs = types.NewOrderedMap()
    stmMinute15StmReport.EntityData.Leafs.Append("stm-report", types.YLeaf{"StmReport", stmMinute15StmReport.StmReport})
    stmMinute15StmReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", stmMinute15StmReport.Enable})

    stmMinute15StmReport.EntityData.YListKeys = []string {"StmReport"}

    return &(stmMinute15StmReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds
// Configure threshold on stm parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold.
    StmMinute15StmThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
}

func (stmMinute15StmThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds) GetEntityData() *types.CommonEntityData {
    stmMinute15StmThresholds.EntityData.YFilter = stmMinute15StmThresholds.YFilter
    stmMinute15StmThresholds.EntityData.YangName = "stm-minute15-stm-thresholds"
    stmMinute15StmThresholds.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmThresholds.EntityData.ParentYangName = "stm-minute15-stm"
    stmMinute15StmThresholds.EntityData.SegmentPath = "stm-minute15-stm-thresholds"
    stmMinute15StmThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-minute15/stm-minute15-stm/" + stmMinute15StmThresholds.EntityData.SegmentPath
    stmMinute15StmThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmThresholds.EntityData.Children = types.NewOrderedMap()
    stmMinute15StmThresholds.EntityData.Children.Append("stm-minute15-stm-threshold", types.YChild{"StmMinute15StmThreshold", nil})
    for i := range stmMinute15StmThresholds.StmMinute15StmThreshold {
        stmMinute15StmThresholds.EntityData.Children.Append(types.GetSegmentPath(stmMinute15StmThresholds.StmMinute15StmThreshold[i]), types.YChild{"StmMinute15StmThreshold", stmMinute15StmThresholds.StmMinute15StmThreshold[i]})
    }
    stmMinute15StmThresholds.EntityData.Leafs = types.NewOrderedMap()

    stmMinute15StmThresholds.EntityData.YListKeys = []string {}

    return &(stmMinute15StmThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Stm Threshold Type. The type is StmThreshold.
    StmThreshold interface{}

    // Stm Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    StmThresholdValue interface{}
}

func (stmMinute15StmThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_StmMinute15_StmMinute15Stm_StmMinute15StmThresholds_StmMinute15StmThreshold) GetEntityData() *types.CommonEntityData {
    stmMinute15StmThreshold.EntityData.YFilter = stmMinute15StmThreshold.YFilter
    stmMinute15StmThreshold.EntityData.YangName = "stm-minute15-stm-threshold"
    stmMinute15StmThreshold.EntityData.BundleName = "cisco_ios_xr"
    stmMinute15StmThreshold.EntityData.ParentYangName = "stm-minute15-stm-thresholds"
    stmMinute15StmThreshold.EntityData.SegmentPath = "stm-minute15-stm-threshold" + types.AddKeyToken(stmMinute15StmThreshold.StmThreshold, "stm-threshold")
    stmMinute15StmThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/stm-minute15/stm-minute15-stm/stm-minute15-stm-thresholds/" + stmMinute15StmThreshold.EntityData.SegmentPath
    stmMinute15StmThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stmMinute15StmThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stmMinute15StmThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stmMinute15StmThreshold.EntityData.Children = types.NewOrderedMap()
    stmMinute15StmThreshold.EntityData.Leafs = types.NewOrderedMap()
    stmMinute15StmThreshold.EntityData.Leafs.Append("stm-threshold", types.YLeaf{"StmThreshold", stmMinute15StmThreshold.StmThreshold})
    stmMinute15StmThreshold.EntityData.Leafs.Append("stm-threshold-value", types.YLeaf{"StmThresholdValue", stmMinute15StmThreshold.StmThresholdValue})

    stmMinute15StmThreshold.EntityData.YListKeys = []string {"StmThreshold"}

    return &(stmMinute15StmThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24
// set Sonet threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path performance monitoring.
    SonetHour24Path InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path

    // Configure ocn performance monitoring.
    SonetHour24Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
}

func (sonetHour24 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24) GetEntityData() *types.CommonEntityData {
    sonetHour24.EntityData.YFilter = sonetHour24.YFilter
    sonetHour24.EntityData.YangName = "sonet-hour24"
    sonetHour24.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24.EntityData.ParentYangName = "performance-management"
    sonetHour24.EntityData.SegmentPath = "sonet-hour24"
    sonetHour24.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + sonetHour24.EntityData.SegmentPath
    sonetHour24.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24.EntityData.Children = types.NewOrderedMap()
    sonetHour24.EntityData.Children.Append("sonet-hour24-path", types.YChild{"SonetHour24Path", &sonetHour24.SonetHour24Path})
    sonetHour24.EntityData.Children.Append("sonet-hour24-ocn", types.YChild{"SonetHour24Ocn", &sonetHour24.SonetHour24Ocn})
    sonetHour24.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24.EntityData.YListKeys = []string {}

    return &(sonetHour24.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path
// Configure Path performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on Path parameters.
    SonetHour24PathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds

    // set Path TCA reporting status.
    SonetHour24PathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
}

func (sonetHour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path) GetEntityData() *types.CommonEntityData {
    sonetHour24Path.EntityData.YFilter = sonetHour24Path.YFilter
    sonetHour24Path.EntityData.YangName = "sonet-hour24-path"
    sonetHour24Path.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24Path.EntityData.ParentYangName = "sonet-hour24"
    sonetHour24Path.EntityData.SegmentPath = "sonet-hour24-path"
    sonetHour24Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/" + sonetHour24Path.EntityData.SegmentPath
    sonetHour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24Path.EntityData.Children = types.NewOrderedMap()
    sonetHour24Path.EntityData.Children.Append("sonet-hour24-path-thresholds", types.YChild{"SonetHour24PathThresholds", &sonetHour24Path.SonetHour24PathThresholds})
    sonetHour24Path.EntityData.Children.Append("sonet-hour24-path-reports", types.YChild{"SonetHour24PathReports", &sonetHour24Path.SonetHour24PathReports})
    sonetHour24Path.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24Path.EntityData.YListKeys = []string {}

    return &(sonetHour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds
// Configure threshold on Path parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold.
    SonetHour24PathThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
}

func (sonetHour24PathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds) GetEntityData() *types.CommonEntityData {
    sonetHour24PathThresholds.EntityData.YFilter = sonetHour24PathThresholds.YFilter
    sonetHour24PathThresholds.EntityData.YangName = "sonet-hour24-path-thresholds"
    sonetHour24PathThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathThresholds.EntityData.ParentYangName = "sonet-hour24-path"
    sonetHour24PathThresholds.EntityData.SegmentPath = "sonet-hour24-path-thresholds"
    sonetHour24PathThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-path/" + sonetHour24PathThresholds.EntityData.SegmentPath
    sonetHour24PathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathThresholds.EntityData.Children = types.NewOrderedMap()
    sonetHour24PathThresholds.EntityData.Children.Append("sonet-hour24-path-threshold", types.YChild{"SonetHour24PathThreshold", nil})
    for i := range sonetHour24PathThresholds.SonetHour24PathThreshold {
        sonetHour24PathThresholds.EntityData.Children.Append(types.GetSegmentPath(sonetHour24PathThresholds.SonetHour24PathThreshold[i]), types.YChild{"SonetHour24PathThreshold", sonetHour24PathThresholds.SonetHour24PathThreshold[i]})
    }
    sonetHour24PathThresholds.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24PathThresholds.EntityData.YListKeys = []string {}

    return &(sonetHour24PathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Threshold Type. The type is PathThreshold.
    PathThreshold interface{}

    // Path Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    PathThresholdValue interface{}
}

func (sonetHour24PathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathThresholds_SonetHour24PathThreshold) GetEntityData() *types.CommonEntityData {
    sonetHour24PathThreshold.EntityData.YFilter = sonetHour24PathThreshold.YFilter
    sonetHour24PathThreshold.EntityData.YangName = "sonet-hour24-path-threshold"
    sonetHour24PathThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathThreshold.EntityData.ParentYangName = "sonet-hour24-path-thresholds"
    sonetHour24PathThreshold.EntityData.SegmentPath = "sonet-hour24-path-threshold" + types.AddKeyToken(sonetHour24PathThreshold.PathThreshold, "path-threshold")
    sonetHour24PathThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-path/sonet-hour24-path-thresholds/" + sonetHour24PathThreshold.EntityData.SegmentPath
    sonetHour24PathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathThreshold.EntityData.Children = types.NewOrderedMap()
    sonetHour24PathThreshold.EntityData.Leafs = types.NewOrderedMap()
    sonetHour24PathThreshold.EntityData.Leafs.Append("path-threshold", types.YLeaf{"PathThreshold", sonetHour24PathThreshold.PathThreshold})
    sonetHour24PathThreshold.EntityData.Leafs.Append("path-threshold-value", types.YLeaf{"PathThresholdValue", sonetHour24PathThreshold.PathThresholdValue})

    sonetHour24PathThreshold.EntityData.YListKeys = []string {"PathThreshold"}

    return &(sonetHour24PathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports
// set Path TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport.
    SonetHour24PathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
}

func (sonetHour24PathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports) GetEntityData() *types.CommonEntityData {
    sonetHour24PathReports.EntityData.YFilter = sonetHour24PathReports.YFilter
    sonetHour24PathReports.EntityData.YangName = "sonet-hour24-path-reports"
    sonetHour24PathReports.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathReports.EntityData.ParentYangName = "sonet-hour24-path"
    sonetHour24PathReports.EntityData.SegmentPath = "sonet-hour24-path-reports"
    sonetHour24PathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-path/" + sonetHour24PathReports.EntityData.SegmentPath
    sonetHour24PathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathReports.EntityData.Children = types.NewOrderedMap()
    sonetHour24PathReports.EntityData.Children.Append("sonet-hour24-path-report", types.YChild{"SonetHour24PathReport", nil})
    for i := range sonetHour24PathReports.SonetHour24PathReport {
        sonetHour24PathReports.EntityData.Children.Append(types.GetSegmentPath(sonetHour24PathReports.SonetHour24PathReport[i]), types.YChild{"SonetHour24PathReport", sonetHour24PathReports.SonetHour24PathReport[i]})
    }
    sonetHour24PathReports.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24PathReports.EntityData.YListKeys = []string {}

    return &(sonetHour24PathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path Report Type. The type is PathReport.
    PathReport interface{}
}

func (sonetHour24PathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Path_SonetHour24PathReports_SonetHour24PathReport) GetEntityData() *types.CommonEntityData {
    sonetHour24PathReport.EntityData.YFilter = sonetHour24PathReport.YFilter
    sonetHour24PathReport.EntityData.YangName = "sonet-hour24-path-report"
    sonetHour24PathReport.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24PathReport.EntityData.ParentYangName = "sonet-hour24-path-reports"
    sonetHour24PathReport.EntityData.SegmentPath = "sonet-hour24-path-report" + types.AddKeyToken(sonetHour24PathReport.PathReport, "path-report")
    sonetHour24PathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-path/sonet-hour24-path-reports/" + sonetHour24PathReport.EntityData.SegmentPath
    sonetHour24PathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24PathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24PathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24PathReport.EntityData.Children = types.NewOrderedMap()
    sonetHour24PathReport.EntityData.Leafs = types.NewOrderedMap()
    sonetHour24PathReport.EntityData.Leafs.Append("path-report", types.YLeaf{"PathReport", sonetHour24PathReport.PathReport})

    sonetHour24PathReport.EntityData.YListKeys = []string {"PathReport"}

    return &(sonetHour24PathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ocn parameters.
    SonetHour24OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds

    // set ocn TCA reporting status.
    SonetHour24OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
}

func (sonetHour24Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn) GetEntityData() *types.CommonEntityData {
    sonetHour24Ocn.EntityData.YFilter = sonetHour24Ocn.YFilter
    sonetHour24Ocn.EntityData.YangName = "sonet-hour24-ocn"
    sonetHour24Ocn.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24Ocn.EntityData.ParentYangName = "sonet-hour24"
    sonetHour24Ocn.EntityData.SegmentPath = "sonet-hour24-ocn"
    sonetHour24Ocn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/" + sonetHour24Ocn.EntityData.SegmentPath
    sonetHour24Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24Ocn.EntityData.Children = types.NewOrderedMap()
    sonetHour24Ocn.EntityData.Children.Append("sonet-hour24-ocn-thresholds", types.YChild{"SonetHour24OcnThresholds", &sonetHour24Ocn.SonetHour24OcnThresholds})
    sonetHour24Ocn.EntityData.Children.Append("sonet-hour24-ocn-reports", types.YChild{"SonetHour24OcnReports", &sonetHour24Ocn.SonetHour24OcnReports})
    sonetHour24Ocn.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24Ocn.EntityData.YListKeys = []string {}

    return &(sonetHour24Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold.
    SonetHour24OcnThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
}

func (sonetHour24OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnThresholds.EntityData.YFilter = sonetHour24OcnThresholds.YFilter
    sonetHour24OcnThresholds.EntityData.YangName = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnThresholds.EntityData.ParentYangName = "sonet-hour24-ocn"
    sonetHour24OcnThresholds.EntityData.SegmentPath = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-ocn/" + sonetHour24OcnThresholds.EntityData.SegmentPath
    sonetHour24OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnThresholds.EntityData.Children = types.NewOrderedMap()
    sonetHour24OcnThresholds.EntityData.Children.Append("sonet-hour24-ocn-threshold", types.YChild{"SonetHour24OcnThreshold", nil})
    for i := range sonetHour24OcnThresholds.SonetHour24OcnThreshold {
        sonetHour24OcnThresholds.EntityData.Children.Append(types.GetSegmentPath(sonetHour24OcnThresholds.SonetHour24OcnThreshold[i]), types.YChild{"SonetHour24OcnThreshold", sonetHour24OcnThresholds.SonetHour24OcnThreshold[i]})
    }
    sonetHour24OcnThresholds.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24OcnThresholds.EntityData.YListKeys = []string {}

    return &(sonetHour24OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Thresh Value. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    OcnThresholdValue interface{}
}

func (sonetHour24OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnThresholds_SonetHour24OcnThreshold) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnThreshold.EntityData.YFilter = sonetHour24OcnThreshold.YFilter
    sonetHour24OcnThreshold.EntityData.YangName = "sonet-hour24-ocn-threshold"
    sonetHour24OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnThreshold.EntityData.ParentYangName = "sonet-hour24-ocn-thresholds"
    sonetHour24OcnThreshold.EntityData.SegmentPath = "sonet-hour24-ocn-threshold" + types.AddKeyToken(sonetHour24OcnThreshold.OcnThreshold, "ocn-threshold")
    sonetHour24OcnThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-ocn/sonet-hour24-ocn-thresholds/" + sonetHour24OcnThreshold.EntityData.SegmentPath
    sonetHour24OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnThreshold.EntityData.Children = types.NewOrderedMap()
    sonetHour24OcnThreshold.EntityData.Leafs = types.NewOrderedMap()
    sonetHour24OcnThreshold.EntityData.Leafs.Append("ocn-threshold", types.YLeaf{"OcnThreshold", sonetHour24OcnThreshold.OcnThreshold})
    sonetHour24OcnThreshold.EntityData.Leafs.Append("ocn-threshold-value", types.YLeaf{"OcnThresholdValue", sonetHour24OcnThreshold.OcnThresholdValue})

    sonetHour24OcnThreshold.EntityData.YListKeys = []string {"OcnThreshold"}

    return &(sonetHour24OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport.
    SonetHour24OcnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
}

func (sonetHour24OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnReports.EntityData.YFilter = sonetHour24OcnReports.YFilter
    sonetHour24OcnReports.EntityData.YangName = "sonet-hour24-ocn-reports"
    sonetHour24OcnReports.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnReports.EntityData.ParentYangName = "sonet-hour24-ocn"
    sonetHour24OcnReports.EntityData.SegmentPath = "sonet-hour24-ocn-reports"
    sonetHour24OcnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-ocn/" + sonetHour24OcnReports.EntityData.SegmentPath
    sonetHour24OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnReports.EntityData.Children = types.NewOrderedMap()
    sonetHour24OcnReports.EntityData.Children.Append("sonet-hour24-ocn-report", types.YChild{"SonetHour24OcnReport", nil})
    for i := range sonetHour24OcnReports.SonetHour24OcnReport {
        sonetHour24OcnReports.EntityData.Children.Append(types.GetSegmentPath(sonetHour24OcnReports.SonetHour24OcnReport[i]), types.YChild{"SonetHour24OcnReport", sonetHour24OcnReports.SonetHour24OcnReport[i]})
    }
    sonetHour24OcnReports.EntityData.Leafs = types.NewOrderedMap()

    sonetHour24OcnReports.EntityData.YListKeys = []string {}

    return &(sonetHour24OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}
}

func (sonetHour24OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_SonetHour24_SonetHour24Ocn_SonetHour24OcnReports_SonetHour24OcnReport) GetEntityData() *types.CommonEntityData {
    sonetHour24OcnReport.EntityData.YFilter = sonetHour24OcnReport.YFilter
    sonetHour24OcnReport.EntityData.YangName = "sonet-hour24-ocn-report"
    sonetHour24OcnReport.EntityData.BundleName = "cisco_ios_xr"
    sonetHour24OcnReport.EntityData.ParentYangName = "sonet-hour24-ocn-reports"
    sonetHour24OcnReport.EntityData.SegmentPath = "sonet-hour24-ocn-report" + types.AddKeyToken(sonetHour24OcnReport.OcnReport, "ocn-report")
    sonetHour24OcnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/sonet-hour24/sonet-hour24-ocn/sonet-hour24-ocn-reports/" + sonetHour24OcnReport.EntityData.SegmentPath
    sonetHour24OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sonetHour24OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sonetHour24OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sonetHour24OcnReport.EntityData.Children = types.NewOrderedMap()
    sonetHour24OcnReport.EntityData.Leafs = types.NewOrderedMap()
    sonetHour24OcnReport.EntityData.Leafs.Append("ocn-report", types.YLeaf{"OcnReport", sonetHour24OcnReport.OcnReport})

    sonetHour24OcnReport.EntityData.YListKeys = []string {"OcnReport"}

    return &(sonetHour24OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Minute15otnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath
}

func (minute15Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path) GetEntityData() *types.CommonEntityData {
    minute15Path.EntityData.YFilter = minute15Path.YFilter
    minute15Path.EntityData.YangName = "minute15-path"
    minute15Path.EntityData.BundleName = "cisco_ios_xr"
    minute15Path.EntityData.ParentYangName = "performance-management"
    minute15Path.EntityData.SegmentPath = "minute15-path"
    minute15Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + minute15Path.EntityData.SegmentPath
    minute15Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Path.EntityData.Children = types.NewOrderedMap()
    minute15Path.EntityData.Children.Append("minute15otn-path", types.YChild{"Minute15otnPath", &minute15Path.Minute15otnPath})
    minute15Path.EntityData.Leafs = types.NewOrderedMap()

    minute15Path.EntityData.YListKeys = []string {}

    return &(minute15Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Minute15otnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports

    // Configure threshold on otn parameters.
    Min15OtnPathThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes
}

func (minute15otnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath) GetEntityData() *types.CommonEntityData {
    minute15otnPath.EntityData.YFilter = minute15otnPath.YFilter
    minute15otnPath.EntityData.YangName = "minute15otn-path"
    minute15otnPath.EntityData.BundleName = "cisco_ios_xr"
    minute15otnPath.EntityData.ParentYangName = "minute15-path"
    minute15otnPath.EntityData.SegmentPath = "minute15otn-path"
    minute15otnPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-path/" + minute15otnPath.EntityData.SegmentPath
    minute15otnPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnPath.EntityData.Children = types.NewOrderedMap()
    minute15otnPath.EntityData.Children.Append("minute15otn-path-reports", types.YChild{"Minute15otnPathReports", &minute15otnPath.Minute15otnPathReports})
    minute15otnPath.EntityData.Children.Append("min15-otn-path-threshes", types.YChild{"Min15OtnPathThreshes", &minute15otnPath.Min15OtnPathThreshes})
    minute15otnPath.EntityData.Leafs = types.NewOrderedMap()

    minute15otnPath.EntityData.YListKeys = []string {}

    return &(minute15otnPath.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports_Minute15otnPathReport.
    Minute15otnPathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports_Minute15otnPathReport
}

func (minute15otnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports) GetEntityData() *types.CommonEntityData {
    minute15otnPathReports.EntityData.YFilter = minute15otnPathReports.YFilter
    minute15otnPathReports.EntityData.YangName = "minute15otn-path-reports"
    minute15otnPathReports.EntityData.BundleName = "cisco_ios_xr"
    minute15otnPathReports.EntityData.ParentYangName = "minute15otn-path"
    minute15otnPathReports.EntityData.SegmentPath = "minute15otn-path-reports"
    minute15otnPathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-path/minute15otn-path/" + minute15otnPathReports.EntityData.SegmentPath
    minute15otnPathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnPathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnPathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnPathReports.EntityData.Children = types.NewOrderedMap()
    minute15otnPathReports.EntityData.Children.Append("minute15otn-path-report", types.YChild{"Minute15otnPathReport", nil})
    for i := range minute15otnPathReports.Minute15otnPathReport {
        minute15otnPathReports.EntityData.Children.Append(types.GetSegmentPath(minute15otnPathReports.Minute15otnPathReport[i]), types.YChild{"Minute15otnPathReport", minute15otnPathReports.Minute15otnPathReport[i]})
    }
    minute15otnPathReports.EntityData.Leafs = types.NewOrderedMap()

    minute15otnPathReports.EntityData.YListKeys = []string {}

    return &(minute15otnPathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports_Minute15otnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports_Minute15otnPathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15otnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Minute15otnPathReports_Minute15otnPathReport) GetEntityData() *types.CommonEntityData {
    minute15otnPathReport.EntityData.YFilter = minute15otnPathReport.YFilter
    minute15otnPathReport.EntityData.YangName = "minute15otn-path-report"
    minute15otnPathReport.EntityData.BundleName = "cisco_ios_xr"
    minute15otnPathReport.EntityData.ParentYangName = "minute15otn-path-reports"
    minute15otnPathReport.EntityData.SegmentPath = "minute15otn-path-report" + types.AddKeyToken(minute15otnPathReport.OtnReport, "otn-report")
    minute15otnPathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-path/minute15otn-path/minute15otn-path-reports/" + minute15otnPathReport.EntityData.SegmentPath
    minute15otnPathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnPathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnPathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnPathReport.EntityData.Children = types.NewOrderedMap()
    minute15otnPathReport.EntityData.Leafs = types.NewOrderedMap()
    minute15otnPathReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", minute15otnPathReport.OtnReport})
    minute15otnPathReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15otnPathReport.Enable})

    minute15otnPathReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(minute15otnPathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes_Min15OtnPathThresh.
    Min15OtnPathThresh []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes_Min15OtnPathThresh
}

func (min15OtnPathThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnPathThreshes.EntityData.YFilter = min15OtnPathThreshes.YFilter
    min15OtnPathThreshes.EntityData.YangName = "min15-otn-path-threshes"
    min15OtnPathThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnPathThreshes.EntityData.ParentYangName = "minute15otn-path"
    min15OtnPathThreshes.EntityData.SegmentPath = "min15-otn-path-threshes"
    min15OtnPathThreshes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-path/minute15otn-path/" + min15OtnPathThreshes.EntityData.SegmentPath
    min15OtnPathThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnPathThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnPathThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnPathThreshes.EntityData.Children = types.NewOrderedMap()
    min15OtnPathThreshes.EntityData.Children.Append("min15-otn-path-thresh", types.YChild{"Min15OtnPathThresh", nil})
    for i := range min15OtnPathThreshes.Min15OtnPathThresh {
        min15OtnPathThreshes.EntityData.Children.Append(types.GetSegmentPath(min15OtnPathThreshes.Min15OtnPathThresh[i]), types.YChild{"Min15OtnPathThresh", min15OtnPathThreshes.Min15OtnPathThresh[i]})
    }
    min15OtnPathThreshes.EntityData.Leafs = types.NewOrderedMap()

    min15OtnPathThreshes.EntityData.YListKeys = []string {}

    return &(min15OtnPathThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes_Min15OtnPathThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes_Min15OtnPathThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnPathThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15Path_Minute15otnPath_Min15OtnPathThreshes_Min15OtnPathThresh) GetEntityData() *types.CommonEntityData {
    min15OtnPathThresh.EntityData.YFilter = min15OtnPathThresh.YFilter
    min15OtnPathThresh.EntityData.YangName = "min15-otn-path-thresh"
    min15OtnPathThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnPathThresh.EntityData.ParentYangName = "min15-otn-path-threshes"
    min15OtnPathThresh.EntityData.SegmentPath = "min15-otn-path-thresh" + types.AddKeyToken(min15OtnPathThresh.OtnThreshold, "otn-threshold")
    min15OtnPathThresh.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15-path/minute15otn-path/min15-otn-path-threshes/" + min15OtnPathThresh.EntityData.SegmentPath
    min15OtnPathThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnPathThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnPathThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnPathThresh.EntityData.Children = types.NewOrderedMap()
    min15OtnPathThresh.EntityData.Leafs = types.NewOrderedMap()
    min15OtnPathThresh.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", min15OtnPathThresh.OtnThreshold})
    min15OtnPathThresh.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", min15OtnPathThresh.OtnThresholdValue})

    min15OtnPathThresh.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(min15OtnPathThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15
// set OC threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ocn performance monitoring.
    OcMinute15Ocn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
}

func (ocMinute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15) GetEntityData() *types.CommonEntityData {
    ocMinute15.EntityData.YFilter = ocMinute15.YFilter
    ocMinute15.EntityData.YangName = "oc-minute15"
    ocMinute15.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15.EntityData.ParentYangName = "performance-management"
    ocMinute15.EntityData.SegmentPath = "oc-minute15"
    ocMinute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + ocMinute15.EntityData.SegmentPath
    ocMinute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15.EntityData.Children = types.NewOrderedMap()
    ocMinute15.EntityData.Children.Append("oc-minute15-ocn", types.YChild{"OcMinute15Ocn", &ocMinute15.OcMinute15Ocn})
    ocMinute15.EntityData.Leafs = types.NewOrderedMap()

    ocMinute15.EntityData.YListKeys = []string {}

    return &(ocMinute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn
// Configure ocn performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set ocn TCA reporting status.
    OcMinute15OcnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports

    // Configure threshold on ocn parameters.
    OcMinute15OcnThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
}

func (ocMinute15Ocn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn) GetEntityData() *types.CommonEntityData {
    ocMinute15Ocn.EntityData.YFilter = ocMinute15Ocn.YFilter
    ocMinute15Ocn.EntityData.YangName = "oc-minute15-ocn"
    ocMinute15Ocn.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15Ocn.EntityData.ParentYangName = "oc-minute15"
    ocMinute15Ocn.EntityData.SegmentPath = "oc-minute15-ocn"
    ocMinute15Ocn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-minute15/" + ocMinute15Ocn.EntityData.SegmentPath
    ocMinute15Ocn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15Ocn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15Ocn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15Ocn.EntityData.Children = types.NewOrderedMap()
    ocMinute15Ocn.EntityData.Children.Append("oc-minute15-ocn-reports", types.YChild{"OcMinute15OcnReports", &ocMinute15Ocn.OcMinute15OcnReports})
    ocMinute15Ocn.EntityData.Children.Append("oc-minute15-ocn-thresholds", types.YChild{"OcMinute15OcnThresholds", &ocMinute15Ocn.OcMinute15OcnThresholds})
    ocMinute15Ocn.EntityData.Leafs = types.NewOrderedMap()

    ocMinute15Ocn.EntityData.YListKeys = []string {}

    return &(ocMinute15Ocn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports
// set ocn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport.
    OcMinute15OcnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
}

func (ocMinute15OcnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnReports.EntityData.YFilter = ocMinute15OcnReports.YFilter
    ocMinute15OcnReports.EntityData.YangName = "oc-minute15-ocn-reports"
    ocMinute15OcnReports.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnReports.EntityData.ParentYangName = "oc-minute15-ocn"
    ocMinute15OcnReports.EntityData.SegmentPath = "oc-minute15-ocn-reports"
    ocMinute15OcnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-minute15/oc-minute15-ocn/" + ocMinute15OcnReports.EntityData.SegmentPath
    ocMinute15OcnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnReports.EntityData.Children = types.NewOrderedMap()
    ocMinute15OcnReports.EntityData.Children.Append("oc-minute15-ocn-report", types.YChild{"OcMinute15OcnReport", nil})
    for i := range ocMinute15OcnReports.OcMinute15OcnReport {
        ocMinute15OcnReports.EntityData.Children.Append(types.GetSegmentPath(ocMinute15OcnReports.OcMinute15OcnReport[i]), types.YChild{"OcMinute15OcnReport", ocMinute15OcnReports.OcMinute15OcnReport[i]})
    }
    ocMinute15OcnReports.EntityData.Leafs = types.NewOrderedMap()

    ocMinute15OcnReports.EntityData.YListKeys = []string {}

    return &(ocMinute15OcnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Report Type. The type is OcnReport.
    OcnReport interface{}

    // Ocn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (ocMinute15OcnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnReports_OcMinute15OcnReport) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnReport.EntityData.YFilter = ocMinute15OcnReport.YFilter
    ocMinute15OcnReport.EntityData.YangName = "oc-minute15-ocn-report"
    ocMinute15OcnReport.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnReport.EntityData.ParentYangName = "oc-minute15-ocn-reports"
    ocMinute15OcnReport.EntityData.SegmentPath = "oc-minute15-ocn-report" + types.AddKeyToken(ocMinute15OcnReport.OcnReport, "ocn-report")
    ocMinute15OcnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-minute15/oc-minute15-ocn/oc-minute15-ocn-reports/" + ocMinute15OcnReport.EntityData.SegmentPath
    ocMinute15OcnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnReport.EntityData.Children = types.NewOrderedMap()
    ocMinute15OcnReport.EntityData.Leafs = types.NewOrderedMap()
    ocMinute15OcnReport.EntityData.Leafs.Append("ocn-report", types.YLeaf{"OcnReport", ocMinute15OcnReport.OcnReport})
    ocMinute15OcnReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", ocMinute15OcnReport.Enable})

    ocMinute15OcnReport.EntityData.YListKeys = []string {"OcnReport"}

    return &(ocMinute15OcnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds
// Configure threshold on ocn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold.
    OcMinute15OcnThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
}

func (ocMinute15OcnThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnThresholds.EntityData.YFilter = ocMinute15OcnThresholds.YFilter
    ocMinute15OcnThresholds.EntityData.YangName = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThresholds.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnThresholds.EntityData.ParentYangName = "oc-minute15-ocn"
    ocMinute15OcnThresholds.EntityData.SegmentPath = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-minute15/oc-minute15-ocn/" + ocMinute15OcnThresholds.EntityData.SegmentPath
    ocMinute15OcnThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnThresholds.EntityData.Children = types.NewOrderedMap()
    ocMinute15OcnThresholds.EntityData.Children.Append("oc-minute15-ocn-threshold", types.YChild{"OcMinute15OcnThreshold", nil})
    for i := range ocMinute15OcnThresholds.OcMinute15OcnThreshold {
        ocMinute15OcnThresholds.EntityData.Children.Append(types.GetSegmentPath(ocMinute15OcnThresholds.OcMinute15OcnThreshold[i]), types.YChild{"OcMinute15OcnThreshold", ocMinute15OcnThresholds.OcMinute15OcnThreshold[i]})
    }
    ocMinute15OcnThresholds.EntityData.Leafs = types.NewOrderedMap()

    ocMinute15OcnThresholds.EntityData.YListKeys = []string {}

    return &(ocMinute15OcnThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ocn Threshold Type. The type is OcnThreshold.
    OcnThreshold interface{}

    // Ocn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OcnThresholdValue interface{}
}

func (ocMinute15OcnThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_OcMinute15_OcMinute15Ocn_OcMinute15OcnThresholds_OcMinute15OcnThreshold) GetEntityData() *types.CommonEntityData {
    ocMinute15OcnThreshold.EntityData.YFilter = ocMinute15OcnThreshold.YFilter
    ocMinute15OcnThreshold.EntityData.YangName = "oc-minute15-ocn-threshold"
    ocMinute15OcnThreshold.EntityData.BundleName = "cisco_ios_xr"
    ocMinute15OcnThreshold.EntityData.ParentYangName = "oc-minute15-ocn-thresholds"
    ocMinute15OcnThreshold.EntityData.SegmentPath = "oc-minute15-ocn-threshold" + types.AddKeyToken(ocMinute15OcnThreshold.OcnThreshold, "ocn-threshold")
    ocMinute15OcnThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/oc-minute15/oc-minute15-ocn/oc-minute15-ocn-thresholds/" + ocMinute15OcnThreshold.EntityData.SegmentPath
    ocMinute15OcnThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocMinute15OcnThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocMinute15OcnThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocMinute15OcnThreshold.EntityData.Children = types.NewOrderedMap()
    ocMinute15OcnThreshold.EntityData.Leafs = types.NewOrderedMap()
    ocMinute15OcnThreshold.EntityData.Leafs.Append("ocn-threshold", types.YLeaf{"OcnThreshold", ocMinute15OcnThreshold.OcnThreshold})
    ocMinute15OcnThreshold.EntityData.Leafs.Append("ocn-threshold-value", types.YLeaf{"OcnThresholdValue", ocMinute15OcnThreshold.OcnThresholdValue})

    ocMinute15OcnThreshold.EntityData.YListKeys = []string {"OcnThreshold"}

    return &(ocMinute15OcnThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30
// Configure ethernet performance monitoring for
// 30 sec
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure ether performance monitoring.
    Second30Ether InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
}

func (ethernetSecond30 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30) GetEntityData() *types.CommonEntityData {
    ethernetSecond30.EntityData.YFilter = ethernetSecond30.YFilter
    ethernetSecond30.EntityData.YangName = "ethernet-second30"
    ethernetSecond30.EntityData.BundleName = "cisco_ios_xr"
    ethernetSecond30.EntityData.ParentYangName = "performance-management"
    ethernetSecond30.EntityData.SegmentPath = "ethernet-second30"
    ethernetSecond30.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + ethernetSecond30.EntityData.SegmentPath
    ethernetSecond30.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetSecond30.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetSecond30.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetSecond30.EntityData.Children = types.NewOrderedMap()
    ethernetSecond30.EntityData.Children.Append("second30-ether", types.YChild{"Second30Ether", &ethernetSecond30.Second30Ether})
    ethernetSecond30.EntityData.Leafs = types.NewOrderedMap()

    ethernetSecond30.EntityData.YListKeys = []string {}

    return &(ethernetSecond30.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether
// Configure ether performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on ether parameters.
    Second30EtherThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds

    // set ether TCA reporting status.
    Second30EtherReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
}

func (second30Ether *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether) GetEntityData() *types.CommonEntityData {
    second30Ether.EntityData.YFilter = second30Ether.YFilter
    second30Ether.EntityData.YangName = "second30-ether"
    second30Ether.EntityData.BundleName = "cisco_ios_xr"
    second30Ether.EntityData.ParentYangName = "ethernet-second30"
    second30Ether.EntityData.SegmentPath = "second30-ether"
    second30Ether.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-second30/" + second30Ether.EntityData.SegmentPath
    second30Ether.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30Ether.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30Ether.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30Ether.EntityData.Children = types.NewOrderedMap()
    second30Ether.EntityData.Children.Append("second30-ether-thresholds", types.YChild{"Second30EtherThresholds", &second30Ether.Second30EtherThresholds})
    second30Ether.EntityData.Children.Append("second30-ether-reports", types.YChild{"Second30EtherReports", &second30Ether.Second30EtherReports})
    second30Ether.EntityData.Leafs = types.NewOrderedMap()

    second30Ether.EntityData.YListKeys = []string {}

    return &(second30Ether.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds
// Configure threshold on ether parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold.
    Second30EtherThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
}

func (second30EtherThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds) GetEntityData() *types.CommonEntityData {
    second30EtherThresholds.EntityData.YFilter = second30EtherThresholds.YFilter
    second30EtherThresholds.EntityData.YangName = "second30-ether-thresholds"
    second30EtherThresholds.EntityData.BundleName = "cisco_ios_xr"
    second30EtherThresholds.EntityData.ParentYangName = "second30-ether"
    second30EtherThresholds.EntityData.SegmentPath = "second30-ether-thresholds"
    second30EtherThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-second30/second30-ether/" + second30EtherThresholds.EntityData.SegmentPath
    second30EtherThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherThresholds.EntityData.Children = types.NewOrderedMap()
    second30EtherThresholds.EntityData.Children.Append("second30-ether-threshold", types.YChild{"Second30EtherThreshold", nil})
    for i := range second30EtherThresholds.Second30EtherThreshold {
        second30EtherThresholds.EntityData.Children.Append(types.GetSegmentPath(second30EtherThresholds.Second30EtherThreshold[i]), types.YChild{"Second30EtherThreshold", second30EtherThresholds.Second30EtherThreshold[i]})
    }
    second30EtherThresholds.EntityData.Leafs = types.NewOrderedMap()

    second30EtherThresholds.EntityData.YListKeys = []string {}

    return &(second30EtherThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Threshold Type. The type is EtherThreshold.
    EtherThreshold interface{}

    // Ether Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    EtherThresholdValue interface{}
}

func (second30EtherThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherThresholds_Second30EtherThreshold) GetEntityData() *types.CommonEntityData {
    second30EtherThreshold.EntityData.YFilter = second30EtherThreshold.YFilter
    second30EtherThreshold.EntityData.YangName = "second30-ether-threshold"
    second30EtherThreshold.EntityData.BundleName = "cisco_ios_xr"
    second30EtherThreshold.EntityData.ParentYangName = "second30-ether-thresholds"
    second30EtherThreshold.EntityData.SegmentPath = "second30-ether-threshold" + types.AddKeyToken(second30EtherThreshold.EtherThreshold, "ether-threshold")
    second30EtherThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-second30/second30-ether/second30-ether-thresholds/" + second30EtherThreshold.EntityData.SegmentPath
    second30EtherThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherThreshold.EntityData.Children = types.NewOrderedMap()
    second30EtherThreshold.EntityData.Leafs = types.NewOrderedMap()
    second30EtherThreshold.EntityData.Leafs.Append("ether-threshold", types.YLeaf{"EtherThreshold", second30EtherThreshold.EtherThreshold})
    second30EtherThreshold.EntityData.Leafs.Append("ether-threshold-value", types.YLeaf{"EtherThresholdValue", second30EtherThreshold.EtherThresholdValue})

    second30EtherThreshold.EntityData.YListKeys = []string {"EtherThreshold"}

    return &(second30EtherThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports
// set ether TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport.
    Second30EtherReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
}

func (second30EtherReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports) GetEntityData() *types.CommonEntityData {
    second30EtherReports.EntityData.YFilter = second30EtherReports.YFilter
    second30EtherReports.EntityData.YangName = "second30-ether-reports"
    second30EtherReports.EntityData.BundleName = "cisco_ios_xr"
    second30EtherReports.EntityData.ParentYangName = "second30-ether"
    second30EtherReports.EntityData.SegmentPath = "second30-ether-reports"
    second30EtherReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-second30/second30-ether/" + second30EtherReports.EntityData.SegmentPath
    second30EtherReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherReports.EntityData.Children = types.NewOrderedMap()
    second30EtherReports.EntityData.Children.Append("second30-ether-report", types.YChild{"Second30EtherReport", nil})
    for i := range second30EtherReports.Second30EtherReport {
        second30EtherReports.EntityData.Children.Append(types.GetSegmentPath(second30EtherReports.Second30EtherReport[i]), types.YChild{"Second30EtherReport", second30EtherReports.Second30EtherReport[i]})
    }
    second30EtherReports.EntityData.Leafs = types.NewOrderedMap()

    second30EtherReports.EntityData.YListKeys = []string {}

    return &(second30EtherReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Ether Report Type. The type is EtherReport.
    EtherReport interface{}
}

func (second30EtherReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_EthernetSecond30_Second30Ether_Second30EtherReports_Second30EtherReport) GetEntityData() *types.CommonEntityData {
    second30EtherReport.EntityData.YFilter = second30EtherReport.YFilter
    second30EtherReport.EntityData.YangName = "second30-ether-report"
    second30EtherReport.EntityData.BundleName = "cisco_ios_xr"
    second30EtherReport.EntityData.ParentYangName = "second30-ether-reports"
    second30EtherReport.EntityData.SegmentPath = "second30-ether-report" + types.AddKeyToken(second30EtherReport.EtherReport, "ether-report")
    second30EtherReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/ethernet-second30/second30-ether/second30-ether-reports/" + second30EtherReport.EntityData.SegmentPath
    second30EtherReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    second30EtherReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    second30EtherReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    second30EtherReport.EntityData.Children = types.NewOrderedMap()
    second30EtherReport.EntityData.Leafs = types.NewOrderedMap()
    second30EtherReport.EntityData.Leafs.Append("ether-report", types.YLeaf{"EtherReport", second30EtherReport.EtherReport})

    second30EtherReport.EntityData.YListKeys = []string {"EtherReport"}

    return &(second30EtherReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path
// Configure pm parameters of pathmonitor 24 hour
// interval
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configure otn g709 performance monitoring.
    Hour24otnPath InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath
}

func (hour24Path *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path) GetEntityData() *types.CommonEntityData {
    hour24Path.EntityData.YFilter = hour24Path.YFilter
    hour24Path.EntityData.YangName = "hour24-path"
    hour24Path.EntityData.BundleName = "cisco_ios_xr"
    hour24Path.EntityData.ParentYangName = "performance-management"
    hour24Path.EntityData.SegmentPath = "hour24-path"
    hour24Path.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + hour24Path.EntityData.SegmentPath
    hour24Path.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24Path.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24Path.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24Path.EntityData.Children = types.NewOrderedMap()
    hour24Path.EntityData.Children.Append("hour24otn-path", types.YChild{"Hour24otnPath", &hour24Path.Hour24otnPath})
    hour24Path.EntityData.Leafs = types.NewOrderedMap()

    hour24Path.EntityData.YListKeys = []string {}

    return &(hour24Path.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set otn TCA reporting status.
    Hour24otnPathReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports

    // Configure threshold on otn parameters.
    Hour24otnPathThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds
}

func (hour24otnPath *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath) GetEntityData() *types.CommonEntityData {
    hour24otnPath.EntityData.YFilter = hour24otnPath.YFilter
    hour24otnPath.EntityData.YangName = "hour24otn-path"
    hour24otnPath.EntityData.BundleName = "cisco_ios_xr"
    hour24otnPath.EntityData.ParentYangName = "hour24-path"
    hour24otnPath.EntityData.SegmentPath = "hour24otn-path"
    hour24otnPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-path/" + hour24otnPath.EntityData.SegmentPath
    hour24otnPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnPath.EntityData.Children = types.NewOrderedMap()
    hour24otnPath.EntityData.Children.Append("hour24otn-path-reports", types.YChild{"Hour24otnPathReports", &hour24otnPath.Hour24otnPathReports})
    hour24otnPath.EntityData.Children.Append("hour24otn-path-thresholds", types.YChild{"Hour24otnPathThresholds", &hour24otnPath.Hour24otnPathThresholds})
    hour24otnPath.EntityData.Leafs = types.NewOrderedMap()

    hour24otnPath.EntityData.YListKeys = []string {}

    return &(hour24otnPath.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports_Hour24otnPathReport.
    Hour24otnPathReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports_Hour24otnPathReport
}

func (hour24otnPathReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports) GetEntityData() *types.CommonEntityData {
    hour24otnPathReports.EntityData.YFilter = hour24otnPathReports.YFilter
    hour24otnPathReports.EntityData.YangName = "hour24otn-path-reports"
    hour24otnPathReports.EntityData.BundleName = "cisco_ios_xr"
    hour24otnPathReports.EntityData.ParentYangName = "hour24otn-path"
    hour24otnPathReports.EntityData.SegmentPath = "hour24otn-path-reports"
    hour24otnPathReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-path/hour24otn-path/" + hour24otnPathReports.EntityData.SegmentPath
    hour24otnPathReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnPathReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnPathReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnPathReports.EntityData.Children = types.NewOrderedMap()
    hour24otnPathReports.EntityData.Children.Append("hour24otn-path-report", types.YChild{"Hour24otnPathReport", nil})
    for i := range hour24otnPathReports.Hour24otnPathReport {
        hour24otnPathReports.EntityData.Children.Append(types.GetSegmentPath(hour24otnPathReports.Hour24otnPathReport[i]), types.YChild{"Hour24otnPathReport", hour24otnPathReports.Hour24otnPathReport[i]})
    }
    hour24otnPathReports.EntityData.Leafs = types.NewOrderedMap()

    hour24otnPathReports.EntityData.YListKeys = []string {}

    return &(hour24otnPathReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports_Hour24otnPathReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports_Hour24otnPathReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (hour24otnPathReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathReports_Hour24otnPathReport) GetEntityData() *types.CommonEntityData {
    hour24otnPathReport.EntityData.YFilter = hour24otnPathReport.YFilter
    hour24otnPathReport.EntityData.YangName = "hour24otn-path-report"
    hour24otnPathReport.EntityData.BundleName = "cisco_ios_xr"
    hour24otnPathReport.EntityData.ParentYangName = "hour24otn-path-reports"
    hour24otnPathReport.EntityData.SegmentPath = "hour24otn-path-report" + types.AddKeyToken(hour24otnPathReport.OtnReport, "otn-report")
    hour24otnPathReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-path/hour24otn-path/hour24otn-path-reports/" + hour24otnPathReport.EntityData.SegmentPath
    hour24otnPathReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnPathReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnPathReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnPathReport.EntityData.Children = types.NewOrderedMap()
    hour24otnPathReport.EntityData.Leafs = types.NewOrderedMap()
    hour24otnPathReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", hour24otnPathReport.OtnReport})
    hour24otnPathReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", hour24otnPathReport.Enable})

    hour24otnPathReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(hour24otnPathReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds_Hour24otnPathThreshold.
    Hour24otnPathThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds_Hour24otnPathThreshold
}

func (hour24otnPathThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds) GetEntityData() *types.CommonEntityData {
    hour24otnPathThresholds.EntityData.YFilter = hour24otnPathThresholds.YFilter
    hour24otnPathThresholds.EntityData.YangName = "hour24otn-path-thresholds"
    hour24otnPathThresholds.EntityData.BundleName = "cisco_ios_xr"
    hour24otnPathThresholds.EntityData.ParentYangName = "hour24otn-path"
    hour24otnPathThresholds.EntityData.SegmentPath = "hour24otn-path-thresholds"
    hour24otnPathThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-path/hour24otn-path/" + hour24otnPathThresholds.EntityData.SegmentPath
    hour24otnPathThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnPathThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnPathThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnPathThresholds.EntityData.Children = types.NewOrderedMap()
    hour24otnPathThresholds.EntityData.Children.Append("hour24otn-path-threshold", types.YChild{"Hour24otnPathThreshold", nil})
    for i := range hour24otnPathThresholds.Hour24otnPathThreshold {
        hour24otnPathThresholds.EntityData.Children.Append(types.GetSegmentPath(hour24otnPathThresholds.Hour24otnPathThreshold[i]), types.YChild{"Hour24otnPathThreshold", hour24otnPathThresholds.Hour24otnPathThreshold[i]})
    }
    hour24otnPathThresholds.EntityData.Leafs = types.NewOrderedMap()

    hour24otnPathThresholds.EntityData.YListKeys = []string {}

    return &(hour24otnPathThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds_Hour24otnPathThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds_Hour24otnPathThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (hour24otnPathThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Hour24Path_Hour24otnPath_Hour24otnPathThresholds_Hour24otnPathThreshold) GetEntityData() *types.CommonEntityData {
    hour24otnPathThreshold.EntityData.YFilter = hour24otnPathThreshold.YFilter
    hour24otnPathThreshold.EntityData.YangName = "hour24otn-path-threshold"
    hour24otnPathThreshold.EntityData.BundleName = "cisco_ios_xr"
    hour24otnPathThreshold.EntityData.ParentYangName = "hour24otn-path-thresholds"
    hour24otnPathThreshold.EntityData.SegmentPath = "hour24otn-path-threshold" + types.AddKeyToken(hour24otnPathThreshold.OtnThreshold, "otn-threshold")
    hour24otnPathThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/hour24-path/hour24otn-path/hour24otn-path-thresholds/" + hour24otnPathThreshold.EntityData.SegmentPath
    hour24otnPathThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hour24otnPathThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hour24otnPathThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hour24otnPathThreshold.EntityData.Children = types.NewOrderedMap()
    hour24otnPathThreshold.EntityData.Leafs = types.NewOrderedMap()
    hour24otnPathThreshold.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", hour24otnPathThreshold.OtnThreshold})
    hour24otnPathThreshold.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", hour24otnPathThreshold.OtnThresholdValue})

    hour24otnPathThreshold.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(hour24otnPathThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15
// set opr min threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure optics performance monitoring.
    Minute15Optics InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics

    // Configure secy-if performance monitoring.
    Minute15secyif InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif

    // Configure secy-rx performance monitoring.
    Minute15secyrx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx

    // Configure pcs performance monitoring.
    Minute15pcs InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs

    // Configure fec g709 performance monitoring.
    Minute15fec InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec

    // Configure secy-tx performance monitoring.
    Minute15secytx InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx

    // configure otn g709 performance monitoring.
    Minute15otn InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn
}

func (minute15 *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15) GetEntityData() *types.CommonEntityData {
    minute15.EntityData.YFilter = minute15.YFilter
    minute15.EntityData.YangName = "minute15"
    minute15.EntityData.BundleName = "cisco_ios_xr"
    minute15.EntityData.ParentYangName = "performance-management"
    minute15.EntityData.SegmentPath = "minute15"
    minute15.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/" + minute15.EntityData.SegmentPath
    minute15.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15.EntityData.Children = types.NewOrderedMap()
    minute15.EntityData.Children.Append("minute15-optics", types.YChild{"Minute15Optics", &minute15.Minute15Optics})
    minute15.EntityData.Children.Append("minute15secyif", types.YChild{"Minute15secyif", &minute15.Minute15secyif})
    minute15.EntityData.Children.Append("minute15secyrx", types.YChild{"Minute15secyrx", &minute15.Minute15secyrx})
    minute15.EntityData.Children.Append("minute15pcs", types.YChild{"Minute15pcs", &minute15.Minute15pcs})
    minute15.EntityData.Children.Append("minute15fec", types.YChild{"Minute15fec", &minute15.Minute15fec})
    minute15.EntityData.Children.Append("minute15secytx", types.YChild{"Minute15secytx", &minute15.Minute15secytx})
    minute15.EntityData.Children.Append("minute15otn", types.YChild{"Minute15otn", &minute15.Minute15otn})
    minute15.EntityData.Leafs = types.NewOrderedMap()

    minute15.EntityData.YListKeys = []string {}

    return &(minute15.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics
// Configure optics performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on optics parameters.
    Minute15OpticsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds

    // set optics TCA reporting status.
    Minute15OpticsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
}

func (minute15Optics *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics) GetEntityData() *types.CommonEntityData {
    minute15Optics.EntityData.YFilter = minute15Optics.YFilter
    minute15Optics.EntityData.YangName = "minute15-optics"
    minute15Optics.EntityData.BundleName = "cisco_ios_xr"
    minute15Optics.EntityData.ParentYangName = "minute15"
    minute15Optics.EntityData.SegmentPath = "minute15-optics"
    minute15Optics.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15Optics.EntityData.SegmentPath
    minute15Optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15Optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15Optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15Optics.EntityData.Children = types.NewOrderedMap()
    minute15Optics.EntityData.Children.Append("minute15-optics-thresholds", types.YChild{"Minute15OpticsThresholds", &minute15Optics.Minute15OpticsThresholds})
    minute15Optics.EntityData.Children.Append("minute15-optics-reports", types.YChild{"Minute15OpticsReports", &minute15Optics.Minute15OpticsReports})
    minute15Optics.EntityData.Leafs = types.NewOrderedMap()

    minute15Optics.EntityData.YListKeys = []string {}

    return &(minute15Optics.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds
// Configure threshold on optics parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold.
    Minute15OpticsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
}

func (minute15OpticsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds) GetEntityData() *types.CommonEntityData {
    minute15OpticsThresholds.EntityData.YFilter = minute15OpticsThresholds.YFilter
    minute15OpticsThresholds.EntityData.YangName = "minute15-optics-thresholds"
    minute15OpticsThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsThresholds.EntityData.ParentYangName = "minute15-optics"
    minute15OpticsThresholds.EntityData.SegmentPath = "minute15-optics-thresholds"
    minute15OpticsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15-optics/" + minute15OpticsThresholds.EntityData.SegmentPath
    minute15OpticsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsThresholds.EntityData.Children = types.NewOrderedMap()
    minute15OpticsThresholds.EntityData.Children.Append("minute15-optics-threshold", types.YChild{"Minute15OpticsThreshold", nil})
    for i := range minute15OpticsThresholds.Minute15OpticsThreshold {
        minute15OpticsThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15OpticsThresholds.Minute15OpticsThreshold[i]), types.YChild{"Minute15OpticsThreshold", minute15OpticsThresholds.Minute15OpticsThreshold[i]})
    }
    minute15OpticsThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15OpticsThresholds.EntityData.YListKeys = []string {}

    return &(minute15OpticsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Threshold Type. The type is
    // OpticsThreshold.
    OpticsThreshold interface{}

    // Optics Threshold Value. The type is interface{} with range:
    // -2147483648..2147483647.
    OpticsThresholdValue interface{}

    // Used only for Opt and Opr,To Enter Threshold in dbm use 1. The type is
    // interface{} with range: 0..4294967295. The default value is 0.
    Dbm interface{}
}

func (minute15OpticsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsThresholds_Minute15OpticsThreshold) GetEntityData() *types.CommonEntityData {
    minute15OpticsThreshold.EntityData.YFilter = minute15OpticsThreshold.YFilter
    minute15OpticsThreshold.EntityData.YangName = "minute15-optics-threshold"
    minute15OpticsThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsThreshold.EntityData.ParentYangName = "minute15-optics-thresholds"
    minute15OpticsThreshold.EntityData.SegmentPath = "minute15-optics-threshold" + types.AddKeyToken(minute15OpticsThreshold.OpticsThreshold, "optics-threshold")
    minute15OpticsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15-optics/minute15-optics-thresholds/" + minute15OpticsThreshold.EntityData.SegmentPath
    minute15OpticsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsThreshold.EntityData.Children = types.NewOrderedMap()
    minute15OpticsThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15OpticsThreshold.EntityData.Leafs.Append("optics-threshold", types.YLeaf{"OpticsThreshold", minute15OpticsThreshold.OpticsThreshold})
    minute15OpticsThreshold.EntityData.Leafs.Append("optics-threshold-value", types.YLeaf{"OpticsThresholdValue", minute15OpticsThreshold.OpticsThresholdValue})
    minute15OpticsThreshold.EntityData.Leafs.Append("dbm", types.YLeaf{"Dbm", minute15OpticsThreshold.Dbm})

    minute15OpticsThreshold.EntityData.YListKeys = []string {"OpticsThreshold"}

    return &(minute15OpticsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports
// set optics TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport.
    Minute15OpticsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
}

func (minute15OpticsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports) GetEntityData() *types.CommonEntityData {
    minute15OpticsReports.EntityData.YFilter = minute15OpticsReports.YFilter
    minute15OpticsReports.EntityData.YangName = "minute15-optics-reports"
    minute15OpticsReports.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsReports.EntityData.ParentYangName = "minute15-optics"
    minute15OpticsReports.EntityData.SegmentPath = "minute15-optics-reports"
    minute15OpticsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15-optics/" + minute15OpticsReports.EntityData.SegmentPath
    minute15OpticsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsReports.EntityData.Children = types.NewOrderedMap()
    minute15OpticsReports.EntityData.Children.Append("minute15-optics-report", types.YChild{"Minute15OpticsReport", nil})
    for i := range minute15OpticsReports.Minute15OpticsReport {
        minute15OpticsReports.EntityData.Children.Append(types.GetSegmentPath(minute15OpticsReports.Minute15OpticsReport[i]), types.YChild{"Minute15OpticsReport", minute15OpticsReports.Minute15OpticsReport[i]})
    }
    minute15OpticsReports.EntityData.Leafs = types.NewOrderedMap()

    minute15OpticsReports.EntityData.YListKeys = []string {}

    return &(minute15OpticsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Optics Report Type. The type is OpticsReport.
    OpticsReport interface{}
}

func (minute15OpticsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15Optics_Minute15OpticsReports_Minute15OpticsReport) GetEntityData() *types.CommonEntityData {
    minute15OpticsReport.EntityData.YFilter = minute15OpticsReport.YFilter
    minute15OpticsReport.EntityData.YangName = "minute15-optics-report"
    minute15OpticsReport.EntityData.BundleName = "cisco_ios_xr"
    minute15OpticsReport.EntityData.ParentYangName = "minute15-optics-reports"
    minute15OpticsReport.EntityData.SegmentPath = "minute15-optics-report" + types.AddKeyToken(minute15OpticsReport.OpticsReport, "optics-report")
    minute15OpticsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15-optics/minute15-optics-reports/" + minute15OpticsReport.EntityData.SegmentPath
    minute15OpticsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15OpticsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15OpticsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15OpticsReport.EntityData.Children = types.NewOrderedMap()
    minute15OpticsReport.EntityData.Leafs = types.NewOrderedMap()
    minute15OpticsReport.EntityData.Leafs.Append("optics-report", types.YLeaf{"OpticsReport", minute15OpticsReport.OpticsReport})

    minute15OpticsReport.EntityData.YListKeys = []string {"OpticsReport"}

    return &(minute15OpticsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif
// Configure secy-if performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyif TCA reporting status.
    Minute15secyifReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports

    // Configure threshold on secyif parameters.
    Minute15secyifThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds
}

func (minute15secyif *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif) GetEntityData() *types.CommonEntityData {
    minute15secyif.EntityData.YFilter = minute15secyif.YFilter
    minute15secyif.EntityData.YangName = "minute15secyif"
    minute15secyif.EntityData.BundleName = "cisco_ios_xr"
    minute15secyif.EntityData.ParentYangName = "minute15"
    minute15secyif.EntityData.SegmentPath = "minute15secyif"
    minute15secyif.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15secyif.EntityData.SegmentPath
    minute15secyif.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyif.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyif.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyif.EntityData.Children = types.NewOrderedMap()
    minute15secyif.EntityData.Children.Append("minute15secyif-reports", types.YChild{"Minute15secyifReports", &minute15secyif.Minute15secyifReports})
    minute15secyif.EntityData.Children.Append("minute15secyif-thresholds", types.YChild{"Minute15secyifThresholds", &minute15secyif.Minute15secyifThresholds})
    minute15secyif.EntityData.Leafs = types.NewOrderedMap()

    minute15secyif.EntityData.YListKeys = []string {}

    return &(minute15secyif.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports
// set secyif TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports_Minute15secyifReport.
    Minute15secyifReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports_Minute15secyifReport
}

func (minute15secyifReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports) GetEntityData() *types.CommonEntityData {
    minute15secyifReports.EntityData.YFilter = minute15secyifReports.YFilter
    minute15secyifReports.EntityData.YangName = "minute15secyif-reports"
    minute15secyifReports.EntityData.BundleName = "cisco_ios_xr"
    minute15secyifReports.EntityData.ParentYangName = "minute15secyif"
    minute15secyifReports.EntityData.SegmentPath = "minute15secyif-reports"
    minute15secyifReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyif/" + minute15secyifReports.EntityData.SegmentPath
    minute15secyifReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyifReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyifReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyifReports.EntityData.Children = types.NewOrderedMap()
    minute15secyifReports.EntityData.Children.Append("minute15secyif-report", types.YChild{"Minute15secyifReport", nil})
    for i := range minute15secyifReports.Minute15secyifReport {
        minute15secyifReports.EntityData.Children.Append(types.GetSegmentPath(minute15secyifReports.Minute15secyifReport[i]), types.YChild{"Minute15secyifReport", minute15secyifReports.Minute15secyifReport[i]})
    }
    minute15secyifReports.EntityData.Leafs = types.NewOrderedMap()

    minute15secyifReports.EntityData.YListKeys = []string {}

    return &(minute15secyifReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports_Minute15secyifReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports_Minute15secyifReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Report Type. The type is SecyifReport.
    SecyifReport interface{}

    // Enabled Secyif Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15secyifReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifReports_Minute15secyifReport) GetEntityData() *types.CommonEntityData {
    minute15secyifReport.EntityData.YFilter = minute15secyifReport.YFilter
    minute15secyifReport.EntityData.YangName = "minute15secyif-report"
    minute15secyifReport.EntityData.BundleName = "cisco_ios_xr"
    minute15secyifReport.EntityData.ParentYangName = "minute15secyif-reports"
    minute15secyifReport.EntityData.SegmentPath = "minute15secyif-report" + types.AddKeyToken(minute15secyifReport.SecyifReport, "secyif-report")
    minute15secyifReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyif/minute15secyif-reports/" + minute15secyifReport.EntityData.SegmentPath
    minute15secyifReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyifReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyifReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyifReport.EntityData.Children = types.NewOrderedMap()
    minute15secyifReport.EntityData.Leafs = types.NewOrderedMap()
    minute15secyifReport.EntityData.Leafs.Append("secyif-report", types.YLeaf{"SecyifReport", minute15secyifReport.SecyifReport})
    minute15secyifReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15secyifReport.Enable})

    minute15secyifReport.EntityData.YListKeys = []string {"SecyifReport"}

    return &(minute15secyifReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds
// Configure threshold on secyif parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds_Minute15secyifThreshold.
    Minute15secyifThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds_Minute15secyifThreshold
}

func (minute15secyifThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds) GetEntityData() *types.CommonEntityData {
    minute15secyifThresholds.EntityData.YFilter = minute15secyifThresholds.YFilter
    minute15secyifThresholds.EntityData.YangName = "minute15secyif-thresholds"
    minute15secyifThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15secyifThresholds.EntityData.ParentYangName = "minute15secyif"
    minute15secyifThresholds.EntityData.SegmentPath = "minute15secyif-thresholds"
    minute15secyifThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyif/" + minute15secyifThresholds.EntityData.SegmentPath
    minute15secyifThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyifThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyifThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyifThresholds.EntityData.Children = types.NewOrderedMap()
    minute15secyifThresholds.EntityData.Children.Append("minute15secyif-threshold", types.YChild{"Minute15secyifThreshold", nil})
    for i := range minute15secyifThresholds.Minute15secyifThreshold {
        minute15secyifThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15secyifThresholds.Minute15secyifThreshold[i]), types.YChild{"Minute15secyifThreshold", minute15secyifThresholds.Minute15secyifThreshold[i]})
    }
    minute15secyifThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15secyifThresholds.EntityData.YListKeys = []string {}

    return &(minute15secyifThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds_Minute15secyifThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds_Minute15secyifThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyif Threshold Type. The type is
    // SecyifThreshold.
    SecyifThreshold interface{}

    // Secyif Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyifThresholdValue interface{}
}

func (minute15secyifThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyif_Minute15secyifThresholds_Minute15secyifThreshold) GetEntityData() *types.CommonEntityData {
    minute15secyifThreshold.EntityData.YFilter = minute15secyifThreshold.YFilter
    minute15secyifThreshold.EntityData.YangName = "minute15secyif-threshold"
    minute15secyifThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15secyifThreshold.EntityData.ParentYangName = "minute15secyif-thresholds"
    minute15secyifThreshold.EntityData.SegmentPath = "minute15secyif-threshold" + types.AddKeyToken(minute15secyifThreshold.SecyifThreshold, "secyif-threshold")
    minute15secyifThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyif/minute15secyif-thresholds/" + minute15secyifThreshold.EntityData.SegmentPath
    minute15secyifThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyifThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyifThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyifThreshold.EntityData.Children = types.NewOrderedMap()
    minute15secyifThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15secyifThreshold.EntityData.Leafs.Append("secyif-threshold", types.YLeaf{"SecyifThreshold", minute15secyifThreshold.SecyifThreshold})
    minute15secyifThreshold.EntityData.Leafs.Append("secyif-threshold-value", types.YLeaf{"SecyifThresholdValue", minute15secyifThreshold.SecyifThresholdValue})

    minute15secyifThreshold.EntityData.YListKeys = []string {"SecyifThreshold"}

    return &(minute15secyifThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx
// Configure secy-rx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secyrx TCA reporting status.
    Minute15secyrxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports

    // Configure threshold on secyrx parameters.
    Minute15secyrxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds
}

func (minute15secyrx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx) GetEntityData() *types.CommonEntityData {
    minute15secyrx.EntityData.YFilter = minute15secyrx.YFilter
    minute15secyrx.EntityData.YangName = "minute15secyrx"
    minute15secyrx.EntityData.BundleName = "cisco_ios_xr"
    minute15secyrx.EntityData.ParentYangName = "minute15"
    minute15secyrx.EntityData.SegmentPath = "minute15secyrx"
    minute15secyrx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15secyrx.EntityData.SegmentPath
    minute15secyrx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyrx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyrx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyrx.EntityData.Children = types.NewOrderedMap()
    minute15secyrx.EntityData.Children.Append("minute15secyrx-reports", types.YChild{"Minute15secyrxReports", &minute15secyrx.Minute15secyrxReports})
    minute15secyrx.EntityData.Children.Append("minute15secyrx-thresholds", types.YChild{"Minute15secyrxThresholds", &minute15secyrx.Minute15secyrxThresholds})
    minute15secyrx.EntityData.Leafs = types.NewOrderedMap()

    minute15secyrx.EntityData.YListKeys = []string {}

    return &(minute15secyrx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports
// set secyrx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports_Minute15secyrxReport.
    Minute15secyrxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports_Minute15secyrxReport
}

func (minute15secyrxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports) GetEntityData() *types.CommonEntityData {
    minute15secyrxReports.EntityData.YFilter = minute15secyrxReports.YFilter
    minute15secyrxReports.EntityData.YangName = "minute15secyrx-reports"
    minute15secyrxReports.EntityData.BundleName = "cisco_ios_xr"
    minute15secyrxReports.EntityData.ParentYangName = "minute15secyrx"
    minute15secyrxReports.EntityData.SegmentPath = "minute15secyrx-reports"
    minute15secyrxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyrx/" + minute15secyrxReports.EntityData.SegmentPath
    minute15secyrxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyrxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyrxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyrxReports.EntityData.Children = types.NewOrderedMap()
    minute15secyrxReports.EntityData.Children.Append("minute15secyrx-report", types.YChild{"Minute15secyrxReport", nil})
    for i := range minute15secyrxReports.Minute15secyrxReport {
        minute15secyrxReports.EntityData.Children.Append(types.GetSegmentPath(minute15secyrxReports.Minute15secyrxReport[i]), types.YChild{"Minute15secyrxReport", minute15secyrxReports.Minute15secyrxReport[i]})
    }
    minute15secyrxReports.EntityData.Leafs = types.NewOrderedMap()

    minute15secyrxReports.EntityData.YListKeys = []string {}

    return &(minute15secyrxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports_Minute15secyrxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports_Minute15secyrxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Report Type. The type is SecyrxReport.
    SecyrxReport interface{}

    // Enabled Secyrx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15secyrxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxReports_Minute15secyrxReport) GetEntityData() *types.CommonEntityData {
    minute15secyrxReport.EntityData.YFilter = minute15secyrxReport.YFilter
    minute15secyrxReport.EntityData.YangName = "minute15secyrx-report"
    minute15secyrxReport.EntityData.BundleName = "cisco_ios_xr"
    minute15secyrxReport.EntityData.ParentYangName = "minute15secyrx-reports"
    minute15secyrxReport.EntityData.SegmentPath = "minute15secyrx-report" + types.AddKeyToken(minute15secyrxReport.SecyrxReport, "secyrx-report")
    minute15secyrxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyrx/minute15secyrx-reports/" + minute15secyrxReport.EntityData.SegmentPath
    minute15secyrxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyrxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyrxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyrxReport.EntityData.Children = types.NewOrderedMap()
    minute15secyrxReport.EntityData.Leafs = types.NewOrderedMap()
    minute15secyrxReport.EntityData.Leafs.Append("secyrx-report", types.YLeaf{"SecyrxReport", minute15secyrxReport.SecyrxReport})
    minute15secyrxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15secyrxReport.Enable})

    minute15secyrxReport.EntityData.YListKeys = []string {"SecyrxReport"}

    return &(minute15secyrxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds
// Configure threshold on secyrx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds_Minute15secyrxThreshold.
    Minute15secyrxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds_Minute15secyrxThreshold
}

func (minute15secyrxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds) GetEntityData() *types.CommonEntityData {
    minute15secyrxThresholds.EntityData.YFilter = minute15secyrxThresholds.YFilter
    minute15secyrxThresholds.EntityData.YangName = "minute15secyrx-thresholds"
    minute15secyrxThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15secyrxThresholds.EntityData.ParentYangName = "minute15secyrx"
    minute15secyrxThresholds.EntityData.SegmentPath = "minute15secyrx-thresholds"
    minute15secyrxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyrx/" + minute15secyrxThresholds.EntityData.SegmentPath
    minute15secyrxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyrxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyrxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyrxThresholds.EntityData.Children = types.NewOrderedMap()
    minute15secyrxThresholds.EntityData.Children.Append("minute15secyrx-threshold", types.YChild{"Minute15secyrxThreshold", nil})
    for i := range minute15secyrxThresholds.Minute15secyrxThreshold {
        minute15secyrxThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15secyrxThresholds.Minute15secyrxThreshold[i]), types.YChild{"Minute15secyrxThreshold", minute15secyrxThresholds.Minute15secyrxThreshold[i]})
    }
    minute15secyrxThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15secyrxThresholds.EntityData.YListKeys = []string {}

    return &(minute15secyrxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds_Minute15secyrxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds_Minute15secyrxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secyrx Threshold Type. The type is
    // SecyrxThreshold.
    SecyrxThreshold interface{}

    // Secyrx Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecyrxThresholdValue interface{}
}

func (minute15secyrxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secyrx_Minute15secyrxThresholds_Minute15secyrxThreshold) GetEntityData() *types.CommonEntityData {
    minute15secyrxThreshold.EntityData.YFilter = minute15secyrxThreshold.YFilter
    minute15secyrxThreshold.EntityData.YangName = "minute15secyrx-threshold"
    minute15secyrxThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15secyrxThreshold.EntityData.ParentYangName = "minute15secyrx-thresholds"
    minute15secyrxThreshold.EntityData.SegmentPath = "minute15secyrx-threshold" + types.AddKeyToken(minute15secyrxThreshold.SecyrxThreshold, "secyrx-threshold")
    minute15secyrxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secyrx/minute15secyrx-thresholds/" + minute15secyrxThreshold.EntityData.SegmentPath
    minute15secyrxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secyrxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secyrxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secyrxThreshold.EntityData.Children = types.NewOrderedMap()
    minute15secyrxThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold", types.YLeaf{"SecyrxThreshold", minute15secyrxThreshold.SecyrxThreshold})
    minute15secyrxThreshold.EntityData.Leafs.Append("secyrx-threshold-value", types.YLeaf{"SecyrxThresholdValue", minute15secyrxThreshold.SecyrxThresholdValue})

    minute15secyrxThreshold.EntityData.YListKeys = []string {"SecyrxThreshold"}

    return &(minute15secyrxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs
// Configure pcs performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set pcs TCA reporting status.
    Minute15pcsReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports

    // Configure pcs threshold.
    Minute15pcsThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds
}

func (minute15pcs *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs) GetEntityData() *types.CommonEntityData {
    minute15pcs.EntityData.YFilter = minute15pcs.YFilter
    minute15pcs.EntityData.YangName = "minute15pcs"
    minute15pcs.EntityData.BundleName = "cisco_ios_xr"
    minute15pcs.EntityData.ParentYangName = "minute15"
    minute15pcs.EntityData.SegmentPath = "minute15pcs"
    minute15pcs.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15pcs.EntityData.SegmentPath
    minute15pcs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15pcs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15pcs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15pcs.EntityData.Children = types.NewOrderedMap()
    minute15pcs.EntityData.Children.Append("minute15pcs-reports", types.YChild{"Minute15pcsReports", &minute15pcs.Minute15pcsReports})
    minute15pcs.EntityData.Children.Append("minute15pcs-thresholds", types.YChild{"Minute15pcsThresholds", &minute15pcs.Minute15pcsThresholds})
    minute15pcs.EntityData.Leafs = types.NewOrderedMap()

    minute15pcs.EntityData.YListKeys = []string {}

    return &(minute15pcs.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports
// set pcs TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports_Minute15pcsReport.
    Minute15pcsReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports_Minute15pcsReport
}

func (minute15pcsReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports) GetEntityData() *types.CommonEntityData {
    minute15pcsReports.EntityData.YFilter = minute15pcsReports.YFilter
    minute15pcsReports.EntityData.YangName = "minute15pcs-reports"
    minute15pcsReports.EntityData.BundleName = "cisco_ios_xr"
    minute15pcsReports.EntityData.ParentYangName = "minute15pcs"
    minute15pcsReports.EntityData.SegmentPath = "minute15pcs-reports"
    minute15pcsReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15pcs/" + minute15pcsReports.EntityData.SegmentPath
    minute15pcsReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15pcsReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15pcsReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15pcsReports.EntityData.Children = types.NewOrderedMap()
    minute15pcsReports.EntityData.Children.Append("minute15pcs-report", types.YChild{"Minute15pcsReport", nil})
    for i := range minute15pcsReports.Minute15pcsReport {
        minute15pcsReports.EntityData.Children.Append(types.GetSegmentPath(minute15pcsReports.Minute15pcsReport[i]), types.YChild{"Minute15pcsReport", minute15pcsReports.Minute15pcsReport[i]})
    }
    minute15pcsReports.EntityData.Leafs = types.NewOrderedMap()

    minute15pcsReports.EntityData.YListKeys = []string {}

    return &(minute15pcsReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports_Minute15pcsReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports_Minute15pcsReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Report Type. The type is PcsReport.
    PcsReport interface{}

    // PCS Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15pcsReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsReports_Minute15pcsReport) GetEntityData() *types.CommonEntityData {
    minute15pcsReport.EntityData.YFilter = minute15pcsReport.YFilter
    minute15pcsReport.EntityData.YangName = "minute15pcs-report"
    minute15pcsReport.EntityData.BundleName = "cisco_ios_xr"
    minute15pcsReport.EntityData.ParentYangName = "minute15pcs-reports"
    minute15pcsReport.EntityData.SegmentPath = "minute15pcs-report" + types.AddKeyToken(minute15pcsReport.PcsReport, "pcs-report")
    minute15pcsReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15pcs/minute15pcs-reports/" + minute15pcsReport.EntityData.SegmentPath
    minute15pcsReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15pcsReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15pcsReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15pcsReport.EntityData.Children = types.NewOrderedMap()
    minute15pcsReport.EntityData.Leafs = types.NewOrderedMap()
    minute15pcsReport.EntityData.Leafs.Append("pcs-report", types.YLeaf{"PcsReport", minute15pcsReport.PcsReport})
    minute15pcsReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15pcsReport.Enable})

    minute15pcsReport.EntityData.YListKeys = []string {"PcsReport"}

    return &(minute15pcsReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds
// Configure pcs threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds_Minute15pcsThreshold.
    Minute15pcsThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds_Minute15pcsThreshold
}

func (minute15pcsThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds) GetEntityData() *types.CommonEntityData {
    minute15pcsThresholds.EntityData.YFilter = minute15pcsThresholds.YFilter
    minute15pcsThresholds.EntityData.YangName = "minute15pcs-thresholds"
    minute15pcsThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15pcsThresholds.EntityData.ParentYangName = "minute15pcs"
    minute15pcsThresholds.EntityData.SegmentPath = "minute15pcs-thresholds"
    minute15pcsThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15pcs/" + minute15pcsThresholds.EntityData.SegmentPath
    minute15pcsThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15pcsThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15pcsThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15pcsThresholds.EntityData.Children = types.NewOrderedMap()
    minute15pcsThresholds.EntityData.Children.Append("minute15pcs-threshold", types.YChild{"Minute15pcsThreshold", nil})
    for i := range minute15pcsThresholds.Minute15pcsThreshold {
        minute15pcsThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15pcsThresholds.Minute15pcsThreshold[i]), types.YChild{"Minute15pcsThreshold", minute15pcsThresholds.Minute15pcsThreshold[i]})
    }
    minute15pcsThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15pcsThresholds.EntityData.YListKeys = []string {}

    return &(minute15pcsThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds_Minute15pcsThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds_Minute15pcsThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Pcs Threshold Type. The type is PcsThreshold.
    PcsThreshold interface{}

    // Pcs Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    PcsThresholdValue interface{}
}

func (minute15pcsThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15pcs_Minute15pcsThresholds_Minute15pcsThreshold) GetEntityData() *types.CommonEntityData {
    minute15pcsThreshold.EntityData.YFilter = minute15pcsThreshold.YFilter
    minute15pcsThreshold.EntityData.YangName = "minute15pcs-threshold"
    minute15pcsThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15pcsThreshold.EntityData.ParentYangName = "minute15pcs-thresholds"
    minute15pcsThreshold.EntityData.SegmentPath = "minute15pcs-threshold" + types.AddKeyToken(minute15pcsThreshold.PcsThreshold, "pcs-threshold")
    minute15pcsThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15pcs/minute15pcs-thresholds/" + minute15pcsThreshold.EntityData.SegmentPath
    minute15pcsThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15pcsThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15pcsThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15pcsThreshold.EntityData.Children = types.NewOrderedMap()
    minute15pcsThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15pcsThreshold.EntityData.Leafs.Append("pcs-threshold", types.YLeaf{"PcsThreshold", minute15pcsThreshold.PcsThreshold})
    minute15pcsThreshold.EntityData.Leafs.Append("pcs-threshold-value", types.YLeaf{"PcsThresholdValue", minute15pcsThreshold.PcsThresholdValue})

    minute15pcsThreshold.EntityData.YListKeys = []string {"PcsThreshold"}

    return &(minute15pcsThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec
// Configure fec g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure fec threshold.
    Minute15fecThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds

    // set fec TCA reporting status.
    Minute15fecReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports
}

func (minute15fec *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec) GetEntityData() *types.CommonEntityData {
    minute15fec.EntityData.YFilter = minute15fec.YFilter
    minute15fec.EntityData.YangName = "minute15fec"
    minute15fec.EntityData.BundleName = "cisco_ios_xr"
    minute15fec.EntityData.ParentYangName = "minute15"
    minute15fec.EntityData.SegmentPath = "minute15fec"
    minute15fec.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15fec.EntityData.SegmentPath
    minute15fec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15fec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15fec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15fec.EntityData.Children = types.NewOrderedMap()
    minute15fec.EntityData.Children.Append("minute15fec-thresholds", types.YChild{"Minute15fecThresholds", &minute15fec.Minute15fecThresholds})
    minute15fec.EntityData.Children.Append("minute15fec-reports", types.YChild{"Minute15fecReports", &minute15fec.Minute15fecReports})
    minute15fec.EntityData.Leafs = types.NewOrderedMap()

    minute15fec.EntityData.YListKeys = []string {}

    return &(minute15fec.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds
// Configure fec threshold
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds_Minute15fecThreshold.
    Minute15fecThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds_Minute15fecThreshold
}

func (minute15fecThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds) GetEntityData() *types.CommonEntityData {
    minute15fecThresholds.EntityData.YFilter = minute15fecThresholds.YFilter
    minute15fecThresholds.EntityData.YangName = "minute15fec-thresholds"
    minute15fecThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15fecThresholds.EntityData.ParentYangName = "minute15fec"
    minute15fecThresholds.EntityData.SegmentPath = "minute15fec-thresholds"
    minute15fecThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15fec/" + minute15fecThresholds.EntityData.SegmentPath
    minute15fecThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15fecThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15fecThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15fecThresholds.EntityData.Children = types.NewOrderedMap()
    minute15fecThresholds.EntityData.Children.Append("minute15fec-threshold", types.YChild{"Minute15fecThreshold", nil})
    for i := range minute15fecThresholds.Minute15fecThreshold {
        minute15fecThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15fecThresholds.Minute15fecThreshold[i]), types.YChild{"Minute15fecThreshold", minute15fecThresholds.Minute15fecThreshold[i]})
    }
    minute15fecThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15fecThresholds.EntityData.YListKeys = []string {}

    return &(minute15fecThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds_Minute15fecThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds_Minute15fecThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Threshold Type. The type is FecThreshold.
    FecThreshold interface{}

    // Fec Threshold Value. The type is string with length: 1..20. This attribute
    // is mandatory.
    FecThresholdValue interface{}
}

func (minute15fecThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecThresholds_Minute15fecThreshold) GetEntityData() *types.CommonEntityData {
    minute15fecThreshold.EntityData.YFilter = minute15fecThreshold.YFilter
    minute15fecThreshold.EntityData.YangName = "minute15fec-threshold"
    minute15fecThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15fecThreshold.EntityData.ParentYangName = "minute15fec-thresholds"
    minute15fecThreshold.EntityData.SegmentPath = "minute15fec-threshold" + types.AddKeyToken(minute15fecThreshold.FecThreshold, "fec-threshold")
    minute15fecThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15fec/minute15fec-thresholds/" + minute15fecThreshold.EntityData.SegmentPath
    minute15fecThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15fecThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15fecThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15fecThreshold.EntityData.Children = types.NewOrderedMap()
    minute15fecThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15fecThreshold.EntityData.Leafs.Append("fec-threshold", types.YLeaf{"FecThreshold", minute15fecThreshold.FecThreshold})
    minute15fecThreshold.EntityData.Leafs.Append("fec-threshold-value", types.YLeaf{"FecThresholdValue", minute15fecThreshold.FecThresholdValue})

    minute15fecThreshold.EntityData.YListKeys = []string {"FecThreshold"}

    return &(minute15fecThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports
// set fec TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports_Minute15fecReport.
    Minute15fecReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports_Minute15fecReport
}

func (minute15fecReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports) GetEntityData() *types.CommonEntityData {
    minute15fecReports.EntityData.YFilter = minute15fecReports.YFilter
    minute15fecReports.EntityData.YangName = "minute15fec-reports"
    minute15fecReports.EntityData.BundleName = "cisco_ios_xr"
    minute15fecReports.EntityData.ParentYangName = "minute15fec"
    minute15fecReports.EntityData.SegmentPath = "minute15fec-reports"
    minute15fecReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15fec/" + minute15fecReports.EntityData.SegmentPath
    minute15fecReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15fecReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15fecReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15fecReports.EntityData.Children = types.NewOrderedMap()
    minute15fecReports.EntityData.Children.Append("minute15fec-report", types.YChild{"Minute15fecReport", nil})
    for i := range minute15fecReports.Minute15fecReport {
        minute15fecReports.EntityData.Children.Append(types.GetSegmentPath(minute15fecReports.Minute15fecReport[i]), types.YChild{"Minute15fecReport", minute15fecReports.Minute15fecReport[i]})
    }
    minute15fecReports.EntityData.Leafs = types.NewOrderedMap()

    minute15fecReports.EntityData.YListKeys = []string {}

    return &(minute15fecReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports_Minute15fecReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports_Minute15fecReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fec Report Type. The type is FecReport.
    FecReport interface{}

    // Fec Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15fecReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15fec_Minute15fecReports_Minute15fecReport) GetEntityData() *types.CommonEntityData {
    minute15fecReport.EntityData.YFilter = minute15fecReport.YFilter
    minute15fecReport.EntityData.YangName = "minute15fec-report"
    minute15fecReport.EntityData.BundleName = "cisco_ios_xr"
    minute15fecReport.EntityData.ParentYangName = "minute15fec-reports"
    minute15fecReport.EntityData.SegmentPath = "minute15fec-report" + types.AddKeyToken(minute15fecReport.FecReport, "fec-report")
    minute15fecReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15fec/minute15fec-reports/" + minute15fecReport.EntityData.SegmentPath
    minute15fecReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15fecReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15fecReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15fecReport.EntityData.Children = types.NewOrderedMap()
    minute15fecReport.EntityData.Leafs = types.NewOrderedMap()
    minute15fecReport.EntityData.Leafs.Append("fec-report", types.YLeaf{"FecReport", minute15fecReport.FecReport})
    minute15fecReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15fecReport.Enable})

    minute15fecReport.EntityData.YListKeys = []string {"FecReport"}

    return &(minute15fecReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx
// Configure secy-tx performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set secytx TCA reporting status.
    Minute15secytxReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports

    // Configure threshold on secytx parameters.
    Minute15secytxThresholds InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds
}

func (minute15secytx *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx) GetEntityData() *types.CommonEntityData {
    minute15secytx.EntityData.YFilter = minute15secytx.YFilter
    minute15secytx.EntityData.YangName = "minute15secytx"
    minute15secytx.EntityData.BundleName = "cisco_ios_xr"
    minute15secytx.EntityData.ParentYangName = "minute15"
    minute15secytx.EntityData.SegmentPath = "minute15secytx"
    minute15secytx.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15secytx.EntityData.SegmentPath
    minute15secytx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secytx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secytx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secytx.EntityData.Children = types.NewOrderedMap()
    minute15secytx.EntityData.Children.Append("minute15secytx-reports", types.YChild{"Minute15secytxReports", &minute15secytx.Minute15secytxReports})
    minute15secytx.EntityData.Children.Append("minute15secytx-thresholds", types.YChild{"Minute15secytxThresholds", &minute15secytx.Minute15secytxThresholds})
    minute15secytx.EntityData.Leafs = types.NewOrderedMap()

    minute15secytx.EntityData.YListKeys = []string {}

    return &(minute15secytx.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports
// set secytx TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports_Minute15secytxReport.
    Minute15secytxReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports_Minute15secytxReport
}

func (minute15secytxReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports) GetEntityData() *types.CommonEntityData {
    minute15secytxReports.EntityData.YFilter = minute15secytxReports.YFilter
    minute15secytxReports.EntityData.YangName = "minute15secytx-reports"
    minute15secytxReports.EntityData.BundleName = "cisco_ios_xr"
    minute15secytxReports.EntityData.ParentYangName = "minute15secytx"
    minute15secytxReports.EntityData.SegmentPath = "minute15secytx-reports"
    minute15secytxReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secytx/" + minute15secytxReports.EntityData.SegmentPath
    minute15secytxReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secytxReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secytxReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secytxReports.EntityData.Children = types.NewOrderedMap()
    minute15secytxReports.EntityData.Children.Append("minute15secytx-report", types.YChild{"Minute15secytxReport", nil})
    for i := range minute15secytxReports.Minute15secytxReport {
        minute15secytxReports.EntityData.Children.Append(types.GetSegmentPath(minute15secytxReports.Minute15secytxReport[i]), types.YChild{"Minute15secytxReport", minute15secytxReports.Minute15secytxReport[i]})
    }
    minute15secytxReports.EntityData.Leafs = types.NewOrderedMap()

    minute15secytxReports.EntityData.YListKeys = []string {}

    return &(minute15secytxReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports_Minute15secytxReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports_Minute15secytxReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Report Type. The type is SecytxReport.
    SecytxReport interface{}

    // Enabled Secytx Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15secytxReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxReports_Minute15secytxReport) GetEntityData() *types.CommonEntityData {
    minute15secytxReport.EntityData.YFilter = minute15secytxReport.YFilter
    minute15secytxReport.EntityData.YangName = "minute15secytx-report"
    minute15secytxReport.EntityData.BundleName = "cisco_ios_xr"
    minute15secytxReport.EntityData.ParentYangName = "minute15secytx-reports"
    minute15secytxReport.EntityData.SegmentPath = "minute15secytx-report" + types.AddKeyToken(minute15secytxReport.SecytxReport, "secytx-report")
    minute15secytxReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secytx/minute15secytx-reports/" + minute15secytxReport.EntityData.SegmentPath
    minute15secytxReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secytxReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secytxReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secytxReport.EntityData.Children = types.NewOrderedMap()
    minute15secytxReport.EntityData.Leafs = types.NewOrderedMap()
    minute15secytxReport.EntityData.Leafs.Append("secytx-report", types.YLeaf{"SecytxReport", minute15secytxReport.SecytxReport})
    minute15secytxReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15secytxReport.Enable})

    minute15secytxReport.EntityData.YListKeys = []string {"SecytxReport"}

    return &(minute15secytxReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds
// Configure threshold on secytx parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds_Minute15secytxThreshold.
    Minute15secytxThreshold []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds_Minute15secytxThreshold
}

func (minute15secytxThresholds *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds) GetEntityData() *types.CommonEntityData {
    minute15secytxThresholds.EntityData.YFilter = minute15secytxThresholds.YFilter
    minute15secytxThresholds.EntityData.YangName = "minute15secytx-thresholds"
    minute15secytxThresholds.EntityData.BundleName = "cisco_ios_xr"
    minute15secytxThresholds.EntityData.ParentYangName = "minute15secytx"
    minute15secytxThresholds.EntityData.SegmentPath = "minute15secytx-thresholds"
    minute15secytxThresholds.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secytx/" + minute15secytxThresholds.EntityData.SegmentPath
    minute15secytxThresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secytxThresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secytxThresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secytxThresholds.EntityData.Children = types.NewOrderedMap()
    minute15secytxThresholds.EntityData.Children.Append("minute15secytx-threshold", types.YChild{"Minute15secytxThreshold", nil})
    for i := range minute15secytxThresholds.Minute15secytxThreshold {
        minute15secytxThresholds.EntityData.Children.Append(types.GetSegmentPath(minute15secytxThresholds.Minute15secytxThreshold[i]), types.YChild{"Minute15secytxThreshold", minute15secytxThresholds.Minute15secytxThreshold[i]})
    }
    minute15secytxThresholds.EntityData.Leafs = types.NewOrderedMap()

    minute15secytxThresholds.EntityData.YListKeys = []string {}

    return &(minute15secytxThresholds.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds_Minute15secytxThreshold
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds_Minute15secytxThreshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Secytx Threshold Type. The type is
    // SecytxThreshold.
    SecytxThreshold interface{}

    // Secytx Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    SecytxThresholdValue interface{}
}

func (minute15secytxThreshold *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15secytx_Minute15secytxThresholds_Minute15secytxThreshold) GetEntityData() *types.CommonEntityData {
    minute15secytxThreshold.EntityData.YFilter = minute15secytxThreshold.YFilter
    minute15secytxThreshold.EntityData.YangName = "minute15secytx-threshold"
    minute15secytxThreshold.EntityData.BundleName = "cisco_ios_xr"
    minute15secytxThreshold.EntityData.ParentYangName = "minute15secytx-thresholds"
    minute15secytxThreshold.EntityData.SegmentPath = "minute15secytx-threshold" + types.AddKeyToken(minute15secytxThreshold.SecytxThreshold, "secytx-threshold")
    minute15secytxThreshold.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15secytx/minute15secytx-thresholds/" + minute15secytxThreshold.EntityData.SegmentPath
    minute15secytxThreshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15secytxThreshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15secytxThreshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15secytxThreshold.EntityData.Children = types.NewOrderedMap()
    minute15secytxThreshold.EntityData.Leafs = types.NewOrderedMap()
    minute15secytxThreshold.EntityData.Leafs.Append("secytx-threshold", types.YLeaf{"SecytxThreshold", minute15secytxThreshold.SecytxThreshold})
    minute15secytxThreshold.EntityData.Leafs.Append("secytx-threshold-value", types.YLeaf{"SecytxThresholdValue", minute15secytxThreshold.SecytxThresholdValue})

    minute15secytxThreshold.EntityData.YListKeys = []string {"SecytxThreshold"}

    return &(minute15secytxThreshold.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn
// configure otn g709 performance monitoring
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure threshold on otn parameters.
    Min15OtnThreshes InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes

    // set otn TCA reporting status.
    Minute15otnReports InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports
}

func (minute15otn *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn) GetEntityData() *types.CommonEntityData {
    minute15otn.EntityData.YFilter = minute15otn.YFilter
    minute15otn.EntityData.YangName = "minute15otn"
    minute15otn.EntityData.BundleName = "cisco_ios_xr"
    minute15otn.EntityData.ParentYangName = "minute15"
    minute15otn.EntityData.SegmentPath = "minute15otn"
    minute15otn.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/" + minute15otn.EntityData.SegmentPath
    minute15otn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otn.EntityData.Children = types.NewOrderedMap()
    minute15otn.EntityData.Children.Append("min15-otn-threshes", types.YChild{"Min15OtnThreshes", &minute15otn.Min15OtnThreshes})
    minute15otn.EntityData.Children.Append("minute15otn-reports", types.YChild{"Minute15otnReports", &minute15otn.Minute15otnReports})
    minute15otn.EntityData.Leafs = types.NewOrderedMap()

    minute15otn.EntityData.YListKeys = []string {}

    return &(minute15otn.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes
// Configure threshold on otn parameters
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes_Min15OtnThresh.
    Min15OtnThresh []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes_Min15OtnThresh
}

func (min15OtnThreshes *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes) GetEntityData() *types.CommonEntityData {
    min15OtnThreshes.EntityData.YFilter = min15OtnThreshes.YFilter
    min15OtnThreshes.EntityData.YangName = "min15-otn-threshes"
    min15OtnThreshes.EntityData.BundleName = "cisco_ios_xr"
    min15OtnThreshes.EntityData.ParentYangName = "minute15otn"
    min15OtnThreshes.EntityData.SegmentPath = "min15-otn-threshes"
    min15OtnThreshes.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15otn/" + min15OtnThreshes.EntityData.SegmentPath
    min15OtnThreshes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnThreshes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnThreshes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnThreshes.EntityData.Children = types.NewOrderedMap()
    min15OtnThreshes.EntityData.Children.Append("min15-otn-thresh", types.YChild{"Min15OtnThresh", nil})
    for i := range min15OtnThreshes.Min15OtnThresh {
        min15OtnThreshes.EntityData.Children.Append(types.GetSegmentPath(min15OtnThreshes.Min15OtnThresh[i]), types.YChild{"Min15OtnThresh", min15OtnThreshes.Min15OtnThresh[i]})
    }
    min15OtnThreshes.EntityData.Leafs = types.NewOrderedMap()

    min15OtnThreshes.EntityData.YListKeys = []string {}

    return &(min15OtnThreshes.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes_Min15OtnThresh
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes_Min15OtnThresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Threshold Type. The type is OtnThreshold.
    OtnThreshold interface{}

    // Otn Threshold Value. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    OtnThresholdValue interface{}
}

func (min15OtnThresh *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Min15OtnThreshes_Min15OtnThresh) GetEntityData() *types.CommonEntityData {
    min15OtnThresh.EntityData.YFilter = min15OtnThresh.YFilter
    min15OtnThresh.EntityData.YangName = "min15-otn-thresh"
    min15OtnThresh.EntityData.BundleName = "cisco_ios_xr"
    min15OtnThresh.EntityData.ParentYangName = "min15-otn-threshes"
    min15OtnThresh.EntityData.SegmentPath = "min15-otn-thresh" + types.AddKeyToken(min15OtnThresh.OtnThreshold, "otn-threshold")
    min15OtnThresh.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15otn/min15-otn-threshes/" + min15OtnThresh.EntityData.SegmentPath
    min15OtnThresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    min15OtnThresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    min15OtnThresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    min15OtnThresh.EntityData.Children = types.NewOrderedMap()
    min15OtnThresh.EntityData.Leafs = types.NewOrderedMap()
    min15OtnThresh.EntityData.Leafs.Append("otn-threshold", types.YLeaf{"OtnThreshold", min15OtnThresh.OtnThreshold})
    min15OtnThresh.EntityData.Leafs.Append("otn-threshold-value", types.YLeaf{"OtnThresholdValue", min15OtnThresh.OtnThresholdValue})

    min15OtnThresh.EntityData.YListKeys = []string {"OtnThreshold"}

    return &(min15OtnThresh.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports
// set otn TCA reporting status
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // none. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports_Minute15otnReport.
    Minute15otnReport []*InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports_Minute15otnReport
}

func (minute15otnReports *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports) GetEntityData() *types.CommonEntityData {
    minute15otnReports.EntityData.YFilter = minute15otnReports.YFilter
    minute15otnReports.EntityData.YangName = "minute15otn-reports"
    minute15otnReports.EntityData.BundleName = "cisco_ios_xr"
    minute15otnReports.EntityData.ParentYangName = "minute15otn"
    minute15otnReports.EntityData.SegmentPath = "minute15otn-reports"
    minute15otnReports.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15otn/" + minute15otnReports.EntityData.SegmentPath
    minute15otnReports.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnReports.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnReports.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnReports.EntityData.Children = types.NewOrderedMap()
    minute15otnReports.EntityData.Children.Append("minute15otn-report", types.YChild{"Minute15otnReport", nil})
    for i := range minute15otnReports.Minute15otnReport {
        minute15otnReports.EntityData.Children.Append(types.GetSegmentPath(minute15otnReports.Minute15otnReport[i]), types.YChild{"Minute15otnReport", minute15otnReports.Minute15otnReport[i]})
    }
    minute15otnReports.EntityData.Leafs = types.NewOrderedMap()

    minute15otnReports.EntityData.YListKeys = []string {}

    return &(minute15otnReports.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports_Minute15otnReport
// none
type InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports_Minute15otnReport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Otn Report Type. The type is OtnReport.
    OtnReport interface{}

    // Otn Report. The type is Report. This attribute is mandatory.
    Enable interface{}
}

func (minute15otnReport *InterfaceConfigurations_InterfaceConfiguration_PerformanceManagement_Minute15_Minute15otn_Minute15otnReports_Minute15otnReport) GetEntityData() *types.CommonEntityData {
    minute15otnReport.EntityData.YFilter = minute15otnReport.YFilter
    minute15otnReport.EntityData.YangName = "minute15otn-report"
    minute15otnReport.EntityData.BundleName = "cisco_ios_xr"
    minute15otnReport.EntityData.ParentYangName = "minute15otn-reports"
    minute15otnReport.EntityData.SegmentPath = "minute15otn-report" + types.AddKeyToken(minute15otnReport.OtnReport, "otn-report")
    minute15otnReport.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-pmengine-cfg:performance-management/minute15/minute15otn/minute15otn-reports/" + minute15otnReport.EntityData.SegmentPath
    minute15otnReport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minute15otnReport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minute15otnReport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minute15otnReport.EntityData.Children = types.NewOrderedMap()
    minute15otnReport.EntityData.Leafs = types.NewOrderedMap()
    minute15otnReport.EntityData.Leafs.Append("otn-report", types.YLeaf{"OtnReport", minute15otnReport.OtnReport})
    minute15otnReport.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", minute15otnReport.Enable})

    minute15otnReport.EntityData.YListKeys = []string {"OtnReport"}

    return &(minute15otnReport.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ciscoIOSXRPppMaCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaCfgPpp.YFilter
    ciscoIOSXRPppMaCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-cfg:ppp"
    ciscoIOSXRPppMaCfgPpp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ciscoIOSXRPppMaCfgPpp.EntityData.SegmentPath
    ciscoIOSXRPppMaCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaCfgPpp.EntityData.Children = types.NewOrderedMap()
    ciscoIOSXRPppMaCfgPpp.EntityData.Leafs = types.NewOrderedMap()

    ciscoIOSXRPppMaCfgPpp.EntityData.YListKeys = []string {}

    return &(ciscoIOSXRPppMaCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP FSM configuration data.
    Fsm InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
}

func (ciscoIOSXRPppMaFsmCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaFsmCfgPpp.YFilter
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ciscoIOSXRPppMaFsmCfgPpp.EntityData.SegmentPath
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Children = types.NewOrderedMap()
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Children.Append("fsm", types.YChild{"Fsm", &ciscoIOSXRPppMaFsmCfgPpp.Fsm})
    ciscoIOSXRPppMaFsmCfgPpp.EntityData.Leafs = types.NewOrderedMap()

    ciscoIOSXRPppMaFsmCfgPpp.EntityData.YListKeys = []string {}

    return &(ciscoIOSXRPppMaFsmCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm
// PPP FSM configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the maximum time to wait for a response during PPP
    // negotiation. The type is interface{} with range: 1..10. The default value
    // is 3.
    RetryTimeout interface{}

    // This specifies the maximum number of Term-Requests. The type is interface{}
    // with range: 2..10. The default value is 2.
    MaxUnacknowledgedTermRequests interface{}

    // This specifies the maximum number of consecutive Conf-Naks. The type is
    // interface{} with range: 2..10. The default value is 5.
    MaxConsecutiveConfNaks interface{}

    // This specifies the maximum number of unacknowledged Conf-Requests. The type
    // is interface{} with range: 4..20. The default value is 10.
    MaxUnacknowledgedConfRequests interface{}
}

func (fsm *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaFsmCfgPpp_Fsm) GetEntityData() *types.CommonEntityData {
    fsm.EntityData.YFilter = fsm.YFilter
    fsm.EntityData.YangName = "fsm"
    fsm.EntityData.BundleName = "cisco_ios_xr"
    fsm.EntityData.ParentYangName = "ppp"
    fsm.EntityData.SegmentPath = "fsm"
    fsm.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp/" + fsm.EntityData.SegmentPath
    fsm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsm.EntityData.Children = types.NewOrderedMap()
    fsm.EntityData.Leafs = types.NewOrderedMap()
    fsm.EntityData.Leafs.Append("retry-timeout", types.YLeaf{"RetryTimeout", fsm.RetryTimeout})
    fsm.EntityData.Leafs.Append("max-unacknowledged-term-requests", types.YLeaf{"MaxUnacknowledgedTermRequests", fsm.MaxUnacknowledgedTermRequests})
    fsm.EntityData.Leafs.Append("max-consecutive-conf-naks", types.YLeaf{"MaxConsecutiveConfNaks", fsm.MaxConsecutiveConfNaks})
    fsm.EntityData.Leafs.Append("max-unacknowledged-conf-requests", types.YLeaf{"MaxUnacknowledgedConfRequests", fsm.MaxUnacknowledgedConfRequests})

    fsm.EntityData.YListKeys = []string {}

    return &(fsm.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP IPCP configuration data.
    Ipcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
}

func (ciscoIOSXRPppMaIpcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaIpcpCfgPpp.YFilter
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ciscoIOSXRPppMaIpcpCfgPpp.EntityData.SegmentPath
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Children = types.NewOrderedMap()
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Children.Append("ipcp", types.YChild{"Ipcp", &ciscoIOSXRPppMaIpcpCfgPpp.Ipcp})
    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.Leafs = types.NewOrderedMap()

    ciscoIOSXRPppMaIpcpCfgPpp.EntityData.YListKeys = []string {}

    return &(ciscoIOSXRPppMaIpcpCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp
// PPP IPCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable Neighbor Route installation. The type is interface{}.
    NeighborRouteDisable interface{}

    // IPCP address parameters.
    PeerAddress InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress

    // IPCP DNS parameters.
    Dns InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
}

func (ipcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp) GetEntityData() *types.CommonEntityData {
    ipcp.EntityData.YFilter = ipcp.YFilter
    ipcp.EntityData.YangName = "ipcp"
    ipcp.EntityData.BundleName = "cisco_ios_xr"
    ipcp.EntityData.ParentYangName = "ppp"
    ipcp.EntityData.SegmentPath = "ipcp"
    ipcp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp/" + ipcp.EntityData.SegmentPath
    ipcp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipcp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipcp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipcp.EntityData.Children = types.NewOrderedMap()
    ipcp.EntityData.Children.Append("peer-address", types.YChild{"PeerAddress", &ipcp.PeerAddress})
    ipcp.EntityData.Children.Append("dns", types.YChild{"Dns", &ipcp.Dns})
    ipcp.EntityData.Leafs = types.NewOrderedMap()
    ipcp.EntityData.Leafs.Append("neighbor-route-disable", types.YLeaf{"NeighborRouteDisable", ipcp.NeighborRouteDisable})

    ipcp.EntityData.YListKeys = []string {}

    return &(ipcp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress
// IPCP address parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify an IP address to assign to peers through IPCP. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Default interface{}
}

func (peerAddress *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_PeerAddress) GetEntityData() *types.CommonEntityData {
    peerAddress.EntityData.YFilter = peerAddress.YFilter
    peerAddress.EntityData.YangName = "peer-address"
    peerAddress.EntityData.BundleName = "cisco_ios_xr"
    peerAddress.EntityData.ParentYangName = "ipcp"
    peerAddress.EntityData.SegmentPath = "peer-address"
    peerAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp/ipcp/" + peerAddress.EntityData.SegmentPath
    peerAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerAddress.EntityData.Children = types.NewOrderedMap()
    peerAddress.EntityData.Leafs = types.NewOrderedMap()
    peerAddress.EntityData.Leafs.Append("default", types.YLeaf{"Default", peerAddress.Default})

    peerAddress.EntityData.YListKeys = []string {}

    return &(peerAddress.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns
// IPCP DNS parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify DNS address(es) to provide.
    DnsAddresses InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
}

func (dns *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns) GetEntityData() *types.CommonEntityData {
    dns.EntityData.YFilter = dns.YFilter
    dns.EntityData.YangName = "dns"
    dns.EntityData.BundleName = "cisco_ios_xr"
    dns.EntityData.ParentYangName = "ipcp"
    dns.EntityData.SegmentPath = "dns"
    dns.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp/ipcp/" + dns.EntityData.SegmentPath
    dns.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dns.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dns.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dns.EntityData.Children = types.NewOrderedMap()
    dns.EntityData.Children.Append("dns-addresses", types.YChild{"DnsAddresses", &dns.DnsAddresses})
    dns.EntityData.Leafs = types.NewOrderedMap()

    dns.EntityData.YListKeys = []string {}

    return &(dns.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses
// Specify DNS address(es) to provide
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary DNS IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Primary interface{}

    // Secondary DNS IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Secondary interface{}
}

func (dnsAddresses *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpCfgPpp_Ipcp_Dns_DnsAddresses) GetEntityData() *types.CommonEntityData {
    dnsAddresses.EntityData.YFilter = dnsAddresses.YFilter
    dnsAddresses.EntityData.YangName = "dns-addresses"
    dnsAddresses.EntityData.BundleName = "cisco_ios_xr"
    dnsAddresses.EntityData.ParentYangName = "dns"
    dnsAddresses.EntityData.SegmentPath = "dns-addresses"
    dnsAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp/ipcp/dns/" + dnsAddresses.EntityData.SegmentPath
    dnsAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dnsAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dnsAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dnsAddresses.EntityData.Children = types.NewOrderedMap()
    dnsAddresses.EntityData.Leafs = types.NewOrderedMap()
    dnsAddresses.EntityData.Leafs.Append("primary", types.YLeaf{"Primary", dnsAddresses.Primary})
    dnsAddresses.EntityData.Leafs.Append("secondary", types.YLeaf{"Secondary", dnsAddresses.Secondary})

    dnsAddresses.EntityData.YListKeys = []string {}

    return &(dnsAddresses.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP IPCPIW configuration data.
    Ipcpiw InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
}

func (ciscoIOSXRPppMaIpcpiwCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaIpcpiwCfgPpp.YFilter
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.SegmentPath
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Children = types.NewOrderedMap()
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Children.Append("ipcpiw", types.YChild{"Ipcpiw", &ciscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw})
    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.Leafs = types.NewOrderedMap()

    ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData.YListKeys = []string {}

    return &(ciscoIOSXRPppMaIpcpiwCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw
// PPP IPCPIW configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify an IP address to publish to peers through IPCPIW. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ProxyAddress interface{}
}

func (ipcpiw *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaIpcpiwCfgPpp_Ipcpiw) GetEntityData() *types.CommonEntityData {
    ipcpiw.EntityData.YFilter = ipcpiw.YFilter
    ipcpiw.EntityData.YangName = "ipcpiw"
    ipcpiw.EntityData.BundleName = "cisco_ios_xr"
    ipcpiw.EntityData.ParentYangName = "ppp"
    ipcpiw.EntityData.SegmentPath = "ipcpiw"
    ipcpiw.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp/" + ipcpiw.EntityData.SegmentPath
    ipcpiw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipcpiw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipcpiw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipcpiw.EntityData.Children = types.NewOrderedMap()
    ipcpiw.EntityData.Leafs = types.NewOrderedMap()
    ipcpiw.EntityData.Leafs.Append("proxy-address", types.YLeaf{"ProxyAddress", ipcpiw.ProxyAddress})

    ipcpiw.EntityData.YListKeys = []string {}

    return &(ipcpiw.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp
// Interface PPP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PPP Multiclass Multilink parameters.
    Mcmp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp

    // PPP LCP configuration data.
    Lcp InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
}

func (ciscoIOSXRPppMaLcpCfgPpp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp) GetEntityData() *types.CommonEntityData {
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.YFilter = ciscoIOSXRPppMaLcpCfgPpp.YFilter
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.YangName = "ppp"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.BundleName = "cisco_ios_xr"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.ParentYangName = "interface-configuration"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ciscoIOSXRPppMaLcpCfgPpp.EntityData.SegmentPath
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children = types.NewOrderedMap()
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children.Append("mcmp", types.YChild{"Mcmp", &ciscoIOSXRPppMaLcpCfgPpp.Mcmp})
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Children.Append("lcp", types.YChild{"Lcp", &ciscoIOSXRPppMaLcpCfgPpp.Lcp})
    ciscoIOSXRPppMaLcpCfgPpp.EntityData.Leafs = types.NewOrderedMap()

    ciscoIOSXRPppMaLcpCfgPpp.EntityData.YListKeys = []string {}

    return &(ciscoIOSXRPppMaLcpCfgPpp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp
// PPP Multiclass Multilink parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies that MCMP is enabled on this interface. The type is
    // interface{}.
    Enable interface{}

    // This specifies the MCMP options for the peer. The type is interface{} with
    // range: 1..16. The default value is 2.
    Remote interface{}

    // This specifies the MCMP options for the local host.
    Local InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
}

func (mcmp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp) GetEntityData() *types.CommonEntityData {
    mcmp.EntityData.YFilter = mcmp.YFilter
    mcmp.EntityData.YangName = "mcmp"
    mcmp.EntityData.BundleName = "cisco_ios_xr"
    mcmp.EntityData.ParentYangName = "ppp"
    mcmp.EntityData.SegmentPath = "mcmp"
    mcmp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/" + mcmp.EntityData.SegmentPath
    mcmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mcmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mcmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mcmp.EntityData.Children = types.NewOrderedMap()
    mcmp.EntityData.Children.Append("local", types.YChild{"Local", &mcmp.Local})
    mcmp.EntityData.Leafs = types.NewOrderedMap()
    mcmp.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", mcmp.Enable})
    mcmp.EntityData.Leafs.Append("remote", types.YLeaf{"Remote", mcmp.Remote})

    mcmp.EntityData.YListKeys = []string {}

    return &(mcmp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local
// This specifies the MCMP options for the local
// host
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Initial #classes. The type is interface{} with range: 1..16. The
    // default value is 2.
    Initial interface{}

    // Local Maximum #classes. The type is interface{} with range: 1..16. The
    // default value is 4.
    Maximum interface{}
}

func (local *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Mcmp_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "mcmp"
    local.EntityData.SegmentPath = "local"
    local.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/mcmp/" + local.EntityData.SegmentPath
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = types.NewOrderedMap()
    local.EntityData.Leafs = types.NewOrderedMap()
    local.EntityData.Leafs.Append("initial", types.YLeaf{"Initial", local.Initial})
    local.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", local.Maximum})

    local.EntityData.YListKeys = []string {}

    return &(local.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp
// PPP LCP configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: 0..4294967295.
    ServiceType interface{}

    // Multilink configuration.
    Multilink InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink

    // Password Authentication Protocol (PAP) configuration data.
    Pap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap

    // Loopback configuration.
    LoopBack InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack

    // Microsoft Challenge Handshake Authentication Protocol (MS-CHAP)
    // configuration data.
    MsChap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap

    // PPP authentication parameters.
    Authentication InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication

    // Challenge Handshake Authentication Protocol (CHAP) configuration data.
    Chap InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
}

func (lcp *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp) GetEntityData() *types.CommonEntityData {
    lcp.EntityData.YFilter = lcp.YFilter
    lcp.EntityData.YangName = "lcp"
    lcp.EntityData.BundleName = "cisco_ios_xr"
    lcp.EntityData.ParentYangName = "ppp"
    lcp.EntityData.SegmentPath = "lcp"
    lcp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/" + lcp.EntityData.SegmentPath
    lcp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lcp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lcp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lcp.EntityData.Children = types.NewOrderedMap()
    lcp.EntityData.Children.Append("multilink", types.YChild{"Multilink", &lcp.Multilink})
    lcp.EntityData.Children.Append("pap", types.YChild{"Pap", &lcp.Pap})
    lcp.EntityData.Children.Append("loop-back", types.YChild{"LoopBack", &lcp.LoopBack})
    lcp.EntityData.Children.Append("ms-chap", types.YChild{"MsChap", &lcp.MsChap})
    lcp.EntityData.Children.Append("authentication", types.YChild{"Authentication", &lcp.Authentication})
    lcp.EntityData.Children.Append("chap", types.YChild{"Chap", &lcp.Chap})
    lcp.EntityData.Leafs = types.NewOrderedMap()
    lcp.EntityData.Leafs.Append("service-type", types.YLeaf{"ServiceType", lcp.ServiceType})

    lcp.EntityData.YListKeys = []string {}

    return &(lcp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink
// Multilink configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minimum criteria for the linestate of a Multilink PPPinterface to be
    // brought up.
    MinimumActive InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
}

func (multilink *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink) GetEntityData() *types.CommonEntityData {
    multilink.EntityData.YFilter = multilink.YFilter
    multilink.EntityData.YangName = "multilink"
    multilink.EntityData.BundleName = "cisco_ios_xr"
    multilink.EntityData.ParentYangName = "lcp"
    multilink.EntityData.SegmentPath = "multilink"
    multilink.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + multilink.EntityData.SegmentPath
    multilink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multilink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multilink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multilink.EntityData.Children = types.NewOrderedMap()
    multilink.EntityData.Children.Append("minimum-active", types.YChild{"MinimumActive", &multilink.MinimumActive})
    multilink.EntityData.Leafs = types.NewOrderedMap()

    multilink.EntityData.YListKeys = []string {}

    return &(multilink.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive
// Minimum criteria for the linestate of a
// Multilink PPPinterface to be brought up
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active links needed to bring up an MP interface. The type is
    // interface{} with range: 1..65535. The default value is 1.
    Links interface{}
}

func (minimumActive *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Multilink_MinimumActive) GetEntityData() *types.CommonEntityData {
    minimumActive.EntityData.YFilter = minimumActive.YFilter
    minimumActive.EntityData.YangName = "minimum-active"
    minimumActive.EntityData.BundleName = "cisco_ios_xr"
    minimumActive.EntityData.ParentYangName = "multilink"
    minimumActive.EntityData.SegmentPath = "minimum-active"
    minimumActive.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/multilink/" + minimumActive.EntityData.SegmentPath
    minimumActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minimumActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minimumActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minimumActive.EntityData.Children = types.NewOrderedMap()
    minimumActive.EntityData.Leafs = types.NewOrderedMap()
    minimumActive.EntityData.Leafs.Append("links", types.YLeaf{"Links", minimumActive.Links})

    minimumActive.EntityData.YListKeys = []string {}

    return &(minimumActive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap
// Password Authentication Protocol (PAP)
// configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to refuse to authenticate using PAP. The type is
    // interface{}.
    Refuse interface{}

    // This specifies the outbound PAP username and password.
    SendUserInfo InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
}

func (pap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap) GetEntityData() *types.CommonEntityData {
    pap.EntityData.YFilter = pap.YFilter
    pap.EntityData.YangName = "pap"
    pap.EntityData.BundleName = "cisco_ios_xr"
    pap.EntityData.ParentYangName = "lcp"
    pap.EntityData.SegmentPath = "pap"
    pap.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + pap.EntityData.SegmentPath
    pap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pap.EntityData.Children = types.NewOrderedMap()
    pap.EntityData.Children.Append("send-user-info", types.YChild{"SendUserInfo", &pap.SendUserInfo})
    pap.EntityData.Leafs = types.NewOrderedMap()
    pap.EntityData.Leafs.Append("refuse", types.YLeaf{"Refuse", pap.Refuse})

    pap.EntityData.YListKeys = []string {}

    return &(pap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo
// This specifies the outbound PAP username and
// password
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound PAP username. The type is string.
    Username interface{}

    // Outbound PAP password. The type is string with pattern: b'(!.+)|([^!].+)'.
    Password interface{}
}

func (sendUserInfo *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Pap_SendUserInfo) GetEntityData() *types.CommonEntityData {
    sendUserInfo.EntityData.YFilter = sendUserInfo.YFilter
    sendUserInfo.EntityData.YangName = "send-user-info"
    sendUserInfo.EntityData.BundleName = "cisco_ios_xr"
    sendUserInfo.EntityData.ParentYangName = "pap"
    sendUserInfo.EntityData.SegmentPath = "send-user-info"
    sendUserInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/pap/" + sendUserInfo.EntityData.SegmentPath
    sendUserInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendUserInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendUserInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendUserInfo.EntityData.Children = types.NewOrderedMap()
    sendUserInfo.EntityData.Leafs = types.NewOrderedMap()
    sendUserInfo.EntityData.Leafs.Append("username", types.YLeaf{"Username", sendUserInfo.Username})
    sendUserInfo.EntityData.Leafs.Append("password", types.YLeaf{"Password", sendUserInfo.Password})

    sendUserInfo.EntityData.YListKeys = []string {}

    return &(sendUserInfo.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack
// Loopback configuration
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow magic numbers to be equal. The type is interface{}.
    Ignore interface{}
}

func (loopBack *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_LoopBack) GetEntityData() *types.CommonEntityData {
    loopBack.EntityData.YFilter = loopBack.YFilter
    loopBack.EntityData.YangName = "loop-back"
    loopBack.EntityData.BundleName = "cisco_ios_xr"
    loopBack.EntityData.ParentYangName = "lcp"
    loopBack.EntityData.SegmentPath = "loop-back"
    loopBack.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + loopBack.EntityData.SegmentPath
    loopBack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loopBack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loopBack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loopBack.EntityData.Children = types.NewOrderedMap()
    loopBack.EntityData.Leafs = types.NewOrderedMap()
    loopBack.EntityData.Leafs.Append("ignore", types.YLeaf{"Ignore", loopBack.Ignore})

    loopBack.EntityData.YListKeys = []string {}

    return &(loopBack.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap
// Microsoft Challenge Handshake Authentication
// Protocol (MS-CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the default MS-CHAP password. The type is string with
    // pattern: b'(!.+)|([^!].+)'.
    Password interface{}

    // This specifies the MS-CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using MS-CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (msChap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_MsChap) GetEntityData() *types.CommonEntityData {
    msChap.EntityData.YFilter = msChap.YFilter
    msChap.EntityData.YangName = "ms-chap"
    msChap.EntityData.BundleName = "cisco_ios_xr"
    msChap.EntityData.ParentYangName = "lcp"
    msChap.EntityData.SegmentPath = "ms-chap"
    msChap.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + msChap.EntityData.SegmentPath
    msChap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msChap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msChap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msChap.EntityData.Children = types.NewOrderedMap()
    msChap.EntityData.Leafs = types.NewOrderedMap()
    msChap.EntityData.Leafs.Append("password", types.YLeaf{"Password", msChap.Password})
    msChap.EntityData.Leafs.Append("host-name", types.YLeaf{"HostName", msChap.HostName})
    msChap.EntityData.Leafs.Append("refuse", types.YLeaf{"Refuse", msChap.Refuse})

    msChap.EntityData.YListKeys = []string {}

    return &(msChap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication
// PPP authentication parameters
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies whether to allow multiple authentication failures and, if
    // so, how many. The type is interface{} with range: 0..10.
    MaxAuthenticationFailures interface{}

    // Maximum time to wait for an authentication response. The type is
    // interface{} with range: 3..30. The default value is 10.
    Timeout interface{}

    // This specifies the PPP link authentication method.
    Method InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
}

func (authentication *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "lcp"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("method", types.YChild{"Method", &authentication.Method})
    authentication.EntityData.Leafs = types.NewOrderedMap()
    authentication.EntityData.Leafs.Append("max-authentication-failures", types.YLeaf{"MaxAuthenticationFailures", authentication.MaxAuthenticationFailures})
    authentication.EntityData.Leafs.Append("timeout", types.YLeaf{"Timeout", authentication.Timeout})

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method
// This specifies the PPP link authentication
// method
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use an authentication list with this name. The type is string.
    Name interface{}

    // Select between one and three authentication methods in order of preference.
    // The type is slice of PppAuthenticationMethod.
    Method []interface{}
}

func (method *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Authentication_Method) GetEntityData() *types.CommonEntityData {
    method.EntityData.YFilter = method.YFilter
    method.EntityData.YangName = "method"
    method.EntityData.BundleName = "cisco_ios_xr"
    method.EntityData.ParentYangName = "authentication"
    method.EntityData.SegmentPath = "method"
    method.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/authentication/" + method.EntityData.SegmentPath
    method.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    method.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    method.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    method.EntityData.Children = types.NewOrderedMap()
    method.EntityData.Leafs = types.NewOrderedMap()
    method.EntityData.Leafs.Append("name", types.YLeaf{"Name", method.Name})
    method.EntityData.Leafs.Append("method", types.YLeaf{"Method", method.Method})

    method.EntityData.YListKeys = []string {}

    return &(method.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap
// Challenge Handshake Authentication Protocol
// (CHAP) configuration data
type InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the default CHAP password. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Password interface{}

    // This specifies the CHAP hostname. The type is string.
    HostName interface{}

    // This specifies whether to refuse to authenticate using CHAP. The type is
    // interface{}.
    Refuse interface{}
}

func (chap *InterfaceConfigurations_InterfaceConfiguration_CiscoIOSXRPppMaLcpCfgPpp_Lcp_Chap) GetEntityData() *types.CommonEntityData {
    chap.EntityData.YFilter = chap.YFilter
    chap.EntityData.YangName = "chap"
    chap.EntityData.BundleName = "cisco_ios_xr"
    chap.EntityData.ParentYangName = "lcp"
    chap.EntityData.SegmentPath = "chap"
    chap.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp/lcp/" + chap.EntityData.SegmentPath
    chap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    chap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    chap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    chap.EntityData.Children = types.NewOrderedMap()
    chap.EntityData.Leafs = types.NewOrderedMap()
    chap.EntityData.Leafs.Append("password", types.YLeaf{"Password", chap.Password})
    chap.EntityData.Leafs.Append("host-name", types.YLeaf{"HostName", chap.HostName})
    chap.EntityData.Leafs.Append("refuse", types.YLeaf{"Refuse", chap.Refuse})

    chap.EntityData.YListKeys = []string {}

    return &(chap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession
// SSRP Config
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This specifies the SSRP group and session-id.
    GroupId InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
}

func (ssrpSession *InterfaceConfigurations_InterfaceConfiguration_SsrpSession) GetEntityData() *types.CommonEntityData {
    ssrpSession.EntityData.YFilter = ssrpSession.YFilter
    ssrpSession.EntityData.YangName = "ssrp-session"
    ssrpSession.EntityData.BundleName = "cisco_ios_xr"
    ssrpSession.EntityData.ParentYangName = "interface-configuration"
    ssrpSession.EntityData.SegmentPath = "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"
    ssrpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + ssrpSession.EntityData.SegmentPath
    ssrpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ssrpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ssrpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ssrpSession.EntityData.Children = types.NewOrderedMap()
    ssrpSession.EntityData.Children.Append("group-id", types.YChild{"GroupId", &ssrpSession.GroupId})
    ssrpSession.EntityData.Leafs = types.NewOrderedMap()

    ssrpSession.EntityData.YListKeys = []string {}

    return &(ssrpSession.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId
// This specifies the SSRP group and session-id
type InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SSRP Group-ID. The type is interface{} with range: 1..65535.
    Group interface{}

    // SSRP Session-ID. The type is interface{} with range: 1..4294967295.
    Id interface{}
}

func (groupId *InterfaceConfigurations_InterfaceConfiguration_SsrpSession_GroupId) GetEntityData() *types.CommonEntityData {
    groupId.EntityData.YFilter = groupId.YFilter
    groupId.EntityData.YangName = "group-id"
    groupId.EntityData.BundleName = "cisco_ios_xr"
    groupId.EntityData.ParentYangName = "ssrp-session"
    groupId.EntityData.SegmentPath = "group-id"
    groupId.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session/" + groupId.EntityData.SegmentPath
    groupId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    groupId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    groupId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    groupId.EntityData.Children = types.NewOrderedMap()
    groupId.EntityData.Leafs = types.NewOrderedMap()
    groupId.EntityData.Leafs.Append("group", types.YLeaf{"Group", groupId.Group})
    groupId.EntityData.Leafs.Append("id", types.YLeaf{"Id", groupId.Id})

    groupId.EntityData.YListKeys = []string {}

    return &(groupId.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos
// Interface QOS configuration
type InterfaceConfigurations_InterfaceConfiguration_Qos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Egress service policy.
    Output InterfaceConfigurations_InterfaceConfiguration_Qos_Output

    // Ingress service policy.
    Input InterfaceConfigurations_InterfaceConfiguration_Qos_Input
}

func (qos *InterfaceConfigurations_InterfaceConfiguration_Qos) GetEntityData() *types.CommonEntityData {
    qos.EntityData.YFilter = qos.YFilter
    qos.EntityData.YangName = "qos"
    qos.EntityData.BundleName = "cisco_ios_xr"
    qos.EntityData.ParentYangName = "interface-configuration"
    qos.EntityData.SegmentPath = "Cisco-IOS-XR-qos-ma-cfg:qos"
    qos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + qos.EntityData.SegmentPath
    qos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qos.EntityData.Children = types.NewOrderedMap()
    qos.EntityData.Children.Append("output", types.YChild{"Output", &qos.Output})
    qos.EntityData.Children.Append("input", types.YChild{"Input", &qos.Input})
    qos.EntityData.Leafs = types.NewOrderedMap()

    qos.EntityData.YListKeys = []string {}

    return &(qos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output
// Egress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
}

func (output *InterfaceConfigurations_InterfaceConfiguration_Qos_Output) GetEntityData() *types.CommonEntityData {
    output.EntityData.YFilter = output.YFilter
    output.EntityData.YangName = "output"
    output.EntityData.BundleName = "cisco_ios_xr"
    output.EntityData.ParentYangName = "qos"
    output.EntityData.SegmentPath = "output"
    output.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/" + output.EntityData.SegmentPath
    output.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    output.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    output.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    output.EntityData.Children = types.NewOrderedMap()
    output.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range output.ServicePolicy {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicy[i]), types.YChild{"ServicePolicy", output.ServicePolicy[i]})
    }
    output.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range output.ServicePolicyQos {
        output.EntityData.Children.Append(types.GetSegmentPath(output.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", output.ServicePolicyQos[i]})
    }
    output.EntityData.Leafs = types.NewOrderedMap()

    output.EntityData.YListKeys = []string {}

    return &(output.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "output"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/output/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "output"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/output/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/output/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/output/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Output_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/output/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input
// Ingress service policy
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy.
    ServicePolicy []*InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy

    // Service policy details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos.
    ServicePolicyQos []*InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
}

func (input *InterfaceConfigurations_InterfaceConfiguration_Qos_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "qos"
    input.EntityData.SegmentPath = "input"
    input.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/" + input.EntityData.SegmentPath
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Children.Append("service-policy", types.YChild{"ServicePolicy", nil})
    for i := range input.ServicePolicy {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicy[i]), types.YChild{"ServicePolicy", input.ServicePolicy[i]})
    }
    input.EntityData.Children.Append("service-policy-qos", types.YChild{"ServicePolicyQos", nil})
    for i := range input.ServicePolicyQos {
        input.EntityData.Children.Append(types.GetSegmentPath(input.ServicePolicyQos[i]), types.YChild{"ServicePolicyQos", input.ServicePolicyQos[i]})
    }
    input.EntityData.Leafs = types.NewOrderedMap()

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // service-fragment-parent-policy. The type is bool.
    ServiceFragmentParentPolicy interface{}
}

func (servicePolicy *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicy) GetEntityData() *types.CommonEntityData {
    servicePolicy.EntityData.YFilter = servicePolicy.YFilter
    servicePolicy.EntityData.YangName = "service-policy"
    servicePolicy.EntityData.BundleName = "cisco_ios_xr"
    servicePolicy.EntityData.ParentYangName = "input"
    servicePolicy.EntityData.SegmentPath = "service-policy" + types.AddKeyToken(servicePolicy.ServicePolicyName, "service-policy-name")
    servicePolicy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/input/" + servicePolicy.EntityData.SegmentPath
    servicePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicy.EntityData.Children = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs = types.NewOrderedMap()
    servicePolicy.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicy.ServicePolicyName})
    servicePolicy.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", servicePolicy.AccountType})
    servicePolicy.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", servicePolicy.L1UserDefined})
    servicePolicy.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", servicePolicy.SpiName})
    servicePolicy.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", servicePolicy.SubscriberParentPolicy})
    servicePolicy.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", servicePolicy.ResourceId})
    servicePolicy.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", servicePolicy.ServiceFragmentParentPolicy})

    servicePolicy.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos
// Service policy details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    ServicePolicyName interface{}

    // Subscriber Group Name Details.
    SubscriberGroupNames InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames

    // Subscriber Parent Details.
    SubscriberParent InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
}

func (servicePolicyQos *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos) GetEntityData() *types.CommonEntityData {
    servicePolicyQos.EntityData.YFilter = servicePolicyQos.YFilter
    servicePolicyQos.EntityData.YangName = "service-policy-qos"
    servicePolicyQos.EntityData.BundleName = "cisco_ios_xr"
    servicePolicyQos.EntityData.ParentYangName = "input"
    servicePolicyQos.EntityData.SegmentPath = "service-policy-qos" + types.AddKeyToken(servicePolicyQos.ServicePolicyName, "service-policy-name")
    servicePolicyQos.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/input/" + servicePolicyQos.EntityData.SegmentPath
    servicePolicyQos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    servicePolicyQos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    servicePolicyQos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    servicePolicyQos.EntityData.Children = types.NewOrderedMap()
    servicePolicyQos.EntityData.Children.Append("subscriber-group-names", types.YChild{"SubscriberGroupNames", &servicePolicyQos.SubscriberGroupNames})
    servicePolicyQos.EntityData.Children.Append("subscriber-parent", types.YChild{"SubscriberParent", &servicePolicyQos.SubscriberParent})
    servicePolicyQos.EntityData.Leafs = types.NewOrderedMap()
    servicePolicyQos.EntityData.Leafs.Append("service-policy-name", types.YLeaf{"ServicePolicyName", servicePolicyQos.ServicePolicyName})

    servicePolicyQos.EntityData.YListKeys = []string {"ServicePolicyName"}

    return &(servicePolicyQos.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames
// Subscriber Group Name Details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subscriber Group details. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName.
    SubscriberGroupName []*InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
}

func (subscriberGroupNames *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames) GetEntityData() *types.CommonEntityData {
    subscriberGroupNames.EntityData.YFilter = subscriberGroupNames.YFilter
    subscriberGroupNames.EntityData.YangName = "subscriber-group-names"
    subscriberGroupNames.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupNames.EntityData.ParentYangName = "service-policy-qos"
    subscriberGroupNames.EntityData.SegmentPath = "subscriber-group-names"
    subscriberGroupNames.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/input/service-policy-qos/" + subscriberGroupNames.EntityData.SegmentPath
    subscriberGroupNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupNames.EntityData.Children = types.NewOrderedMap()
    subscriberGroupNames.EntityData.Children.Append("subscriber-group-name", types.YChild{"SubscriberGroupName", nil})
    for i := range subscriberGroupNames.SubscriberGroupName {
        subscriberGroupNames.EntityData.Children.Append(types.GetSegmentPath(subscriberGroupNames.SubscriberGroupName[i]), types.YChild{"SubscriberGroupName", subscriberGroupNames.SubscriberGroupName[i]})
    }
    subscriberGroupNames.EntityData.Leafs = types.NewOrderedMap()

    subscriberGroupNames.EntityData.YListKeys = []string {}

    return &(subscriberGroupNames.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName
// Subscriber Group details
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of policy-map. The type is string with
    // length: 0..64.
    SubscriberGroupString interface{}

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberGroupName *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberGroupNames_SubscriberGroupName) GetEntityData() *types.CommonEntityData {
    subscriberGroupName.EntityData.YFilter = subscriberGroupName.YFilter
    subscriberGroupName.EntityData.YangName = "subscriber-group-name"
    subscriberGroupName.EntityData.BundleName = "cisco_ios_xr"
    subscriberGroupName.EntityData.ParentYangName = "subscriber-group-names"
    subscriberGroupName.EntityData.SegmentPath = "subscriber-group-name" + types.AddKeyToken(subscriberGroupName.SubscriberGroupString, "subscriber-group-string")
    subscriberGroupName.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/input/service-policy-qos/subscriber-group-names/" + subscriberGroupName.EntityData.SegmentPath
    subscriberGroupName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberGroupName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberGroupName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberGroupName.EntityData.Children = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs = types.NewOrderedMap()
    subscriberGroupName.EntityData.Leafs.Append("subscriber-group-string", types.YLeaf{"SubscriberGroupString", subscriberGroupName.SubscriberGroupString})
    subscriberGroupName.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberGroupName.AccountType})
    subscriberGroupName.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberGroupName.L1UserDefined})
    subscriberGroupName.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberGroupName.SpiName})
    subscriberGroupName.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberGroupName.PolicyMerge})
    subscriberGroupName.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberGroupName.SubscriberParentPolicy})
    subscriberGroupName.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberGroupName.ResourceId})
    subscriberGroupName.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberGroupName.ServiceFragmentParentPolicy})

    subscriberGroupName.EntityData.YListKeys = []string {"SubscriberGroupString"}

    return &(subscriberGroupName.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent
// Subscriber Parent Details
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Turn off L2 or L3 accounting. The type is QosPolicyAccount.
    AccountType interface{}

    // User specified value. The type is interface{} with range: -63..63.
    L1UserDefined interface{}

    // Name of the SPI. The type is string with length: 0..32.
    SpiName interface{}

    // Not supported (Leave unspecified). The type is QosFieldNotSupported.
    PolicyMerge interface{}

    // TRUE if service-policy applied on svlan. The type is bool.
    SubscriberParentPolicy interface{}

    // Resource ID value. The type is interface{} with range: 0..3.
    ResourceId interface{}

    // TRUE if service-policy applied is a service-fragment policy). The type is
    // bool.
    ServiceFragmentParentPolicy interface{}
}

func (subscriberParent *InterfaceConfigurations_InterfaceConfiguration_Qos_Input_ServicePolicyQos_SubscriberParent) GetEntityData() *types.CommonEntityData {
    subscriberParent.EntityData.YFilter = subscriberParent.YFilter
    subscriberParent.EntityData.YangName = "subscriber-parent"
    subscriberParent.EntityData.BundleName = "cisco_ios_xr"
    subscriberParent.EntityData.ParentYangName = "service-policy-qos"
    subscriberParent.EntityData.SegmentPath = "subscriber-parent"
    subscriberParent.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-qos-ma-cfg:qos/input/service-policy-qos/" + subscriberParent.EntityData.SegmentPath
    subscriberParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberParent.EntityData.Children = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs = types.NewOrderedMap()
    subscriberParent.EntityData.Leafs.Append("account-type", types.YLeaf{"AccountType", subscriberParent.AccountType})
    subscriberParent.EntityData.Leafs.Append("l1-user-defined", types.YLeaf{"L1UserDefined", subscriberParent.L1UserDefined})
    subscriberParent.EntityData.Leafs.Append("spi-name", types.YLeaf{"SpiName", subscriberParent.SpiName})
    subscriberParent.EntityData.Leafs.Append("policy-merge", types.YLeaf{"PolicyMerge", subscriberParent.PolicyMerge})
    subscriberParent.EntityData.Leafs.Append("subscriber-parent-policy", types.YLeaf{"SubscriberParentPolicy", subscriberParent.SubscriberParentPolicy})
    subscriberParent.EntityData.Leafs.Append("resource-id", types.YLeaf{"ResourceId", subscriberParent.ResourceId})
    subscriberParent.EntityData.Leafs.Append("service-fragment-parent-policy", types.YLeaf{"ServiceFragmentParentPolicy", subscriberParent.ServiceFragmentParentPolicy})

    subscriberParent.EntityData.YListKeys = []string {}

    return &(subscriberParent.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber
// Subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP subscribers on interface.
    IpSubscriber InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
}

func (subscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber) GetEntityData() *types.CommonEntityData {
    subscriber.EntityData.YFilter = subscriber.YFilter
    subscriber.EntityData.YangName = "subscriber"
    subscriber.EntityData.BundleName = "cisco_ios_xr"
    subscriber.EntityData.ParentYangName = "interface-configuration"
    subscriber.EntityData.SegmentPath = "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"
    subscriber.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + subscriber.EntityData.SegmentPath
    subscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriber.EntityData.Children = types.NewOrderedMap()
    subscriber.EntityData.Children.Append("ip-subscriber", types.YChild{"IpSubscriber", &subscriber.IpSubscriber})
    subscriber.EntityData.Leafs = types.NewOrderedMap()

    subscriber.EntityData.YListKeys = []string {}

    return &(subscriber.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber
// IP subscribers on interface
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable subscriber templates on this access interface. The type is
    // interface{} with range: 1..10. The default value is 10.
    SubscriberTemplates interface{}

    // Enable IP Static subscriber. The type is interface{}.
    Interface interface{}

    // IPv4 subscriber.
    Ipv4 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4

    // IP subscriber session limit.
    SessionLimit InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit

    // IPv6 subscriber.
    Ipv6 InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
}

func (ipSubscriber *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber) GetEntityData() *types.CommonEntityData {
    ipSubscriber.EntityData.YFilter = ipSubscriber.YFilter
    ipSubscriber.EntityData.YangName = "ip-subscriber"
    ipSubscriber.EntityData.BundleName = "cisco_ios_xr"
    ipSubscriber.EntityData.ParentYangName = "subscriber"
    ipSubscriber.EntityData.SegmentPath = "ip-subscriber"
    ipSubscriber.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/" + ipSubscriber.EntityData.SegmentPath
    ipSubscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubscriber.EntityData.Children = types.NewOrderedMap()
    ipSubscriber.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &ipSubscriber.Ipv4})
    ipSubscriber.EntityData.Children.Append("session-limit", types.YChild{"SessionLimit", &ipSubscriber.SessionLimit})
    ipSubscriber.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &ipSubscriber.Ipv6})
    ipSubscriber.EntityData.Leafs = types.NewOrderedMap()
    ipSubscriber.EntityData.Leafs.Append("subscriber-templates", types.YLeaf{"SubscriberTemplates", ipSubscriber.SubscriberTemplates})
    ipSubscriber.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", ipSubscriber.Interface})

    ipSubscriber.EntityData.YListKeys = []string {}

    return &(ipSubscriber.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4
// IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 connected IPv4 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected

    // Routed IPv4 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
}

func (ipv4 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "ip-subscriber"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("l2-connected", types.YChild{"L2Connected", &ipv4.L2Connected})
    ipv4.EntityData.Children.Append("routed", types.YChild{"Routed", &ipv4.Routed})
    ipv4.EntityData.Leafs = types.NewOrderedMap()

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected
// L2 connected IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected) GetEntityData() *types.CommonEntityData {
    l2Connected.EntityData.YFilter = l2Connected.YFilter
    l2Connected.EntityData.YangName = "l2-connected"
    l2Connected.EntityData.BundleName = "cisco_ios_xr"
    l2Connected.EntityData.ParentYangName = "ipv4"
    l2Connected.EntityData.SegmentPath = "l2-connected"
    l2Connected.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv4/" + l2Connected.EntityData.SegmentPath
    l2Connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Connected.EntityData.Children = types.NewOrderedMap()
    l2Connected.EntityData.Children.Append("initiator", types.YChild{"Initiator", &l2Connected.Initiator})
    l2Connected.EntityData.Leafs = types.NewOrderedMap()

    l2Connected.EntityData.YListKeys = []string {}

    return &(l2Connected.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "l2-connected"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv4/l2-connected/" + initiator.EntityData.SegmentPath
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = types.NewOrderedMap()
    initiator.EntityData.Children.Append("unclassified-source-fsol", types.YChild{"UnclassifiedSourceFsol", &initiator.UnclassifiedSourceFsol})
    initiator.EntityData.Leafs = types.NewOrderedMap()
    initiator.EntityData.Leafs.Append("dhcp", types.YLeaf{"Dhcp", initiator.Dhcp})

    initiator.EntityData.YListKeys = []string {}

    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_L2Connected_Initiator_UnclassifiedSourceFsol) GetEntityData() *types.CommonEntityData {
    unclassifiedSourceFsol.EntityData.YFilter = unclassifiedSourceFsol.YFilter
    unclassifiedSourceFsol.EntityData.YangName = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSourceFsol.EntityData.ParentYangName = "initiator"
    unclassifiedSourceFsol.EntityData.SegmentPath = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv4/l2-connected/initiator/" + unclassifiedSourceFsol.EntityData.SegmentPath
    unclassifiedSourceFsol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSourceFsol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSourceFsol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSourceFsol.EntityData.Children = types.NewOrderedMap()
    unclassifiedSourceFsol.EntityData.Leafs = types.NewOrderedMap()
    unclassifiedSourceFsol.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", unclassifiedSourceFsol.Enable})
    unclassifiedSourceFsol.EntityData.Leafs.Append("address-unique", types.YLeaf{"AddressUnique", unclassifiedSourceFsol.AddressUnique})

    unclassifiedSourceFsol.EntityData.YListKeys = []string {}

    return &(unclassifiedSourceFsol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed
// Routed IPv4 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed) GetEntityData() *types.CommonEntityData {
    routed.EntityData.YFilter = routed.YFilter
    routed.EntityData.YangName = "routed"
    routed.EntityData.BundleName = "cisco_ios_xr"
    routed.EntityData.ParentYangName = "ipv4"
    routed.EntityData.SegmentPath = "routed"
    routed.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv4/" + routed.EntityData.SegmentPath
    routed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routed.EntityData.Children = types.NewOrderedMap()
    routed.EntityData.Children.Append("initiator", types.YChild{"Initiator", &routed.Initiator})
    routed.EntityData.Leafs = types.NewOrderedMap()

    routed.EntityData.YListKeys = []string {}

    return &(routed.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv4 subscriber unclassified source initiator. The type is
    // interface{}.
    UnclassifiedIp interface{}

    // Configure IPv4 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IPv4 subscriber DHCP Snoop initiator. The type is interface{}.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv4_Routed_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "routed"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv4/routed/" + initiator.EntityData.SegmentPath
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = types.NewOrderedMap()
    initiator.EntityData.Leafs = types.NewOrderedMap()
    initiator.EntityData.Leafs.Append("unclassified-ip", types.YLeaf{"UnclassifiedIp", initiator.UnclassifiedIp})
    initiator.EntityData.Leafs.Append("dhcp", types.YLeaf{"Dhcp", initiator.Dhcp})
    initiator.EntityData.Leafs.Append("dhcp-snoop", types.YLeaf{"DhcpSnoop", initiator.DhcpSnoop})

    initiator.EntityData.YListKeys = []string {}

    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit
// IP subscriber session limit
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session limit for all sources.
    Total InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total

    // Session limit for unclassified sources.
    UnclassifiedSource InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
}

func (sessionLimit *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit) GetEntityData() *types.CommonEntityData {
    sessionLimit.EntityData.YFilter = sessionLimit.YFilter
    sessionLimit.EntityData.YangName = "session-limit"
    sessionLimit.EntityData.BundleName = "cisco_ios_xr"
    sessionLimit.EntityData.ParentYangName = "ip-subscriber"
    sessionLimit.EntityData.SegmentPath = "session-limit"
    sessionLimit.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/" + sessionLimit.EntityData.SegmentPath
    sessionLimit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionLimit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionLimit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionLimit.EntityData.Children = types.NewOrderedMap()
    sessionLimit.EntityData.Children.Append("total", types.YChild{"Total", &sessionLimit.Total})
    sessionLimit.EntityData.Children.Append("unclassified-source", types.YChild{"UnclassifiedSource", &sessionLimit.UnclassifiedSource})
    sessionLimit.EntityData.Leafs = types.NewOrderedMap()

    sessionLimit.EntityData.YListKeys = []string {}

    return &(sessionLimit.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total
// Session limit for all sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for all sources. The type is interface{}
    // with range: 0..4294967295. The default value is 0.
    PerVlan interface{}
}

func (total *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "session-limit"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/session-limit/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("per-vlan", types.YLeaf{"PerVlan", total.PerVlan})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource
// Session limit for unclassified sources
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure per-vlan session limit for unclassified sources. The type is
    // interface{} with range: 0..4294967295. The default value is 0.
    PerVlan interface{}
}

func (unclassifiedSource *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_SessionLimit_UnclassifiedSource) GetEntityData() *types.CommonEntityData {
    unclassifiedSource.EntityData.YFilter = unclassifiedSource.YFilter
    unclassifiedSource.EntityData.YangName = "unclassified-source"
    unclassifiedSource.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSource.EntityData.ParentYangName = "session-limit"
    unclassifiedSource.EntityData.SegmentPath = "unclassified-source"
    unclassifiedSource.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/session-limit/" + unclassifiedSource.EntityData.SegmentPath
    unclassifiedSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSource.EntityData.Children = types.NewOrderedMap()
    unclassifiedSource.EntityData.Leafs = types.NewOrderedMap()
    unclassifiedSource.EntityData.Leafs.Append("per-vlan", types.YLeaf{"PerVlan", unclassifiedSource.PerVlan})

    unclassifiedSource.EntityData.YListKeys = []string {}

    return &(unclassifiedSource.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6
// IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2 connected IPv6 subscriber.
    L2Connected InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected

    // Routed IPv6 subscriber.
    Routed InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
}

func (ipv6 *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "ip-subscriber"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("l2-connected", types.YChild{"L2Connected", &ipv6.L2Connected})
    ipv6.EntityData.Children.Append("routed", types.YChild{"Routed", &ipv6.Routed})
    ipv6.EntityData.Leafs = types.NewOrderedMap()

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected
// L2 connected IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
}

func (l2Connected *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected) GetEntityData() *types.CommonEntityData {
    l2Connected.EntityData.YFilter = l2Connected.YFilter
    l2Connected.EntityData.YangName = "l2-connected"
    l2Connected.EntityData.BundleName = "cisco_ios_xr"
    l2Connected.EntityData.ParentYangName = "ipv6"
    l2Connected.EntityData.SegmentPath = "l2-connected"
    l2Connected.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv6/" + l2Connected.EntityData.SegmentPath
    l2Connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2Connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2Connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2Connected.EntityData.Children = types.NewOrderedMap()
    l2Connected.EntityData.Children.Append("initiator", types.YChild{"Initiator", &l2Connected.Initiator})
    l2Connected.EntityData.Leafs = types.NewOrderedMap()

    l2Connected.EntityData.YListKeys = []string {}

    return &(l2Connected.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator
// Configure IPv6 subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IPv6 subscriber DHCP initiator. The type is interface{}.
    Dhcp interface{}

    // Configure IP subscriber unclassified source initiator.
    UnclassifiedSourceFsol InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "l2-connected"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv6/l2-connected/" + initiator.EntityData.SegmentPath
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = types.NewOrderedMap()
    initiator.EntityData.Children.Append("unclassified-source-fsol", types.YChild{"UnclassifiedSourceFsol", &initiator.UnclassifiedSourceFsol})
    initiator.EntityData.Leafs = types.NewOrderedMap()
    initiator.EntityData.Leafs.Append("dhcp", types.YLeaf{"Dhcp", initiator.Dhcp})

    initiator.EntityData.YListKeys = []string {}

    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol
// Configure IP subscriber unclassified source
// initiator
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable unclassified source. The type is interface{}. This attribute is
    // mandatory.
    Enable interface{}

    // Check for subscriber IP uniqueness during first sign of life. The type is
    // bool. The default value is false.
    AddressUnique interface{}
}

func (unclassifiedSourceFsol *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_L2Connected_Initiator_UnclassifiedSourceFsol) GetEntityData() *types.CommonEntityData {
    unclassifiedSourceFsol.EntityData.YFilter = unclassifiedSourceFsol.YFilter
    unclassifiedSourceFsol.EntityData.YangName = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.BundleName = "cisco_ios_xr"
    unclassifiedSourceFsol.EntityData.ParentYangName = "initiator"
    unclassifiedSourceFsol.EntityData.SegmentPath = "unclassified-source-fsol"
    unclassifiedSourceFsol.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv6/l2-connected/initiator/" + unclassifiedSourceFsol.EntityData.SegmentPath
    unclassifiedSourceFsol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unclassifiedSourceFsol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unclassifiedSourceFsol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unclassifiedSourceFsol.EntityData.Children = types.NewOrderedMap()
    unclassifiedSourceFsol.EntityData.Leafs = types.NewOrderedMap()
    unclassifiedSourceFsol.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", unclassifiedSourceFsol.Enable})
    unclassifiedSourceFsol.EntityData.Leafs.Append("address-unique", types.YLeaf{"AddressUnique", unclassifiedSourceFsol.AddressUnique})

    unclassifiedSourceFsol.EntityData.YListKeys = []string {}

    return &(unclassifiedSourceFsol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed
// Routed IPv6 subscriber
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure IP subscriber initiator.
    Initiator InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
}

func (routed *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed) GetEntityData() *types.CommonEntityData {
    routed.EntityData.YFilter = routed.YFilter
    routed.EntityData.YangName = "routed"
    routed.EntityData.BundleName = "cisco_ios_xr"
    routed.EntityData.ParentYangName = "ipv6"
    routed.EntityData.SegmentPath = "routed"
    routed.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv6/" + routed.EntityData.SegmentPath
    routed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routed.EntityData.Children = types.NewOrderedMap()
    routed.EntityData.Children.Append("initiator", types.YChild{"Initiator", &routed.Initiator})
    routed.EntityData.Leafs = types.NewOrderedMap()

    routed.EntityData.YListKeys = []string {}

    return &(routed.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator
// Configure IP subscriber initiator
type InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure unclassified packets as first-sign-of-life for IPv6 subscriber.
    // The type is interface{} with range: 1..128. The default value is 128.
    UnclassifiedIp interface{}

    // Configure IPv6 subscriber DHCP initiator. The type is interface{} with
    // range: 1..128. The default value is 128.
    Dhcp interface{}

    // Configure IPv6 subscriber DHCP Snoop initiator. The type is interface{}
    // with range: 1..128. The default value is 128.
    DhcpSnoop interface{}
}

func (initiator *InterfaceConfigurations_InterfaceConfiguration_Subscriber_IpSubscriber_Ipv6_Routed_Initiator) GetEntityData() *types.CommonEntityData {
    initiator.EntityData.YFilter = initiator.YFilter
    initiator.EntityData.YangName = "initiator"
    initiator.EntityData.BundleName = "cisco_ios_xr"
    initiator.EntityData.ParentYangName = "routed"
    initiator.EntityData.SegmentPath = "initiator"
    initiator.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber/ip-subscriber/ipv6/routed/" + initiator.EntityData.SegmentPath
    initiator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initiator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initiator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initiator.EntityData.Children = types.NewOrderedMap()
    initiator.EntityData.Leafs = types.NewOrderedMap()
    initiator.EntityData.Leafs.Append("unclassified-ip", types.YLeaf{"UnclassifiedIp", initiator.UnclassifiedIp})
    initiator.EntityData.Leafs.Append("dhcp", types.YLeaf{"Dhcp", initiator.Dhcp})
    initiator.EntityData.Leafs.Append("dhcp-snoop", types.YLeaf{"DhcpSnoop", initiator.DhcpSnoop})

    initiator.EntityData.YListKeys = []string {}

    return &(initiator.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pppoe
// Interface PPPoE configuration data
type InterfaceConfigurations_InterfaceConfiguration_Pppoe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use this BBA-Group to enable PPPoE on this interface.
    EnableBbaGroup InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
}

func (pppoe *InterfaceConfigurations_InterfaceConfiguration_Pppoe) GetEntityData() *types.CommonEntityData {
    pppoe.EntityData.YFilter = pppoe.YFilter
    pppoe.EntityData.YangName = "pppoe"
    pppoe.EntityData.BundleName = "cisco_ios_xr"
    pppoe.EntityData.ParentYangName = "interface-configuration"
    pppoe.EntityData.SegmentPath = "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"
    pppoe.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + pppoe.EntityData.SegmentPath
    pppoe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pppoe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pppoe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pppoe.EntityData.Children = types.NewOrderedMap()
    pppoe.EntityData.Children.Append("enable-bba-group", types.YChild{"EnableBbaGroup", &pppoe.EnableBbaGroup})
    pppoe.EntityData.Leafs = types.NewOrderedMap()

    pppoe.EntityData.YListKeys = []string {}

    return &(pppoe.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup
// Use this BBA-Group to enable PPPoE on this
// interface
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Enable PPPoE on this interface. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // Name of the BBA-Group. The type is string.
    BbaGroupName interface{}
}

func (enableBbaGroup *InterfaceConfigurations_InterfaceConfiguration_Pppoe_EnableBbaGroup) GetEntityData() *types.CommonEntityData {
    enableBbaGroup.EntityData.YFilter = enableBbaGroup.YFilter
    enableBbaGroup.EntityData.YangName = "enable-bba-group"
    enableBbaGroup.EntityData.BundleName = "cisco_ios_xr"
    enableBbaGroup.EntityData.ParentYangName = "pppoe"
    enableBbaGroup.EntityData.SegmentPath = "enable-bba-group"
    enableBbaGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe/" + enableBbaGroup.EntityData.SegmentPath
    enableBbaGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enableBbaGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enableBbaGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enableBbaGroup.EntityData.Children = types.NewOrderedMap()
    enableBbaGroup.EntityData.Leafs = types.NewOrderedMap()
    enableBbaGroup.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", enableBbaGroup.Enable})
    enableBbaGroup.EntityData.Leafs.Append("bba-group-name", types.YLeaf{"BbaGroupName", enableBbaGroup.BbaGroupName})

    enableBbaGroup.EntityData.YListKeys = []string {}

    return &(enableBbaGroup.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FlowProtocols
// Interface netflow configuration
type InterfaceConfigurations_InterfaceConfiguration_FlowProtocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure netflow flow protocol. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol.
    FlowProtocol []*InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol
}

func (flowProtocols *InterfaceConfigurations_InterfaceConfiguration_FlowProtocols) GetEntityData() *types.CommonEntityData {
    flowProtocols.EntityData.YFilter = flowProtocols.YFilter
    flowProtocols.EntityData.YangName = "flow-protocols"
    flowProtocols.EntityData.BundleName = "cisco_ios_xr"
    flowProtocols.EntityData.ParentYangName = "interface-configuration"
    flowProtocols.EntityData.SegmentPath = "Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols"
    flowProtocols.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + flowProtocols.EntityData.SegmentPath
    flowProtocols.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowProtocols.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowProtocols.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowProtocols.EntityData.Children = types.NewOrderedMap()
    flowProtocols.EntityData.Children.Append("flow-protocol", types.YChild{"FlowProtocol", nil})
    for i := range flowProtocols.FlowProtocol {
        flowProtocols.EntityData.Children.Append(types.GetSegmentPath(flowProtocols.FlowProtocol[i]), types.YChild{"FlowProtocol", flowProtocols.FlowProtocol[i]})
    }
    flowProtocols.EntityData.Leafs = types.NewOrderedMap()

    flowProtocols.EntityData.YListKeys = []string {}

    return &(flowProtocols.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol
// Configure netflow flow protocol
type InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Netflow Flow Protocol. The type is NfFlowProtocol.
    FlowProtocol interface{}

    // Configure netflow flow direction. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction.
    Direction []*InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction
}

func (flowProtocol *InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol) GetEntityData() *types.CommonEntityData {
    flowProtocol.EntityData.YFilter = flowProtocol.YFilter
    flowProtocol.EntityData.YangName = "flow-protocol"
    flowProtocol.EntityData.BundleName = "cisco_ios_xr"
    flowProtocol.EntityData.ParentYangName = "flow-protocols"
    flowProtocol.EntityData.SegmentPath = "flow-protocol" + types.AddKeyToken(flowProtocol.FlowProtocol, "flow-protocol")
    flowProtocol.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols/" + flowProtocol.EntityData.SegmentPath
    flowProtocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowProtocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowProtocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowProtocol.EntityData.Children = types.NewOrderedMap()
    flowProtocol.EntityData.Children.Append("direction", types.YChild{"Direction", nil})
    for i := range flowProtocol.Direction {
        flowProtocol.EntityData.Children.Append(types.GetSegmentPath(flowProtocol.Direction[i]), types.YChild{"Direction", flowProtocol.Direction[i]})
    }
    flowProtocol.EntityData.Leafs = types.NewOrderedMap()
    flowProtocol.EntityData.Leafs.Append("flow-protocol", types.YLeaf{"FlowProtocol", flowProtocol.FlowProtocol})

    flowProtocol.EntityData.YListKeys = []string {"FlowProtocol"}

    return &(flowProtocol.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction
// Configure netflow flow direction
type InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Netflow Flow Direction. The type is
    // NfFlowDirection.
    FlowDirection interface{}

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfo.
    MonitorInfo []*InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfo

    // Specify a sampler for a flow monitor. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfoSamplerMap.
    MonitorInfoSamplerMap []*InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfoSamplerMap
}

func (direction *InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction) GetEntityData() *types.CommonEntityData {
    direction.EntityData.YFilter = direction.YFilter
    direction.EntityData.YangName = "direction"
    direction.EntityData.BundleName = "cisco_ios_xr"
    direction.EntityData.ParentYangName = "flow-protocol"
    direction.EntityData.SegmentPath = "direction" + types.AddKeyToken(direction.FlowDirection, "flow-direction")
    direction.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols/flow-protocol/" + direction.EntityData.SegmentPath
    direction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    direction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    direction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    direction.EntityData.Children = types.NewOrderedMap()
    direction.EntityData.Children.Append("monitor-info", types.YChild{"MonitorInfo", nil})
    for i := range direction.MonitorInfo {
        direction.EntityData.Children.Append(types.GetSegmentPath(direction.MonitorInfo[i]), types.YChild{"MonitorInfo", direction.MonitorInfo[i]})
    }
    direction.EntityData.Children.Append("monitor-info-sampler-map", types.YChild{"MonitorInfoSamplerMap", nil})
    for i := range direction.MonitorInfoSamplerMap {
        direction.EntityData.Children.Append(types.GetSegmentPath(direction.MonitorInfoSamplerMap[i]), types.YChild{"MonitorInfoSamplerMap", direction.MonitorInfoSamplerMap[i]})
    }
    direction.EntityData.Leafs = types.NewOrderedMap()
    direction.EntityData.Leafs.Append("flow-direction", types.YLeaf{"FlowDirection", direction.FlowDirection})

    direction.EntityData.YListKeys = []string {"FlowDirection"}

    return &(direction.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfo
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMap interface{}
}

func (monitorInfo *InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfo) GetEntityData() *types.CommonEntityData {
    monitorInfo.EntityData.YFilter = monitorInfo.YFilter
    monitorInfo.EntityData.YangName = "monitor-info"
    monitorInfo.EntityData.BundleName = "cisco_ios_xr"
    monitorInfo.EntityData.ParentYangName = "direction"
    monitorInfo.EntityData.SegmentPath = "monitor-info" + types.AddKeyToken(monitorInfo.MonitorMap, "monitor-map")
    monitorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols/flow-protocol/direction/" + monitorInfo.EntityData.SegmentPath
    monitorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    monitorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    monitorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    monitorInfo.EntityData.Children = types.NewOrderedMap()
    monitorInfo.EntityData.Leafs = types.NewOrderedMap()
    monitorInfo.EntityData.Leafs.Append("monitor-map", types.YLeaf{"MonitorMap", monitorInfo.MonitorMap})

    monitorInfo.EntityData.YListKeys = []string {"MonitorMap"}

    return &(monitorInfo.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfoSamplerMap
// Specify a sampler for a flow monitor
type InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfoSamplerMap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Sampler map name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    SamplerMap interface{}

    // This attribute is a key. Flow monitor map name. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MonitorMap interface{}
}

func (monitorInfoSamplerMap *InterfaceConfigurations_InterfaceConfiguration_FlowProtocols_FlowProtocol_Direction_MonitorInfoSamplerMap) GetEntityData() *types.CommonEntityData {
    monitorInfoSamplerMap.EntityData.YFilter = monitorInfoSamplerMap.YFilter
    monitorInfoSamplerMap.EntityData.YangName = "monitor-info-sampler-map"
    monitorInfoSamplerMap.EntityData.BundleName = "cisco_ios_xr"
    monitorInfoSamplerMap.EntityData.ParentYangName = "direction"
    monitorInfoSamplerMap.EntityData.SegmentPath = "monitor-info-sampler-map" + types.AddKeyToken(monitorInfoSamplerMap.SamplerMap, "sampler-map") + types.AddKeyToken(monitorInfoSamplerMap.MonitorMap, "monitor-map")
    monitorInfoSamplerMap.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-traffmon-netflow-cfg:flow-protocols/flow-protocol/direction/" + monitorInfoSamplerMap.EntityData.SegmentPath
    monitorInfoSamplerMap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    monitorInfoSamplerMap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    monitorInfoSamplerMap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    monitorInfoSamplerMap.EntityData.Children = types.NewOrderedMap()
    monitorInfoSamplerMap.EntityData.Leafs = types.NewOrderedMap()
    monitorInfoSamplerMap.EntityData.Leafs.Append("sampler-map", types.YLeaf{"SamplerMap", monitorInfoSamplerMap.SamplerMap})
    monitorInfoSamplerMap.EntityData.Leafs.Append("monitor-map", types.YLeaf{"MonitorMap", monitorInfoSamplerMap.MonitorMap})

    monitorInfoSamplerMap.EntityData.YListKeys = []string {"SamplerMap", "MonitorMap"}

    return &(monitorInfoSamplerMap.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp
// IP over GRE encapsulation
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable flag bit to allow packets with GRE key. The type is interface{}.
    AllowKey interface{}

    // Configure the time-to-live for packets sent over this tunnel. The type is
    // interface{} with range: 1..255.
    Ttl interface{}

    // Tunnel vrf label name. The type is string with length: 1..32.
    TunnelVrf interface{}

    // Configure Type of Service bits for this tunnel. The type is interface{}
    // with range: 0..255.
    Tos interface{}

    // Disable DF bit (i.e. allow fragmentation). The type is interface{} with
    // range: 0..4294967295.
    Disable interface{}

    // Tunnel encapsulation method.
    Mode InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode

    // Configure source of tunnel.
    Source InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source

    // Configure the key value for packets sent over this tunnel.
    Key InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key

    // Enable keepalive packets on this tunnel.
    Keepalive InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive

    // Configure BFD for tunnel.
    Bfd InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd

    // Configure destination of tunnel.
    Destination InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
}

func (tunnelIp *InterfaceConfigurations_InterfaceConfiguration_TunnelIp) GetEntityData() *types.CommonEntityData {
    tunnelIp.EntityData.YFilter = tunnelIp.YFilter
    tunnelIp.EntityData.YangName = "tunnel-ip"
    tunnelIp.EntityData.BundleName = "cisco_ios_xr"
    tunnelIp.EntityData.ParentYangName = "interface-configuration"
    tunnelIp.EntityData.SegmentPath = "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"
    tunnelIp.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + tunnelIp.EntityData.SegmentPath
    tunnelIp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelIp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelIp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelIp.EntityData.Children = types.NewOrderedMap()
    tunnelIp.EntityData.Children.Append("mode", types.YChild{"Mode", &tunnelIp.Mode})
    tunnelIp.EntityData.Children.Append("source", types.YChild{"Source", &tunnelIp.Source})
    tunnelIp.EntityData.Children.Append("key", types.YChild{"Key", &tunnelIp.Key})
    tunnelIp.EntityData.Children.Append("keepalive", types.YChild{"Keepalive", &tunnelIp.Keepalive})
    tunnelIp.EntityData.Children.Append("bfd", types.YChild{"Bfd", &tunnelIp.Bfd})
    tunnelIp.EntityData.Children.Append("destination", types.YChild{"Destination", &tunnelIp.Destination})
    tunnelIp.EntityData.Leafs = types.NewOrderedMap()
    tunnelIp.EntityData.Leafs.Append("allow-key", types.YLeaf{"AllowKey", tunnelIp.AllowKey})
    tunnelIp.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", tunnelIp.Ttl})
    tunnelIp.EntityData.Leafs.Append("tunnel-vrf", types.YLeaf{"TunnelVrf", tunnelIp.TunnelVrf})
    tunnelIp.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", tunnelIp.Tos})
    tunnelIp.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", tunnelIp.Disable})

    tunnelIp.EntityData.YListKeys = []string {}

    return &(tunnelIp.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode
// Tunnel encapsulation method
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GRE IPV4 - 1, GRE IPV6 - 2, MGRE IPV4 - 3, MGRE IPV6 -4. IPV4 - 5, IPV6 -
    // 6. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Tunnel Mode Direction. The type is TunnelModeDirection.
    ModeDirection interface{}
}

func (mode *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Mode) GetEntityData() *types.CommonEntityData {
    mode.EntityData.YFilter = mode.YFilter
    mode.EntityData.YangName = "mode"
    mode.EntityData.BundleName = "cisco_ios_xr"
    mode.EntityData.ParentYangName = "tunnel-ip"
    mode.EntityData.SegmentPath = "mode"
    mode.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + mode.EntityData.SegmentPath
    mode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mode.EntityData.Children = types.NewOrderedMap()
    mode.EntityData.Leafs = types.NewOrderedMap()
    mode.EntityData.Leafs.Append("value", types.YLeaf{"Value", mode.Value})
    mode.EntityData.Leafs.Append("mode-direction", types.YLeaf{"ModeDirection", mode.ModeDirection})

    mode.EntityData.YListKeys = []string {}

    return &(mode.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source
// Configure source of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // 1 for Interface Name, 2 for IPv4 Address, 3 for IPv6 Address. The type is
    // interface{} with range: 0..4294967295.
    Type interface{}

    // IPV4 address of the tunnel source. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Name of tunnel source interface. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // IPV6 address of the tunnel source. The type is string.
    Ipv6Address interface{}
}

func (source *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "tunnel-ip"
    source.EntityData.SegmentPath = "source"
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("type", types.YLeaf{"Type", source.Type})
    source.EntityData.Leafs.Append("address", types.YLeaf{"Address", source.Address})
    source.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", source.InterfaceName})
    source.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", source.Ipv6Address})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key
// Configure the key value for packets sent over
// this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Entropy interface{}

    // Enter the KEY value. The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (key *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "tunnel-ip"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Leafs = types.NewOrderedMap()
    key.EntityData.Leafs.Append("entropy", types.YLeaf{"Entropy", key.Entropy})
    key.EntityData.Leafs.Append("value", types.YLeaf{"Value", key.Value})

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive
// Enable keepalive packets on this tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive period in seconds (default 10 seconds). The type is interface{}
    // with range: 1..32767.
    KeepAlivePeriod interface{}

    // Number of retries (default 3). The type is interface{} with range: 1..255.
    KeepAliveRetries interface{}
}

func (keepalive *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Keepalive) GetEntityData() *types.CommonEntityData {
    keepalive.EntityData.YFilter = keepalive.YFilter
    keepalive.EntityData.YangName = "keepalive"
    keepalive.EntityData.BundleName = "cisco_ios_xr"
    keepalive.EntityData.ParentYangName = "tunnel-ip"
    keepalive.EntityData.SegmentPath = "keepalive"
    keepalive.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + keepalive.EntityData.SegmentPath
    keepalive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keepalive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keepalive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keepalive.EntityData.Children = types.NewOrderedMap()
    keepalive.EntityData.Leafs = types.NewOrderedMap()
    keepalive.EntityData.Leafs.Append("keep-alive-period", types.YLeaf{"KeepAlivePeriod", keepalive.KeepAlivePeriod})
    keepalive.EntityData.Leafs.Append("keep-alive-retries", types.YLeaf{"KeepAliveRetries", keepalive.KeepAliveRetries})

    keepalive.EntityData.YListKeys = []string {}

    return &(keepalive.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd
// Configure BFD for tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure minimum interval for BFD. The type is interface{} with range:
    // 150..30000.
    MinimumInterval interface{}

    // Keepalive period in seconds. The type is interface{} with range: 1..32767.
    KeepalivePeriod interface{}

    // Configure Number of retries for BFD Keepalive. The type is interface{} with
    // range: 1..255.
    Retry interface{}

    // Configure BFD multiplier. The type is interface{} with range: 3..50.
    Multiplier interface{}

    // Configure BFD destination for tunnel.
    Destination InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd_Destination
}

func (bfd *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "tunnel-ip"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Children.Append("destination", types.YChild{"Destination", &bfd.Destination})
    bfd.EntityData.Leafs = types.NewOrderedMap()
    bfd.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", bfd.MinimumInterval})
    bfd.EntityData.Leafs.Append("keepalive-period", types.YLeaf{"KeepalivePeriod", bfd.KeepalivePeriod})
    bfd.EntityData.Leafs.Append("retry", types.YLeaf{"Retry", bfd.Retry})
    bfd.EntityData.Leafs.Append("multiplier", types.YLeaf{"Multiplier", bfd.Multiplier})

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd_Destination
// Configure BFD destination for tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // 1 for IPv4 Address, 2 for IPv6 Address. The type is interface{} with range:
    // 0..4294967295.
    Type interface{}

    // IPV4 address of the BFD destination. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // IPV6 address of the BFD destination. The type is string.
    Ipv6Address interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Bfd_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "bfd"
    destination.EntityData.SegmentPath = "destination"
    destination.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/bfd/" + destination.EntityData.SegmentPath
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("type", types.YLeaf{"Type", destination.Type})
    destination.EntityData.Leafs.Append("address", types.YLeaf{"Address", destination.Address})
    destination.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", destination.Ipv6Address})

    destination.EntityData.YListKeys = []string {}

    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination
// Configure destination of tunnel
type InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // 1 for IPv4 Address, 2 for IPv6 Address. The type is interface{} with range:
    // 0..4294967295.
    Type interface{}

    // IPV4 address of the tunnel destination. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // IPV6 address of the tunnel destination. The type is string.
    Ipv6Address interface{}

    // IPv4 prefix length of the tunnel destination. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    AddressMask interface{}

    // Prefix-list to validate destination's resolving prefix. The type is string
    // with length: 1..64.
    PrefixListName interface{}
}

func (destination *InterfaceConfigurations_InterfaceConfiguration_TunnelIp_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "tunnel-ip"
    destination.EntityData.SegmentPath = "destination"
    destination.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip/" + destination.EntityData.SegmentPath
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("type", types.YLeaf{"Type", destination.Type})
    destination.EntityData.Leafs.Append("address", types.YLeaf{"Address", destination.Address})
    destination.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", destination.Ipv6Address})
    destination.EntityData.Leafs.Append("address-mask", types.YLeaf{"AddressMask", destination.AddressMask})
    destination.EntityData.Leafs.Append("prefix-list-name", types.YLeaf{"PrefixListName", destination.PrefixListName})

    destination.EntityData.YListKeys = []string {}

    return &(destination.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve
// NVE operational data
type InterfaceConfigurations_InterfaceConfiguration_Nve struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // UDP port number in VxLAN encapsulation. The type is VxlanUdpPortEnum. The
    // default value is ietf-udp-port.
    VxLanUdpPort interface{}

    // The Overlay Encapsulation for this NVE. The type is OverlayEncapEnum. The
    // default value is vx-lan-encapsulation.
    OverlayEncapsulation interface{}

    // Source Interface for this NVE. The type is string.
    SourceInterface interface{}

    // The Ingress Replication Protocol for this NVE. The type is IrProtocolEnum.
    IngressReplicationProtocol interface{}

    // Enable anycast mode for this NVE interface.
    Anycast InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast

    // Redundancy configuration for this NVE.
    Redundancy InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy

    // VNI configuration Table for this NVE.
    MemberVnis InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
}

func (nve *InterfaceConfigurations_InterfaceConfiguration_Nve) GetEntityData() *types.CommonEntityData {
    nve.EntityData.YFilter = nve.YFilter
    nve.EntityData.YangName = "nve"
    nve.EntityData.BundleName = "cisco_ios_xr"
    nve.EntityData.ParentYangName = "interface-configuration"
    nve.EntityData.SegmentPath = "Cisco-IOS-XR-tunnel-nve-cfg:nve"
    nve.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + nve.EntityData.SegmentPath
    nve.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nve.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nve.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nve.EntityData.Children = types.NewOrderedMap()
    nve.EntityData.Children.Append("anycast", types.YChild{"Anycast", &nve.Anycast})
    nve.EntityData.Children.Append("redundancy", types.YChild{"Redundancy", &nve.Redundancy})
    nve.EntityData.Children.Append("member-vnis", types.YChild{"MemberVnis", &nve.MemberVnis})
    nve.EntityData.Leafs = types.NewOrderedMap()
    nve.EntityData.Leafs.Append("vx-lan-udp-port", types.YLeaf{"VxLanUdpPort", nve.VxLanUdpPort})
    nve.EntityData.Leafs.Append("overlay-encapsulation", types.YLeaf{"OverlayEncapsulation", nve.OverlayEncapsulation})
    nve.EntityData.Leafs.Append("source-interface", types.YLeaf{"SourceInterface", nve.SourceInterface})
    nve.EntityData.Leafs.Append("ingress-replication-protocol", types.YLeaf{"IngressReplicationProtocol", nve.IngressReplicationProtocol})

    nve.EntityData.YListKeys = []string {}

    return &(nve.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast
// Enable anycast mode for this NVE interface
type InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the Anycast mode source interface. The type is string.
    SourceInterface interface{}

    // MCast group for syncing between Anycast gateways. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SyncGroup interface{}
}

func (anycast *InterfaceConfigurations_InterfaceConfiguration_Nve_Anycast) GetEntityData() *types.CommonEntityData {
    anycast.EntityData.YFilter = anycast.YFilter
    anycast.EntityData.YangName = "anycast"
    anycast.EntityData.BundleName = "cisco_ios_xr"
    anycast.EntityData.ParentYangName = "nve"
    anycast.EntityData.SegmentPath = "anycast"
    anycast.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/" + anycast.EntityData.SegmentPath
    anycast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    anycast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    anycast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    anycast.EntityData.Children = types.NewOrderedMap()
    anycast.EntityData.Leafs = types.NewOrderedMap()
    anycast.EntityData.Leafs.Append("source-interface", types.YLeaf{"SourceInterface", anycast.SourceInterface})
    anycast.EntityData.Leafs.Append("sync-group", types.YLeaf{"SyncGroup", anycast.SyncGroup})

    anycast.EntityData.YListKeys = []string {}

    return &(anycast.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy
// Redundancy configuration for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Redundancy. The type is interface{}.
    Enable interface{}

    // VXLAN backbone.
    BackboneVxLan InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan

    // MPLS backbone.
    BackboneMpls InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
}

func (redundancy *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy) GetEntityData() *types.CommonEntityData {
    redundancy.EntityData.YFilter = redundancy.YFilter
    redundancy.EntityData.YangName = "redundancy"
    redundancy.EntityData.BundleName = "cisco_ios_xr"
    redundancy.EntityData.ParentYangName = "nve"
    redundancy.EntityData.SegmentPath = "redundancy"
    redundancy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/" + redundancy.EntityData.SegmentPath
    redundancy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redundancy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redundancy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redundancy.EntityData.Children = types.NewOrderedMap()
    redundancy.EntityData.Children.Append("backbone-vx-lan", types.YChild{"BackboneVxLan", &redundancy.BackboneVxLan})
    redundancy.EntityData.Children.Append("backbone-mpls", types.YChild{"BackboneMpls", &redundancy.BackboneMpls})
    redundancy.EntityData.Leafs = types.NewOrderedMap()
    redundancy.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", redundancy.Enable})

    redundancy.EntityData.YListKeys = []string {}

    return &(redundancy.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan
// VXLAN backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable Backbone VxLAN. The type is interface{}.
    Enable interface{}

    // VxLAN backbone ICCP group. The type is interface{} with range:
    // 0..4294967295.
    BackboneVxLaniccp interface{}
}

func (backboneVxLan *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneVxLan) GetEntityData() *types.CommonEntityData {
    backboneVxLan.EntityData.YFilter = backboneVxLan.YFilter
    backboneVxLan.EntityData.YangName = "backbone-vx-lan"
    backboneVxLan.EntityData.BundleName = "cisco_ios_xr"
    backboneVxLan.EntityData.ParentYangName = "redundancy"
    backboneVxLan.EntityData.SegmentPath = "backbone-vx-lan"
    backboneVxLan.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/redundancy/" + backboneVxLan.EntityData.SegmentPath
    backboneVxLan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backboneVxLan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backboneVxLan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backboneVxLan.EntityData.Children = types.NewOrderedMap()
    backboneVxLan.EntityData.Leafs = types.NewOrderedMap()
    backboneVxLan.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", backboneVxLan.Enable})
    backboneVxLan.EntityData.Leafs.Append("backbone-vx-laniccp", types.YLeaf{"BackboneVxLaniccp", backboneVxLan.BackboneVxLaniccp})

    backboneVxLan.EntityData.YListKeys = []string {}

    return &(backboneVxLan.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls
// MPLS backbone
type InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS backbone ICCP group. The type is interface{} with range:
    // 0..4294967295.
    BackboneMplsiccp interface{}

    // Enable Backbone MPLS. The type is interface{}.
    Enable interface{}
}

func (backboneMpls *InterfaceConfigurations_InterfaceConfiguration_Nve_Redundancy_BackboneMpls) GetEntityData() *types.CommonEntityData {
    backboneMpls.EntityData.YFilter = backboneMpls.YFilter
    backboneMpls.EntityData.YangName = "backbone-mpls"
    backboneMpls.EntityData.BundleName = "cisco_ios_xr"
    backboneMpls.EntityData.ParentYangName = "redundancy"
    backboneMpls.EntityData.SegmentPath = "backbone-mpls"
    backboneMpls.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/redundancy/" + backboneMpls.EntityData.SegmentPath
    backboneMpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backboneMpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backboneMpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backboneMpls.EntityData.Children = types.NewOrderedMap()
    backboneMpls.EntityData.Leafs = types.NewOrderedMap()
    backboneMpls.EntityData.Leafs.Append("backbone-mplsiccp", types.YLeaf{"BackboneMplsiccp", backboneMpls.BackboneMplsiccp})
    backboneMpls.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", backboneMpls.Enable})

    backboneMpls.EntityData.YListKeys = []string {}

    return &(backboneMpls.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis
// VNI configuration Table for this NVE
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VNI member attributes. The type is slice of
    // InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni.
    MemberVni []*InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
}

func (memberVnis *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis) GetEntityData() *types.CommonEntityData {
    memberVnis.EntityData.YFilter = memberVnis.YFilter
    memberVnis.EntityData.YangName = "member-vnis"
    memberVnis.EntityData.BundleName = "cisco_ios_xr"
    memberVnis.EntityData.ParentYangName = "nve"
    memberVnis.EntityData.SegmentPath = "member-vnis"
    memberVnis.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/" + memberVnis.EntityData.SegmentPath
    memberVnis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberVnis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberVnis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberVnis.EntityData.Children = types.NewOrderedMap()
    memberVnis.EntityData.Children.Append("member-vni", types.YChild{"MemberVni", nil})
    for i := range memberVnis.MemberVni {
        memberVnis.EntityData.Children.Append(types.GetSegmentPath(memberVnis.MemberVni[i]), types.YChild{"MemberVni", memberVnis.MemberVni[i]})
    }
    memberVnis.EntityData.Leafs = types.NewOrderedMap()

    memberVnis.EntityData.YListKeys = []string {}

    return &(memberVnis.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni
// VNI member attributes
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Single VNI or Range Start. The type is interface{}
    // with range: 1..16777215.
    VniStart interface{}

    // This attribute is a key. Range End. The type is interface{} with range:
    // 1..16777215.
    VniEnd interface{}

    // Control protocol for VxLAN tunnel endpoint reachability. The type is
    // HostReachProtocol.
    HostReachability interface{}

    // VRF associated with the VxLAN segment. The type is string.
    Vrf interface{}

    // Suppression of unknown unicast flooding. The type is
    // UnknownUnicastFloodingEnum.
    UnknownUnicastFlooding interface{}

    // Per-evi load balance mode. The type is LoadBalanceEnum.
    LoadBalancePerEvi interface{}

    // Enable VNI. The type is interface{}.
    Enable interface{}

    // Mulitcast core group range associated with the VxLAN segment(s).
    Multicast InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
}

func (memberVni *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni) GetEntityData() *types.CommonEntityData {
    memberVni.EntityData.YFilter = memberVni.YFilter
    memberVni.EntityData.YangName = "member-vni"
    memberVni.EntityData.BundleName = "cisco_ios_xr"
    memberVni.EntityData.ParentYangName = "member-vnis"
    memberVni.EntityData.SegmentPath = "member-vni" + types.AddKeyToken(memberVni.VniStart, "vni-start") + types.AddKeyToken(memberVni.VniEnd, "vni-end")
    memberVni.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/member-vnis/" + memberVni.EntityData.SegmentPath
    memberVni.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberVni.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberVni.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberVni.EntityData.Children = types.NewOrderedMap()
    memberVni.EntityData.Children.Append("multicast", types.YChild{"Multicast", &memberVni.Multicast})
    memberVni.EntityData.Leafs = types.NewOrderedMap()
    memberVni.EntityData.Leafs.Append("vni-start", types.YLeaf{"VniStart", memberVni.VniStart})
    memberVni.EntityData.Leafs.Append("vni-end", types.YLeaf{"VniEnd", memberVni.VniEnd})
    memberVni.EntityData.Leafs.Append("host-reachability", types.YLeaf{"HostReachability", memberVni.HostReachability})
    memberVni.EntityData.Leafs.Append("vrf", types.YLeaf{"Vrf", memberVni.Vrf})
    memberVni.EntityData.Leafs.Append("unknown-unicast-flooding", types.YLeaf{"UnknownUnicastFlooding", memberVni.UnknownUnicastFlooding})
    memberVni.EntityData.Leafs.Append("load-balance-per-evi", types.YLeaf{"LoadBalancePerEvi", memberVni.LoadBalancePerEvi})
    memberVni.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", memberVni.Enable})

    memberVni.EntityData.YListKeys = []string {"VniStart", "VniEnd"}

    return &(memberVni.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast
// Mulitcast core group range associated with
// the VxLAN segment(s)
// This type is a presence type.
type InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // IPV4 group address of the tunnel source. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    MulticastGroupMin interface{}

    // IPV4 group address MAX. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    MulticastGroupMax interface{}
}

func (multicast *InterfaceConfigurations_InterfaceConfiguration_Nve_MemberVnis_MemberVni_Multicast) GetEntityData() *types.CommonEntityData {
    multicast.EntityData.YFilter = multicast.YFilter
    multicast.EntityData.YangName = "multicast"
    multicast.EntityData.BundleName = "cisco_ios_xr"
    multicast.EntityData.ParentYangName = "member-vni"
    multicast.EntityData.SegmentPath = "multicast"
    multicast.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/Cisco-IOS-XR-tunnel-nve-cfg:nve/member-vnis/member-vni/" + multicast.EntityData.SegmentPath
    multicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicast.EntityData.Children = types.NewOrderedMap()
    multicast.EntityData.Leafs = types.NewOrderedMap()
    multicast.EntityData.Leafs.Append("multicast-group-min", types.YLeaf{"MulticastGroupMin", multicast.MulticastGroupMin})
    multicast.EntityData.Leafs.Append("multicast-group-max", types.YLeaf{"MulticastGroupMax", multicast.MulticastGroupMax})

    multicast.EntityData.YListKeys = []string {}

    return &(multicast.EntityData)
}

// InterfaceConfigurations_InterfaceConfiguration_Wanphy
// WANPHY port controller configuration
type InterfaceConfigurations_InterfaceConfiguration_Wanphy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure Path Remote Defect Indicator reporting. The type is interface{}.
    ReportPathRdi interface{}

    // Configure Loss Of Signal reporting. The type is interface{}.
    ReportLos interface{}

    // Configure Path Loss Of Code-Group Delineation reporting. The type is
    // interface{}.
    ReportPathLcd interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFePlm interface{}

    // Configure LAN Mode. The type is WanphyLanMode.
    LanMode interface{}

    // Configure Path Payload Label Mismatch reporting. The type is interface{}.
    ReportPathPlm interface{}

    // Configure Path Far End Payload Label Mismatch reporting. The type is
    // interface{}.
    ReportPathFeAis interface{}

    // Configure Path Alarm Indication Signal reporting. The type is interface{}.
    ReportPathAis interface{}

    // Configure Line Alarm Indication Signal reporting. The type is interface{}.
    ReportLineAis interface{}

    // Configure Loss Of Frame reporting. The type is interface{}.
    ReportLof interface{}

    // Configure Loss Of Pointer reporting. The type is interface{}.
    ReportLop interface{}

    // Configure Remote Defect Indicator reporting. The type is interface{}.
    ReportRdi interface{}

    // Configure B2 BER in excess of SD threshold reporting. The type is
    // interface{}.
    ReportSdBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 6.
    ThresholdSdBer interface{}

    // Configure B2 BER in excess of SF threshold reporting. The type is
    // interface{}.
    ReportSfBer interface{}

    // Bit error rate is 10 to the minus n, where n is threshold value. The type
    // is interface{} with range: 3..9. The default value is 3.
    ThresholdSfBer interface{}

    // Configure WAN Mode. The type is WanphyWanMode.
    WanMode interface{}
}

func (wanphy *InterfaceConfigurations_InterfaceConfiguration_Wanphy) GetEntityData() *types.CommonEntityData {
    wanphy.EntityData.YFilter = wanphy.YFilter
    wanphy.EntityData.YangName = "wanphy"
    wanphy.EntityData.BundleName = "cisco_ios_xr"
    wanphy.EntityData.ParentYangName = "interface-configuration"
    wanphy.EntityData.SegmentPath = "Cisco-IOS-XR-wanphy-ui-cfg:wanphy"
    wanphy.EntityData.AbsolutePath = "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/" + wanphy.EntityData.SegmentPath
    wanphy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    wanphy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    wanphy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    wanphy.EntityData.Children = types.NewOrderedMap()
    wanphy.EntityData.Leafs = types.NewOrderedMap()
    wanphy.EntityData.Leafs.Append("report-path-rdi", types.YLeaf{"ReportPathRdi", wanphy.ReportPathRdi})
    wanphy.EntityData.Leafs.Append("report-los", types.YLeaf{"ReportLos", wanphy.ReportLos})
    wanphy.EntityData.Leafs.Append("report-path-lcd", types.YLeaf{"ReportPathLcd", wanphy.ReportPathLcd})
    wanphy.EntityData.Leafs.Append("report-path-fe-plm", types.YLeaf{"ReportPathFePlm", wanphy.ReportPathFePlm})
    wanphy.EntityData.Leafs.Append("lan-mode", types.YLeaf{"LanMode", wanphy.LanMode})
    wanphy.EntityData.Leafs.Append("report-path-plm", types.YLeaf{"ReportPathPlm", wanphy.ReportPathPlm})
    wanphy.EntityData.Leafs.Append("report-path-fe-ais", types.YLeaf{"ReportPathFeAis", wanphy.ReportPathFeAis})
    wanphy.EntityData.Leafs.Append("report-path-ais", types.YLeaf{"ReportPathAis", wanphy.ReportPathAis})
    wanphy.EntityData.Leafs.Append("report-line-ais", types.YLeaf{"ReportLineAis", wanphy.ReportLineAis})
    wanphy.EntityData.Leafs.Append("report-lof", types.YLeaf{"ReportLof", wanphy.ReportLof})
    wanphy.EntityData.Leafs.Append("report-lop", types.YLeaf{"ReportLop", wanphy.ReportLop})
    wanphy.EntityData.Leafs.Append("report-rdi", types.YLeaf{"ReportRdi", wanphy.ReportRdi})
    wanphy.EntityData.Leafs.Append("report-sd-ber", types.YLeaf{"ReportSdBer", wanphy.ReportSdBer})
    wanphy.EntityData.Leafs.Append("threshold-sd-ber", types.YLeaf{"ThresholdSdBer", wanphy.ThresholdSdBer})
    wanphy.EntityData.Leafs.Append("report-sf-ber", types.YLeaf{"ReportSfBer", wanphy.ReportSfBer})
    wanphy.EntityData.Leafs.Append("threshold-sf-ber", types.YLeaf{"ThresholdSfBer", wanphy.ThresholdSfBer})
    wanphy.EntityData.Leafs.Append("wan-mode", types.YLeaf{"WanMode", wanphy.WanMode})

    wanphy.EntityData.YListKeys = []string {}

    return &(wanphy.EntityData)
}

