// An OpenConfig description of a network-instance. This may be
// a Layer 3 forwarding construct such as a virtual routing and
// forwarding (VRF) instance, or a Layer 2 instance such as a
// virtual switch instance (VSI). Mixed Layer 2 and Layer 3
// instances are also supported.
package network_instance

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/openconfig"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package network_instance"))
    ydk.RegisterEntity("{http://openconfig.net/yang/network-instance network-instances}", reflect.TypeOf(NetworkInstances{}))
    ydk.RegisterEntity("openconfig-network-instance:network-instances", reflect.TypeOf(NetworkInstances{}))
}

// NetworkInstances
// The L2, L3, or L2+L3 forwarding instances that are
// configured on the local system
type NetworkInstances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network instances configured on the local system. The type is slice of
    // NetworkInstances_NetworkInstance.
    NetworkInstance []NetworkInstances_NetworkInstance
}

func (networkInstances *NetworkInstances) GetEntityData() *types.CommonEntityData {
    networkInstances.EntityData.YFilter = networkInstances.YFilter
    networkInstances.EntityData.YangName = "network-instances"
    networkInstances.EntityData.BundleName = "openconfig"
    networkInstances.EntityData.ParentYangName = "openconfig-network-instance"
    networkInstances.EntityData.SegmentPath = "openconfig-network-instance:network-instances"
    networkInstances.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    networkInstances.EntityData.NamespaceTable = openconfig.GetNamespaces()
    networkInstances.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    networkInstances.EntityData.Children = make(map[string]types.YChild)
    networkInstances.EntityData.Children["network-instance"] = types.YChild{"NetworkInstance", nil}
    for i := range networkInstances.NetworkInstance {
        networkInstances.EntityData.Children[types.GetSegmentPath(&networkInstances.NetworkInstance[i])] = types.YChild{"NetworkInstance", &networkInstances.NetworkInstance[i]}
    }
    networkInstances.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(networkInstances.EntityData)
}

// NetworkInstances_NetworkInstance
// Network instances configured on the local system
type NetworkInstances_NetworkInstance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A unique name identifying the network instance.
    // The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    Name interface{}

    // Operational state and configuration parameters relating to the forwarding
    // database of the network instance.
    Fdb NetworkInstances_NetworkInstance_Fdb

    // Configuration parameters relating to a network instance.
    Config NetworkInstances_NetworkInstance_Config

    // Operational state parameters relating to a network instance.
    State NetworkInstances_NetworkInstance_State

    // Configuration parameters relating to the encapsulation used for the network
    // instance.
    Encapsulation NetworkInstances_NetworkInstance_Encapsulation

    // Policies dictating how RIB or FIB entries are imported to and exported from
    // this instance.
    InterInstancePolicies NetworkInstances_NetworkInstance_InterInstancePolicies

    // Policies dictating how RIB or FIB entries are propagated between tables.
    TableConnections NetworkInstances_NetworkInstance_TableConnections

    // The interfaces that are associated with this network instance.
    Interfaces NetworkInstances_NetworkInstance_Interfaces

    // The routing tables that are managed by this network instance.
    Tables NetworkInstances_NetworkInstance_Tables

    // The set of connection points within a forwarding instance.
    ConnectionPoints NetworkInstances_NetworkInstance_ConnectionPoints

    // node added for compilation for forward compatibility.
    Mpls NetworkInstances_NetworkInstance_Mpls

    // Configuration and operational state parameters relating to segment routing.
    SegmentRouting NetworkInstances_NetworkInstance_SegmentRouting

    // Container for VLAN configuration and state variables.
    Vlans NetworkInstances_NetworkInstance_Vlans

    // The abstract forwarding tables (AFTs) that are associated with the network
    // instance. An AFT is instantiated per-protocol running within the
    // network-instance - such that one exists for IPv4 Unicast, IPv6 Unicast,
    // MPLS, L2 forwarding entries, etc. A forwarding entry within the FIB has a
    // set of next-hops, which may be a reference to an entry within another table
    // - e.g., where a Layer 3 next-hop has an associated Layer 2 forwarding
    // entry.
    Afts NetworkInstances_NetworkInstance_Afts

    // The routing protocols that are enabled for this network-instance.
    Protocols NetworkInstances_NetworkInstance_Protocols
}

func (networkInstance *NetworkInstances_NetworkInstance) GetEntityData() *types.CommonEntityData {
    networkInstance.EntityData.YFilter = networkInstance.YFilter
    networkInstance.EntityData.YangName = "network-instance"
    networkInstance.EntityData.BundleName = "openconfig"
    networkInstance.EntityData.ParentYangName = "network-instances"
    networkInstance.EntityData.SegmentPath = "network-instance" + "[name='" + fmt.Sprintf("%v", networkInstance.Name) + "']"
    networkInstance.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    networkInstance.EntityData.NamespaceTable = openconfig.GetNamespaces()
    networkInstance.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    networkInstance.EntityData.Children = make(map[string]types.YChild)
    networkInstance.EntityData.Children["fdb"] = types.YChild{"Fdb", &networkInstance.Fdb}
    networkInstance.EntityData.Children["config"] = types.YChild{"Config", &networkInstance.Config}
    networkInstance.EntityData.Children["state"] = types.YChild{"State", &networkInstance.State}
    networkInstance.EntityData.Children["encapsulation"] = types.YChild{"Encapsulation", &networkInstance.Encapsulation}
    networkInstance.EntityData.Children["inter-instance-policies"] = types.YChild{"InterInstancePolicies", &networkInstance.InterInstancePolicies}
    networkInstance.EntityData.Children["table-connections"] = types.YChild{"TableConnections", &networkInstance.TableConnections}
    networkInstance.EntityData.Children["interfaces"] = types.YChild{"Interfaces", &networkInstance.Interfaces}
    networkInstance.EntityData.Children["tables"] = types.YChild{"Tables", &networkInstance.Tables}
    networkInstance.EntityData.Children["connection-points"] = types.YChild{"ConnectionPoints", &networkInstance.ConnectionPoints}
    networkInstance.EntityData.Children["mpls"] = types.YChild{"Mpls", &networkInstance.Mpls}
    networkInstance.EntityData.Children["segment-routing"] = types.YChild{"SegmentRouting", &networkInstance.SegmentRouting}
    networkInstance.EntityData.Children["vlans"] = types.YChild{"Vlans", &networkInstance.Vlans}
    networkInstance.EntityData.Children["afts"] = types.YChild{"Afts", &networkInstance.Afts}
    networkInstance.EntityData.Children["protocols"] = types.YChild{"Protocols", &networkInstance.Protocols}
    networkInstance.EntityData.Leafs = make(map[string]types.YLeaf)
    networkInstance.EntityData.Leafs["name"] = types.YLeaf{"Name", networkInstance.Name}
    return &(networkInstance.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb
// Operational state and configuration parameters relating to
// the forwarding database of the network instance
type NetworkInstances_NetworkInstance_Fdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the FDB.
    Config NetworkInstances_NetworkInstance_Fdb_Config

    // Operational state parameters relating to the FDB.
    State NetworkInstances_NetworkInstance_Fdb_State

    // Table of learned or statically configured MAC addresses and corresponding
    // VLANs in the bridge domain.
    MacTable NetworkInstances_NetworkInstance_Fdb_MacTable
}

func (fdb *NetworkInstances_NetworkInstance_Fdb) GetEntityData() *types.CommonEntityData {
    fdb.EntityData.YFilter = fdb.YFilter
    fdb.EntityData.YangName = "fdb"
    fdb.EntityData.BundleName = "openconfig"
    fdb.EntityData.ParentYangName = "network-instance"
    fdb.EntityData.SegmentPath = "fdb"
    fdb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    fdb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    fdb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    fdb.EntityData.Children = make(map[string]types.YChild)
    fdb.EntityData.Children["config"] = types.YChild{"Config", &fdb.Config}
    fdb.EntityData.Children["state"] = types.YChild{"State", &fdb.State}
    fdb.EntityData.Children["mac-table"] = types.YChild{"MacTable", &fdb.MacTable}
    fdb.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdb.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_Config
// Configuration parameters relating to the FDB
type NetworkInstances_NetworkInstance_Fdb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, MAC learning is enabled for the network
    // instance, such that MAC addresses are learned from ingress frames and added
    // to the FDB. The type is bool.
    MacLearning interface{}

    // The number of seconds of inactivity after which the entry in the local FDB
    // is timed out. The type is interface{} with range: 0..65535. Units are
    // seconds.
    MacAgingTime interface{}

    // The maximum number of MAC address entries that should be accepted into the
    // FDB. The type is interface{} with range: 0..65535.
    MaximumEntries interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "fdb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["mac-learning"] = types.YLeaf{"MacLearning", config.MacLearning}
    config.EntityData.Leafs["mac-aging-time"] = types.YLeaf{"MacAgingTime", config.MacAgingTime}
    config.EntityData.Leafs["maximum-entries"] = types.YLeaf{"MaximumEntries", config.MaximumEntries}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_State
// Operational state parameters relating to the FDB
type NetworkInstances_NetworkInstance_Fdb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, MAC learning is enabled for the network
    // instance, such that MAC addresses are learned from ingress frames and added
    // to the FDB. The type is bool.
    MacLearning interface{}

    // The number of seconds of inactivity after which the entry in the local FDB
    // is timed out. The type is interface{} with range: 0..65535. Units are
    // seconds.
    MacAgingTime interface{}

    // The maximum number of MAC address entries that should be accepted into the
    // FDB. The type is interface{} with range: 0..65535.
    MaximumEntries interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "fdb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["mac-learning"] = types.YLeaf{"MacLearning", state.MacLearning}
    state.EntityData.Leafs["mac-aging-time"] = types.YLeaf{"MacAgingTime", state.MacAgingTime}
    state.EntityData.Leafs["maximum-entries"] = types.YLeaf{"MaximumEntries", state.MaximumEntries}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable
// Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
type NetworkInstances_NetworkInstance_Fdb_MacTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enclosing container for list of MAC table entries.
    Entries NetworkInstances_NetworkInstance_Fdb_MacTable_Entries
}

func (macTable *NetworkInstances_NetworkInstance_Fdb_MacTable) GetEntityData() *types.CommonEntityData {
    macTable.EntityData.YFilter = macTable.YFilter
    macTable.EntityData.YangName = "mac-table"
    macTable.EntityData.BundleName = "openconfig"
    macTable.EntityData.ParentYangName = "fdb"
    macTable.EntityData.SegmentPath = "mac-table"
    macTable.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    macTable.EntityData.NamespaceTable = openconfig.GetNamespaces()
    macTable.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    macTable.EntityData.Children = make(map[string]types.YChild)
    macTable.EntityData.Children["entries"] = types.YChild{"Entries", &macTable.Entries}
    macTable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macTable.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries
// Enclosing container for list of MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of learned MAC addresses. The type is slice of
    // NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry.
    Entry []NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry
}

func (entries *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) GetEntityData() *types.CommonEntityData {
    entries.EntityData.YFilter = entries.YFilter
    entries.EntityData.YangName = "entries"
    entries.EntityData.BundleName = "openconfig"
    entries.EntityData.ParentYangName = "mac-table"
    entries.EntityData.SegmentPath = "entries"
    entries.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entries.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entries.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entries.EntityData.Children = make(map[string]types.YChild)
    entries.EntityData.Children["entry"] = types.YChild{"Entry", nil}
    for i := range entries.Entry {
        entries.EntityData.Children[types.GetSegmentPath(&entries.Entry[i])] = types.YChild{"Entry", &entries.Entry[i]}
    }
    entries.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(entries.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry
// List of learned MAC addresses
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to mac-address list key. The type is
    // string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config_MacAddress
    MacAddress interface{}

    // Configuration data for MAC table entries.
    Config NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config

    // Operational state data for MAC table entries.
    State NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State

    // Reference to the base and/or subinterface for the MAC table entry.
    Interface_ NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface
}

func (entry *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetEntityData() *types.CommonEntityData {
    entry.EntityData.YFilter = entry.YFilter
    entry.EntityData.YangName = "entry"
    entry.EntityData.BundleName = "openconfig"
    entry.EntityData.ParentYangName = "entries"
    entry.EntityData.SegmentPath = "entry" + "[mac-address='" + fmt.Sprintf("%v", entry.MacAddress) + "']"
    entry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entry.EntityData.Children = make(map[string]types.YChild)
    entry.EntityData.Children["config"] = types.YChild{"Config", &entry.Config}
    entry.EntityData.Children["state"] = types.YChild{"State", &entry.State}
    entry.EntityData.Children["interface"] = types.YChild{"Interface_", &entry.Interface_}
    entry.EntityData.Leafs = make(map[string]types.YLeaf)
    entry.EntityData.Leafs["mac-address"] = types.YLeaf{"MacAddress", entry.MacAddress}
    return &(entry.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config
// Configuration data for MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address for the dynamic or static MAC table entry. The type is string
    // with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddress interface{}

    // VLAN from which this MAC address was received. The type is string with
    // range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    Vlan interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["mac-address"] = types.YLeaf{"MacAddress", config.MacAddress}
    config.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", config.Vlan}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State
// Operational state data for MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address for the dynamic or static MAC table entry. The type is string
    // with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddress interface{}

    // VLAN from which this MAC address was received. The type is string with
    // range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    Vlan interface{}

    // The time in seconds since the MAC address has been in the table. The type
    // is interface{} with range: 0..18446744073709551615. Units are seconds.
    Age interface{}

    // Indicates whether the entry was statically configured, or dynamically
    // learned. The type is EntryType.
    EntryType interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["mac-address"] = types.YLeaf{"MacAddress", state.MacAddress}
    state.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", state.Vlan}
    state.EntityData.Leafs["age"] = types.YLeaf{"Age", state.Age}
    state.EntityData.Leafs["entry-type"] = types.YLeaf{"EntryType", state.EntryType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType represents dynamically learned.
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType string

const (
    // Statically programmed MAC table entry
    NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType_STATIC NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType = "STATIC"

    // Dynamically learned MAC table entry
    NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType_DYNAMIC NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface
// Reference to the base and/or subinterface for the
// MAC table entry
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "entry"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &self.InterfaceRef}
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["config"] = types.YChild{"Config", &interfaceRef.Config}
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Config
// Configuration parameters relating to a network
// instance
type NetworkInstances_NetworkInstance_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An operator-assigned unique name for the forwarding instance. The type is
    // string.
    Name interface{}

    // The type of network instance. The value of this leaf indicates the type of
    // forwarding entries that should be supported by this network instance. The
    // type is one of the following: DEFAULTINSTANCEL3VRFL2VSIL2P2PL2L3.
    Type_ interface{}

    // Whether the network instance should be configured to be active on the
    // network element. The type is bool.
    Enabled interface{}

    // A free-form string to be used by the network operator to describe the
    // function of this network instance. The type is string.
    Description interface{}

    // A identifier for the local network instance - typically used within
    // associated routing protocols or signalling routing information in another
    // network instance. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'.
    RouterId interface{}

    // The route distinguisher that should be used for the local VRF or VSI
    // instance when it is signalled via BGP. The type is one of the following
    // types: string with pattern:
    // b'^(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9])$',
    // or string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9])$',
    // or string with pattern:
    // b'^(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9]):(65[0-5][0-3][0-5]|[1-5]{2}[0-9]{3}|[1-9]{0,2}[0-9][0-9]|[1-9])$'.
    RouteDistinguisher interface{}

    // The address families that are to be enabled for this network instance. The
    // type is slice of ['IPV4', 'IPV6', 'MPLS', 'L2ETHERNET'].
    EnabledAddressFamilies []interface{}

    // The maximum frame size which should be supported for this instance for
    // Layer 2 frames. The type is interface{} with range: 0..65535.
    Mtu interface{}
}

func (config *NetworkInstances_NetworkInstance_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "network-instance"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["name"] = types.YLeaf{"Name", config.Name}
    config.EntityData.Leafs["type"] = types.YLeaf{"Type_", config.Type_}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["description"] = types.YLeaf{"Description", config.Description}
    config.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", config.RouterId}
    config.EntityData.Leafs["route-distinguisher"] = types.YLeaf{"RouteDistinguisher", config.RouteDistinguisher}
    config.EntityData.Leafs["enabled-address-families"] = types.YLeaf{"EnabledAddressFamilies", config.EnabledAddressFamilies}
    config.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", config.Mtu}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_State
// Operational state parameters relating to a network
// instance
type NetworkInstances_NetworkInstance_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An operator-assigned unique name for the forwarding instance. The type is
    // string.
    Name interface{}

    // The type of network instance. The value of this leaf indicates the type of
    // forwarding entries that should be supported by this network instance. The
    // type is one of the following: DEFAULTINSTANCEL3VRFL2VSIL2P2PL2L3.
    Type_ interface{}

    // Whether the network instance should be configured to be active on the
    // network element. The type is bool.
    Enabled interface{}

    // A free-form string to be used by the network operator to describe the
    // function of this network instance. The type is string.
    Description interface{}

    // A identifier for the local network instance - typically used within
    // associated routing protocols or signalling routing information in another
    // network instance. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'.
    RouterId interface{}

    // The route distinguisher that should be used for the local VRF or VSI
    // instance when it is signalled via BGP. The type is one of the following
    // types: string with pattern:
    // b'^(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9])$',
    // or string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9])$',
    // or string with pattern:
    // b'^(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9]):(65[0-5][0-3][0-5]|[1-5]{2}[0-9]{3}|[1-9]{0,2}[0-9][0-9]|[1-9])$'.
    RouteDistinguisher interface{}

    // The address families that are to be enabled for this network instance. The
    // type is slice of ['IPV4', 'IPV6', 'MPLS', 'L2ETHERNET'].
    EnabledAddressFamilies []interface{}

    // The maximum frame size which should be supported for this instance for
    // Layer 2 frames. The type is interface{} with range: 0..65535.
    Mtu interface{}
}

func (state *NetworkInstances_NetworkInstance_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "network-instance"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["name"] = types.YLeaf{"Name", state.Name}
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["description"] = types.YLeaf{"Description", state.Description}
    state.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", state.RouterId}
    state.EntityData.Leafs["route-distinguisher"] = types.YLeaf{"RouteDistinguisher", state.RouteDistinguisher}
    state.EntityData.Leafs["enabled-address-families"] = types.YLeaf{"EnabledAddressFamilies", state.EnabledAddressFamilies}
    state.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", state.Mtu}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation
// Configuration parameters relating to the encapsulation
// used for the network instance
type NetworkInstances_NetworkInstance_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the encapsulation of the network
    // instance.
    Config NetworkInstances_NetworkInstance_Encapsulation_Config

    // State parameters relating to the encapsulation of the network instance.
    State NetworkInstances_NetworkInstance_Encapsulation_State
}

func (encapsulation *NetworkInstances_NetworkInstance_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "openconfig"
    encapsulation.EntityData.ParentYangName = "network-instance"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    encapsulation.EntityData.Children = make(map[string]types.YChild)
    encapsulation.EntityData.Children["config"] = types.YChild{"Config", &encapsulation.Config}
    encapsulation.EntityData.Children["state"] = types.YChild{"State", &encapsulation.State}
    encapsulation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(encapsulation.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation_Config
// Configuration parameters relating to the encapsulation
// of the network instance
type NetworkInstances_NetworkInstance_Encapsulation_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The on-the-wire encapsulation that should be used when sending traffic from
    // this network instance. The type is one of the following: MPLSVXLAN.
    EncapsulationType interface{}

    // The label allocation mode to be used for L3 entries in the network
    // instance. The type is one of the following:
    // PERPREFIXPERNEXTHOPINSTANCELABEL.
    LabelAllocationMode interface{}

    // Whether the control-word should be used for the network instance. The type
    // is bool.
    ControlWord interface{}
}

func (config *NetworkInstances_NetworkInstance_Encapsulation_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "encapsulation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["encapsulation-type"] = types.YLeaf{"EncapsulationType", config.EncapsulationType}
    config.EntityData.Leafs["label-allocation-mode"] = types.YLeaf{"LabelAllocationMode", config.LabelAllocationMode}
    config.EntityData.Leafs["control-word"] = types.YLeaf{"ControlWord", config.ControlWord}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation_State
// State parameters relating to the encapsulation of
// the network instance
type NetworkInstances_NetworkInstance_Encapsulation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The on-the-wire encapsulation that should be used when sending traffic from
    // this network instance. The type is one of the following: MPLSVXLAN.
    EncapsulationType interface{}

    // The label allocation mode to be used for L3 entries in the network
    // instance. The type is one of the following:
    // PERPREFIXPERNEXTHOPINSTANCELABEL.
    LabelAllocationMode interface{}

    // Whether the control-word should be used for the network instance. The type
    // is bool.
    ControlWord interface{}
}

func (state *NetworkInstances_NetworkInstance_Encapsulation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "encapsulation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["encapsulation-type"] = types.YLeaf{"EncapsulationType", state.EncapsulationType}
    state.EntityData.Leafs["label-allocation-mode"] = types.YLeaf{"LabelAllocationMode", state.LabelAllocationMode}
    state.EntityData.Leafs["control-word"] = types.YLeaf{"ControlWord", state.ControlWord}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies
// Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
type NetworkInstances_NetworkInstance_InterInstancePolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy
}

func (interInstancePolicies *NetworkInstances_NetworkInstance_InterInstancePolicies) GetEntityData() *types.CommonEntityData {
    interInstancePolicies.EntityData.YFilter = interInstancePolicies.YFilter
    interInstancePolicies.EntityData.YangName = "inter-instance-policies"
    interInstancePolicies.EntityData.BundleName = "openconfig"
    interInstancePolicies.EntityData.ParentYangName = "network-instance"
    interInstancePolicies.EntityData.SegmentPath = "inter-instance-policies"
    interInstancePolicies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interInstancePolicies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interInstancePolicies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interInstancePolicies.EntityData.Children = make(map[string]types.YChild)
    interInstancePolicies.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &interInstancePolicies.ApplyPolicy}
    interInstancePolicies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interInstancePolicies.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "inter-instance-policies"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections
// Policies dictating how RIB or FIB entries are propagated
// between tables
type NetworkInstances_NetworkInstance_TableConnections struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of connections between pairs of routing or forwarding tables, the
    // leaking of entries between which is specified by the import policy.  A
    // connection connecting a source table to a destination table implies that
    // routes that match the policy specified for the connection are available for
    // the destination protocol to advertise, or match within its policies. The
    // type is slice of
    // NetworkInstances_NetworkInstance_TableConnections_TableConnection.
    TableConnection []NetworkInstances_NetworkInstance_TableConnections_TableConnection
}

func (tableConnections *NetworkInstances_NetworkInstance_TableConnections) GetEntityData() *types.CommonEntityData {
    tableConnections.EntityData.YFilter = tableConnections.YFilter
    tableConnections.EntityData.YangName = "table-connections"
    tableConnections.EntityData.BundleName = "openconfig"
    tableConnections.EntityData.ParentYangName = "network-instance"
    tableConnections.EntityData.SegmentPath = "table-connections"
    tableConnections.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tableConnections.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tableConnections.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tableConnections.EntityData.Children = make(map[string]types.YChild)
    tableConnections.EntityData.Children["table-connection"] = types.YChild{"TableConnection", nil}
    for i := range tableConnections.TableConnection {
        tableConnections.EntityData.Children[types.GetSegmentPath(&tableConnections.TableConnection[i])] = types.YChild{"TableConnection", &tableConnections.TableConnection[i]}
    }
    tableConnections.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tableConnections.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection
// A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
// 
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
type NetworkInstances_NetworkInstance_TableConnections_TableConnection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The name of the protocol associated with the table
    // which should be utilised as the source of forwarding or routing
    // information. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    SrcProtocol interface{}

    // This attribute is a key. The table to which routing entries should be
    // exported. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    DstProtocol interface{}

    // This attribute is a key. The address family associated with the connection.
    // The type is one of the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}

    // Configuration parameters relating to the connection between tables.
    Config NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config

    // State parameters relating to the connection between tables.
    State NetworkInstances_NetworkInstance_TableConnections_TableConnection_State
}

func (tableConnection *NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetEntityData() *types.CommonEntityData {
    tableConnection.EntityData.YFilter = tableConnection.YFilter
    tableConnection.EntityData.YangName = "table-connection"
    tableConnection.EntityData.BundleName = "openconfig"
    tableConnection.EntityData.ParentYangName = "table-connections"
    tableConnection.EntityData.SegmentPath = "table-connection" + "[src-protocol='" + fmt.Sprintf("%v", tableConnection.SrcProtocol) + "']" + "[dst-protocol='" + fmt.Sprintf("%v", tableConnection.DstProtocol) + "']" + "[address-family='" + fmt.Sprintf("%v", tableConnection.AddressFamily) + "']"
    tableConnection.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tableConnection.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tableConnection.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tableConnection.EntityData.Children = make(map[string]types.YChild)
    tableConnection.EntityData.Children["config"] = types.YChild{"Config", &tableConnection.Config}
    tableConnection.EntityData.Children["state"] = types.YChild{"State", &tableConnection.State}
    tableConnection.EntityData.Leafs = make(map[string]types.YLeaf)
    tableConnection.EntityData.Leafs["src-protocol"] = types.YLeaf{"SrcProtocol", tableConnection.SrcProtocol}
    tableConnection.EntityData.Leafs["dst-protocol"] = types.YLeaf{"DstProtocol", tableConnection.DstProtocol}
    tableConnection.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", tableConnection.AddressFamily}
    return &(tableConnection.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config
// Configuration parameters relating to the connection
// between tables
type NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The source protocol for the table connection. The type is one of the
    // following: BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    SrcProtocol interface{}

    // The address family associated with the connection. This must be defined for
    // the source protocol. The target address family is implicitly defined by the
    // address family specified for the source protocol. The type is one of the
    // following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}

    // The destination protocol for the table connection. The type is one of the
    // following: BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    DstProtocol interface{}

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "table-connection"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["src-protocol"] = types.YLeaf{"SrcProtocol", config.SrcProtocol}
    config.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", config.AddressFamily}
    config.EntityData.Leafs["dst-protocol"] = types.YLeaf{"DstProtocol", config.DstProtocol}
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection_State
// State parameters relating to the connection between
// tables
type NetworkInstances_NetworkInstance_TableConnections_TableConnection_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The source protocol for the table connection. The type is one of the
    // following: BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    SrcProtocol interface{}

    // The address family associated with the connection. This must be defined for
    // the source protocol. The target address family is implicitly defined by the
    // address family specified for the source protocol. The type is one of the
    // following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}

    // The destination protocol for the table connection. The type is one of the
    // following: BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    DstProtocol interface{}

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "table-connection"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["src-protocol"] = types.YLeaf{"SrcProtocol", state.SrcProtocol}
    state.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", state.AddressFamily}
    state.EntityData.Leafs["dst-protocol"] = types.YLeaf{"DstProtocol", state.DstProtocol}
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces
// The interfaces that are associated with this network
// instance
type NetworkInstances_NetworkInstance_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An interface associated with the network instance. The type is slice of
    // NetworkInstances_NetworkInstance_Interfaces_Interface_.
    Interface_ []NetworkInstances_NetworkInstance_Interfaces_Interface
}

func (interfaces *NetworkInstances_NetworkInstance_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "openconfig"
    interfaces.EntityData.ParentYangName = "network-instance"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaces.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaces.EntityData.Children = make(map[string]types.YChild)
    interfaces.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range interfaces.Interface_ {
        interfaces.EntityData.Children[types.GetSegmentPath(&interfaces.Interface_[i])] = types.YChild{"Interface_", &interfaces.Interface_[i]}
    }
    interfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaces.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface
// An interface associated with the network instance
type NetworkInstances_NetworkInstance_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A reference to an identifier for this interface
    // which acts as a key for this list. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Interfaces_Interface_Config_Id
    Id interface{}

    // Configuration parameters relating to the associated interface.
    Config NetworkInstances_NetworkInstance_Interfaces_Interface_Config

    // Operational state parameters relating to the associated interface.
    State NetworkInstances_NetworkInstance_Interfaces_Interface_State
}

func (self *NetworkInstances_NetworkInstance_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + "[id='" + fmt.Sprintf("%v", self.Id) + "']"
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Children["config"] = types.YChild{"Config", &self.Config}
    self.EntityData.Children["state"] = types.YChild{"State", &self.State}
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["id"] = types.YLeaf{"Id", self.Id}
    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface_Config
// Configuration parameters relating to the associated
// interface
type NetworkInstances_NetworkInstance_Interfaces_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for this interface - this is expressed as a free-text
    // string. The type is string.
    Id interface{}

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}

    // The address families on the subinterface which are to be associated with
    // this network instance. When this leaf-list is empty and the network
    // instance requires Layer 3 information the address families for which the
    // network instance is enabled should be imported. If the value of this
    // leaf-list is specified then the association MUST only be made for those
    // address families that are included in the list. The type is slice of
    // ['IPV4', 'IPV6', 'MPLS', 'L2ETHERNET'].
    AssociatedAddressFamilies []interface{}
}

func (config *NetworkInstances_NetworkInstance_Interfaces_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["id"] = types.YLeaf{"Id", config.Id}
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    config.EntityData.Leafs["associated-address-families"] = types.YLeaf{"AssociatedAddressFamilies", config.AssociatedAddressFamilies}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface_State
// Operational state parameters relating to the
// associated interface
type NetworkInstances_NetworkInstance_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for this interface - this is expressed as a free-text
    // string. The type is string.
    Id interface{}

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}

    // The address families on the subinterface which are to be associated with
    // this network instance. When this leaf-list is empty and the network
    // instance requires Layer 3 information the address families for which the
    // network instance is enabled should be imported. If the value of this
    // leaf-list is specified then the association MUST only be made for those
    // address families that are included in the list. The type is slice of
    // ['IPV4', 'IPV6', 'MPLS', 'L2ETHERNET'].
    AssociatedAddressFamilies []interface{}
}

func (state *NetworkInstances_NetworkInstance_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["id"] = types.YLeaf{"Id", state.Id}
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    state.EntityData.Leafs["associated-address-families"] = types.YLeaf{"AssociatedAddressFamilies", state.AssociatedAddressFamilies}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Tables
// The routing tables that are managed by this network
// instance
type NetworkInstances_NetworkInstance_Tables struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A network instance manages one or more forwarding or routing tables. These
    // may reflect a Layer 2 forwarding information base, a Layer 3 routing table,
    // or an MPLS LFIB.  The table populated by a protocol within an instance is
    // identified by the protocol identifier (e.g., BGP, IS-IS) and the address
    // family (e.g., IPv4, IPv6) supported by that protocol. Multiple instances of
    // the same protocol populate a single table -- such that a single IS-IS or
    // OSPF IPv4 table exists per network instance.  An implementation is expected
    // to create entries within this list when the relevant protocol context is
    // enabled. i.e., when a BGP instance is created with IPv4 and IPv6 address
    // families enabled, the protocol=BGP, address-family=IPv4 table is created by
    // the system. The type is slice of
    // NetworkInstances_NetworkInstance_Tables_Table.
    Table []NetworkInstances_NetworkInstance_Tables_Table
}

func (tables *NetworkInstances_NetworkInstance_Tables) GetEntityData() *types.CommonEntityData {
    tables.EntityData.YFilter = tables.YFilter
    tables.EntityData.YangName = "tables"
    tables.EntityData.BundleName = "openconfig"
    tables.EntityData.ParentYangName = "network-instance"
    tables.EntityData.SegmentPath = "tables"
    tables.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tables.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tables.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tables.EntityData.Children = make(map[string]types.YChild)
    tables.EntityData.Children["table"] = types.YChild{"Table", nil}
    for i := range tables.Table {
        tables.EntityData.Children[types.GetSegmentPath(&tables.Table[i])] = types.YChild{"Table", &tables.Table[i]}
    }
    tables.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tables.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table
// A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
// 
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
// 
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
type NetworkInstances_NetworkInstance_Tables_Table struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A reference to the protocol that populates the
    // table. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Protocol interface{}

    // This attribute is a key. A reference to the address-family that the table
    // represents. The type is one of the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}

    // Configuration parameters relating to the table.
    Config NetworkInstances_NetworkInstance_Tables_Table_Config

    // State parameters related to the table.
    State NetworkInstances_NetworkInstance_Tables_Table_State
}

func (table *NetworkInstances_NetworkInstance_Tables_Table) GetEntityData() *types.CommonEntityData {
    table.EntityData.YFilter = table.YFilter
    table.EntityData.YangName = "table"
    table.EntityData.BundleName = "openconfig"
    table.EntityData.ParentYangName = "tables"
    table.EntityData.SegmentPath = "table" + "[protocol='" + fmt.Sprintf("%v", table.Protocol) + "']" + "[address-family='" + fmt.Sprintf("%v", table.AddressFamily) + "']"
    table.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    table.EntityData.NamespaceTable = openconfig.GetNamespaces()
    table.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    table.EntityData.Children = make(map[string]types.YChild)
    table.EntityData.Children["config"] = types.YChild{"Config", &table.Config}
    table.EntityData.Children["state"] = types.YChild{"State", &table.State}
    table.EntityData.Leafs = make(map[string]types.YLeaf)
    table.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", table.Protocol}
    table.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", table.AddressFamily}
    return &(table.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table_Config
// Configuration parameters relating to the
// table
type NetworkInstances_NetworkInstance_Tables_Table_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to the protocol that the table is associated with. The type is
    // one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Protocol interface{}

    // The address family (IPv4, IPv6) of the table's entries. The type is one of
    // the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}
}

func (config *NetworkInstances_NetworkInstance_Tables_Table_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "table"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", config.Protocol}
    config.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", config.AddressFamily}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table_State
// State parameters related to the table
type NetworkInstances_NetworkInstance_Tables_Table_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to the protocol that the table is associated with. The type is
    // one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Protocol interface{}

    // The address family (IPv4, IPv6) of the table's entries. The type is one of
    // the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}
}

func (state *NetworkInstances_NetworkInstance_Tables_Table_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "table"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", state.Protocol}
    state.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", state.AddressFamily}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints
// The set of connection points within a forwarding
// instance
type NetworkInstances_NetworkInstance_ConnectionPoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A connection point within a Layer 2 network instance. Each connection-point
    // consists of a set of interfaces only one of which is active at any one
    // time. Other than the specification of whether an interface is local (i.e.,
    // exists within this network-instance), or remote, all configuration and
    // state parameters are common. The type is slice of
    // NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint.
    ConnectionPoint []NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint
}

func (connectionPoints *NetworkInstances_NetworkInstance_ConnectionPoints) GetEntityData() *types.CommonEntityData {
    connectionPoints.EntityData.YFilter = connectionPoints.YFilter
    connectionPoints.EntityData.YangName = "connection-points"
    connectionPoints.EntityData.BundleName = "openconfig"
    connectionPoints.EntityData.ParentYangName = "network-instance"
    connectionPoints.EntityData.SegmentPath = "connection-points"
    connectionPoints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    connectionPoints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    connectionPoints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    connectionPoints.EntityData.Children = make(map[string]types.YChild)
    connectionPoints.EntityData.Children["connection-point"] = types.YChild{"ConnectionPoint", nil}
    for i := range connectionPoints.ConnectionPoint {
        connectionPoints.EntityData.Children[types.GetSegmentPath(&connectionPoints.ConnectionPoint[i])] = types.YChild{"ConnectionPoint", &connectionPoints.ConnectionPoint[i]}
    }
    connectionPoints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(connectionPoints.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint
// A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A locally significant reference for the
    // connection-point. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config_ConnectionPointId
    ConnectionPointId interface{}

    // Configuration parameters relating to a Layer 2 network instance connection
    // point.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config

    // Operational state parameters relating to a Layer 2 network instance
    // connection point.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State

    // The set of endpoints which are grouped within the connection point.
    Endpoints NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints
}

func (connectionPoint *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetEntityData() *types.CommonEntityData {
    connectionPoint.EntityData.YFilter = connectionPoint.YFilter
    connectionPoint.EntityData.YangName = "connection-point"
    connectionPoint.EntityData.BundleName = "openconfig"
    connectionPoint.EntityData.ParentYangName = "connection-points"
    connectionPoint.EntityData.SegmentPath = "connection-point" + "[connection-point-id='" + fmt.Sprintf("%v", connectionPoint.ConnectionPointId) + "']"
    connectionPoint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    connectionPoint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    connectionPoint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    connectionPoint.EntityData.Children = make(map[string]types.YChild)
    connectionPoint.EntityData.Children["config"] = types.YChild{"Config", &connectionPoint.Config}
    connectionPoint.EntityData.Children["state"] = types.YChild{"State", &connectionPoint.State}
    connectionPoint.EntityData.Children["endpoints"] = types.YChild{"Endpoints", &connectionPoint.Endpoints}
    connectionPoint.EntityData.Leafs = make(map[string]types.YLeaf)
    connectionPoint.EntityData.Leafs["connection-point-id"] = types.YLeaf{"ConnectionPointId", connectionPoint.ConnectionPointId}
    return &(connectionPoint.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config
// Configuration parameters relating to a Layer 2
// network instance connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for a connection point. The type is string.
    ConnectionPointId interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "connection-point"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["connection-point-id"] = types.YLeaf{"ConnectionPointId", config.ConnectionPointId}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State
// Operational state parameters relating to a Layer 2
// network instance connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for a connection point. The type is string.
    ConnectionPointId interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "connection-point"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["connection-point-id"] = types.YLeaf{"ConnectionPointId", state.ConnectionPointId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints
// The set of endpoints which are grouped within the
// connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of the endpoints (interfaces or remote connection points that can be
    // used for this connection point). The active endpoint is selected based on
    // the precedence that it is configured with. The type is slice of
    // NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint.
    Endpoint []NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint
}

func (endpoints *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) GetEntityData() *types.CommonEntityData {
    endpoints.EntityData.YFilter = endpoints.YFilter
    endpoints.EntityData.YangName = "endpoints"
    endpoints.EntityData.BundleName = "openconfig"
    endpoints.EntityData.ParentYangName = "connection-point"
    endpoints.EntityData.SegmentPath = "endpoints"
    endpoints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    endpoints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    endpoints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    endpoints.EntityData.Children = make(map[string]types.YChild)
    endpoints.EntityData.Children["endpoint"] = types.YChild{"Endpoint", nil}
    for i := range endpoints.Endpoint {
        endpoints.EntityData.Children[types.GetSegmentPath(&endpoints.Endpoint[i])] = types.YChild{"Endpoint", &endpoints.Endpoint[i]}
    }
    endpoints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(endpoints.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint
// A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A pointer to the configured identifier for the
    // endpoint. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config_EndpointId
    EndpointId interface{}

    // Configuration parameters relating to the endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config

    // Operational state parameters relating to the endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State

    // Configuration and operational state parameters relating to a local
    // interface.
    Local NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local

    // Configuration and operational state parameters relating to a remote
    // interface.
    Remote NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote
}

func (endpoint *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetEntityData() *types.CommonEntityData {
    endpoint.EntityData.YFilter = endpoint.YFilter
    endpoint.EntityData.YangName = "endpoint"
    endpoint.EntityData.BundleName = "openconfig"
    endpoint.EntityData.ParentYangName = "endpoints"
    endpoint.EntityData.SegmentPath = "endpoint" + "[endpoint-id='" + fmt.Sprintf("%v", endpoint.EndpointId) + "']"
    endpoint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    endpoint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    endpoint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    endpoint.EntityData.Children = make(map[string]types.YChild)
    endpoint.EntityData.Children["config"] = types.YChild{"Config", &endpoint.Config}
    endpoint.EntityData.Children["state"] = types.YChild{"State", &endpoint.State}
    endpoint.EntityData.Children["local"] = types.YChild{"Local", &endpoint.Local}
    endpoint.EntityData.Children["remote"] = types.YChild{"Remote", &endpoint.Remote}
    endpoint.EntityData.Leafs = make(map[string]types.YLeaf)
    endpoint.EntityData.Leafs["endpoint-id"] = types.YLeaf{"EndpointId", endpoint.EndpointId}
    return &(endpoint.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config
// Configuration parameters relating to the
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for the endpoint. The type is string.
    EndpointId interface{}

    // The precedence of the endpoint - the lowest precendence viable endpoint
    // will be utilised as the active endpoint within a connection. The type is
    // interface{} with range: 0..65535.
    Precedence interface{}

    // The type of endpoint that is referred to by the current endpoint. The type
    // is one of the following: LOCALREMOTE.
    Type_ interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "endpoint"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["endpoint-id"] = types.YLeaf{"EndpointId", config.EndpointId}
    config.EntityData.Leafs["precedence"] = types.YLeaf{"Precedence", config.Precedence}
    config.EntityData.Leafs["type"] = types.YLeaf{"Type_", config.Type_}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State
// Operational state parameters relating to the
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for the endpoint. The type is string.
    EndpointId interface{}

    // The precedence of the endpoint - the lowest precendence viable endpoint
    // will be utilised as the active endpoint within a connection. The type is
    // interface{} with range: 0..65535.
    Precedence interface{}

    // The type of endpoint that is referred to by the current endpoint. The type
    // is one of the following: LOCALREMOTE.
    Type_ interface{}

    // When the backup endpoint is active, the value of this parameter is set to
    // true. The type is bool.
    Active interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "endpoint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["endpoint-id"] = types.YLeaf{"EndpointId", state.EndpointId}
    state.EntityData.Leafs["precedence"] = types.YLeaf{"Precedence", state.Precedence}
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["active"] = types.YLeaf{"Active", state.Active}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local
// Configuration and operational state parameters
// relating to a local interface
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to a local endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config

    // Operational state parameters relating to a local endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State
}

func (local *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "openconfig"
    local.EntityData.ParentYangName = "endpoint"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    local.EntityData.NamespaceTable = openconfig.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Children["config"] = types.YChild{"Config", &local.Config}
    local.EntityData.Children["state"] = types.YChild{"State", &local.State}
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(local.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config
// Configuration parameters relating to a local
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "local"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State
// Operational state parameters relating to a
// local endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "local"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote
// Configuration and operational state parameters
// relating to a remote interface
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to a remote endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config

    // Operational state parameters relating to a remote endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State
}

func (remote *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetEntityData() *types.CommonEntityData {
    remote.EntityData.YFilter = remote.YFilter
    remote.EntityData.YangName = "remote"
    remote.EntityData.BundleName = "openconfig"
    remote.EntityData.ParentYangName = "endpoint"
    remote.EntityData.SegmentPath = "remote"
    remote.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    remote.EntityData.NamespaceTable = openconfig.GetNamespaces()
    remote.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    remote.EntityData.Children = make(map[string]types.YChild)
    remote.EntityData.Children["config"] = types.YChild{"Config", &remote.Config}
    remote.EntityData.Children["state"] = types.YChild{"State", &remote.State}
    remote.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(remote.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config
// Configuration parameters relating to a remote
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP address of the device which hosts the remote end-point. The type is
    // one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteSystem interface{}

    // The virtual-circuit identifier that identifies the connection at the remote
    // end-point. The type is interface{} with range: 0..4294967295.
    VirtualCircuitIdentifier interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "remote"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["remote-system"] = types.YLeaf{"RemoteSystem", config.RemoteSystem}
    config.EntityData.Leafs["virtual-circuit-identifier"] = types.YLeaf{"VirtualCircuitIdentifier", config.VirtualCircuitIdentifier}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State
// Operational state parameters relating to
// a remote endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP address of the device which hosts the remote end-point. The type is
    // one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteSystem interface{}

    // The virtual-circuit identifier that identifies the connection at the remote
    // end-point. The type is interface{} with range: 0..4294967295.
    VirtualCircuitIdentifier interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "remote"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["remote-system"] = types.YLeaf{"RemoteSystem", state.RemoteSystem}
    state.EntityData.Leafs["virtual-circuit-identifier"] = types.YLeaf{"VirtualCircuitIdentifier", state.VirtualCircuitIdentifier}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls
// node added for compilation for forward compatibility
type NetworkInstances_NetworkInstance_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // node added for compilation for forward compatibility.
    Global NetworkInstances_NetworkInstance_Mpls_Global
}

func (mpls *NetworkInstances_NetworkInstance_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "openconfig"
    mpls.EntityData.ParentYangName = "network-instance"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mpls.EntityData.Children = make(map[string]types.YChild)
    mpls.EntityData.Children["global"] = types.YChild{"Global", &mpls.Global}
    mpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mpls.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global
// node added for compilation for forward compatibility
type NetworkInstances_NetworkInstance_Mpls_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // node added for compilation for forward compatibility.
    ReservedLabelBlocks NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks
}

func (global *NetworkInstances_NetworkInstance_Mpls_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "mpls"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = make(map[string]types.YChild)
    global.EntityData.Children["reserved-label-blocks"] = types.YChild{"ReservedLabelBlocks", &global.ReservedLabelBlocks}
    global.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks
// node added for compilation for forward compatibility
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // node added for compilation for forward compatibility.
    ReservedLabelBlock NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock
}

func (reservedLabelBlocks *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) GetEntityData() *types.CommonEntityData {
    reservedLabelBlocks.EntityData.YFilter = reservedLabelBlocks.YFilter
    reservedLabelBlocks.EntityData.YangName = "reserved-label-blocks"
    reservedLabelBlocks.EntityData.BundleName = "openconfig"
    reservedLabelBlocks.EntityData.ParentYangName = "global"
    reservedLabelBlocks.EntityData.SegmentPath = "reserved-label-blocks"
    reservedLabelBlocks.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    reservedLabelBlocks.EntityData.NamespaceTable = openconfig.GetNamespaces()
    reservedLabelBlocks.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    reservedLabelBlocks.EntityData.Children = make(map[string]types.YChild)
    reservedLabelBlocks.EntityData.Children["reserved-label-block"] = types.YChild{"ReservedLabelBlock", &reservedLabelBlocks.ReservedLabelBlock}
    reservedLabelBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(reservedLabelBlocks.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock
// node added for compilation for forward compatibility
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // node added for compilation for forward compatibility.
    Config NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config
}

func (reservedLabelBlock *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetEntityData() *types.CommonEntityData {
    reservedLabelBlock.EntityData.YFilter = reservedLabelBlock.YFilter
    reservedLabelBlock.EntityData.YangName = "reserved-label-block"
    reservedLabelBlock.EntityData.BundleName = "openconfig"
    reservedLabelBlock.EntityData.ParentYangName = "reserved-label-blocks"
    reservedLabelBlock.EntityData.SegmentPath = "reserved-label-block"
    reservedLabelBlock.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    reservedLabelBlock.EntityData.NamespaceTable = openconfig.GetNamespaces()
    reservedLabelBlock.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    reservedLabelBlock.EntityData.Children = make(map[string]types.YChild)
    reservedLabelBlock.EntityData.Children["config"] = types.YChild{"Config", &reservedLabelBlock.Config}
    reservedLabelBlock.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(reservedLabelBlock.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config
// node added for compilation for forward compatibility
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // node added for compilation for forward compatibility. The type is slice of
    // string.
    LocalId []interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reserved-label-block"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", config.LocalId}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting
// Configuration and operational state parameters relating to
// segment routing.
type NetworkInstances_NetworkInstance_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters relating to the SRGBs
    // defined for the system.
    Srgbs NetworkInstances_NetworkInstance_SegmentRouting_Srgbs

    // Configuration and operational state parameters relating to the Segment
    // Routing Local Blocks (SRLBs) defined for the system.
    Srlbs NetworkInstances_NetworkInstance_SegmentRouting_Srlbs
}

func (segmentRouting *NetworkInstances_NetworkInstance_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "network-instance"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = make(map[string]types.YChild)
    segmentRouting.EntityData.Children["srgbs"] = types.YChild{"Srgbs", &segmentRouting.Srgbs}
    segmentRouting.EntityData.Children["srlbs"] = types.YChild{"Srlbs", &segmentRouting.Srlbs}
    segmentRouting.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs
// Configuration and operational state parameters relating to the
// SRGBs defined for the system.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single definition of an SRGB which may comprise of multiple sets of
    // dataplane addresses (IPv6 addresses, or MPLS labels). The type is slice of
    // NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb.
    Srgb []NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb
}

func (srgbs *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) GetEntityData() *types.CommonEntityData {
    srgbs.EntityData.YFilter = srgbs.YFilter
    srgbs.EntityData.YangName = "srgbs"
    srgbs.EntityData.BundleName = "openconfig"
    srgbs.EntityData.ParentYangName = "segment-routing"
    srgbs.EntityData.SegmentPath = "srgbs"
    srgbs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbs.EntityData.Children = make(map[string]types.YChild)
    srgbs.EntityData.Children["srgb"] = types.YChild{"Srgb", nil}
    for i := range srgbs.Srgb {
        srgbs.EntityData.Children[types.GetSegmentPath(&srgbs.Srgb[i])] = types.YChild{"Srgb", &srgbs.Srgb[i]}
    }
    srgbs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(srgbs.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb
// A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A reference to the identifier for the SRGB. The
    // type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    LocalId interface{}

    // Configuration parameters relating to the SRGB.
    Config NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config

    // State parameters relating to the SRGB.
    State NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State
}

func (srgb *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetEntityData() *types.CommonEntityData {
    srgb.EntityData.YFilter = srgb.YFilter
    srgb.EntityData.YangName = "srgb"
    srgb.EntityData.BundleName = "openconfig"
    srgb.EntityData.ParentYangName = "srgbs"
    srgb.EntityData.SegmentPath = "srgb" + "[local-id='" + fmt.Sprintf("%v", srgb.LocalId) + "']"
    srgb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgb.EntityData.Children = make(map[string]types.YChild)
    srgb.EntityData.Children["config"] = types.YChild{"Config", &srgb.Config}
    srgb.EntityData.Children["state"] = types.YChild{"State", &srgb.State}
    srgb.EntityData.Leafs = make(map[string]types.YLeaf)
    srgb.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", srgb.LocalId}
    return &(srgb.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config
// Configuration parameters relating to the SRGB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique identifier for the segment routing global block on the local system.
    // The type is string.
    LocalId interface{}

    // The dataplane being used to instantiate the SRGB. When MPLS is specified
    // the set of MPLS label blocks that are defined in the mpls-label-blocks list
    // are used to make up the SRGB. When IPv6 is specified, the set of IPv6
    // prefixes specified in the ipv6-prefixes list are used. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A list of refences to the label blocks that are used to make up the SRGB.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlocks []interface{}

    // A list of IPv6 prefixes which are to be used for segment routing using the
    // IPv6 dataplane. The type is slice of string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Ipv6Prefixes []interface{}
}

func (config *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "srgb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", config.LocalId}
    config.EntityData.Leafs["dataplane-type"] = types.YLeaf{"DataplaneType", config.DataplaneType}
    config.EntityData.Leafs["mpls-label-blocks"] = types.YLeaf{"MplsLabelBlocks", config.MplsLabelBlocks}
    config.EntityData.Leafs["ipv6-prefixes"] = types.YLeaf{"Ipv6Prefixes", config.Ipv6Prefixes}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State
// State parameters relating to the SRGB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique identifier for the segment routing global block on the local system.
    // The type is string.
    LocalId interface{}

    // The dataplane being used to instantiate the SRGB. When MPLS is specified
    // the set of MPLS label blocks that are defined in the mpls-label-blocks list
    // are used to make up the SRGB. When IPv6 is specified, the set of IPv6
    // prefixes specified in the ipv6-prefixes list are used. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A list of refences to the label blocks that are used to make up the SRGB.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlocks []interface{}

    // A list of IPv6 prefixes which are to be used for segment routing using the
    // IPv6 dataplane. The type is slice of string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Ipv6Prefixes []interface{}

    // The total number of SRGB entries that are available within the SRGB. The
    // type is interface{} with range: 0..4294967295.
    Size interface{}

    // The total number of SRGB entries that have already been alocated by
    // protocols referencing the SRGB. The type is interface{} with range:
    // 0..4294967295.
    Used interface{}
}

func (state *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srgb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", state.LocalId}
    state.EntityData.Leafs["dataplane-type"] = types.YLeaf{"DataplaneType", state.DataplaneType}
    state.EntityData.Leafs["mpls-label-blocks"] = types.YLeaf{"MplsLabelBlocks", state.MplsLabelBlocks}
    state.EntityData.Leafs["ipv6-prefixes"] = types.YLeaf{"Ipv6Prefixes", state.Ipv6Prefixes}
    state.EntityData.Leafs["size"] = types.YLeaf{"Size", state.Size}
    state.EntityData.Leafs["used"] = types.YLeaf{"Used", state.Used}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs
// Configuration and operational state parameters relating to the
// Segment Routing Local Blocks (SRLBs) defined for the system.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A definition of a Segment Routing Local Block, defined to be a set of
    // Segment Identifiers (specified as MPLS labels or IPv6 addreses) that are
    // defined for local allocation by the system. A block may optionally be
    // advertised into an IGP. The type is slice of
    // NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb.
    Srlb []NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb
}

func (srlbs *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) GetEntityData() *types.CommonEntityData {
    srlbs.EntityData.YFilter = srlbs.YFilter
    srlbs.EntityData.YangName = "srlbs"
    srlbs.EntityData.BundleName = "openconfig"
    srlbs.EntityData.ParentYangName = "segment-routing"
    srlbs.EntityData.SegmentPath = "srlbs"
    srlbs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlbs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlbs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlbs.EntityData.Children = make(map[string]types.YChild)
    srlbs.EntityData.Children["srlb"] = types.YChild{"Srlb", nil}
    for i := range srlbs.Srlb {
        srlbs.EntityData.Children[types.GetSegmentPath(&srlbs.Srlb[i])] = types.YChild{"Srlb", &srlbs.Srlb[i]}
    }
    srlbs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(srlbs.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb
// A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the local identifier used for the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    LocalId interface{}

    // Configuration parameters relating to the SRLB.
    Config NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config

    // Operational state parmeters relating to the SRLB.
    State NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State
}

func (srlb *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetEntityData() *types.CommonEntityData {
    srlb.EntityData.YFilter = srlb.YFilter
    srlb.EntityData.YangName = "srlb"
    srlb.EntityData.BundleName = "openconfig"
    srlb.EntityData.ParentYangName = "srlbs"
    srlb.EntityData.SegmentPath = "srlb" + "[local-id='" + fmt.Sprintf("%v", srlb.LocalId) + "']"
    srlb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlb.EntityData.Children = make(map[string]types.YChild)
    srlb.EntityData.Children["config"] = types.YChild{"Config", &srlb.Config}
    srlb.EntityData.Children["state"] = types.YChild{"State", &srlb.State}
    srlb.EntityData.Leafs = make(map[string]types.YLeaf)
    srlb.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", srlb.LocalId}
    return &(srlb.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config
// Configuration parameters relating to the SRLB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique local identifier used for the Segment Routing Local Block. The
    // identifier is used when referencing the SRLB within other contexts. The
    // type is string.
    LocalId interface{}

    // The dataplane that is to be used for the Segment Routing Local Block. When
    // MPLS is specified, the local block corresponds to a block of MPLS labels;
    // when IPv6 is specified it corresponds to an IPv6 prefix. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A reference to the MPLS label block that is used to contain the SIDs of the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlock interface{}

    // The IPv6 prefix that is used for the SRLB. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Ipv6Prefix interface{}
}

func (config *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "srlb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", config.LocalId}
    config.EntityData.Leafs["dataplane-type"] = types.YLeaf{"DataplaneType", config.DataplaneType}
    config.EntityData.Leafs["mpls-label-block"] = types.YLeaf{"MplsLabelBlock", config.MplsLabelBlock}
    config.EntityData.Leafs["ipv6-prefix"] = types.YLeaf{"Ipv6Prefix", config.Ipv6Prefix}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State
// Operational state parmeters relating to the SRLB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique local identifier used for the Segment Routing Local Block. The
    // identifier is used when referencing the SRLB within other contexts. The
    // type is string.
    LocalId interface{}

    // The dataplane that is to be used for the Segment Routing Local Block. When
    // MPLS is specified, the local block corresponds to a block of MPLS labels;
    // when IPv6 is specified it corresponds to an IPv6 prefix. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A reference to the MPLS label block that is used to contain the SIDs of the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlock interface{}

    // The IPv6 prefix that is used for the SRLB. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Ipv6Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srlb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-id"] = types.YLeaf{"LocalId", state.LocalId}
    state.EntityData.Leafs["dataplane-type"] = types.YLeaf{"DataplaneType", state.DataplaneType}
    state.EntityData.Leafs["mpls-label-block"] = types.YLeaf{"MplsLabelBlock", state.MplsLabelBlock}
    state.EntityData.Leafs["ipv6-prefix"] = types.YLeaf{"Ipv6Prefix", state.Ipv6Prefix}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans
// Container for VLAN configuration and state
// variables
type NetworkInstances_NetworkInstance_Vlans struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured VLANs keyed by id. The type is slice of
    // NetworkInstances_NetworkInstance_Vlans_Vlan.
    Vlan []NetworkInstances_NetworkInstance_Vlans_Vlan
}

func (vlans *NetworkInstances_NetworkInstance_Vlans) GetEntityData() *types.CommonEntityData {
    vlans.EntityData.YFilter = vlans.YFilter
    vlans.EntityData.YangName = "vlans"
    vlans.EntityData.BundleName = "openconfig"
    vlans.EntityData.ParentYangName = "network-instance"
    vlans.EntityData.SegmentPath = "vlans"
    vlans.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    vlans.EntityData.NamespaceTable = openconfig.GetNamespaces()
    vlans.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    vlans.EntityData.Children = make(map[string]types.YChild)
    vlans.EntityData.Children["vlan"] = types.YChild{"Vlan", nil}
    for i := range vlans.Vlan {
        vlans.EntityData.Children[types.GetSegmentPath(&vlans.Vlan[i])] = types.YChild{"Vlan", &vlans.Vlan[i]}
    }
    vlans.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vlans.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan
// Configured VLANs keyed by id
type NetworkInstances_NetworkInstance_Vlans_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. references the configured vlan-id. The type is
    // string with range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    VlanId interface{}

    // Configuration parameters for VLANs.
    Config NetworkInstances_NetworkInstance_Vlans_Vlan_Config

    // State variables for VLANs.
    State NetworkInstances_NetworkInstance_Vlans_Vlan_State

    // Enclosing container for list of member interfaces.
    Members NetworkInstances_NetworkInstance_Vlans_Vlan_Members
}

func (vlan *NetworkInstances_NetworkInstance_Vlans_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "openconfig"
    vlan.EntityData.ParentYangName = "vlans"
    vlan.EntityData.SegmentPath = "vlan" + "[vlan-id='" + fmt.Sprintf("%v", vlan.VlanId) + "']"
    vlan.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    vlan.EntityData.NamespaceTable = openconfig.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    vlan.EntityData.Children = make(map[string]types.YChild)
    vlan.EntityData.Children["config"] = types.YChild{"Config", &vlan.Config}
    vlan.EntityData.Children["state"] = types.YChild{"State", &vlan.State}
    vlan.EntityData.Children["members"] = types.YChild{"Members", &vlan.Members}
    vlan.EntityData.Leafs = make(map[string]types.YLeaf)
    vlan.EntityData.Leafs["vlan-id"] = types.YLeaf{"VlanId", vlan.VlanId}
    return &(vlan.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Config
// Configuration parameters for VLANs
type NetworkInstances_NetworkInstance_Vlans_Vlan_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface VLAN id. The type is interface{} with range: 1..4094.
    VlanId interface{}

    // Interface VLAN name. The type is string.
    Name interface{}

    // Admin state of the VLAN. The type is Status. The default value is ACTIVE.
    Status interface{}

    // Optionally set the tag protocol identifier field (TPID) that is accepted on
    // the VLAN. The type is one of the following:
    // TPID0x8100TPID0x8A88TPID0x9100TPID0X9200. The default value is
    // oc-vlan-types:TPID_0x8100.
    Tpid interface{}
}

func (config *NetworkInstances_NetworkInstance_Vlans_Vlan_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "vlan"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["vlan-id"] = types.YLeaf{"VlanId", config.VlanId}
    config.EntityData.Leafs["name"] = types.YLeaf{"Name", config.Name}
    config.EntityData.Leafs["status"] = types.YLeaf{"Status", config.Status}
    config.EntityData.Leafs["tpid"] = types.YLeaf{"Tpid", config.Tpid}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status represents Admin state of the VLAN
type NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status string

const (
    // VLAN is active
    NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status_ACTIVE NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status = "ACTIVE"

    // VLAN is inactive / suspended
    NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status_SUSPENDED NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status = "SUSPENDED"
)

// NetworkInstances_NetworkInstance_Vlans_Vlan_State
// State variables for VLANs
type NetworkInstances_NetworkInstance_Vlans_Vlan_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface VLAN id. The type is interface{} with range: 1..4094.
    VlanId interface{}

    // Interface VLAN name. The type is string.
    Name interface{}

    // Admin state of the VLAN. The type is Status. The default value is ACTIVE.
    Status interface{}

    // Optionally set the tag protocol identifier field (TPID) that is accepted on
    // the VLAN. The type is one of the following:
    // TPID0x8100TPID0x8A88TPID0x9100TPID0X9200. The default value is
    // oc-vlan-types:TPID_0x8100.
    Tpid interface{}
}

func (state *NetworkInstances_NetworkInstance_Vlans_Vlan_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "vlan"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["vlan-id"] = types.YLeaf{"VlanId", state.VlanId}
    state.EntityData.Leafs["name"] = types.YLeaf{"Name", state.Name}
    state.EntityData.Leafs["status"] = types.YLeaf{"Status", state.Status}
    state.EntityData.Leafs["tpid"] = types.YLeaf{"Tpid", state.Tpid}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status represents Admin state of the VLAN
type NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status string

const (
    // VLAN is active
    NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status_ACTIVE NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status = "ACTIVE"

    // VLAN is inactive / suspended
    NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status_SUSPENDED NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status = "SUSPENDED"
)

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members
// Enclosing container for list of member interfaces
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of references to interfaces / subinterfaces associated with the VLAN.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member.
    Member []NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member
}

func (members *NetworkInstances_NetworkInstance_Vlans_Vlan_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "openconfig"
    members.EntityData.ParentYangName = "vlan"
    members.EntityData.SegmentPath = "members"
    members.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    members.EntityData.NamespaceTable = openconfig.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    members.EntityData.Children = make(map[string]types.YChild)
    members.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range members.Member {
        members.EntityData.Children[types.GetSegmentPath(&members.Member[i])] = types.YChild{"Member", &members.Member[i]}
    }
    members.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(members.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member
// List of references to interfaces / subinterfaces
// associated with the VLAN.
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef
}

func (member *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "openconfig"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member"
    member.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    member.EntityData.NamespaceTable = openconfig.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &member.InterfaceRef}
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(member.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "member"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts
// The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
type NetworkInstances_NetworkInstance_Afts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An individual abstract forwarding table associated with a an address family
    // wtihin the network instance. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Aft.
    Aft []NetworkInstances_NetworkInstance_Afts_Aft
}

func (afts *NetworkInstances_NetworkInstance_Afts) GetEntityData() *types.CommonEntityData {
    afts.EntityData.YFilter = afts.YFilter
    afts.EntityData.YangName = "afts"
    afts.EntityData.BundleName = "openconfig"
    afts.EntityData.ParentYangName = "network-instance"
    afts.EntityData.SegmentPath = "afts"
    afts.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afts.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afts.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afts.EntityData.Children = make(map[string]types.YChild)
    afts.EntityData.Children["aft"] = types.YChild{"Aft", nil}
    for i := range afts.Aft {
        afts.EntityData.Children[types.GetSegmentPath(&afts.Aft[i])] = types.YChild{"Aft", &afts.Aft[i]}
    }
    afts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afts.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft
// An individual abstract forwarding table associated with a
// an address family wtihin the network instance.
type NetworkInstances_NetworkInstance_Afts_Aft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the address family with which the AFT
    // is associated. The type is one of the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}

    // Configuration parameters relating to the AFT.
    Config NetworkInstances_NetworkInstance_Afts_Aft_Config

    // Operational state parameters relating to the AFT.
    State NetworkInstances_NetworkInstance_Afts_Aft_State

    // Enclosing container for a list of abstract forwarding table entries within
    // the network instance for a particular protocol (e.g., IPv4, IPv6, MPLS).
    Entries NetworkInstances_NetworkInstance_Afts_Aft_Entries
}

func (aft *NetworkInstances_NetworkInstance_Afts_Aft) GetEntityData() *types.CommonEntityData {
    aft.EntityData.YFilter = aft.YFilter
    aft.EntityData.YangName = "aft"
    aft.EntityData.BundleName = "openconfig"
    aft.EntityData.ParentYangName = "afts"
    aft.EntityData.SegmentPath = "aft" + "[address-family='" + fmt.Sprintf("%v", aft.AddressFamily) + "']"
    aft.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    aft.EntityData.NamespaceTable = openconfig.GetNamespaces()
    aft.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    aft.EntityData.Children = make(map[string]types.YChild)
    aft.EntityData.Children["config"] = types.YChild{"Config", &aft.Config}
    aft.EntityData.Children["state"] = types.YChild{"State", &aft.State}
    aft.EntityData.Children["entries"] = types.YChild{"Entries", &aft.Entries}
    aft.EntityData.Leafs = make(map[string]types.YLeaf)
    aft.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", aft.AddressFamily}
    return &(aft.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Config
// Configuration parameters relating to the AFT.
type NetworkInstances_NetworkInstance_Afts_Aft_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The address family of entries that are described by the AFT. The type is
    // one of the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Aft_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "aft"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", config.AddressFamily}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_State
// Operational state parameters relating to the AFT.
type NetworkInstances_NetworkInstance_Afts_Aft_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The address family of entries that are described by the AFT. The type is
    // one of the following: IPV4IPV6MPLSL2ETHERNET.
    AddressFamily interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "aft"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["address-family"] = types.YLeaf{"AddressFamily", state.AddressFamily}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries
// Enclosing container for a list of abstract forwarding table
// entries within the network instance for a particular protocol
// (e.g., IPv4, IPv6, MPLS).
type NetworkInstances_NetworkInstance_Afts_Aft_Entries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding database entry within the network instance. The type is slice
    // of NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry.
    Entry []NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry
}

func (entries *NetworkInstances_NetworkInstance_Afts_Aft_Entries) GetEntityData() *types.CommonEntityData {
    entries.EntityData.YFilter = entries.YFilter
    entries.EntityData.YangName = "entries"
    entries.EntityData.BundleName = "openconfig"
    entries.EntityData.ParentYangName = "aft"
    entries.EntityData.SegmentPath = "entries"
    entries.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entries.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entries.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entries.EntityData.Children = make(map[string]types.YChild)
    entries.EntityData.Children["entry"] = types.YChild{"Entry", nil}
    for i := range entries.Entry {
        entries.EntityData.Children[types.GetSegmentPath(&entries.Entry[i])] = types.YChild{"Entry", &entries.Entry[i]}
    }
    entries.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(entries.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry
// A forwarding database entry within the network instance
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A pointer to the index of the AFT entry within the
    // network instance. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Config_Index
    Index interface{}

    // Configuration parameters relating to the forwarding entry.
    Config NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Config

    // Operational state parameters relating to the forwarding entry.
    State NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_State

    // Match criteria for the AFT entry.
    Match NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match

    // Enclosing container for the list of next-hops associated with the
    // forwarding entry.
    NextHops NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops
}

func (entry *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry) GetEntityData() *types.CommonEntityData {
    entry.EntityData.YFilter = entry.YFilter
    entry.EntityData.YangName = "entry"
    entry.EntityData.BundleName = "openconfig"
    entry.EntityData.ParentYangName = "entries"
    entry.EntityData.SegmentPath = "entry" + "[index='" + fmt.Sprintf("%v", entry.Index) + "']"
    entry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entry.EntityData.Children = make(map[string]types.YChild)
    entry.EntityData.Children["config"] = types.YChild{"Config", &entry.Config}
    entry.EntityData.Children["state"] = types.YChild{"State", &entry.State}
    entry.EntityData.Children["match"] = types.YChild{"Match", &entry.Match}
    entry.EntityData.Children["next-hops"] = types.YChild{"NextHops", &entry.NextHops}
    entry.EntityData.Leafs = make(map[string]types.YLeaf)
    entry.EntityData.Leafs["index"] = types.YLeaf{"Index", entry.Index}
    return &(entry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Config
// Configuration parameters relating to the forwarding
// entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique index referring to the AFT entry. The type is interface{} with
    // range: 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["index"] = types.YLeaf{"Index", config.Index}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_State
// Operational state parameters relating to the forwarding
// entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique index referring to the AFT entry. The type is interface{} with
    // range: 0..18446744073709551615.
    Index interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["index"] = types.YLeaf{"Index", state.Index}
    state.EntityData.Leafs["packets-forwarded"] = types.YLeaf{"PacketsForwarded", state.PacketsForwarded}
    state.EntityData.Leafs["octets-forwarded"] = types.YLeaf{"OctetsForwarded", state.OctetsForwarded}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match
// Match criteria for the AFT entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration of match criteria for the AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_Config

    // Operational state parameters for match criteria of the AFT entry.
    State NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef
}

func (match *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match) GetEntityData() *types.CommonEntityData {
    match.EntityData.YFilter = match.YFilter
    match.EntityData.YangName = "match"
    match.EntityData.BundleName = "openconfig"
    match.EntityData.ParentYangName = "entry"
    match.EntityData.SegmentPath = "match"
    match.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    match.EntityData.NamespaceTable = openconfig.GetNamespaces()
    match.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    match.EntityData.Children = make(map[string]types.YChild)
    match.EntityData.Children["config"] = types.YChild{"Config", &match.Config}
    match.EntityData.Children["state"] = types.YChild{"State", &match.State}
    match.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &match.InterfaceRef}
    match.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(match.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_Config
// Configuration of match criteria for the AFT entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (config *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "match"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_State
// Operational state parameters for match criteria of the
// AFT entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix that the forwarding entry matches. Used for Layer 3
    // forwarding entries. The type is one of the following types: string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    IpPrefix interface{}

    // The MAC address that the forwarding entry matches. Used for Layer 2
    // forwarding entries, e.g., within a VSI instance. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddress interface{}

    // The MPLS label that the forwarding entry matches. Used for MPLS forwarding
    // entries, whereby the local device acts as an LSR. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    MplsLabel interface{}

    // The value of the MPLS Traffic Class bits (formerly known as the MPLS
    // experimental bits) that are to be matched by the AFT entry. The type is
    // interface{} with range: 0..7.
    MplsTc interface{}

    // The value of the differentiated services code point (DSCP) to be matched
    // for the forwarding entry. The value is specified in cases where specific
    // class-based forwarding based on IP is implemented by the device. The type
    // is interface{} with range: 0..63.
    IpDscp interface{}

    // The value of the IP protocol field of an IPv4 packet, or the next-header
    // field of an IPv6 packet which is to be matched by the AFT entry. This field
    // is utilised where forwarding is performed based on L4 information. The type
    // is one of the following types: int with range: 0..254, or
    // :go:struct:`IPPROTOCOL <ydk/models/packet_match_types/IPPROTOCOL>`.
    IpProtocol interface{}

    // The value of the source port field of the transport header that is to be
    // matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4SrcPort interface{}

    // The value of the destination port field of the transport header that is to
    // be matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4DstPort interface{}

    // If the AFT entry was imported from another network instance (e.g., it
    // corresponds to a L3 forwarding entry which was learned within another
    // network-instance), the value of this leaf reflects the network-instance
    // from which it was learned.  For example, if the local network-instance
    // corresponds to a L3VRF, and routes are imported from the VPNv4
    // address-family of the BGP instance in the DEFAULT_INSTANCE, then this value
    // would reflect the DEFAULT_INSTANCE as the origin-network-instance. The type
    // is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    OriginNetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "match"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ip-prefix"] = types.YLeaf{"IpPrefix", state.IpPrefix}
    state.EntityData.Leafs["mac-address"] = types.YLeaf{"MacAddress", state.MacAddress}
    state.EntityData.Leafs["mpls-label"] = types.YLeaf{"MplsLabel", state.MplsLabel}
    state.EntityData.Leafs["mpls-tc"] = types.YLeaf{"MplsTc", state.MplsTc}
    state.EntityData.Leafs["ip-dscp"] = types.YLeaf{"IpDscp", state.IpDscp}
    state.EntityData.Leafs["ip-protocol"] = types.YLeaf{"IpProtocol", state.IpProtocol}
    state.EntityData.Leafs["l4-src-port"] = types.YLeaf{"L4SrcPort", state.L4SrcPort}
    state.EntityData.Leafs["l4-dst-port"] = types.YLeaf{"L4DstPort", state.L4DstPort}
    state.EntityData.Leafs["origin-network-instance"] = types.YLeaf{"OriginNetworkInstance", state.OriginNetworkInstance}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "match"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_Match_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops
// Enclosing container for the list of next-hops associated
// with the forwarding entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop.
    NextHop []NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = make(map[string]types.YChild)
    nextHops.EntityData.Children["next-hop"] = types.YChild{"NextHop", nil}
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children[types.GetSegmentPath(&nextHops.NextHop[i])] = types.YChild{"NextHop", &nextHops.NextHop[i]}
    }
    nextHops.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + "[index='" + fmt.Sprintf("%v", nextHop.Index) + "']"
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = make(map[string]types.YChild)
    nextHop.EntityData.Children["config"] = types.YChild{"Config", &nextHop.Config}
    nextHop.EntityData.Children["state"] = types.YChild{"State", &nextHop.State}
    nextHop.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &nextHop.InterfaceRef}
    nextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHop.EntityData.Leafs["index"] = types.YLeaf{"Index", nextHop.Index}
    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["index"] = types.YLeaf{"Index", config.Index}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoding as a leaf-list whereby the other of the
    // entries is such that the first entry is the label lowest down the label
    // stack to be popped.  If the local system pops the outer-most label 400,
    // then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 500, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/segment_routing/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/segment_routing/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    OriginProtocol interface{}

    // The network-instance within which the next-hop should be resolved. When
    // this leaf is unspecified, the next-hop is resolved within  the local
    // instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    NetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["index"] = types.YLeaf{"Index", state.Index}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    state.EntityData.Leafs["ip-address"] = types.YLeaf{"IpAddress", state.IpAddress}
    state.EntityData.Leafs["mac-address"] = types.YLeaf{"MacAddress", state.MacAddress}
    state.EntityData.Leafs["popped-mpls-label-stack"] = types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack}
    state.EntityData.Leafs["pushed-mpls-label-stack"] = types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack}
    state.EntityData.Leafs["decapsulate-header"] = types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader}
    state.EntityData.Leafs["encapsulate-header"] = types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader}
    state.EntityData.Leafs["origin-protocol"] = types.YLeaf{"OriginProtocol", state.OriginProtocol}
    state.EntityData.Leafs["network-instance"] = types.YLeaf{"NetworkInstance", state.NetworkInstance}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["config"] = types.YChild{"Config", &interfaceRef.Config}
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Aft_Entries_Entry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols
// The routing protocols that are enabled for this
// network-instance.
type NetworkInstances_NetworkInstance_Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A process (instance) of a routing protocol. Some systems may not support
    // more than one instance of a particular routing protocol. The type is slice
    // of NetworkInstances_NetworkInstance_Protocols_Protocol.
    Protocol []NetworkInstances_NetworkInstance_Protocols_Protocol
}

func (protocols *NetworkInstances_NetworkInstance_Protocols) GetEntityData() *types.CommonEntityData {
    protocols.EntityData.YFilter = protocols.YFilter
    protocols.EntityData.YangName = "protocols"
    protocols.EntityData.BundleName = "openconfig"
    protocols.EntityData.ParentYangName = "network-instance"
    protocols.EntityData.SegmentPath = "protocols"
    protocols.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    protocols.EntityData.NamespaceTable = openconfig.GetNamespaces()
    protocols.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    protocols.EntityData.Children = make(map[string]types.YChild)
    protocols.EntityData.Children["protocol"] = types.YChild{"Protocol", nil}
    for i := range protocols.Protocol {
        protocols.EntityData.Children[types.GetSegmentPath(&protocols.Protocol[i])] = types.YChild{"Protocol", &protocols.Protocol[i]}
    }
    protocols.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(protocols.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol
// A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
type NetworkInstances_NetworkInstance_Protocols_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The protocol name for the routing or forwarding
    // protocol to be instantiated. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Identifier interface{}

    // This attribute is a key. An operator-assigned identifier for the routing or
    // forwarding protocol. For some processes this leaf may be system defined.
    // The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Config_Name
    Name interface{}

    // Configuration parameters relating to the routing protocol instance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Config

    // State parameters relating to the routing protocol instance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_State

    // Enclosing container for the list of static routes.
    StaticRoutes NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes

    // Enclosing container for locally-defined aggregate routes.
    LocalAggregates NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates

    // Top-level configuration and state for the BGP router.
    Bgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp

    // This container defines top-level ISIS configuration and state information.
    Isis NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
}

func (protocol *NetworkInstances_NetworkInstance_Protocols_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "openconfig"
    protocol.EntityData.ParentYangName = "protocols"
    protocol.EntityData.SegmentPath = "protocol" + "[identifier='" + fmt.Sprintf("%v", protocol.Identifier) + "']" + "[name='" + fmt.Sprintf("%v", protocol.Name) + "']"
    protocol.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    protocol.EntityData.NamespaceTable = openconfig.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    protocol.EntityData.Children = make(map[string]types.YChild)
    protocol.EntityData.Children["config"] = types.YChild{"Config", &protocol.Config}
    protocol.EntityData.Children["state"] = types.YChild{"State", &protocol.State}
    protocol.EntityData.Children["static-routes"] = types.YChild{"StaticRoutes", &protocol.StaticRoutes}
    protocol.EntityData.Children["local-aggregates"] = types.YChild{"LocalAggregates", &protocol.LocalAggregates}
    protocol.EntityData.Children["bgp"] = types.YChild{"Bgp", &protocol.Bgp}
    protocol.EntityData.Children["isis"] = types.YChild{"Isis", &protocol.Isis}
    protocol.EntityData.Leafs = make(map[string]types.YLeaf)
    protocol.EntityData.Leafs["identifier"] = types.YLeaf{"Identifier", protocol.Identifier}
    protocol.EntityData.Leafs["name"] = types.YLeaf{"Name", protocol.Name}
    return &(protocol.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Config
// Configuration parameters relating to the routing
// protocol instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The protocol identifier for the instance. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Identifier interface{}

    // A unique name for the protocol instance. The type is string.
    Name interface{}

    // A boolean value indicating whether the local protocol instance is enabled.
    // The type is bool.
    Enabled interface{}

    // The default metric within the RIB for entries that are installed by this
    // protocol instance. This value may be overridden by protocol specific
    // configuration options. The lower the metric specified the more preferable
    // the RIB entry is to be selected for use within the network instance. Where
    // multiple entries have the same metric value then these equal cost paths
    // should be treated according to the specified ECMP path selection behaviour
    // for the instance. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "protocol"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["identifier"] = types.YLeaf{"Identifier", config.Identifier}
    config.EntityData.Leafs["name"] = types.YLeaf{"Name", config.Name}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", config.DefaultMetric}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_State
// State parameters relating to the routing protocol
// instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The protocol identifier for the instance. The type is one of the following:
    // BGPISISOSPFOSPF3STATICDIRECTLYCONNECTEDLOCALAGGREGATE.
    Identifier interface{}

    // A unique name for the protocol instance. The type is string.
    Name interface{}

    // A boolean value indicating whether the local protocol instance is enabled.
    // The type is bool.
    Enabled interface{}

    // The default metric within the RIB for entries that are installed by this
    // protocol instance. This value may be overridden by protocol specific
    // configuration options. The lower the metric specified the more preferable
    // the RIB entry is to be selected for use within the network instance. Where
    // multiple entries have the same metric value then these equal cost paths
    // should be treated according to the specified ECMP path selection behaviour
    // for the instance. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "protocol"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["identifier"] = types.YLeaf{"Identifier", state.Identifier}
    state.EntityData.Leafs["name"] = types.YLeaf{"Name", state.Name}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", state.DefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes
// Enclosing container for the list of static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of locally configured static routes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static.
    Static []NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static
}

func (staticRoutes *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) GetEntityData() *types.CommonEntityData {
    staticRoutes.EntityData.YFilter = staticRoutes.YFilter
    staticRoutes.EntityData.YangName = "static-routes"
    staticRoutes.EntityData.BundleName = "openconfig"
    staticRoutes.EntityData.ParentYangName = "protocol"
    staticRoutes.EntityData.SegmentPath = "static-routes"
    staticRoutes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    staticRoutes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    staticRoutes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    staticRoutes.EntityData.Children = make(map[string]types.YChild)
    staticRoutes.EntityData.Children["static"] = types.YChild{"Static", nil}
    for i := range staticRoutes.Static {
        staticRoutes.EntityData.Children[types.GetSegmentPath(&staticRoutes.Static[i])] = types.YChild{"Static", &staticRoutes.Static[i]}
    }
    staticRoutes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(staticRoutes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static
// List of locally configured static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the destination prefix list key. The
    // type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // Configuration data for static routes.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config

    // Operational state data for static routes.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State

    // Configuration and state parameters relating to the next-hops that are to be
    // utilised for the static route being specified.
    NextHops NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops
}

func (static *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetEntityData() *types.CommonEntityData {
    static.EntityData.YFilter = static.YFilter
    static.EntityData.YangName = "static"
    static.EntityData.BundleName = "openconfig"
    static.EntityData.ParentYangName = "static-routes"
    static.EntityData.SegmentPath = "static" + "[prefix='" + fmt.Sprintf("%v", static.Prefix) + "']"
    static.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    static.EntityData.NamespaceTable = openconfig.GetNamespaces()
    static.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    static.EntityData.Children = make(map[string]types.YChild)
    static.EntityData.Children["config"] = types.YChild{"Config", &static.Config}
    static.EntityData.Children["state"] = types.YChild{"State", &static.State}
    static.EntityData.Children["next-hops"] = types.YChild{"NextHops", &static.NextHops}
    static.EntityData.Leafs = make(map[string]types.YLeaf)
    static.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", static.Prefix}
    return &(static.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config
// Configuration data for static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix for the static route, either IPv4 or IPv6. The type is
    // one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    SetTag interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "static"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", config.Prefix}
    config.EntityData.Leafs["set-tag"] = types.YLeaf{"SetTag", config.SetTag}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State
// Operational state data for static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix for the static route, either IPv4 or IPv6. The type is
    // one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    SetTag interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "static"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["set-tag"] = types.YLeaf{"SetTag", state.SetTag}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops
// Configuration and state parameters relating to the
// next-hops that are to be utilised for the static
// route being specified
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of next-hops to be utilised for the static route being specified.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop.
    NextHop []NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "static"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = make(map[string]types.YChild)
    nextHops.EntityData.Children["next-hop"] = types.YChild{"NextHop", nil}
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children[types.GetSegmentPath(&nextHops.NextHop[i])] = types.YChild{"NextHop", &nextHops.NextHop[i]}
    }
    nextHops.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop
// A list of next-hops to be utilised for the static
// route being specified.
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A reference to the index of the current next-hop.
    // The index is intended to be a user-specified value which can be used to
    // reference the next-hop in question, without any other semantics being
    // assigned to it. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the next-hop entry.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config

    // Operational state parameters relating to the next-hop entry.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + "[index='" + fmt.Sprintf("%v", nextHop.Index) + "']"
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = make(map[string]types.YChild)
    nextHop.EntityData.Children["config"] = types.YChild{"Config", &nextHop.Config}
    nextHop.EntityData.Children["state"] = types.YChild{"State", &nextHop.State}
    nextHop.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &nextHop.InterfaceRef}
    nextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    nextHop.EntityData.Leafs["index"] = types.YLeaf{"Index", nextHop.Index}
    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config
// Configuration parameters relating to the next-hop
// entry
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An user-specified identifier utilised to uniquely reference the next-hop
    // entry in the next-hop list. The value of this index has no semantic meaning
    // other than for referencing the entry. The type is string.
    Index interface{}

    // The next-hop that is to be used for the static route - this may be
    // specified as an IP address, an interface or a pre-defined next-hop type -
    // for instance, DROP or LOCAL_LINK. When this leaf is not set, and the
    // interface-ref value is specified for the next-hop, then the system should
    // treat the prefix as though it is directly connected to the interface. The
    // type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or :go:struct:`LOCALDEFINEDNEXTHOP
    // <ydk/models/local_routing/LOCALDEFINEDNEXTHOP>`.
    NextHop interface{}

    // A metric which is utilised to specify the preference of the next-hop entry
    // when it is injected into the RIB. The lower the metric, the more preferable
    // the prefix is. When this value is not specified the metric is inherited
    // from the default metric utilised for static routes within the network
    // instance that the static routes are being instantiated. When multiple
    // next-hops are specified for a static route, the metric is utilised to
    // determine which of the next-hops is to be installed in the RIB. When
    // multiple next-hops have the same metric (be it specified, or simply the
    // default) then these next-hops should all be installed in the RIB. The type
    // is interface{} with range: 0..4294967295.
    Metric interface{}

    // Determines whether the next-hop should be allowed to be looked up
    // recursively - i.e., via a RIB entry which has been installed by a routing
    // protocol, or another static route - rather than needing to be connected
    // directly to an interface of the local system within the current network
    // instance. When the interface reference specified within the next-hop entry
    // is set (i.e., is not null) then forwarding is restricted to being via the
    // interface specified - and recursion is hence disabled. The type is bool.
    // The default value is false.
    Recurse interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["index"] = types.YLeaf{"Index", config.Index}
    config.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", config.NextHop}
    config.EntityData.Leafs["metric"] = types.YLeaf{"Metric", config.Metric}
    config.EntityData.Leafs["recurse"] = types.YLeaf{"Recurse", config.Recurse}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State
// Operational state parameters relating to the
// next-hop entry
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An user-specified identifier utilised to uniquely reference the next-hop
    // entry in the next-hop list. The value of this index has no semantic meaning
    // other than for referencing the entry. The type is string.
    Index interface{}

    // The next-hop that is to be used for the static route - this may be
    // specified as an IP address, an interface or a pre-defined next-hop type -
    // for instance, DROP or LOCAL_LINK. When this leaf is not set, and the
    // interface-ref value is specified for the next-hop, then the system should
    // treat the prefix as though it is directly connected to the interface. The
    // type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or :go:struct:`LOCALDEFINEDNEXTHOP
    // <ydk/models/local_routing/LOCALDEFINEDNEXTHOP>`.
    NextHop interface{}

    // A metric which is utilised to specify the preference of the next-hop entry
    // when it is injected into the RIB. The lower the metric, the more preferable
    // the prefix is. When this value is not specified the metric is inherited
    // from the default metric utilised for static routes within the network
    // instance that the static routes are being instantiated. When multiple
    // next-hops are specified for a static route, the metric is utilised to
    // determine which of the next-hops is to be installed in the RIB. When
    // multiple next-hops have the same metric (be it specified, or simply the
    // default) then these next-hops should all be installed in the RIB. The type
    // is interface{} with range: 0..4294967295.
    Metric interface{}

    // Determines whether the next-hop should be allowed to be looked up
    // recursively - i.e., via a RIB entry which has been installed by a routing
    // protocol, or another static route - rather than needing to be connected
    // directly to an interface of the local system within the current network
    // instance. When the interface reference specified within the next-hop entry
    // is set (i.e., is not null) then forwarding is restricted to being via the
    // interface specified - and recursion is hence disabled. The type is bool.
    // The default value is false.
    Recurse interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["index"] = types.YLeaf{"Index", state.Index}
    state.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", state.NextHop}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["recurse"] = types.YLeaf{"Recurse", state.Recurse}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["config"] = types.YChild{"Config", &interfaceRef.Config}
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates
// Enclosing container for locally-defined aggregate
// routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of aggregates. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate.
    Aggregate []NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate
}

func (localAggregates *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates) GetEntityData() *types.CommonEntityData {
    localAggregates.EntityData.YFilter = localAggregates.YFilter
    localAggregates.EntityData.YangName = "local-aggregates"
    localAggregates.EntityData.BundleName = "openconfig"
    localAggregates.EntityData.ParentYangName = "protocol"
    localAggregates.EntityData.SegmentPath = "local-aggregates"
    localAggregates.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    localAggregates.EntityData.NamespaceTable = openconfig.GetNamespaces()
    localAggregates.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    localAggregates.EntityData.Children = make(map[string]types.YChild)
    localAggregates.EntityData.Children["aggregate"] = types.YChild{"Aggregate", nil}
    for i := range localAggregates.Aggregate {
        localAggregates.EntityData.Children[types.GetSegmentPath(&localAggregates.Aggregate[i])] = types.YChild{"Aggregate", &localAggregates.Aggregate[i]}
    }
    localAggregates.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(localAggregates.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate
// List of aggregates
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the configured prefix for this
    // aggregate. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // Configuration data for aggregate advertisements.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config

    // Operational state data for aggregate advertisements.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State
}

func (aggregate *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate) GetEntityData() *types.CommonEntityData {
    aggregate.EntityData.YFilter = aggregate.YFilter
    aggregate.EntityData.YangName = "aggregate"
    aggregate.EntityData.BundleName = "openconfig"
    aggregate.EntityData.ParentYangName = "local-aggregates"
    aggregate.EntityData.SegmentPath = "aggregate" + "[prefix='" + fmt.Sprintf("%v", aggregate.Prefix) + "']"
    aggregate.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    aggregate.EntityData.NamespaceTable = openconfig.GetNamespaces()
    aggregate.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    aggregate.EntityData.Children = make(map[string]types.YChild)
    aggregate.EntityData.Children["config"] = types.YChild{"Config", &aggregate.Config}
    aggregate.EntityData.Children["state"] = types.YChild{"State", &aggregate.State}
    aggregate.EntityData.Leafs = make(map[string]types.YLeaf)
    aggregate.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", aggregate.Prefix}
    return &(aggregate.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config
// Configuration data for aggregate advertisements
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate prefix to be advertised. The type is one of the following types:
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // When true, install the aggregate route with a discard next-hop -- traffic
    // destined to the aggregate will be discarded with no ICMP message generated.
    // When false, traffic destined to an aggregate address when no constituent
    // routes are present will generate an ICMP unreachable message. The type is
    // bool. The default value is false.
    Discard interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    SetTag interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "aggregate"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", config.Prefix}
    config.EntityData.Leafs["discard"] = types.YLeaf{"Discard", config.Discard}
    config.EntityData.Leafs["set-tag"] = types.YLeaf{"SetTag", config.SetTag}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State
// Operational state data for aggregate
// advertisements
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate prefix to be advertised. The type is one of the following types:
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // When true, install the aggregate route with a discard next-hop -- traffic
    // destined to the aggregate will be discarded with no ICMP message generated.
    // When false, traffic destined to an aggregate address when no constituent
    // routes are present will generate an ICMP unreachable message. The type is
    // bool. The default value is false.
    Discard interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    SetTag interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "aggregate"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["discard"] = types.YLeaf{"Discard", state.Discard}
    state.EntityData.Leafs["set-tag"] = types.YLeaf{"SetTag", state.SetTag}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp
// Top-level configuration and state for the BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global configuration for the BGP router.
    Global NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global

    // Configuration for BGP neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors

    // Configuration for BGP peer-groups.
    PeerGroups NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups
}

func (bgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "openconfig"
    bgp.EntityData.ParentYangName = "protocol"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bgp.EntityData.Children = make(map[string]types.YChild)
    bgp.EntityData.Children["global"] = types.YChild{"Global", &bgp.Global}
    bgp.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &bgp.Neighbors}
    bgp.EntityData.Children["peer-groups"] = types.YChild{"PeerGroups", &bgp.PeerGroups}
    bgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global
// Global configuration for the BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the global BGP router.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config

    // State information relating to the global BGP router.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State

    // Administrative distance (or preference) assigned to routes received from
    // different sources (external, internal, and local).
    DefaultRouteDistance NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance

    // Parameters indicating whether the local system acts as part of a BGP
    // confederation.
    Confederation NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions

    // Address family specific configuration.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy
}

func (global *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "bgp"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = make(map[string]types.YChild)
    global.EntityData.Children["config"] = types.YChild{"Config", &global.Config}
    global.EntityData.Children["state"] = types.YChild{"State", &global.State}
    global.EntityData.Children["default-route-distance"] = types.YChild{"DefaultRouteDistance", &global.DefaultRouteDistance}
    global.EntityData.Children["confederation"] = types.YChild{"Confederation", &global.Confederation}
    global.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &global.GracefulRestart}
    global.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &global.UseMultiplePaths}
    global.EntityData.Children["route-selection-options"] = types.YChild{"RouteSelectionOptions", &global.RouteSelectionOptions}
    global.EntityData.Children["afi-safis"] = types.YChild{"AfiSafis", &global.AfiSafis}
    global.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &global.ApplyPolicy}
    global.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config
// Configuration parameters relating to the global BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local autonomous system number of the router.  Uses the 32-bit as-number
    // type from the model in RFC 6991. The type is interface{} with range:
    // 0..4294967295. This attribute is mandatory.
    As interface{}

    // Router id of the router - an unsigned 32-bit integer expressed in dotted
    // quad notation. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'.
    RouterId interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "global"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["as"] = types.YLeaf{"As", config.As}
    config.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", config.RouterId}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State
// State information relating to the global BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local autonomous system number of the router.  Uses the 32-bit as-number
    // type from the model in RFC 6991. The type is interface{} with range:
    // 0..4294967295. This attribute is mandatory.
    As interface{}

    // Router id of the router - an unsigned 32-bit integer expressed in dotted
    // quad notation. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'.
    RouterId interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["as"] = types.YLeaf{"As", state.As}
    state.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", state.RouterId}
    state.EntityData.Leafs["total-paths"] = types.YLeaf{"TotalPaths", state.TotalPaths}
    state.EntityData.Leafs["total-prefixes"] = types.YLeaf{"TotalPrefixes", state.TotalPrefixes}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance
// Administrative distance (or preference) assigned to
// routes received from different sources
// (external, internal, and local).
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the default route distance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config

    // State information relating to the default route distance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State
}

func (defaultRouteDistance *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance) GetEntityData() *types.CommonEntityData {
    defaultRouteDistance.EntityData.YFilter = defaultRouteDistance.YFilter
    defaultRouteDistance.EntityData.YangName = "default-route-distance"
    defaultRouteDistance.EntityData.BundleName = "openconfig"
    defaultRouteDistance.EntityData.ParentYangName = "global"
    defaultRouteDistance.EntityData.SegmentPath = "default-route-distance"
    defaultRouteDistance.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultRouteDistance.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultRouteDistance.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultRouteDistance.EntityData.Children = make(map[string]types.YChild)
    defaultRouteDistance.EntityData.Children["config"] = types.YChild{"Config", &defaultRouteDistance.Config}
    defaultRouteDistance.EntityData.Children["state"] = types.YChild{"State", &defaultRouteDistance.State}
    defaultRouteDistance.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(defaultRouteDistance.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config
// Configuration parameters relating to the default route
// distance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance for routes learned from external BGP (eBGP). The
    // type is interface{} with range: 1..255.
    ExternalRouteDistance interface{}

    // Administrative distance for routes learned from internal BGP (iBGP). The
    // type is interface{} with range: 1..255.
    InternalRouteDistance interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "default-route-distance"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["external-route-distance"] = types.YLeaf{"ExternalRouteDistance", config.ExternalRouteDistance}
    config.EntityData.Leafs["internal-route-distance"] = types.YLeaf{"InternalRouteDistance", config.InternalRouteDistance}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State
// State information relating to the default route distance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance for routes learned from external BGP (eBGP). The
    // type is interface{} with range: 1..255.
    ExternalRouteDistance interface{}

    // Administrative distance for routes learned from internal BGP (iBGP). The
    // type is interface{} with range: 1..255.
    InternalRouteDistance interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-route-distance"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["external-route-distance"] = types.YLeaf{"ExternalRouteDistance", state.ExternalRouteDistance}
    state.EntityData.Leafs["internal-route-distance"] = types.YLeaf{"InternalRouteDistance", state.InternalRouteDistance}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation
// Parameters indicating whether the local system acts as part
// of a BGP confederation
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to BGP confederations.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config

    // State information relating to the BGP confederations.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State
}

func (confederation *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation) GetEntityData() *types.CommonEntityData {
    confederation.EntityData.YFilter = confederation.YFilter
    confederation.EntityData.YangName = "confederation"
    confederation.EntityData.BundleName = "openconfig"
    confederation.EntityData.ParentYangName = "global"
    confederation.EntityData.SegmentPath = "confederation"
    confederation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    confederation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    confederation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    confederation.EntityData.Children = make(map[string]types.YChild)
    confederation.EntityData.Children["config"] = types.YChild{"Config", &confederation.Config}
    confederation.EntityData.Children["state"] = types.YChild{"State", &confederation.State}
    confederation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(confederation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config
// Configuration parameters relating to BGP confederations
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true it indicates that the local-AS is part of a
    // BGP confederation. The type is bool.
    Enabled interface{}

    // Confederation identifier for the autonomous system. The type is interface{}
    // with range: 0..4294967295.
    Identifier interface{}

    // Remote autonomous systems that are to be treated as part of the local
    // confederation. The type is slice of interface{} with range: 0..4294967295.
    MemberAs []interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "confederation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["identifier"] = types.YLeaf{"Identifier", config.Identifier}
    config.EntityData.Leafs["member-as"] = types.YLeaf{"MemberAs", config.MemberAs}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State
// State information relating to the BGP confederations
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true it indicates that the local-AS is part of a
    // BGP confederation. The type is bool.
    Enabled interface{}

    // Confederation identifier for the autonomous system. The type is interface{}
    // with range: 0..4294967295.
    Identifier interface{}

    // Remote autonomous systems that are to be treated as part of the local
    // confederation. The type is slice of interface{} with range: 0..4294967295.
    MemberAs []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "confederation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["identifier"] = types.YLeaf{"Identifier", state.Identifier}
    state.EntityData.Leafs["member-as"] = types.YLeaf{"MemberAs", state.MemberAs}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", config.RestartTime}
    config.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime}
    config.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", config.HelperOnly}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", state.RestartTime}
    state.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime}
    state.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", state.HelperOnly}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "global"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Children["ibgp"] = types.YChild{"Ibgp", &useMultiplePaths.Ibgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = make(map[string]types.YChild)
    ibgp.EntityData.Children["config"] = types.YChild{"Config", &ibgp.Config}
    ibgp.EntityData.Children["state"] = types.YChild{"State", &ibgp.State}
    ibgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "global"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = make(map[string]types.YChild)
    routeSelectionOptions.EntityData.Children["config"] = types.YChild{"Config", &routeSelectionOptions.Config}
    routeSelectionOptions.EntityData.Children["state"] = types.YChild{"State", &routeSelectionOptions.State}
    routeSelectionOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed}
    config.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength}
    config.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId}
    config.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes}
    config.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", config.EnableAigp}
    config.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed}
    state.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength}
    state.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId}
    state.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes}
    state.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", state.EnableAigp}
    state.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis
// Address family specific configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi.
    AfiSafi []NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "global"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = make(map[string]types.YChild)
    afiSafis.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", nil}
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children[types.GetSegmentPath(&afiSafis.AfiSafi[i])] = types.YChild{"AfiSafi", &afiSafis.AfiSafi[i]}
    }
    afiSafis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3VpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3VpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3VpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3VpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2VpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls

    // BGP EVPN configuration options.
    L2VpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + "[afi-safi-name='" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "']"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["config"] = types.YChild{"Config", &afiSafi.Config}
    afiSafi.EntityData.Children["state"] = types.YChild{"State", &afiSafi.State}
    afiSafi.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &afiSafi.GracefulRestart}
    afiSafi.EntityData.Children["route-selection-options"] = types.YChild{"RouteSelectionOptions", &afiSafi.RouteSelectionOptions}
    afiSafi.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths}
    afiSafi.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &afiSafi.ApplyPolicy}
    afiSafi.EntityData.Children["ipv4-unicast"] = types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast}
    afiSafi.EntityData.Children["ipv6-unicast"] = types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast}
    afiSafi.EntityData.Children["ipv4-labeled-unicast"] = types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast}
    afiSafi.EntityData.Children["ipv6-labeled-unicast"] = types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-unicast"] = types.YChild{"L3VpnIpv4Unicast", &afiSafi.L3VpnIpv4Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-unicast"] = types.YChild{"L3VpnIpv6Unicast", &afiSafi.L3VpnIpv6Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-multicast"] = types.YChild{"L3VpnIpv4Multicast", &afiSafi.L3VpnIpv4Multicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-multicast"] = types.YChild{"L3VpnIpv6Multicast", &afiSafi.L3VpnIpv6Multicast}
    afiSafi.EntityData.Children["l2vpn-vpls"] = types.YChild{"L2VpnVpls", &afiSafi.L2VpnVpls}
    afiSafi.EntityData.Children["l2vpn-evpn"] = types.YChild{"L2VpnEvpn", &afiSafi.L2VpnEvpn}
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    afiSafi.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName}
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", config.AfiSafiName}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", state.AfiSafiName}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["total-paths"] = types.YLeaf{"TotalPaths", state.TotalPaths}
    state.EntityData.Leafs["total-prefixes"] = types.YLeaf{"TotalPrefixes", state.TotalPrefixes}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "afi-safi"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = make(map[string]types.YChild)
    routeSelectionOptions.EntityData.Children["config"] = types.YChild{"Config", &routeSelectionOptions.Config}
    routeSelectionOptions.EntityData.Children["state"] = types.YChild{"State", &routeSelectionOptions.State}
    routeSelectionOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed}
    config.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength}
    config.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId}
    config.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes}
    config.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", config.EnableAigp}
    config.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed}
    state.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength}
    state.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId}
    state.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes}
    state.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", state.EnableAigp}
    state.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Children["ibgp"] = types.YChild{"Ibgp", &useMultiplePaths.Ibgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = make(map[string]types.YChild)
    ibgp.EntityData.Children["config"] = types.YChild{"Config", &ibgp.Config}
    ibgp.EntityData.Children["state"] = types.YChild{"State", &ibgp.State}
    ibgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "afi-safi"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit}
    ipv4Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv4Unicast.Config}
    ipv4Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv4Unicast.State}
    ipv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit}
    ipv6Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv6Unicast.Config}
    ipv6Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv6Unicast.State}
    ipv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv4LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit}
    ipv4LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv6LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit}
    ipv6LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Unicast.EntityData.YFilter = l3VpnIpv4Unicast.YFilter
    l3VpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Unicast.PrefixLimit}
    l3VpnIpv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Unicast.EntityData.YFilter = l3VpnIpv6Unicast.YFilter
    l3VpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Unicast.PrefixLimit}
    l3VpnIpv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Multicast.EntityData.YFilter = l3VpnIpv4Multicast.YFilter
    l3VpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Multicast.PrefixLimit}
    l3VpnIpv4Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Multicast.EntityData.YFilter = l3VpnIpv6Multicast.YFilter
    l3VpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Multicast.PrefixLimit}
    l3VpnIpv6Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetEntityData() *types.CommonEntityData {
    l2VpnVpls.EntityData.YFilter = l2VpnVpls.YFilter
    l2VpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2VpnVpls.EntityData.BundleName = "openconfig"
    l2VpnVpls.EntityData.ParentYangName = "afi-safi"
    l2VpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2VpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnVpls.EntityData.Children = make(map[string]types.YChild)
    l2VpnVpls.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnVpls.PrefixLimit}
    l2VpnVpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityData() *types.CommonEntityData {
    l2VpnEvpn.EntityData.YFilter = l2VpnEvpn.YFilter
    l2VpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2VpnEvpn.EntityData.BundleName = "openconfig"
    l2VpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2VpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2VpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnEvpn.EntityData.Children = make(map[string]types.YChild)
    l2VpnEvpn.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnEvpn.PrefixLimit}
    l2VpnEvpn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "global"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors
// Configuration for BGP neighbors
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of BGP neighbors configured on the local system, uniquely identified
    // by peer IPv[46] address. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor.
    Neighbor []NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "bgp"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor
// List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the address of the BGP neighbor used
    // as a key in the neighbor list. The type is one of the following types:
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Configuration parameters relating to the BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config

    // State information relating to the BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State

    // Timers related to a BGP neighbor.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers

    // Transport session parameters for the BGP neighbor.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport

    // Error handling parameters used for the BGP neighbor or group.
    ErrorHandling NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart

    // Logging options for events related to the BGP neighbor or group.
    LoggingOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions

    // eBGP multi-hop parameters for the BGPgroup.
    EbgpMultihop NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop

    // Route reflector parameters for the BGPgroup.
    RouteReflector NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector

    // AS_PATH manipulation parameters for the BGP neighbor or group.
    AsPathOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions

    // Parameters relating to the advertisement and receipt of multiple paths for
    // a single NLRI (add-paths).
    AddPaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths

    // Parameters related to the use of multiple-paths for the same NLRI when they
    // are received only from this neighbor.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy

    // Per-address-family configuration parameters associated with the neighbor.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Children["config"] = types.YChild{"Config", &neighbor.Config}
    neighbor.EntityData.Children["state"] = types.YChild{"State", &neighbor.State}
    neighbor.EntityData.Children["timers"] = types.YChild{"Timers", &neighbor.Timers}
    neighbor.EntityData.Children["transport"] = types.YChild{"Transport", &neighbor.Transport}
    neighbor.EntityData.Children["error-handling"] = types.YChild{"ErrorHandling", &neighbor.ErrorHandling}
    neighbor.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &neighbor.GracefulRestart}
    neighbor.EntityData.Children["logging-options"] = types.YChild{"LoggingOptions", &neighbor.LoggingOptions}
    neighbor.EntityData.Children["ebgp-multihop"] = types.YChild{"EbgpMultihop", &neighbor.EbgpMultihop}
    neighbor.EntityData.Children["route-reflector"] = types.YChild{"RouteReflector", &neighbor.RouteReflector}
    neighbor.EntityData.Children["as-path-options"] = types.YChild{"AsPathOptions", &neighbor.AsPathOptions}
    neighbor.EntityData.Children["add-paths"] = types.YChild{"AddPaths", &neighbor.AddPaths}
    neighbor.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &neighbor.UseMultiplePaths}
    neighbor.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &neighbor.ApplyPolicy}
    neighbor.EntityData.Children["afi-safis"] = types.YChild{"AfiSafis", &neighbor.AfiSafis}
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config
// Configuration parameters relating to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The peer-group with which this neighbor is associated. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_PeerGroupName
    PeerGroup interface{}

    // Address of the BGP peer, either in IPv4 or IPv6. The type is one of the
    // following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Whether the BGP peer is enabled. In cases where the enabled leaf is set to
    // false, the local system should not initiate connections to the neighbor,
    // and should not respond to TCP connections attempts from the neighbor. If
    // the state of the BGP session is ESTABLISHED at the time that this leaf is
    // set to false, the BGP session should be ceased. The type is bool. The
    // default value is true.
    Enabled interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREMOVEALLPRIVATEASREPLACEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "neighbor"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["peer-group"] = types.YLeaf{"PeerGroup", config.PeerGroup}
    config.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", config.NeighborAddress}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["peer-as"] = types.YLeaf{"PeerAs", config.PeerAs}
    config.EntityData.Leafs["local-as"] = types.YLeaf{"LocalAs", config.LocalAs}
    config.EntityData.Leafs["peer-type"] = types.YLeaf{"PeerType", config.PeerType}
    config.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", config.AuthPassword}
    config.EntityData.Leafs["remove-private-as"] = types.YLeaf{"RemovePrivateAs", config.RemovePrivateAs}
    config.EntityData.Leafs["route-flap-damping"] = types.YLeaf{"RouteFlapDamping", config.RouteFlapDamping}
    config.EntityData.Leafs["send-community"] = types.YLeaf{"SendCommunity", config.SendCommunity}
    config.EntityData.Leafs["description"] = types.YLeaf{"Description", config.Description}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State
// State information relating to the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The peer-group with which this neighbor is associated. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_PeerGroupName
    PeerGroup interface{}

    // Address of the BGP peer, either in IPv4 or IPv6. The type is one of the
    // following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Whether the BGP peer is enabled. In cases where the enabled leaf is set to
    // false, the local system should not initiate connections to the neighbor,
    // and should not respond to TCP connections attempts from the neighbor. If
    // the state of the BGP session is ESTABLISHED at the time that this leaf is
    // set to false, the BGP session should be ceased. The type is bool. The
    // default value is true.
    Enabled interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREMOVEALLPRIVATEASREPLACEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}

    // Operational state of the BGP peer. The type is SessionState.
    SessionState interface{}

    // This timestamp indicates the time that the BGP session last transitioned in
    // or out of the Established state.  The value is the timestamp in seconds
    // relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC). The BGP session
    // uptime can be computed by clients as the difference between this value and
    // the current time in UTC (assuming the session is in the ESTABLISHED state,
    // per the session-state leaf). The type is interface{} with range:
    // 0..18446744073709551615.
    LastEstablished interface{}

    // Number of transitions to the Established state for the neighbor session. 
    // This value is analogous to the bgpPeerFsmEstablishedTransitions object from
    // the standard BGP-4 MIB. The type is interface{} with range:
    // 0..18446744073709551615.
    EstablishedTransitions interface{}

    // BGP capabilities negotiated as supported with the peer. The type is slice
    // of ['MPBGP', 'ROUTEREFRESH', 'ASN32', 'GRACEFULRESTART', 'ADDPATHS'].
    SupportedCapabilities []interface{}

    // Counters for BGP messages sent and received from the neighbor.
    Messages NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages

    // Counters related to queued messages associated with the BGP neighbor.
    Queues NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["messages"] = types.YChild{"Messages", &state.Messages}
    state.EntityData.Children["queues"] = types.YChild{"Queues", &state.Queues}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["peer-group"] = types.YLeaf{"PeerGroup", state.PeerGroup}
    state.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", state.NeighborAddress}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["peer-as"] = types.YLeaf{"PeerAs", state.PeerAs}
    state.EntityData.Leafs["local-as"] = types.YLeaf{"LocalAs", state.LocalAs}
    state.EntityData.Leafs["peer-type"] = types.YLeaf{"PeerType", state.PeerType}
    state.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", state.AuthPassword}
    state.EntityData.Leafs["remove-private-as"] = types.YLeaf{"RemovePrivateAs", state.RemovePrivateAs}
    state.EntityData.Leafs["route-flap-damping"] = types.YLeaf{"RouteFlapDamping", state.RouteFlapDamping}
    state.EntityData.Leafs["send-community"] = types.YLeaf{"SendCommunity", state.SendCommunity}
    state.EntityData.Leafs["description"] = types.YLeaf{"Description", state.Description}
    state.EntityData.Leafs["session-state"] = types.YLeaf{"SessionState", state.SessionState}
    state.EntityData.Leafs["last-established"] = types.YLeaf{"LastEstablished", state.LastEstablished}
    state.EntityData.Leafs["established-transitions"] = types.YLeaf{"EstablishedTransitions", state.EstablishedTransitions}
    state.EntityData.Leafs["supported-capabilities"] = types.YLeaf{"SupportedCapabilities", state.SupportedCapabilities}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages
// Counters for BGP messages sent and received from the
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Counters relating to BGP messages sent to the neighbor.
    Sent NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent

    // Counters for BGP messages received from the neighbor.
    Received NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received
}

func (messages *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages) GetEntityData() *types.CommonEntityData {
    messages.EntityData.YFilter = messages.YFilter
    messages.EntityData.YangName = "messages"
    messages.EntityData.BundleName = "openconfig"
    messages.EntityData.ParentYangName = "state"
    messages.EntityData.SegmentPath = "messages"
    messages.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    messages.EntityData.NamespaceTable = openconfig.GetNamespaces()
    messages.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    messages.EntityData.Children = make(map[string]types.YChild)
    messages.EntityData.Children["sent"] = types.YChild{"Sent", &messages.Sent}
    messages.EntityData.Children["received"] = types.YChild{"Received", &messages.Received}
    messages.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messages.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent
// Counters relating to BGP messages sent to the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of BGP UPDATE messages announcing, withdrawing or modifying paths
    // exchanged. The type is interface{} with range: 0..18446744073709551615.
    Update interface{}

    // Number of BGP NOTIFICATION messages indicating an error condition has
    // occurred exchanged. The type is interface{} with range:
    // 0..18446744073709551615.
    Notification interface{}
}

func (sent *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "openconfig"
    sent.EntityData.ParentYangName = "messages"
    sent.EntityData.SegmentPath = "sent"
    sent.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    sent.EntityData.NamespaceTable = openconfig.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    sent.EntityData.Children = make(map[string]types.YChild)
    sent.EntityData.Leafs = make(map[string]types.YLeaf)
    sent.EntityData.Leafs["UPDATE"] = types.YLeaf{"Update", sent.Update}
    sent.EntityData.Leafs["NOTIFICATION"] = types.YLeaf{"Notification", sent.Notification}
    return &(sent.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received
// Counters for BGP messages received from the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of BGP UPDATE messages announcing, withdrawing or modifying paths
    // exchanged. The type is interface{} with range: 0..18446744073709551615.
    Update interface{}

    // Number of BGP NOTIFICATION messages indicating an error condition has
    // occurred exchanged. The type is interface{} with range:
    // 0..18446744073709551615.
    Notification interface{}
}

func (received *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "openconfig"
    received.EntityData.ParentYangName = "messages"
    received.EntityData.SegmentPath = "received"
    received.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    received.EntityData.NamespaceTable = openconfig.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    received.EntityData.Children = make(map[string]types.YChild)
    received.EntityData.Leafs = make(map[string]types.YLeaf)
    received.EntityData.Leafs["UPDATE"] = types.YLeaf{"Update", received.Update}
    received.EntityData.Leafs["NOTIFICATION"] = types.YLeaf{"Notification", received.Notification}
    return &(received.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues
// Counters related to queued messages associated with the
// BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of messages received from the peer currently queued. The type is
    // interface{} with range: 0..4294967295.
    Input interface{}

    // The number of messages queued to be sent to the peer. The type is
    // interface{} with range: 0..4294967295.
    Output interface{}
}

func (queues *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues) GetEntityData() *types.CommonEntityData {
    queues.EntityData.YFilter = queues.YFilter
    queues.EntityData.YangName = "queues"
    queues.EntityData.BundleName = "openconfig"
    queues.EntityData.ParentYangName = "state"
    queues.EntityData.SegmentPath = "queues"
    queues.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    queues.EntityData.NamespaceTable = openconfig.GetNamespaces()
    queues.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    queues.EntityData.Children = make(map[string]types.YChild)
    queues.EntityData.Leafs = make(map[string]types.YLeaf)
    queues.EntityData.Leafs["input"] = types.YLeaf{"Input", queues.Input}
    queues.EntityData.Leafs["output"] = types.YLeaf{"Output", queues.Output}
    return &(queues.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState represents Operational state of the BGP peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState string

const (
    // neighbor is down, and in the Idle state of the
    // FSM
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_IDLE NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "IDLE"

    // neighbor is down, and the session is waiting for
    // the underlying transport session to be established
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_CONNECT NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "CONNECT"

    // neighbor is down, and the local system is awaiting
    // a conncetion from the remote peer
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_ACTIVE NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "ACTIVE"

    // neighbor is in the process of being established.
    // The local system has sent an OPEN message
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_OPENSENT NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "OPENSENT"

    // neighbor is in the process of being established.
    // The local system is awaiting a NOTIFICATION or
    // KEEPALIVE message
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_OPENCONFIRM NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "OPENCONFIRM"

    // neighbor is up - the BGP session with the peer is
    // established
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_ESTABLISHED NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "ESTABLISHED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers
// Timers related to a BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to timers used for the BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config

    // State information relating to the timers used for the BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "neighbor"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["config"] = types.YChild{"Config", &timers.Config}
    timers.EntityData.Children["state"] = types.YChild{"State", &timers.State}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config
// Configuration parameters relating to timers used for the
// BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["connect-retry"] = types.YLeaf{"ConnectRetry", config.ConnectRetry}
    config.EntityData.Leafs["hold-time"] = types.YLeaf{"HoldTime", config.HoldTime}
    config.EntityData.Leafs["keepalive-interval"] = types.YLeaf{"KeepaliveInterval", config.KeepaliveInterval}
    config.EntityData.Leafs["minimum-advertisement-interval"] = types.YLeaf{"MinimumAdvertisementInterval", config.MinimumAdvertisementInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State
// State information relating to the timers used for the BGP
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}

    // The negotiated hold-time for the BGP session. The type is string with
    // range: -92233720368547758.08..92233720368547758.07.
    NegotiatedHoldTime interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["connect-retry"] = types.YLeaf{"ConnectRetry", state.ConnectRetry}
    state.EntityData.Leafs["hold-time"] = types.YLeaf{"HoldTime", state.HoldTime}
    state.EntityData.Leafs["keepalive-interval"] = types.YLeaf{"KeepaliveInterval", state.KeepaliveInterval}
    state.EntityData.Leafs["minimum-advertisement-interval"] = types.YLeaf{"MinimumAdvertisementInterval", state.MinimumAdvertisementInterval}
    state.EntityData.Leafs["negotiated-hold-time"] = types.YLeaf{"NegotiatedHoldTime", state.NegotiatedHoldTime}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport
// Transport session parameters for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the transport session(s) used for the
    // BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config

    // State information relating to the transport session(s) used for the BGP
    // neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "neighbor"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = make(map[string]types.YChild)
    transport.EntityData.Children["config"] = types.YChild{"Config", &transport.Config}
    transport.EntityData.Children["state"] = types.YChild{"State", &transport.State}
    transport.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config
// Configuration parameters relating to the transport
// session(s) used for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or string.
    LocalAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["tcp-mss"] = types.YLeaf{"TcpMss", config.TcpMss}
    config.EntityData.Leafs["mtu-discovery"] = types.YLeaf{"MtuDiscovery", config.MtuDiscovery}
    config.EntityData.Leafs["passive-mode"] = types.YLeaf{"PassiveMode", config.PassiveMode}
    config.EntityData.Leafs["local-address"] = types.YLeaf{"LocalAddress", config.LocalAddress}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State
// State information relating to the transport session(s)
// used for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or string.
    LocalAddress interface{}

    // Local TCP port being used for the TCP session supporting the BGP session.
    // The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Remote address to which the BGP session has been established. The type is
    // one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteAddress interface{}

    // Remote port being used by the peer for the TCP session supporting the BGP
    // session. The type is interface{} with range: 0..65535.
    RemotePort interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tcp-mss"] = types.YLeaf{"TcpMss", state.TcpMss}
    state.EntityData.Leafs["mtu-discovery"] = types.YLeaf{"MtuDiscovery", state.MtuDiscovery}
    state.EntityData.Leafs["passive-mode"] = types.YLeaf{"PassiveMode", state.PassiveMode}
    state.EntityData.Leafs["local-address"] = types.YLeaf{"LocalAddress", state.LocalAddress}
    state.EntityData.Leafs["local-port"] = types.YLeaf{"LocalPort", state.LocalPort}
    state.EntityData.Leafs["remote-address"] = types.YLeaf{"RemoteAddress", state.RemoteAddress}
    state.EntityData.Leafs["remote-port"] = types.YLeaf{"RemotePort", state.RemotePort}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling
// Error handling parameters used for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying the behavior or enhanced
    // error handling mechanisms for the BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config

    // State information relating to enhanced error handling mechanisms for the
    // BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State
}

func (errorHandling *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling) GetEntityData() *types.CommonEntityData {
    errorHandling.EntityData.YFilter = errorHandling.YFilter
    errorHandling.EntityData.YangName = "error-handling"
    errorHandling.EntityData.BundleName = "openconfig"
    errorHandling.EntityData.ParentYangName = "neighbor"
    errorHandling.EntityData.SegmentPath = "error-handling"
    errorHandling.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorHandling.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorHandling.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorHandling.EntityData.Children = make(map[string]types.YChild)
    errorHandling.EntityData.Children["config"] = types.YChild{"Config", &errorHandling.Config}
    errorHandling.EntityData.Children["state"] = types.YChild{"State", &errorHandling.State}
    errorHandling.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorHandling.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config
// Configuration parameters enabling or modifying the
// behavior or enhanced error handling mechanisms for the BGP
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "error-handling"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["treat-as-withdraw"] = types.YLeaf{"TreatAsWithdraw", config.TreatAsWithdraw}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State
// State information relating to enhanced error handling
// mechanisms for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}

    // The number of BGP UPDATE messages for which the treat-as-withdraw mechanism
    // has been applied based on erroneous message contents. The type is
    // interface{} with range: 0..4294967295.
    ErroneousUpdateMessages interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-handling"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["treat-as-withdraw"] = types.YLeaf{"TreatAsWithdraw", state.TreatAsWithdraw}
    state.EntityData.Leafs["erroneous-update-messages"] = types.YLeaf{"ErroneousUpdateMessages", state.ErroneousUpdateMessages}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "neighbor"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", config.RestartTime}
    config.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime}
    config.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", config.HelperOnly}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}

    // The period of time (advertised by the peer) that the peer expects a restart
    // of a BGP session to take. The type is interface{} with range: 0..4096.
    PeerRestartTime interface{}

    // This flag indicates whether the remote neighbor is currently in the process
    // of restarting, and hence received routes are currently stale. The type is
    // bool.
    PeerRestarting interface{}

    // This flag indicates whether the local neighbor is currently restarting. The
    // flag is unset after all NLRI have been advertised to the peer, and the
    // End-of-RIB (EOR) marker has been unset. The type is bool.
    LocalRestarting interface{}

    // Ths leaf indicates the mode of operation of BGP graceful restart with the
    // peer. The type is Mode.
    Mode interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", state.RestartTime}
    state.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime}
    state.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", state.HelperOnly}
    state.EntityData.Leafs["peer-restart-time"] = types.YLeaf{"PeerRestartTime", state.PeerRestartTime}
    state.EntityData.Leafs["peer-restarting"] = types.YLeaf{"PeerRestarting", state.PeerRestarting}
    state.EntityData.Leafs["local-restarting"] = types.YLeaf{"LocalRestarting", state.LocalRestarting}
    state.EntityData.Leafs["mode"] = types.YLeaf{"Mode", state.Mode}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode represents restart with the peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode string

const (
    // The local router is operating in helper-only mode, and
    // hence will not retain forwarding state during a local
    // session restart, but will do so during a restart of the
    // remote peer
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_HELPER_ONLY NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "HELPER_ONLY"

    // The local router is operating in both helper mode, and
    // hence retains forwarding state during a remote restart,
    // and also maintains forwarding state during local session
    // restart
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_BILATERAL NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "BILATERAL"

    // The local system is able to retain routes during restart
    // but the remote system is only able to act as a helper
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_REMOTE_HELPER NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "REMOTE_HELPER"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions
// Logging options for events related to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying logging for events relating
    // to the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config

    // State information relating to logging for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State
}

func (loggingOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions) GetEntityData() *types.CommonEntityData {
    loggingOptions.EntityData.YFilter = loggingOptions.YFilter
    loggingOptions.EntityData.YangName = "logging-options"
    loggingOptions.EntityData.BundleName = "openconfig"
    loggingOptions.EntityData.ParentYangName = "neighbor"
    loggingOptions.EntityData.SegmentPath = "logging-options"
    loggingOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    loggingOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    loggingOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    loggingOptions.EntityData.Children = make(map[string]types.YChild)
    loggingOptions.EntityData.Children["config"] = types.YChild{"Config", &loggingOptions.Config}
    loggingOptions.EntityData.Children["state"] = types.YChild{"State", &loggingOptions.State}
    loggingOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(loggingOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config
// Configuration parameters enabling or modifying logging
// for events relating to the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "logging-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["log-neighbor-state-changes"] = types.YLeaf{"LogNeighborStateChanges", config.LogNeighborStateChanges}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State
// State information relating to logging for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "logging-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["log-neighbor-state-changes"] = types.YLeaf{"LogNeighborStateChanges", state.LogNeighborStateChanges}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop
// eBGP multi-hop parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multihop for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config

    // State information for eBGP multihop, for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State
}

func (ebgpMultihop *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "openconfig"
    ebgpMultihop.EntityData.ParentYangName = "neighbor"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgpMultihop.EntityData.Children = make(map[string]types.YChild)
    ebgpMultihop.EntityData.Children["config"] = types.YChild{"Config", &ebgpMultihop.Config}
    ebgpMultihop.EntityData.Children["state"] = types.YChild{"State", &ebgpMultihop.State}
    ebgpMultihop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgpMultihop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config
// Configuration parameters relating to eBGP multihop for the
// BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp-multihop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["multihop-ttl"] = types.YLeaf{"MultihopTtl", config.MultihopTtl}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State
// State information for eBGP multihop, for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp-multihop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["multihop-ttl"] = types.YLeaf{"MultihopTtl", state.MultihopTtl}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector
// Route reflector parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuraton parameters relating to route reflection for the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config

    // State information relating to route reflection for the BGPgroup.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State
}

func (routeReflector *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector) GetEntityData() *types.CommonEntityData {
    routeReflector.EntityData.YFilter = routeReflector.YFilter
    routeReflector.EntityData.YangName = "route-reflector"
    routeReflector.EntityData.BundleName = "openconfig"
    routeReflector.EntityData.ParentYangName = "neighbor"
    routeReflector.EntityData.SegmentPath = "route-reflector"
    routeReflector.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeReflector.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeReflector.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeReflector.EntityData.Children = make(map[string]types.YChild)
    routeReflector.EntityData.Children["config"] = types.YChild{"Config", &routeReflector.Config}
    routeReflector.EntityData.Children["state"] = types.YChild{"State", &routeReflector.State}
    routeReflector.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeReflector.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config
// Configuraton parameters relating to route reflection
// for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-reflector"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["route-reflector-cluster-id"] = types.YLeaf{"RouteReflectorClusterId", config.RouteReflectorClusterId}
    config.EntityData.Leafs["route-reflector-client"] = types.YLeaf{"RouteReflectorClient", config.RouteReflectorClient}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State
// State information relating to route reflection for the
// BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-reflector"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["route-reflector-cluster-id"] = types.YLeaf{"RouteReflectorClusterId", state.RouteReflectorClusterId}
    state.EntityData.Leafs["route-reflector-client"] = types.YLeaf{"RouteReflectorClient", state.RouteReflectorClient}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions
// AS_PATH manipulation parameters for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to AS_PATH manipulation for the BGP peer
    // or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config

    // State information relating to the AS_PATH manipulation mechanisms for the
    // BGP peer or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State
}

func (asPathOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions) GetEntityData() *types.CommonEntityData {
    asPathOptions.EntityData.YFilter = asPathOptions.YFilter
    asPathOptions.EntityData.YangName = "as-path-options"
    asPathOptions.EntityData.BundleName = "openconfig"
    asPathOptions.EntityData.ParentYangName = "neighbor"
    asPathOptions.EntityData.SegmentPath = "as-path-options"
    asPathOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    asPathOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    asPathOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    asPathOptions.EntityData.Children = make(map[string]types.YChild)
    asPathOptions.EntityData.Children["config"] = types.YChild{"Config", &asPathOptions.Config}
    asPathOptions.EntityData.Children["state"] = types.YChild{"State", &asPathOptions.State}
    asPathOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(asPathOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config
// Configuration parameters relating to AS_PATH manipulation
// for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "as-path-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-own-as"] = types.YLeaf{"AllowOwnAs", config.AllowOwnAs}
    config.EntityData.Leafs["replace-peer-as"] = types.YLeaf{"ReplacePeerAs", config.ReplacePeerAs}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State
// State information relating to the AS_PATH manipulation
// mechanisms for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "as-path-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-own-as"] = types.YLeaf{"AllowOwnAs", state.AllowOwnAs}
    state.EntityData.Leafs["replace-peer-as"] = types.YLeaf{"ReplacePeerAs", state.ReplacePeerAs}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths
// Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to ADD_PATHS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config

    // State information associated with ADD_PATHS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State
}

func (addPaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths) GetEntityData() *types.CommonEntityData {
    addPaths.EntityData.YFilter = addPaths.YFilter
    addPaths.EntityData.YangName = "add-paths"
    addPaths.EntityData.BundleName = "openconfig"
    addPaths.EntityData.ParentYangName = "neighbor"
    addPaths.EntityData.SegmentPath = "add-paths"
    addPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    addPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    addPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    addPaths.EntityData.Children = make(map[string]types.YChild)
    addPaths.EntityData.Children["config"] = types.YChild{"Config", &addPaths.Config}
    addPaths.EntityData.Children["state"] = types.YChild{"State", &addPaths.State}
    addPaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(addPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config
// Configuration parameters relating to ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "add-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["receive"] = types.YLeaf{"Receive", config.Receive}
    config.EntityData.Leafs["send-max"] = types.YLeaf{"SendMax", config.SendMax}
    config.EntityData.Leafs["eligible-prefix-policy"] = types.YLeaf{"EligiblePrefixPolicy", config.EligiblePrefixPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State
// State information associated with ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "add-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["receive"] = types.YLeaf{"Receive", state.Receive}
    state.EntityData.Leafs["send-max"] = types.YLeaf{"SendMax", state.SendMax}
    state.EntityData.Leafs["eligible-prefix-policy"] = types.YLeaf{"EligiblePrefixPolicy", state.EligiblePrefixPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths
// Parameters related to the use of multiple-paths for the same
// NLRI when they are received only from this neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State

    // Multipath configuration for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "neighbor"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
// Multipath configuration for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "neighbor"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis
// Per-address-family configuration parameters associated with
// the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi.
    AfiSafi []NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "neighbor"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = make(map[string]types.YChild)
    afiSafis.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", nil}
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children[types.GetSegmentPath(&afiSafis.AfiSafi[i])] = types.YChild{"AfiSafi", &afiSafis.AfiSafi[i]}
    }
    afiSafis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3VpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3VpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3VpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3VpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2VpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls

    // BGP EVPN configuration options.
    L2VpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn

    // Parameters related to the use of multiple-paths for the same NLRI when they
    // are received only from this neighbor.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + "[afi-safi-name='" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "']"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["config"] = types.YChild{"Config", &afiSafi.Config}
    afiSafi.EntityData.Children["state"] = types.YChild{"State", &afiSafi.State}
    afiSafi.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &afiSafi.GracefulRestart}
    afiSafi.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &afiSafi.ApplyPolicy}
    afiSafi.EntityData.Children["ipv4-unicast"] = types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast}
    afiSafi.EntityData.Children["ipv6-unicast"] = types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast}
    afiSafi.EntityData.Children["ipv4-labeled-unicast"] = types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast}
    afiSafi.EntityData.Children["ipv6-labeled-unicast"] = types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-unicast"] = types.YChild{"L3VpnIpv4Unicast", &afiSafi.L3VpnIpv4Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-unicast"] = types.YChild{"L3VpnIpv6Unicast", &afiSafi.L3VpnIpv6Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-multicast"] = types.YChild{"L3VpnIpv4Multicast", &afiSafi.L3VpnIpv4Multicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-multicast"] = types.YChild{"L3VpnIpv6Multicast", &afiSafi.L3VpnIpv6Multicast}
    afiSafi.EntityData.Children["l2vpn-vpls"] = types.YChild{"L2VpnVpls", &afiSafi.L2VpnVpls}
    afiSafi.EntityData.Children["l2vpn-evpn"] = types.YChild{"L2VpnEvpn", &afiSafi.L2VpnEvpn}
    afiSafi.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths}
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    afiSafi.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName}
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", config.AfiSafiName}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}

    // This value indicates whether a particular AFI-SAFI has been succesfully
    // negotiated with the peer. An AFI-SAFI may be enabled in the current running
    // configuration, but a session restart may be required in order to negotiate
    // the new capability. The type is bool.
    Active interface{}

    // Prefix counters for the BGP session.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &state.Prefixes}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", state.AfiSafiName}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["active"] = types.YLeaf{"Active", state.Active}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
// Prefix counters for the BGP session
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of prefixes received from the neighbor. The type is interface{}
    // with range: 0..4294967295.
    Received interface{}

    // The number of prefixes advertised to the neighbor. The type is interface{}
    // with range: 0..4294967295.
    Sent interface{}

    // The number of advertised prefixes installed in the Loc-RIB. The type is
    // interface{} with range: 0..4294967295.
    Installed interface{}
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "state"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixes.EntityData.Leafs["received"] = types.YLeaf{"Received", prefixes.Received}
    prefixes.EntityData.Leafs["sent"] = types.YLeaf{"Sent", prefixes.Sent}
    prefixes.EntityData.Leafs["installed"] = types.YLeaf{"Installed", prefixes.Installed}
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}

    // This leaf indicates whether the neighbor advertised the ability to support
    // graceful-restart for this AFI-SAFI. The type is bool.
    Received interface{}

    // This leaf indicates whether the ability to support graceful-restart has
    // been advertised to the peer. The type is bool.
    Advertised interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["advertised"] = types.YLeaf{"Advertised", state.Advertised}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "afi-safi"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit}
    ipv4Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv4Unicast.Config}
    ipv4Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv4Unicast.State}
    ipv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit}
    ipv6Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv6Unicast.Config}
    ipv6Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv6Unicast.State}
    ipv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv4LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit}
    ipv4LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv6LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit}
    ipv6LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Unicast.EntityData.YFilter = l3VpnIpv4Unicast.YFilter
    l3VpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Unicast.PrefixLimit}
    l3VpnIpv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Unicast.EntityData.YFilter = l3VpnIpv6Unicast.YFilter
    l3VpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Unicast.PrefixLimit}
    l3VpnIpv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Multicast.EntityData.YFilter = l3VpnIpv4Multicast.YFilter
    l3VpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Multicast.PrefixLimit}
    l3VpnIpv4Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Multicast.EntityData.YFilter = l3VpnIpv6Multicast.YFilter
    l3VpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Multicast.PrefixLimit}
    l3VpnIpv6Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetEntityData() *types.CommonEntityData {
    l2VpnVpls.EntityData.YFilter = l2VpnVpls.YFilter
    l2VpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2VpnVpls.EntityData.BundleName = "openconfig"
    l2VpnVpls.EntityData.ParentYangName = "afi-safi"
    l2VpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2VpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnVpls.EntityData.Children = make(map[string]types.YChild)
    l2VpnVpls.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnVpls.PrefixLimit}
    l2VpnVpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityData() *types.CommonEntityData {
    l2VpnEvpn.EntityData.YFilter = l2VpnEvpn.YFilter
    l2VpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2VpnEvpn.EntityData.BundleName = "openconfig"
    l2VpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2VpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2VpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnEvpn.EntityData.Children = make(map[string]types.YChild)
    l2VpnEvpn.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnEvpn.PrefixLimit}
    l2VpnEvpn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple-paths for the same
// NLRI when they are received only from this neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath configuration for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath configuration for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups
// Configuration for BGP peer-groups
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of BGP peer-groups configured on the local system - uniquely
    // identified by peer-group name. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup.
    PeerGroup []NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup
}

func (peerGroups *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups) GetEntityData() *types.CommonEntityData {
    peerGroups.EntityData.YFilter = peerGroups.YFilter
    peerGroups.EntityData.YangName = "peer-groups"
    peerGroups.EntityData.BundleName = "openconfig"
    peerGroups.EntityData.ParentYangName = "bgp"
    peerGroups.EntityData.SegmentPath = "peer-groups"
    peerGroups.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    peerGroups.EntityData.NamespaceTable = openconfig.GetNamespaces()
    peerGroups.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    peerGroups.EntityData.Children = make(map[string]types.YChild)
    peerGroups.EntityData.Children["peer-group"] = types.YChild{"PeerGroup", nil}
    for i := range peerGroups.PeerGroup {
        peerGroups.EntityData.Children[types.GetSegmentPath(&peerGroups.PeerGroup[i])] = types.YChild{"PeerGroup", &peerGroups.PeerGroup[i]}
    }
    peerGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(peerGroups.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup
// List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the name of the BGP peer-group used
    // as a key in the peer-group list. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config_PeerGroupName
    PeerGroupName interface{}

    // Configuration parameters relating to the BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config

    // State information relating to the BGP peer-group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State

    // Timers related to a BGP peer-group.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers

    // Transport session parameters for the BGP peer-group.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport

    // Error handling parameters used for the BGP peer-group.
    ErrorHandling NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart

    // Logging options for events related to the BGP neighbor or group.
    LoggingOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions

    // eBGP multi-hop parameters for the BGPgroup.
    EbgpMultihop NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop

    // Route reflector parameters for the BGPgroup.
    RouteReflector NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector

    // AS_PATH manipulation parameters for the BGP neighbor or group.
    AsPathOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions

    // Parameters relating to the advertisement and receipt of multiple paths for
    // a single NLRI (add-paths).
    AddPaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy

    // Per-address-family configuration parameters associated with thegroup.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis
}

func (peerGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup) GetEntityData() *types.CommonEntityData {
    peerGroup.EntityData.YFilter = peerGroup.YFilter
    peerGroup.EntityData.YangName = "peer-group"
    peerGroup.EntityData.BundleName = "openconfig"
    peerGroup.EntityData.ParentYangName = "peer-groups"
    peerGroup.EntityData.SegmentPath = "peer-group" + "[peer-group-name='" + fmt.Sprintf("%v", peerGroup.PeerGroupName) + "']"
    peerGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    peerGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    peerGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    peerGroup.EntityData.Children = make(map[string]types.YChild)
    peerGroup.EntityData.Children["config"] = types.YChild{"Config", &peerGroup.Config}
    peerGroup.EntityData.Children["state"] = types.YChild{"State", &peerGroup.State}
    peerGroup.EntityData.Children["timers"] = types.YChild{"Timers", &peerGroup.Timers}
    peerGroup.EntityData.Children["transport"] = types.YChild{"Transport", &peerGroup.Transport}
    peerGroup.EntityData.Children["error-handling"] = types.YChild{"ErrorHandling", &peerGroup.ErrorHandling}
    peerGroup.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &peerGroup.GracefulRestart}
    peerGroup.EntityData.Children["logging-options"] = types.YChild{"LoggingOptions", &peerGroup.LoggingOptions}
    peerGroup.EntityData.Children["ebgp-multihop"] = types.YChild{"EbgpMultihop", &peerGroup.EbgpMultihop}
    peerGroup.EntityData.Children["route-reflector"] = types.YChild{"RouteReflector", &peerGroup.RouteReflector}
    peerGroup.EntityData.Children["as-path-options"] = types.YChild{"AsPathOptions", &peerGroup.AsPathOptions}
    peerGroup.EntityData.Children["add-paths"] = types.YChild{"AddPaths", &peerGroup.AddPaths}
    peerGroup.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &peerGroup.UseMultiplePaths}
    peerGroup.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &peerGroup.ApplyPolicy}
    peerGroup.EntityData.Children["afi-safis"] = types.YChild{"AfiSafis", &peerGroup.AfiSafis}
    peerGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    peerGroup.EntityData.Leafs["peer-group-name"] = types.YLeaf{"PeerGroupName", peerGroup.PeerGroupName}
    return &(peerGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config
// Configuration parameters relating to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the BGP peer-group. The type is string.
    PeerGroupName interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREMOVEALLPRIVATEASREPLACEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "peer-group"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["peer-group-name"] = types.YLeaf{"PeerGroupName", config.PeerGroupName}
    config.EntityData.Leafs["peer-as"] = types.YLeaf{"PeerAs", config.PeerAs}
    config.EntityData.Leafs["local-as"] = types.YLeaf{"LocalAs", config.LocalAs}
    config.EntityData.Leafs["peer-type"] = types.YLeaf{"PeerType", config.PeerType}
    config.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", config.AuthPassword}
    config.EntityData.Leafs["remove-private-as"] = types.YLeaf{"RemovePrivateAs", config.RemovePrivateAs}
    config.EntityData.Leafs["route-flap-damping"] = types.YLeaf{"RouteFlapDamping", config.RouteFlapDamping}
    config.EntityData.Leafs["send-community"] = types.YLeaf{"SendCommunity", config.SendCommunity}
    config.EntityData.Leafs["description"] = types.YLeaf{"Description", config.Description}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State
// State information relating to the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the BGP peer-group. The type is string.
    PeerGroupName interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREMOVEALLPRIVATEASREPLACEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "peer-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["peer-group-name"] = types.YLeaf{"PeerGroupName", state.PeerGroupName}
    state.EntityData.Leafs["peer-as"] = types.YLeaf{"PeerAs", state.PeerAs}
    state.EntityData.Leafs["local-as"] = types.YLeaf{"LocalAs", state.LocalAs}
    state.EntityData.Leafs["peer-type"] = types.YLeaf{"PeerType", state.PeerType}
    state.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", state.AuthPassword}
    state.EntityData.Leafs["remove-private-as"] = types.YLeaf{"RemovePrivateAs", state.RemovePrivateAs}
    state.EntityData.Leafs["route-flap-damping"] = types.YLeaf{"RouteFlapDamping", state.RouteFlapDamping}
    state.EntityData.Leafs["send-community"] = types.YLeaf{"SendCommunity", state.SendCommunity}
    state.EntityData.Leafs["description"] = types.YLeaf{"Description", state.Description}
    state.EntityData.Leafs["total-paths"] = types.YLeaf{"TotalPaths", state.TotalPaths}
    state.EntityData.Leafs["total-prefixes"] = types.YLeaf{"TotalPrefixes", state.TotalPrefixes}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers
// Timers related to a BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to timers used for the BGP neighbor or
    // peer group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config

    // State information relating to the timers used for the BGP group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "peer-group"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["config"] = types.YChild{"Config", &timers.Config}
    timers.EntityData.Children["state"] = types.YChild{"State", &timers.State}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config
// Configuration parameters relating to timers used for the
// BGP neighbor or peer group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["connect-retry"] = types.YLeaf{"ConnectRetry", config.ConnectRetry}
    config.EntityData.Leafs["hold-time"] = types.YLeaf{"HoldTime", config.HoldTime}
    config.EntityData.Leafs["keepalive-interval"] = types.YLeaf{"KeepaliveInterval", config.KeepaliveInterval}
    config.EntityData.Leafs["minimum-advertisement-interval"] = types.YLeaf{"MinimumAdvertisementInterval", config.MinimumAdvertisementInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State
// State information relating to the timers used for the BGP
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["connect-retry"] = types.YLeaf{"ConnectRetry", state.ConnectRetry}
    state.EntityData.Leafs["hold-time"] = types.YLeaf{"HoldTime", state.HoldTime}
    state.EntityData.Leafs["keepalive-interval"] = types.YLeaf{"KeepaliveInterval", state.KeepaliveInterval}
    state.EntityData.Leafs["minimum-advertisement-interval"] = types.YLeaf{"MinimumAdvertisementInterval", state.MinimumAdvertisementInterval}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport
// Transport session parameters for the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the transport session(s) used for the
    // BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config

    // State information relating to the transport session(s) used for the BGP
    // neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "peer-group"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = make(map[string]types.YChild)
    transport.EntityData.Children["config"] = types.YChild{"Config", &transport.Config}
    transport.EntityData.Children["state"] = types.YChild{"State", &transport.State}
    transport.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config
// Configuration parameters relating to the transport
// session(s) used for the BGP neighbor or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or string.
    LocalAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["tcp-mss"] = types.YLeaf{"TcpMss", config.TcpMss}
    config.EntityData.Leafs["mtu-discovery"] = types.YLeaf{"MtuDiscovery", config.MtuDiscovery}
    config.EntityData.Leafs["passive-mode"] = types.YLeaf{"PassiveMode", config.PassiveMode}
    config.EntityData.Leafs["local-address"] = types.YLeaf{"LocalAddress", config.LocalAddress}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State
// State information relating to the transport session(s)
// used for the BGP neighbor or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or string.
    LocalAddress interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tcp-mss"] = types.YLeaf{"TcpMss", state.TcpMss}
    state.EntityData.Leafs["mtu-discovery"] = types.YLeaf{"MtuDiscovery", state.MtuDiscovery}
    state.EntityData.Leafs["passive-mode"] = types.YLeaf{"PassiveMode", state.PassiveMode}
    state.EntityData.Leafs["local-address"] = types.YLeaf{"LocalAddress", state.LocalAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling
// Error handling parameters used for the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying the behavior or enhanced
    // error handling mechanisms for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config

    // State information relating to enhanced error handling mechanisms for the
    // BGP group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State
}

func (errorHandling *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling) GetEntityData() *types.CommonEntityData {
    errorHandling.EntityData.YFilter = errorHandling.YFilter
    errorHandling.EntityData.YangName = "error-handling"
    errorHandling.EntityData.BundleName = "openconfig"
    errorHandling.EntityData.ParentYangName = "peer-group"
    errorHandling.EntityData.SegmentPath = "error-handling"
    errorHandling.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorHandling.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorHandling.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorHandling.EntityData.Children = make(map[string]types.YChild)
    errorHandling.EntityData.Children["config"] = types.YChild{"Config", &errorHandling.Config}
    errorHandling.EntityData.Children["state"] = types.YChild{"State", &errorHandling.State}
    errorHandling.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorHandling.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config
// Configuration parameters enabling or modifying the
// behavior or enhanced error handling mechanisms for the BGP
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "error-handling"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["treat-as-withdraw"] = types.YLeaf{"TreatAsWithdraw", config.TreatAsWithdraw}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State
// State information relating to enhanced error handling
// mechanisms for the BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-handling"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["treat-as-withdraw"] = types.YLeaf{"TreatAsWithdraw", state.TreatAsWithdraw}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "peer-group"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", config.RestartTime}
    config.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime}
    config.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", config.HelperOnly}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["restart-time"] = types.YLeaf{"RestartTime", state.RestartTime}
    state.EntityData.Leafs["stale-routes-time"] = types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime}
    state.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", state.HelperOnly}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions
// Logging options for events related to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying logging for events relating
    // to the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config

    // State information relating to logging for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State
}

func (loggingOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions) GetEntityData() *types.CommonEntityData {
    loggingOptions.EntityData.YFilter = loggingOptions.YFilter
    loggingOptions.EntityData.YangName = "logging-options"
    loggingOptions.EntityData.BundleName = "openconfig"
    loggingOptions.EntityData.ParentYangName = "peer-group"
    loggingOptions.EntityData.SegmentPath = "logging-options"
    loggingOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    loggingOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    loggingOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    loggingOptions.EntityData.Children = make(map[string]types.YChild)
    loggingOptions.EntityData.Children["config"] = types.YChild{"Config", &loggingOptions.Config}
    loggingOptions.EntityData.Children["state"] = types.YChild{"State", &loggingOptions.State}
    loggingOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(loggingOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config
// Configuration parameters enabling or modifying logging
// for events relating to the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "logging-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["log-neighbor-state-changes"] = types.YLeaf{"LogNeighborStateChanges", config.LogNeighborStateChanges}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State
// State information relating to logging for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "logging-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["log-neighbor-state-changes"] = types.YLeaf{"LogNeighborStateChanges", state.LogNeighborStateChanges}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop
// eBGP multi-hop parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multihop for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config

    // State information for eBGP multihop, for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
}

func (ebgpMultihop *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "openconfig"
    ebgpMultihop.EntityData.ParentYangName = "peer-group"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgpMultihop.EntityData.Children = make(map[string]types.YChild)
    ebgpMultihop.EntityData.Children["config"] = types.YChild{"Config", &ebgpMultihop.Config}
    ebgpMultihop.EntityData.Children["state"] = types.YChild{"State", &ebgpMultihop.State}
    ebgpMultihop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgpMultihop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config
// Configuration parameters relating to eBGP multihop for the
// BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp-multihop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["multihop-ttl"] = types.YLeaf{"MultihopTtl", config.MultihopTtl}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
// State information for eBGP multihop, for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp-multihop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["multihop-ttl"] = types.YLeaf{"MultihopTtl", state.MultihopTtl}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector
// Route reflector parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuraton parameters relating to route reflection for the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config

    // State information relating to route reflection for the BGPgroup.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State
}

func (routeReflector *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector) GetEntityData() *types.CommonEntityData {
    routeReflector.EntityData.YFilter = routeReflector.YFilter
    routeReflector.EntityData.YangName = "route-reflector"
    routeReflector.EntityData.BundleName = "openconfig"
    routeReflector.EntityData.ParentYangName = "peer-group"
    routeReflector.EntityData.SegmentPath = "route-reflector"
    routeReflector.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeReflector.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeReflector.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeReflector.EntityData.Children = make(map[string]types.YChild)
    routeReflector.EntityData.Children["config"] = types.YChild{"Config", &routeReflector.Config}
    routeReflector.EntityData.Children["state"] = types.YChild{"State", &routeReflector.State}
    routeReflector.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeReflector.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config
// Configuraton parameters relating to route reflection
// for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-reflector"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["route-reflector-cluster-id"] = types.YLeaf{"RouteReflectorClusterId", config.RouteReflectorClusterId}
    config.EntityData.Leafs["route-reflector-client"] = types.YLeaf{"RouteReflectorClient", config.RouteReflectorClient}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State
// State information relating to route reflection for the
// BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-reflector"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["route-reflector-cluster-id"] = types.YLeaf{"RouteReflectorClusterId", state.RouteReflectorClusterId}
    state.EntityData.Leafs["route-reflector-client"] = types.YLeaf{"RouteReflectorClient", state.RouteReflectorClient}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions
// AS_PATH manipulation parameters for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to AS_PATH manipulation for the BGP peer
    // or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config

    // State information relating to the AS_PATH manipulation mechanisms for the
    // BGP peer or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State
}

func (asPathOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions) GetEntityData() *types.CommonEntityData {
    asPathOptions.EntityData.YFilter = asPathOptions.YFilter
    asPathOptions.EntityData.YangName = "as-path-options"
    asPathOptions.EntityData.BundleName = "openconfig"
    asPathOptions.EntityData.ParentYangName = "peer-group"
    asPathOptions.EntityData.SegmentPath = "as-path-options"
    asPathOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    asPathOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    asPathOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    asPathOptions.EntityData.Children = make(map[string]types.YChild)
    asPathOptions.EntityData.Children["config"] = types.YChild{"Config", &asPathOptions.Config}
    asPathOptions.EntityData.Children["state"] = types.YChild{"State", &asPathOptions.State}
    asPathOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(asPathOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config
// Configuration parameters relating to AS_PATH manipulation
// for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "as-path-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-own-as"] = types.YLeaf{"AllowOwnAs", config.AllowOwnAs}
    config.EntityData.Leafs["replace-peer-as"] = types.YLeaf{"ReplacePeerAs", config.ReplacePeerAs}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State
// State information relating to the AS_PATH manipulation
// mechanisms for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "as-path-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-own-as"] = types.YLeaf{"AllowOwnAs", state.AllowOwnAs}
    state.EntityData.Leafs["replace-peer-as"] = types.YLeaf{"ReplacePeerAs", state.ReplacePeerAs}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths
// Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to ADD_PATHS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config

    // State information associated with ADD_PATHS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State
}

func (addPaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths) GetEntityData() *types.CommonEntityData {
    addPaths.EntityData.YFilter = addPaths.YFilter
    addPaths.EntityData.YangName = "add-paths"
    addPaths.EntityData.BundleName = "openconfig"
    addPaths.EntityData.ParentYangName = "peer-group"
    addPaths.EntityData.SegmentPath = "add-paths"
    addPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    addPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    addPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    addPaths.EntityData.Children = make(map[string]types.YChild)
    addPaths.EntityData.Children["config"] = types.YChild{"Config", &addPaths.Config}
    addPaths.EntityData.Children["state"] = types.YChild{"State", &addPaths.State}
    addPaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(addPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config
// Configuration parameters relating to ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "add-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["receive"] = types.YLeaf{"Receive", config.Receive}
    config.EntityData.Leafs["send-max"] = types.YLeaf{"SendMax", config.SendMax}
    config.EntityData.Leafs["eligible-prefix-policy"] = types.YLeaf{"EligiblePrefixPolicy", config.EligiblePrefixPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State
// State information associated with ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "add-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["receive"] = types.YLeaf{"Receive", state.Receive}
    state.EntityData.Leafs["send-max"] = types.YLeaf{"SendMax", state.SendMax}
    state.EntityData.Leafs["eligible-prefix-policy"] = types.YLeaf{"EligiblePrefixPolicy", state.EligiblePrefixPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "peer-group"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Children["ibgp"] = types.YChild{"Ibgp", &useMultiplePaths.Ibgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = make(map[string]types.YChild)
    ibgp.EntityData.Children["config"] = types.YChild{"Config", &ibgp.Config}
    ibgp.EntityData.Children["state"] = types.YChild{"State", &ibgp.State}
    ibgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "peer-group"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis
// Per-address-family configuration parameters associated with
// thegroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi.
    AfiSafi []NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "peer-group"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = make(map[string]types.YChild)
    afiSafis.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", nil}
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children[types.GetSegmentPath(&afiSafis.AfiSafi[i])] = types.YChild{"AfiSafi", &afiSafis.AfiSafi[i]}
    }
    afiSafis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3VpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3VpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3VpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3VpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2VpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls

    // BGP EVPN configuration options.
    L2VpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + "[afi-safi-name='" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "']"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["config"] = types.YChild{"Config", &afiSafi.Config}
    afiSafi.EntityData.Children["state"] = types.YChild{"State", &afiSafi.State}
    afiSafi.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &afiSafi.GracefulRestart}
    afiSafi.EntityData.Children["route-selection-options"] = types.YChild{"RouteSelectionOptions", &afiSafi.RouteSelectionOptions}
    afiSafi.EntityData.Children["use-multiple-paths"] = types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths}
    afiSafi.EntityData.Children["apply-policy"] = types.YChild{"ApplyPolicy", &afiSafi.ApplyPolicy}
    afiSafi.EntityData.Children["ipv4-unicast"] = types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast}
    afiSafi.EntityData.Children["ipv6-unicast"] = types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast}
    afiSafi.EntityData.Children["ipv4-labeled-unicast"] = types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast}
    afiSafi.EntityData.Children["ipv6-labeled-unicast"] = types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-unicast"] = types.YChild{"L3VpnIpv4Unicast", &afiSafi.L3VpnIpv4Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-unicast"] = types.YChild{"L3VpnIpv6Unicast", &afiSafi.L3VpnIpv6Unicast}
    afiSafi.EntityData.Children["l3vpn-ipv4-multicast"] = types.YChild{"L3VpnIpv4Multicast", &afiSafi.L3VpnIpv4Multicast}
    afiSafi.EntityData.Children["l3vpn-ipv6-multicast"] = types.YChild{"L3VpnIpv6Multicast", &afiSafi.L3VpnIpv6Multicast}
    afiSafi.EntityData.Children["l2vpn-vpls"] = types.YChild{"L2VpnVpls", &afiSafi.L2VpnVpls}
    afiSafi.EntityData.Children["l2vpn-evpn"] = types.YChild{"L2VpnEvpn", &afiSafi.L2VpnEvpn}
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    afiSafi.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName}
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", config.AfiSafiName}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // IPV4UNICASTIPV6UNICASTIPV4LABELEDUNICASTIPV6LABELEDUNICASTL3VPNIPV4UNICASTL3VPNIPV6UNICASTL3VPNIPV4MULTICASTL3VPNIPV6MULTICASTL2VPNVPLSL2VPNEVPN.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-safi-name"] = types.YLeaf{"AfiSafiName", state.AfiSafiName}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "afi-safi"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = make(map[string]types.YChild)
    routeSelectionOptions.EntityData.Children["config"] = types.YChild{"Config", &routeSelectionOptions.Config}
    routeSelectionOptions.EntityData.Children["state"] = types.YChild{"State", &routeSelectionOptions.State}
    routeSelectionOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed}
    config.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength}
    config.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId}
    config.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes}
    config.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", config.EnableAigp}
    config.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["always-compare-med"] = types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed}
    state.EntityData.Leafs["ignore-as-path-length"] = types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength}
    state.EntityData.Leafs["external-compare-router-id"] = types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId}
    state.EntityData.Leafs["advertise-inactive-routes"] = types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes}
    state.EntityData.Leafs["enable-aigp"] = types.YLeaf{"EnableAigp", state.EnableAigp}
    state.EntityData.Leafs["ignore-next-hop-igp-metric"] = types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = make(map[string]types.YChild)
    useMultiplePaths.EntityData.Children["config"] = types.YChild{"Config", &useMultiplePaths.Config}
    useMultiplePaths.EntityData.Children["state"] = types.YChild{"State", &useMultiplePaths.State}
    useMultiplePaths.EntityData.Children["ebgp"] = types.YChild{"Ebgp", &useMultiplePaths.Ebgp}
    useMultiplePaths.EntityData.Children["ibgp"] = types.YChild{"Ibgp", &useMultiplePaths.Ibgp}
    useMultiplePaths.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = make(map[string]types.YChild)
    ebgp.EntityData.Children["config"] = types.YChild{"Config", &ebgp.Config}
    ebgp.EntityData.Children["state"] = types.YChild{"State", &ebgp.State}
    ebgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs}
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["allow-multiple-as"] = types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs}
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = make(map[string]types.YChild)
    ibgp.EntityData.Children["config"] = types.YChild{"Config", &ibgp.Config}
    ibgp.EntityData.Children["state"] = types.YChild{"State", &ibgp.State}
    ibgp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", config.MaximumPaths}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", state.MaximumPaths}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "afi-safi"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = make(map[string]types.YChild)
    applyPolicy.EntityData.Children["config"] = types.YChild{"Config", &applyPolicy.Config}
    applyPolicy.EntityData.Children["state"] = types.YChild{"State", &applyPolicy.State}
    applyPolicy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    config.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", config.ExportPolicy}
    config.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    state.EntityData.Leafs["export-policy"] = types.YLeaf{"ExportPolicy", state.ExportPolicy}
    state.EntityData.Leafs["default-export-policy"] = types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit}
    ipv4Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv4Unicast.Config}
    ipv4Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv4Unicast.State}
    ipv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = make(map[string]types.YChild)
    ipv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit}
    ipv6Unicast.EntityData.Children["config"] = types.YChild{"Config", &ipv6Unicast.Config}
    ipv6Unicast.EntityData.Children["state"] = types.YChild{"State", &ipv6Unicast.State}
    ipv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["send-default-route"] = types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv4LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit}
    ipv4LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = make(map[string]types.YChild)
    ipv6LabeledUnicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit}
    ipv6LabeledUnicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Unicast.EntityData.YFilter = l3VpnIpv4Unicast.YFilter
    l3VpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3VpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Unicast.PrefixLimit}
    l3VpnIpv4Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Unicast.EntityData.YFilter = l3VpnIpv6Unicast.YFilter
    l3VpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3VpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Unicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Unicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Unicast.PrefixLimit}
    l3VpnIpv6Unicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv4Multicast.EntityData.YFilter = l3VpnIpv4Multicast.YFilter
    l3VpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3VpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv4Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv4Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv4Multicast.PrefixLimit}
    l3VpnIpv4Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3VpnIpv6Multicast.EntityData.YFilter = l3VpnIpv6Multicast.YFilter
    l3VpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3VpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3VpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3VpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3VpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3VpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3VpnIpv6Multicast.EntityData.Children = make(map[string]types.YChild)
    l3VpnIpv6Multicast.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l3VpnIpv6Multicast.PrefixLimit}
    l3VpnIpv6Multicast.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l3VpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetEntityData() *types.CommonEntityData {
    l2VpnVpls.EntityData.YFilter = l2VpnVpls.YFilter
    l2VpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2VpnVpls.EntityData.BundleName = "openconfig"
    l2VpnVpls.EntityData.ParentYangName = "afi-safi"
    l2VpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2VpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnVpls.EntityData.Children = make(map[string]types.YChild)
    l2VpnVpls.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnVpls.PrefixLimit}
    l2VpnVpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityData() *types.CommonEntityData {
    l2VpnEvpn.EntityData.YFilter = l2VpnEvpn.YFilter
    l2VpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2VpnEvpn.EntityData.BundleName = "openconfig"
    l2VpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2VpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2VpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2VpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2VpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2VpnEvpn.EntityData.Children = make(map[string]types.YChild)
    l2VpnEvpn.EntityData.Children["prefix-limit"] = types.YChild{"PrefixLimit", &l2VpnEvpn.PrefixLimit}
    l2VpnEvpn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(l2VpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = make(map[string]types.YChild)
    prefixLimit.EntityData.Children["config"] = types.YChild{"Config", &prefixLimit.Config}
    prefixLimit.EntityData.Children["state"] = types.YChild{"State", &prefixLimit.State}
    prefixLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", config.MaxPrefixes}
    config.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct}
    config.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", config.RestartTimer}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-prefixes"] = types.YLeaf{"MaxPrefixes", state.MaxPrefixes}
    state.EntityData.Leafs["shutdown-threshold-pct"] = types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct}
    state.EntityData.Leafs["restart-timer"] = types.YLeaf{"RestartTimer", state.RestartTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
// This container defines top-level ISIS configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines global ISIS configuration and state information.
    Global NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global

    // This container defines ISIS level configuration and state information.
    Levels NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels

    // This container defines global ISIS interface configuration and state
    // information.
    Interfaces NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces
}

func (isis *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "openconfig"
    isis.EntityData.ParentYangName = "protocol"
    isis.EntityData.SegmentPath = "isis"
    isis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isis.EntityData.Children = make(map[string]types.YChild)
    isis.EntityData.Children["global"] = types.YChild{"Global", &isis.Global}
    isis.EntityData.Children["levels"] = types.YChild{"Levels", &isis.Levels}
    isis.EntityData.Children["interfaces"] = types.YChild{"Interfaces", &isis.Interfaces}
    isis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global
// This container defines global ISIS configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS global configuration router.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config

    // This container defines state for ISIS global router.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State

    // This container defines ISIS LSP Operational Bits.
    LspBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit

    // This container defines ISIS Reference Bandwidth.
    ReferenceBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth

    // This container defines ISIS Non-Stop Routing.
    Nsr NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr

    // This container defines ISIS Graceful Restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart

    // This container defines ISIS timers.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers

    // This container defines ISIS transport.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport

    // Configuration and operational state relating to MPLS-related features in
    // IS-IS.
    Mpls NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls

    // This container defines IGP shortcuts configuration and state information.
    IgpShortcuts NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi

    // Configuration and operational state relating to segment routing.
    SegmentRouting NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting

    // Policies to propagate prefixes between IS-IS levels.
    InterLevelPropagationPolicies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies
}

func (global *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "isis"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = make(map[string]types.YChild)
    global.EntityData.Children["config"] = types.YChild{"Config", &global.Config}
    global.EntityData.Children["state"] = types.YChild{"State", &global.State}
    global.EntityData.Children["lsp-bit"] = types.YChild{"LspBit", &global.LspBit}
    global.EntityData.Children["reference-bandwidth"] = types.YChild{"ReferenceBandwidth", &global.ReferenceBandwidth}
    global.EntityData.Children["nsr"] = types.YChild{"Nsr", &global.Nsr}
    global.EntityData.Children["graceful-restart"] = types.YChild{"GracefulRestart", &global.GracefulRestart}
    global.EntityData.Children["timers"] = types.YChild{"Timers", &global.Timers}
    global.EntityData.Children["transport"] = types.YChild{"Transport", &global.Transport}
    global.EntityData.Children["mpls"] = types.YChild{"Mpls", &global.Mpls}
    global.EntityData.Children["igp-shortcuts"] = types.YChild{"IgpShortcuts", &global.IgpShortcuts}
    global.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", &global.AfiSafi}
    global.EntityData.Children["segment-routing"] = types.YChild{"SegmentRouting", &global.SegmentRouting}
    global.EntityData.Children["inter-level-propagation-policies"] = types.YChild{"InterLevelPropagationPolicies", &global.InterLevelPropagationPolicies}
    global.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config
// This container defines ISIS global configuration router.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}

    // ISIS Instance. The type is string. The default value is 0.
    Instance interface{}

    // ISIS network entity title (NET). The first 8 bits are usually 49 (private
    // AFI), next 16 bits represent area, next 48 bits represent system id and
    // final 8 bits are set to 0. The type is slice of string with pattern:
    // b'^[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,9}\\.[a-fA-F0-9]{2}$'.
    Net []interface{}

    // Maximum areas supported. The type is interface{} with range: 0..255. The
    // default value is 3.
    MaximumAreaAddresses interface{}

    // ISIS level capability(level-1, level-2,vlevel-1-2). The type is LevelType.
    // The default value is LEVEL_1_2.
    LevelCapability interface{}

    // ISIS max-paths count. The type is interface{} with range: 0..255.
    MaxEcmpPaths interface{}

    // ISIS purge TLV. When set to true, a TLV is added to purges to record the
    // system ID  of the IS generating the purge. The type is bool. The default
    // value is false.
    PoiTlv interface{}

    // ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies the
    // unique instance as well as the topology/topologies to which the PDU
    // applies. The type is bool. The default value is false.
    IidTlv interface{}

    // When set to true, IS will always flood the LSP that triggered an SPF before
    // the router actually runs the SPF computation. The type is bool. The default
    // value is true.
    FastFlooding interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "global"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["authentication-check"] = types.YLeaf{"AuthenticationCheck", config.AuthenticationCheck}
    config.EntityData.Leafs["instance"] = types.YLeaf{"Instance", config.Instance}
    config.EntityData.Leafs["net"] = types.YLeaf{"Net", config.Net}
    config.EntityData.Leafs["maximum-area-addresses"] = types.YLeaf{"MaximumAreaAddresses", config.MaximumAreaAddresses}
    config.EntityData.Leafs["level-capability"] = types.YLeaf{"LevelCapability", config.LevelCapability}
    config.EntityData.Leafs["max-ecmp-paths"] = types.YLeaf{"MaxEcmpPaths", config.MaxEcmpPaths}
    config.EntityData.Leafs["poi-tlv"] = types.YLeaf{"PoiTlv", config.PoiTlv}
    config.EntityData.Leafs["iid-tlv"] = types.YLeaf{"IidTlv", config.IidTlv}
    config.EntityData.Leafs["fast-flooding"] = types.YLeaf{"FastFlooding", config.FastFlooding}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State
// This container defines state for ISIS global router.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}

    // ISIS Instance. The type is string. The default value is 0.
    Instance interface{}

    // ISIS network entity title (NET). The first 8 bits are usually 49 (private
    // AFI), next 16 bits represent area, next 48 bits represent system id and
    // final 8 bits are set to 0. The type is slice of string with pattern:
    // b'^[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,9}\\.[a-fA-F0-9]{2}$'.
    Net []interface{}

    // Maximum areas supported. The type is interface{} with range: 0..255. The
    // default value is 3.
    MaximumAreaAddresses interface{}

    // ISIS level capability(level-1, level-2,vlevel-1-2). The type is LevelType.
    // The default value is LEVEL_1_2.
    LevelCapability interface{}

    // ISIS max-paths count. The type is interface{} with range: 0..255.
    MaxEcmpPaths interface{}

    // ISIS purge TLV. When set to true, a TLV is added to purges to record the
    // system ID  of the IS generating the purge. The type is bool. The default
    // value is false.
    PoiTlv interface{}

    // ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies the
    // unique instance as well as the topology/topologies to which the PDU
    // applies. The type is bool. The default value is false.
    IidTlv interface{}

    // When set to true, IS will always flood the LSP that triggered an SPF before
    // the router actually runs the SPF computation. The type is bool. The default
    // value is true.
    FastFlooding interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["authentication-check"] = types.YLeaf{"AuthenticationCheck", state.AuthenticationCheck}
    state.EntityData.Leafs["instance"] = types.YLeaf{"Instance", state.Instance}
    state.EntityData.Leafs["net"] = types.YLeaf{"Net", state.Net}
    state.EntityData.Leafs["maximum-area-addresses"] = types.YLeaf{"MaximumAreaAddresses", state.MaximumAreaAddresses}
    state.EntityData.Leafs["level-capability"] = types.YLeaf{"LevelCapability", state.LevelCapability}
    state.EntityData.Leafs["max-ecmp-paths"] = types.YLeaf{"MaxEcmpPaths", state.MaxEcmpPaths}
    state.EntityData.Leafs["poi-tlv"] = types.YLeaf{"PoiTlv", state.PoiTlv}
    state.EntityData.Leafs["iid-tlv"] = types.YLeaf{"IidTlv", state.IidTlv}
    state.EntityData.Leafs["fast-flooding"] = types.YLeaf{"FastFlooding", state.FastFlooding}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit
// This container defines ISIS LSP Operational Bits.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Overload Bit configuration.
    OverloadBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit

    // This container defines Attached Bit.
    AttachedBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
}

func (lspBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit) GetEntityData() *types.CommonEntityData {
    lspBit.EntityData.YFilter = lspBit.YFilter
    lspBit.EntityData.YangName = "lsp-bit"
    lspBit.EntityData.BundleName = "openconfig"
    lspBit.EntityData.ParentYangName = "global"
    lspBit.EntityData.SegmentPath = "lsp-bit"
    lspBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspBit.EntityData.Children = make(map[string]types.YChild)
    lspBit.EntityData.Children["overload-bit"] = types.YChild{"OverloadBit", &lspBit.OverloadBit}
    lspBit.EntityData.Children["attached-bit"] = types.YChild{"AttachedBit", &lspBit.AttachedBit}
    lspBit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lspBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit
// This container defines Overload Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS Overload Bit configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config

    // This container defines state for ISIS Overload Bit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State

    // This container defines state for ISIS Overload Bit reset triggers.
    ResetTriggers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
}

func (overloadBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit) GetEntityData() *types.CommonEntityData {
    overloadBit.EntityData.YFilter = overloadBit.YFilter
    overloadBit.EntityData.YangName = "overload-bit"
    overloadBit.EntityData.BundleName = "openconfig"
    overloadBit.EntityData.ParentYangName = "lsp-bit"
    overloadBit.EntityData.SegmentPath = "overload-bit"
    overloadBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    overloadBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    overloadBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    overloadBit.EntityData.Children = make(map[string]types.YChild)
    overloadBit.EntityData.Children["config"] = types.YChild{"Config", &overloadBit.Config}
    overloadBit.EntityData.Children["state"] = types.YChild{"State", &overloadBit.State}
    overloadBit.EntityData.Children["reset-triggers"] = types.YChild{"ResetTriggers", &overloadBit.ResetTriggers}
    overloadBit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(overloadBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config
// This container defines ISIS Overload Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, IS-IS overload bit is set. The type is bool. The default
    // value is false.
    SetBit interface{}

    // When set to true, the IS-IS overload bit is set on system boot. The type is
    // bool. The default value is false.
    SetBitOnBoot interface{}

    // When set to true, the local IS advertises links with the highest available
    // metric regardless of their configured metric. The metric value is based on
    // the metric style - if wide metrics are utilised the metric is advertised as
    // 16777214, otherwise they are advertised with a value of 63. The type is
    // bool. The default value is false.
    AdvertiseHighMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "overload-bit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["set-bit"] = types.YLeaf{"SetBit", config.SetBit}
    config.EntityData.Leafs["set-bit-on-boot"] = types.YLeaf{"SetBitOnBoot", config.SetBitOnBoot}
    config.EntityData.Leafs["advertise-high-metric"] = types.YLeaf{"AdvertiseHighMetric", config.AdvertiseHighMetric}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State
// This container defines state for ISIS Overload Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, IS-IS overload bit is set. The type is bool. The default
    // value is false.
    SetBit interface{}

    // When set to true, the IS-IS overload bit is set on system boot. The type is
    // bool. The default value is false.
    SetBitOnBoot interface{}

    // When set to true, the local IS advertises links with the highest available
    // metric regardless of their configured metric. The metric value is based on
    // the metric style - if wide metrics are utilised the metric is advertised as
    // 16777214, otherwise they are advertised with a value of 63. The type is
    // bool. The default value is false.
    AdvertiseHighMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "overload-bit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["set-bit"] = types.YLeaf{"SetBit", state.SetBit}
    state.EntityData.Leafs["set-bit-on-boot"] = types.YLeaf{"SetBitOnBoot", state.SetBitOnBoot}
    state.EntityData.Leafs["advertise-high-metric"] = types.YLeaf{"AdvertiseHighMetric", state.AdvertiseHighMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
// This container defines state for ISIS Overload Bit reset triggers
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS Overload reset trigger reasons. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger.
    ResetTrigger []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
}

func (resetTriggers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers) GetEntityData() *types.CommonEntityData {
    resetTriggers.EntityData.YFilter = resetTriggers.YFilter
    resetTriggers.EntityData.YangName = "reset-triggers"
    resetTriggers.EntityData.BundleName = "openconfig"
    resetTriggers.EntityData.ParentYangName = "overload-bit"
    resetTriggers.EntityData.SegmentPath = "reset-triggers"
    resetTriggers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    resetTriggers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    resetTriggers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    resetTriggers.EntityData.Children = make(map[string]types.YChild)
    resetTriggers.EntityData.Children["reset-trigger"] = types.YChild{"ResetTrigger", nil}
    for i := range resetTriggers.ResetTrigger {
        resetTriggers.EntityData.Children[types.GetSegmentPath(&resetTriggers.ResetTrigger[i])] = types.YChild{"ResetTrigger", &resetTriggers.ResetTrigger[i]}
    }
    resetTriggers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(resetTriggers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
// This list describes ISIS Overload reset trigger reasons.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the reset trigger reason. The type is
    // one of the following: WAITFORBGPWAITFORSYSTEM.
    ResetTrigger interface{}

    // This container defines ISIS Overload Bit reset trigger configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config

    // This container defines state for ISIS Overload Bit reset triggers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
}

func (resetTrigger *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger) GetEntityData() *types.CommonEntityData {
    resetTrigger.EntityData.YFilter = resetTrigger.YFilter
    resetTrigger.EntityData.YangName = "reset-trigger"
    resetTrigger.EntityData.BundleName = "openconfig"
    resetTrigger.EntityData.ParentYangName = "reset-triggers"
    resetTrigger.EntityData.SegmentPath = "reset-trigger" + "[reset-trigger='" + fmt.Sprintf("%v", resetTrigger.ResetTrigger) + "']"
    resetTrigger.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    resetTrigger.EntityData.NamespaceTable = openconfig.GetNamespaces()
    resetTrigger.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    resetTrigger.EntityData.Children = make(map[string]types.YChild)
    resetTrigger.EntityData.Children["config"] = types.YChild{"Config", &resetTrigger.Config}
    resetTrigger.EntityData.Children["state"] = types.YChild{"State", &resetTrigger.State}
    resetTrigger.EntityData.Leafs = make(map[string]types.YLeaf)
    resetTrigger.EntityData.Leafs["reset-trigger"] = types.YLeaf{"ResetTrigger", resetTrigger.ResetTrigger}
    return &(resetTrigger.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config
// This container defines ISIS Overload Bit reset trigger
// configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // In the case that the system sets the overload bit on start, the system
    // should reset the bit (i.e., clear the overload bit) upon the specified
    // trigger. The type is one of the following: WAITFORBGPWAITFORSYSTEM.
    ResetTrigger interface{}

    // If a reset trigger is specified, the system should delay resetting the
    // overload bit for the specified number of seconds after the trigger occurs.
    // The type is interface{} with range: 0..65535. Units are seconds.
    Delay interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reset-trigger"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["reset-trigger"] = types.YLeaf{"ResetTrigger", config.ResetTrigger}
    config.EntityData.Leafs["delay"] = types.YLeaf{"Delay", config.Delay}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
// This container defines state for ISIS Overload Bit reset
// triggers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // In the case that the system sets the overload bit on start, the system
    // should reset the bit (i.e., clear the overload bit) upon the specified
    // trigger. The type is one of the following: WAITFORBGPWAITFORSYSTEM.
    ResetTrigger interface{}

    // If a reset trigger is specified, the system should delay resetting the
    // overload bit for the specified number of seconds after the trigger occurs.
    // The type is interface{} with range: 0..65535. Units are seconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "reset-trigger"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["reset-trigger"] = types.YLeaf{"ResetTrigger", state.ResetTrigger}
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
// This container defines Attached Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Attached Bit configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config

    // This container defines state for Link State PDU Bit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
}

func (attachedBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit) GetEntityData() *types.CommonEntityData {
    attachedBit.EntityData.YFilter = attachedBit.YFilter
    attachedBit.EntityData.YangName = "attached-bit"
    attachedBit.EntityData.BundleName = "openconfig"
    attachedBit.EntityData.ParentYangName = "lsp-bit"
    attachedBit.EntityData.SegmentPath = "attached-bit"
    attachedBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    attachedBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    attachedBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    attachedBit.EntityData.Children = make(map[string]types.YChild)
    attachedBit.EntityData.Children["config"] = types.YChild{"Config", &attachedBit.Config}
    attachedBit.EntityData.Children["state"] = types.YChild{"State", &attachedBit.State}
    attachedBit.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(attachedBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config
// This container defines Attached Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, if the attached bit is set on an incoming Level 1 IS-IS,
    // the local system ignores it. In this case the local system does not set a
    // default route to the L1L2 router advertising the PDU with the attached bit
    // set. The type is bool. The default value is false.
    IgnoreBit interface{}

    // When set to true, if the local IS acts as a L1L2 router, then the attached
    // bit is not advertised in locally generated PDUs. The type is bool. The
    // default value is false.
    SuppressBit interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "attached-bit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["ignore-bit"] = types.YLeaf{"IgnoreBit", config.IgnoreBit}
    config.EntityData.Leafs["suppress-bit"] = types.YLeaf{"SuppressBit", config.SuppressBit}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
// This container defines state for Link State PDU Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, if the attached bit is set on an incoming Level 1 IS-IS,
    // the local system ignores it. In this case the local system does not set a
    // default route to the L1L2 router advertising the PDU with the attached bit
    // set. The type is bool. The default value is false.
    IgnoreBit interface{}

    // When set to true, if the local IS acts as a L1L2 router, then the attached
    // bit is not advertised in locally generated PDUs. The type is bool. The
    // default value is false.
    SuppressBit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "attached-bit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ignore-bit"] = types.YLeaf{"IgnoreBit", state.IgnoreBit}
    state.EntityData.Leafs["suppress-bit"] = types.YLeaf{"SuppressBit", state.SuppressBit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth
// This container defines ISIS Reference Bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Reference Bandwidth configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config

    // This container defines state for Reference Bandwidth.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State
}

func (referenceBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth) GetEntityData() *types.CommonEntityData {
    referenceBandwidth.EntityData.YFilter = referenceBandwidth.YFilter
    referenceBandwidth.EntityData.YangName = "reference-bandwidth"
    referenceBandwidth.EntityData.BundleName = "openconfig"
    referenceBandwidth.EntityData.ParentYangName = "global"
    referenceBandwidth.EntityData.SegmentPath = "reference-bandwidth"
    referenceBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    referenceBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    referenceBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    referenceBandwidth.EntityData.Children = make(map[string]types.YChild)
    referenceBandwidth.EntityData.Children["config"] = types.YChild{"Config", &referenceBandwidth.Config}
    referenceBandwidth.EntityData.Children["state"] = types.YChild{"State", &referenceBandwidth.State}
    referenceBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(referenceBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config
// This container defines Reference Bandwidth configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Reference Bandwidth value. The type is interface{} with range:
    // 0..4294967295.
    ReferenceBandwidth interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reference-bandwidth"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["reference-bandwidth"] = types.YLeaf{"ReferenceBandwidth", config.ReferenceBandwidth}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State
// This container defines state for Reference Bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Reference Bandwidth value. The type is interface{} with range:
    // 0..4294967295.
    ReferenceBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "reference-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["reference-bandwidth"] = types.YLeaf{"ReferenceBandwidth", state.ReferenceBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr
// This container defines ISIS Non-Stop Routing.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Non-Stop-Routing configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config

    // This container defines state for Non-Stop-Routing.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
}

func (nsr *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "openconfig"
    nsr.EntityData.ParentYangName = "global"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nsr.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nsr.EntityData.Children = make(map[string]types.YChild)
    nsr.EntityData.Children["config"] = types.YChild{"Config", &nsr.Config}
    nsr.EntityData.Children["state"] = types.YChild{"State", &nsr.State}
    nsr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nsr.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config
// This container defines Non-Stop-Routing configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "nsr"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
// This container defines state for Non-Stop-Routing
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "nsr"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart
// This container defines ISIS Graceful Restart.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS graceful-restart configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config

    // This container defines state information for ISIS graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = make(map[string]types.YChild)
    gracefulRestart.EntityData.Children["config"] = types.YChild{"Config", &gracefulRestart.Config}
    gracefulRestart.EntityData.Children["state"] = types.YChild{"State", &gracefulRestart.State}
    gracefulRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config
// This container defines ISIS graceful-restart configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Enable or disable the IS-IS graceful restart helper function. When this
    // leaf is set, the local system does not utilise the IS-IS graceful restart
    // procedures during its own restart, but supports retaining forwarding
    // information during a remote speaker's restart. The type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", config.HelperOnly}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
// This container defines state information for ISIS graceful-restart.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Enable or disable the IS-IS graceful restart helper function. When this
    // leaf is set, the local system does not utilise the IS-IS graceful restart
    // procedures during its own restart, but supports retaining forwarding
    // information during a remote speaker's restart. The type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["helper-only"] = types.YLeaf{"HelperOnly", state.HelperOnly}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers
// This container defines ISIS timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS global timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config

    // This container defines state information for ISIS global timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State

    // This container defines ISIS SPF timer settings.
    Spf NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf

    // This container defines ISIS LSP Generation.
    LspGeneration NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "global"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["config"] = types.YChild{"Config", &timers.Config}
    timers.EntityData.Children["state"] = types.YChild{"State", &timers.State}
    timers.EntityData.Children["spf"] = types.YChild{"Spf", &timers.Spf}
    timers.EntityData.Children["lsp-generation"] = types.YChild{"LspGeneration", &timers.LspGeneration}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config
// This container defines ISIS global timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds that specifies how long an LSP remains in LSDB
    // without being refreshed. The type is interface{} with range: 0..65535.
    // Units are seconds. The default value is 1200.
    LspLifetimeInterval interface{}

    // Time interval in seconds that specifies how often route topology that a
    // device originates is transmitted in LSPs. The type is interface{} with
    // range: 0..65535. Units are seconds.
    LspRefreshInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["lsp-lifetime-interval"] = types.YLeaf{"LspLifetimeInterval", config.LspLifetimeInterval}
    config.EntityData.Leafs["lsp-refresh-interval"] = types.YLeaf{"LspRefreshInterval", config.LspRefreshInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State
// This container defines state information for ISIS global timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds that specifies how long an LSP remains in LSDB
    // without being refreshed. The type is interface{} with range: 0..65535.
    // Units are seconds. The default value is 1200.
    LspLifetimeInterval interface{}

    // Time interval in seconds that specifies how often route topology that a
    // device originates is transmitted in LSPs. The type is interface{} with
    // range: 0..65535. Units are seconds.
    LspRefreshInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["lsp-lifetime-interval"] = types.YLeaf{"LspLifetimeInterval", state.LspLifetimeInterval}
    state.EntityData.Leafs["lsp-refresh-interval"] = types.YLeaf{"LspRefreshInterval", state.LspRefreshInterval}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf
// This container defines ISIS SPF timer settings.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS SPF timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config

    // This container defines state information for ISIS SPF timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
}

func (spf *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf) GetEntityData() *types.CommonEntityData {
    spf.EntityData.YFilter = spf.YFilter
    spf.EntityData.YangName = "spf"
    spf.EntityData.BundleName = "openconfig"
    spf.EntityData.ParentYangName = "timers"
    spf.EntityData.SegmentPath = "spf"
    spf.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    spf.EntityData.NamespaceTable = openconfig.GetNamespaces()
    spf.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    spf.EntityData.Children = make(map[string]types.YChild)
    spf.EntityData.Children["config"] = types.YChild{"Config", &spf.Config}
    spf.EntityData.Children["state"] = types.YChild{"State", &spf.State}
    spf.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(spf.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config
// This container defines ISIS SPF timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Hold Down time interval in milliseconds. The type is interface{} with
    // range: 0..18446744073709551615. Units are milliseconds. The default value
    // is 5000.
    SpfHoldInterval interface{}

    // Time interval in milliseconds between the detection of topology change and
    // when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    SpfFirstInterval interface{}

    // Time interval in milliseconds between the first and second SPF calculation.
    // The type is interface{} with range: 0..18446744073709551615. Units are
    // milliseconds.
    SpfSecondInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "spf"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["spf-hold-interval"] = types.YLeaf{"SpfHoldInterval", config.SpfHoldInterval}
    config.EntityData.Leafs["spf-first-interval"] = types.YLeaf{"SpfFirstInterval", config.SpfFirstInterval}
    config.EntityData.Leafs["spf-second-interval"] = types.YLeaf{"SpfSecondInterval", config.SpfSecondInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
// This container defines state information for ISIS SPF timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Hold Down time interval in milliseconds. The type is interface{} with
    // range: 0..18446744073709551615. Units are milliseconds. The default value
    // is 5000.
    SpfHoldInterval interface{}

    // Time interval in milliseconds between the detection of topology change and
    // when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    SpfFirstInterval interface{}

    // Time interval in milliseconds between the first and second SPF calculation.
    // The type is interface{} with range: 0..18446744073709551615. Units are
    // milliseconds.
    SpfSecondInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // AdaptiveTimerType.
    AdaptiveTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "spf"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["spf-hold-interval"] = types.YLeaf{"SpfHoldInterval", state.SpfHoldInterval}
    state.EntityData.Leafs["spf-first-interval"] = types.YLeaf{"SpfFirstInterval", state.SpfFirstInterval}
    state.EntityData.Leafs["spf-second-interval"] = types.YLeaf{"SpfSecondInterval", state.SpfSecondInterval}
    state.EntityData.Leafs["adaptive-timer"] = types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
// This container defines ISIS LSP Generation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS LSP Generation timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config

    // This container defines state information for ISIS LSP Generation timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
}

func (lspGeneration *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration) GetEntityData() *types.CommonEntityData {
    lspGeneration.EntityData.YFilter = lspGeneration.YFilter
    lspGeneration.EntityData.YangName = "lsp-generation"
    lspGeneration.EntityData.BundleName = "openconfig"
    lspGeneration.EntityData.ParentYangName = "timers"
    lspGeneration.EntityData.SegmentPath = "lsp-generation"
    lspGeneration.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspGeneration.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspGeneration.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspGeneration.EntityData.Children = make(map[string]types.YChild)
    lspGeneration.EntityData.Children["config"] = types.YChild{"Config", &lspGeneration.Config}
    lspGeneration.EntityData.Children["state"] = types.YChild{"State", &lspGeneration.State}
    lspGeneration.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lspGeneration.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config
// This container defines ISIS LSP Generation timers
// configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in milliseconds that specifies max interval between two
    // consecutive occurrences of an LSP being generated. The type is interface{}
    // with range: 0..18446744073709551615. Units are milliseconds.
    LspMaxWaitInterval interface{}

    // Time interval in milliseconds that specifies the first LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspFirstWaitInterval interface{}

    // Time interval in milliseconds that specifies the millisecond LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspSecondWaitInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "lsp-generation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["lsp-max-wait-interval"] = types.YLeaf{"LspMaxWaitInterval", config.LspMaxWaitInterval}
    config.EntityData.Leafs["lsp-first-wait-interval"] = types.YLeaf{"LspFirstWaitInterval", config.LspFirstWaitInterval}
    config.EntityData.Leafs["lsp-second-wait-interval"] = types.YLeaf{"LspSecondWaitInterval", config.LspSecondWaitInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
// This container defines state information for ISIS LSP Generation
// timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in milliseconds that specifies max interval between two
    // consecutive occurrences of an LSP being generated. The type is interface{}
    // with range: 0..18446744073709551615. Units are milliseconds.
    LspMaxWaitInterval interface{}

    // Time interval in milliseconds that specifies the first LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspFirstWaitInterval interface{}

    // Time interval in milliseconds that specifies the millisecond LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspSecondWaitInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // AdaptiveTimerType.
    AdaptiveTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp-generation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["lsp-max-wait-interval"] = types.YLeaf{"LspMaxWaitInterval", state.LspMaxWaitInterval}
    state.EntityData.Leafs["lsp-first-wait-interval"] = types.YLeaf{"LspFirstWaitInterval", state.LspFirstWaitInterval}
    state.EntityData.Leafs["lsp-second-wait-interval"] = types.YLeaf{"LspSecondWaitInterval", state.LspSecondWaitInterval}
    state.EntityData.Leafs["adaptive-timer"] = types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport
// This container defines ISIS transport.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS transport related configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config

    // This container defines state information for ISIS transport parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "global"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = make(map[string]types.YChild)
    transport.EntityData.Children["config"] = types.YChild{"Config", &transport.Config}
    transport.EntityData.Children["state"] = types.YChild{"State", &transport.State}
    transport.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config
// This container defines ISIS transport related configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum size in bytes of an IS-IS Link state PDU. The type is
    // interface{} with range: 0..65535.
    LspMtuSize interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["lsp-mtu-size"] = types.YLeaf{"LspMtuSize", config.LspMtuSize}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
// This container defines state information for ISIS transport
// parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum size in bytes of an IS-IS Link state PDU. The type is
    // interface{} with range: 0..65535.
    LspMtuSize interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["lsp-mtu-size"] = types.YLeaf{"LspMtuSize", state.LspMtuSize}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls
// Configuration and operational state relating to MPLS-related
// features in IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state relating to synchronisation between the
    // LDP and IS-IS.
    IgpLdpSync NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync
}

func (mpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "openconfig"
    mpls.EntityData.ParentYangName = "global"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mpls.EntityData.Children = make(map[string]types.YChild)
    mpls.EntityData.Children["igp-ldp-sync"] = types.YChild{"IgpLdpSync", &mpls.IgpLdpSync}
    mpls.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync
// Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS/IGP configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config

    // This container defines state information for ISIS/LDP Sync.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State
}

func (igpLdpSync *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync) GetEntityData() *types.CommonEntityData {
    igpLdpSync.EntityData.YFilter = igpLdpSync.YFilter
    igpLdpSync.EntityData.YangName = "igp-ldp-sync"
    igpLdpSync.EntityData.BundleName = "openconfig"
    igpLdpSync.EntityData.ParentYangName = "mpls"
    igpLdpSync.EntityData.SegmentPath = "igp-ldp-sync"
    igpLdpSync.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    igpLdpSync.EntityData.NamespaceTable = openconfig.GetNamespaces()
    igpLdpSync.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    igpLdpSync.EntityData.Children = make(map[string]types.YChild)
    igpLdpSync.EntityData.Children["config"] = types.YChild{"Config", &igpLdpSync.Config}
    igpLdpSync.EntityData.Children["state"] = types.YChild{"State", &igpLdpSync.State}
    igpLdpSync.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(igpLdpSync.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config
// This container defines ISIS/IGP configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, rely on IGP/LDP synchronization. IGP cost for link is
    // maintained at max until LDP adjacencies are established . The type is bool.
    // The default value is true.
    Enabled interface{}

    // Specifies a delay, expressed in units of seconds, between the LDP session
    // to the IGP neighbor being established, and it being considered synchronized
    // by the IGP. The type is interface{} with range: 0..65535. Units are
    // seconds.
    PostSessionUpDelay interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "igp-ldp-sync"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["post-session-up-delay"] = types.YLeaf{"PostSessionUpDelay", config.PostSessionUpDelay}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State
// This container defines state information for ISIS/LDP Sync.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, rely on IGP/LDP synchronization. IGP cost for link is
    // maintained at max until LDP adjacencies are established . The type is bool.
    // The default value is true.
    Enabled interface{}

    // Specifies a delay, expressed in units of seconds, between the LDP session
    // to the IGP neighbor being established, and it being considered synchronized
    // by the IGP. The type is interface{} with range: 0..65535. Units are
    // seconds.
    PostSessionUpDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "igp-ldp-sync"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["post-session-up-delay"] = types.YLeaf{"PostSessionUpDelay", state.PostSessionUpDelay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts
// This container defines IGP shortcuts configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi.
    Afi []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi
}

func (igpShortcuts *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts) GetEntityData() *types.CommonEntityData {
    igpShortcuts.EntityData.YFilter = igpShortcuts.YFilter
    igpShortcuts.EntityData.YangName = "igp-shortcuts"
    igpShortcuts.EntityData.BundleName = "openconfig"
    igpShortcuts.EntityData.ParentYangName = "global"
    igpShortcuts.EntityData.SegmentPath = "igp-shortcuts"
    igpShortcuts.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    igpShortcuts.EntityData.NamespaceTable = openconfig.GetNamespaces()
    igpShortcuts.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    igpShortcuts.EntityData.Children = make(map[string]types.YChild)
    igpShortcuts.EntityData.Children["afi"] = types.YChild{"Afi", nil}
    for i := range igpShortcuts.Afi {
        igpShortcuts.EntityData.Children[types.GetSegmentPath(&igpShortcuts.Afi[i])] = types.YChild{"Afi", &igpShortcuts.Afi[i]}
    }
    igpShortcuts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(igpShortcuts.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi
// Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This container defines ISIS Shortcuts configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config

    // This container defines ISIS Shortcuts state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State
}

func (afi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi) GetEntityData() *types.CommonEntityData {
    afi.EntityData.YFilter = afi.YFilter
    afi.EntityData.YangName = "afi"
    afi.EntityData.BundleName = "openconfig"
    afi.EntityData.ParentYangName = "igp-shortcuts"
    afi.EntityData.SegmentPath = "afi" + "[afi-name='" + fmt.Sprintf("%v", afi.AfiName) + "']"
    afi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afi.EntityData.Children = make(map[string]types.YChild)
    afi.EntityData.Children["config"] = types.YChild{"Config", &afi.Config}
    afi.EntityData.Children["state"] = types.YChild{"State", &afi.State}
    afi.EntityData.Leafs = make(map[string]types.YLeaf)
    afi.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", afi.AfiName}
    return &(afi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config
// This container defines ISIS Shortcuts configuration parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Tunnel NH Type(RSVP,SR). When present it implies that nh-type shortcut is
    // enabled for a specified AFI. The type is slice of ['PATHSETUPPROTOCOL'].
    NhType []interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", config.AfiName}
    config.EntityData.Leafs["nh-type"] = types.YLeaf{"NhType", config.NhType}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State
// This container defines ISIS Shortcuts state information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Tunnel NH Type(RSVP,SR). When present it implies that nh-type shortcut is
    // enabled for a specified AFI. The type is slice of ['PATHSETUPPROTOCOL'].
    NhType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", state.AfiName}
    state.EntityData.Leafs["nh-type"] = types.YLeaf{"NhType", state.NhType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af.
    Af []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "global"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["af"] = types.YChild{"Af", nil}
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children[types.GetSegmentPath(&afiSafi.Af[i])] = types.YChild{"Af", &afiSafi.Af[i]}
    }
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State

    // This container defines multi-topology address-family configuration and
    // state information. ISIS TLV 235, 237.
    MultiTopology NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + "[afi-name='" + fmt.Sprintf("%v", af.AfiName) + "']" + "[safi-name='" + fmt.Sprintf("%v", af.SafiName) + "']"
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Children["config"] = types.YChild{"Config", &af.Config}
    af.EntityData.Children["state"] = types.YChild{"State", &af.State}
    af.EntityData.Children["multi-topology"] = types.YChild{"MultiTopology", &af.MultiTopology}
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", af.AfiName}
    af.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", af.SafiName}
    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", config.AfiName}
    config.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", config.SafiName}
    config.EntityData.Leafs["metric"] = types.YLeaf{"Metric", config.Metric}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", state.AfiName}
    state.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", state.SafiName}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology
// This container defines multi-topology address-family configuration
// and state information. ISIS TLV 235, 237.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines AFI-SAFI multi-topology configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config

    // This container defines AFI-SAFI multi-topology state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State
}

func (multiTopology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "openconfig"
    multiTopology.EntityData.ParentYangName = "af"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    multiTopology.EntityData.Children = make(map[string]types.YChild)
    multiTopology.EntityData.Children["config"] = types.YChild{"Config", &multiTopology.Config}
    multiTopology.EntityData.Children["state"] = types.YChild{"State", &multiTopology.State}
    multiTopology.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiTopology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config
// This container defines AFI-SAFI multi-topology configuration
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "multi-topology"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", config.AfiName}
    config.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", config.SafiName}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State
// This container defines AFI-SAFI multi-topology state information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "multi-topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", state.AfiName}
    state.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", state.SafiName}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting
// Configuration and operational state relating to segment routing.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the configuration of segment routing
    // for the IGP instance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config

    // Operational state parameters relating to segment routing for the IGP
    // instance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
}

func (segmentRouting *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "global"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = make(map[string]types.YChild)
    segmentRouting.EntityData.Children["config"] = types.YChild{"Config", &segmentRouting.Config}
    segmentRouting.EntityData.Children["state"] = types.YChild{"State", &segmentRouting.State}
    segmentRouting.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config
// Configuration parameters relating to the configuration of segment
// routing for the IGP instance.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the segment routing extensions are utilised
    // within the IGP. The type is bool.
    Enabled interface{}

    // A reference to the Segment Routing Global Block (SRGB) that is to be used
    // by this IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    Srgb interface{}

    // A reference to the Segment Routing Local Block (SRLB) that is to be
    // advertised by the IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    Srlb interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "segment-routing"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["srgb"] = types.YLeaf{"Srgb", config.Srgb}
    config.EntityData.Leafs["srlb"] = types.YLeaf{"Srlb", config.Srlb}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
// Operational state parameters relating to segment routing for the
// IGP instance.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the segment routing extensions are utilised
    // within the IGP. The type is bool.
    Enabled interface{}

    // A reference to the Segment Routing Global Block (SRGB) that is to be used
    // by this IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    Srgb interface{}

    // A reference to the Segment Routing Local Block (SRLB) that is to be
    // advertised by the IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    Srlb interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["srgb"] = types.YLeaf{"Srgb", state.Srgb}
    state.EntityData.Leafs["srlb"] = types.YLeaf{"Srlb", state.Srlb}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies
// Policies to propagate prefixes between IS-IS levels.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policies relating to prefixes to be propagated from Level 1 to Level 2.
    Level1ToLevel2 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2

    // Policies relating to prefixes to be propagated from Level2 to Level 1.
    Level2ToLevel1 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
}

func (interLevelPropagationPolicies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies) GetEntityData() *types.CommonEntityData {
    interLevelPropagationPolicies.EntityData.YFilter = interLevelPropagationPolicies.YFilter
    interLevelPropagationPolicies.EntityData.YangName = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.BundleName = "openconfig"
    interLevelPropagationPolicies.EntityData.ParentYangName = "global"
    interLevelPropagationPolicies.EntityData.SegmentPath = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interLevelPropagationPolicies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interLevelPropagationPolicies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interLevelPropagationPolicies.EntityData.Children = make(map[string]types.YChild)
    interLevelPropagationPolicies.EntityData.Children["level1-to-level2"] = types.YChild{"Level1ToLevel2", &interLevelPropagationPolicies.Level1ToLevel2}
    interLevelPropagationPolicies.EntityData.Children["level2-to-level1"] = types.YChild{"Level2ToLevel1", &interLevelPropagationPolicies.Level2ToLevel1}
    interLevelPropagationPolicies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interLevelPropagationPolicies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// Policies relating to prefixes to be propagated from
// Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the propagation of prefixes from IS-IS
    // Level 1 to Level 2.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 1 to Level 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
}

func (level1ToLevel2 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) GetEntityData() *types.CommonEntityData {
    level1ToLevel2.EntityData.YFilter = level1ToLevel2.YFilter
    level1ToLevel2.EntityData.YangName = "level1-to-level2"
    level1ToLevel2.EntityData.BundleName = "openconfig"
    level1ToLevel2.EntityData.ParentYangName = "inter-level-propagation-policies"
    level1ToLevel2.EntityData.SegmentPath = "level1-to-level2"
    level1ToLevel2.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level1ToLevel2.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level1ToLevel2.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level1ToLevel2.EntityData.Children = make(map[string]types.YChild)
    level1ToLevel2.EntityData.Children["config"] = types.YChild{"Config", &level1ToLevel2.Config}
    level1ToLevel2.EntityData.Children["state"] = types.YChild{"State", &level1ToLevel2.State}
    level1ToLevel2.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(level1ToLevel2.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config
// Configuration parameters relating to the propagation
// of prefixes from IS-IS Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level1-to-level2"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
// Operational state parameters relating to the
// propagation of prefixes from IS-IS Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level1-to-level2"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// Policies relating to prefixes to be propagated from
// Level2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the propagation of prefixes from IS-IS
    // Level 2 to Level 1.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 2 to Level 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
}

func (level2ToLevel1 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) GetEntityData() *types.CommonEntityData {
    level2ToLevel1.EntityData.YFilter = level2ToLevel1.YFilter
    level2ToLevel1.EntityData.YangName = "level2-to-level1"
    level2ToLevel1.EntityData.BundleName = "openconfig"
    level2ToLevel1.EntityData.ParentYangName = "inter-level-propagation-policies"
    level2ToLevel1.EntityData.SegmentPath = "level2-to-level1"
    level2ToLevel1.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level2ToLevel1.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level2ToLevel1.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level2ToLevel1.EntityData.Children = make(map[string]types.YChild)
    level2ToLevel1.EntityData.Children["config"] = types.YChild{"Config", &level2ToLevel1.Config}
    level2ToLevel1.EntityData.Children["state"] = types.YChild{"State", &level2ToLevel1.State}
    level2ToLevel1.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(level2ToLevel1.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config
// Configuration parameters relating to the propagation
// of prefixes from IS-IS Level 2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level2-to-level1"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", config.ImportPolicy}
    config.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
// Operational state parameters relating to the propagation
// of prefixes from IS-IS Level 2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level2-to-level1"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["import-policy"] = types.YLeaf{"ImportPolicy", state.ImportPolicy}
    state.EntityData.Leafs["default-import-policy"] = types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels
// This container defines ISIS level configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level within the IS-IS protocol instance. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level.
    Level []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
}

func (levels *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "openconfig"
    levels.EntityData.ParentYangName = "isis"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    levels.EntityData.NamespaceTable = openconfig.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    levels.EntityData.Children = make(map[string]types.YChild)
    levels.EntityData.Children["level"] = types.YChild{"Level", nil}
    for i := range levels.Level {
        levels.EntityData.Children[types.GetSegmentPath(&levels.Level[i])] = types.YChild{"Level", &levels.Level[i]}
    }
    levels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(levels.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
// Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to ISIS level-number. The type is string
    // with range: 1..2. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config_LevelNumber
    LevelNumber interface{}

    // This container defines ISIS level based configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config

    // This container defines ISIS level state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State

    // This container defines ISIS system level counters.
    SystemLevelCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters

    // This container defines ISIS LSDB.
    LinkStateDatabase NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase

    // This container defines ISIS TE.
    TrafficEngineering NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering

    // This container defines Administrative Distance (or preference) assigned to
    // ISIS routes (level1 internal, level2 internal, level1 external, level2
    // external).
    RoutePreference NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference

    // This container defines ISIS authentication.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication
}

func (level *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "openconfig"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + "[level-number='" + fmt.Sprintf("%v", level.LevelNumber) + "']"
    level.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level.EntityData.Children = make(map[string]types.YChild)
    level.EntityData.Children["config"] = types.YChild{"Config", &level.Config}
    level.EntityData.Children["state"] = types.YChild{"State", &level.State}
    level.EntityData.Children["system-level-counters"] = types.YChild{"SystemLevelCounters", &level.SystemLevelCounters}
    level.EntityData.Children["link-state-database"] = types.YChild{"LinkStateDatabase", &level.LinkStateDatabase}
    level.EntityData.Children["traffic-engineering"] = types.YChild{"TrafficEngineering", &level.TrafficEngineering}
    level.EntityData.Children["route-preference"] = types.YChild{"RoutePreference", &level.RoutePreference}
    level.EntityData.Children["authentication"] = types.YChild{"Authentication", &level.Authentication}
    level.EntityData.Leafs = make(map[string]types.YLeaf)
    level.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", level.LevelNumber}
    return &(level.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config
// This container defines ISIS level based configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // ISIS level number (level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS metric style types(narrow, wide). The type is MetricStyle.
    MetricStyle interface{}

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", config.LevelNumber}
    config.EntityData.Leafs["metric-style"] = types.YLeaf{"MetricStyle", config.MetricStyle}
    config.EntityData.Leafs["authentication-check"] = types.YLeaf{"AuthenticationCheck", config.AuthenticationCheck}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State
// This container defines ISIS level state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // ISIS level number (level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS metric style types(narrow, wide). The type is MetricStyle.
    MetricStyle interface{}

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", state.LevelNumber}
    state.EntityData.Leafs["metric-style"] = types.YLeaf{"MetricStyle", state.MetricStyle}
    state.EntityData.Leafs["authentication-check"] = types.YLeaf{"AuthenticationCheck", state.AuthenticationCheck}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters
// This container defines ISIS system level counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of system counters for the IS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
}

func (systemLevelCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters) GetEntityData() *types.CommonEntityData {
    systemLevelCounters.EntityData.YFilter = systemLevelCounters.YFilter
    systemLevelCounters.EntityData.YangName = "system-level-counters"
    systemLevelCounters.EntityData.BundleName = "openconfig"
    systemLevelCounters.EntityData.ParentYangName = "level"
    systemLevelCounters.EntityData.SegmentPath = "system-level-counters"
    systemLevelCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    systemLevelCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    systemLevelCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    systemLevelCounters.EntityData.Children = make(map[string]types.YChild)
    systemLevelCounters.EntityData.Children["state"] = types.YChild{"State", &systemLevelCounters.State}
    systemLevelCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(systemLevelCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
// The container defines a list of system counters for the IS.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of corrupted in-memory LSPs detected. LSPs received from the wire
    // with a bad checksum are silently dropped and not counted. LSPs received
    // from the wire with parse errors are counted by lsp-errors. MIB Entry:
    // SysCorrLSPs. The type is interface{} with range: 0..4294967295.
    CorruptedLsps interface{}

    // Number of times the database has become overloaded. MIB entry:
    // SysLSPL(Level)DbaseOloads. The type is interface{} with range:
    // 0..4294967295.
    DatabaseOverloads interface{}

    // Number of times a manual address has been dropped from area. MIB Entry:
    // SysManAddrDropFromAreas. The type is interface{} with range: 0..4294967295.
    ManualAddressDropFromAreas interface{}

    // The number of times the system has attempted to exceed the maximum sequence
    // number. MIB Entry: SysAttmptToExMaxSeqNums. The type is interface{} with
    // range: 0..4294967295.
    ExceedMaxSeqNums interface{}

    // Number of times a sequence number skip has occurred. MIB Entry:
    // SysSeqNumSkips. The type is interface{} with range: 0..4294967295.
    SeqNumSkips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. MIB Entry: isisSysOwnLSPPurges. The type is interface{}
    // with range: 0..4294967295.
    OwnLspPurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length from that of the receiving system. MIB Entry:
    // isisSysIDFieldLenMismatches. The type is interface{} with range:
    // 0..4294967295.
    IdLenMismatch interface{}

    // The number of partition changes detected. MIB Entry: SysPartChanges. The
    // type is interface{} with range: 0..4294967295.
    PartChanges interface{}

    // Number of times a PDU is received with a different value for
    // MaximumAreaAddresses from that of the receiving system. MIB Entry:
    // SysMaxAreaAddrMismatches. The type is interface{} with range:
    // 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // The number of authentication key failures. MIB Entry: SysAuthFails. The
    // type is interface{} with range: 0..4294967295.
    AuthFails interface{}

    // The number of times SPF was ran at this level. The type is interface{} with
    // range: 0..4294967295.
    SpfRuns interface{}

    // The number of authentication type mismatches. The type is interface{} with
    // range: 0..4294967295.
    AuthTypeFails interface{}

    // The number of received LSPs with errors. The type is interface{} with
    // range: 0..4294967295.
    LspErrors interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "system-level-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["corrupted-lsps"] = types.YLeaf{"CorruptedLsps", state.CorruptedLsps}
    state.EntityData.Leafs["database-overloads"] = types.YLeaf{"DatabaseOverloads", state.DatabaseOverloads}
    state.EntityData.Leafs["manual-address-drop-from-areas"] = types.YLeaf{"ManualAddressDropFromAreas", state.ManualAddressDropFromAreas}
    state.EntityData.Leafs["exceed-max-seq-nums"] = types.YLeaf{"ExceedMaxSeqNums", state.ExceedMaxSeqNums}
    state.EntityData.Leafs["seq-num-skips"] = types.YLeaf{"SeqNumSkips", state.SeqNumSkips}
    state.EntityData.Leafs["own-lsp-purges"] = types.YLeaf{"OwnLspPurges", state.OwnLspPurges}
    state.EntityData.Leafs["id-len-mismatch"] = types.YLeaf{"IdLenMismatch", state.IdLenMismatch}
    state.EntityData.Leafs["part-changes"] = types.YLeaf{"PartChanges", state.PartChanges}
    state.EntityData.Leafs["max-area-address-mismatches"] = types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches}
    state.EntityData.Leafs["auth-fails"] = types.YLeaf{"AuthFails", state.AuthFails}
    state.EntityData.Leafs["spf-runs"] = types.YLeaf{"SpfRuns", state.SpfRuns}
    state.EntityData.Leafs["auth-type-fails"] = types.YLeaf{"AuthTypeFails", state.AuthTypeFails}
    state.EntityData.Leafs["lsp-errors"] = types.YLeaf{"LspErrors", state.LspErrors}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase
// This container defines ISIS LSDB.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes LSPs in the LSDB. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp.
    Lsp []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp
}

func (linkStateDatabase *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase) GetEntityData() *types.CommonEntityData {
    linkStateDatabase.EntityData.YFilter = linkStateDatabase.YFilter
    linkStateDatabase.EntityData.YangName = "link-state-database"
    linkStateDatabase.EntityData.BundleName = "openconfig"
    linkStateDatabase.EntityData.ParentYangName = "level"
    linkStateDatabase.EntityData.SegmentPath = "link-state-database"
    linkStateDatabase.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkStateDatabase.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkStateDatabase.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkStateDatabase.EntityData.Children = make(map[string]types.YChild)
    linkStateDatabase.EntityData.Children["lsp"] = types.YChild{"Lsp", nil}
    for i := range linkStateDatabase.Lsp {
        linkStateDatabase.EntityData.Children[types.GetSegmentPath(&linkStateDatabase.Lsp[i])] = types.YChild{"Lsp", &linkStateDatabase.Lsp[i]}
    }
    linkStateDatabase.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkStateDatabase.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp
// This list describes LSPs in the LSDB.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A reference to the Link State PDU ID. The type is
    // string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9][0-9]-[0-9][0-9]$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_LspId
    LspId interface{}

    // State parameters of Link State PDU.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State

    // This container defines Link State PDU State TLVs.
    Tlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs

    // Surrounding container for a list of unknown TLVs.
    UndefinedTlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs
}

func (lsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "openconfig"
    lsp.EntityData.ParentYangName = "link-state-database"
    lsp.EntityData.SegmentPath = "lsp" + "[lsp-id='" + fmt.Sprintf("%v", lsp.LspId) + "']"
    lsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lsp.EntityData.Children = make(map[string]types.YChild)
    lsp.EntityData.Children["state"] = types.YChild{"State", &lsp.State}
    lsp.EntityData.Children["tlvs"] = types.YChild{"Tlvs", &lsp.Tlvs}
    lsp.EntityData.Children["undefined-tlvs"] = types.YChild{"UndefinedTlvs", &lsp.UndefinedTlvs}
    lsp.EntityData.Leafs = make(map[string]types.YLeaf)
    lsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", lsp.LspId}
    return &(lsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State
// State parameters of Link State PDU.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSP ID of the LSP. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9][0-9]-[0-9][0-9]$'.
    LspId interface{}

    // Number of area addresses permitted for this ISs area. 0 indicates the IS
    // only supports three area addresses (by default). Any number inclusive of 1
    // and 254 indicates the number of areas allowed. The type is interface{} with
    // range: 0..255.
    MaximumAreaAddresses interface{}

    // PDU version. This is set to 1. The type is interface{} with range: 0..255.
    // The default value is 1.
    Version interface{}

    // PDU version2. This is set to 1. The type is interface{} with range: 0..255.
    // The default value is 1.
    Version2 interface{}

    // Length of the ID field of NSAP addresses and NETs used in this routing
    // domain. The type is interface{} with range: 0..255.
    IdLength interface{}

    // Link State PDU type. The type is PduType.
    PduType interface{}

    // Remaining lifetime in seconds before the LSP expiration. The type is
    // interface{} with range: 0..65535. Units are seconds.
    RemainingLifetime interface{}

    // Sequence number of the LSP. The type is interface{} with range:
    // 0..4294967295.
    SequenceNumber interface{}

    // Checksum of the LSP. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // Total length of the LSP. The type is interface{} with range: 0..65535.
    PduLength interface{}

    // LSP Type-Block flags. The type is slice of Flags.
    Flags []interface{}

    // Type of neighboring system. The type is interface{} with range: 1..2.
    IsType interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", state.LspId}
    state.EntityData.Leafs["maximum-area-addresses"] = types.YLeaf{"MaximumAreaAddresses", state.MaximumAreaAddresses}
    state.EntityData.Leafs["version"] = types.YLeaf{"Version", state.Version}
    state.EntityData.Leafs["version2"] = types.YLeaf{"Version2", state.Version2}
    state.EntityData.Leafs["id-length"] = types.YLeaf{"IdLength", state.IdLength}
    state.EntityData.Leafs["pdu-type"] = types.YLeaf{"PduType", state.PduType}
    state.EntityData.Leafs["remaining-lifetime"] = types.YLeaf{"RemainingLifetime", state.RemainingLifetime}
    state.EntityData.Leafs["sequence-number"] = types.YLeaf{"SequenceNumber", state.SequenceNumber}
    state.EntityData.Leafs["checksum"] = types.YLeaf{"Checksum", state.Checksum}
    state.EntityData.Leafs["pdu-length"] = types.YLeaf{"PduLength", state.PduLength}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["is-type"] = types.YLeaf{"IsType", state.IsType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags represents LSP Type-Block flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags string

const (
    // When set, the originator supports partition
    // repair.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_PARTITION_REPAIR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "PARTITION_REPAIR"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_ERROR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_ERROR"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_EXPENSE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_EXPENSE"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_DELAY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_DELAY"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_DEFAULT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_DEFAULT"

    // When set, the originator is overloaded, and must
    // be avoided in path calculation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_OVERLOAD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "OVERLOAD"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType represents Link State PDU type.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType string

const (
    // This enum describes ISIS level 1 PDU.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType_LEVEL_1 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType = "LEVEL_1"

    // This enum describes ISIS level 2 PDU.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType_LEVEL_2 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType = "LEVEL_2"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs
// This container defines Link State PDU State TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLV types in the LSDB for the specified LSP. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv.
    Tlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv
}

func (tlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs) GetEntityData() *types.CommonEntityData {
    tlvs.EntityData.YFilter = tlvs.YFilter
    tlvs.EntityData.YangName = "tlvs"
    tlvs.EntityData.BundleName = "openconfig"
    tlvs.EntityData.ParentYangName = "lsp"
    tlvs.EntityData.SegmentPath = "tlvs"
    tlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tlvs.EntityData.Children = make(map[string]types.YChild)
    tlvs.EntityData.Children["tlv"] = types.YChild{"Tlv", nil}
    for i := range tlvs.Tlv {
        tlvs.EntityData.Children[types.GetSegmentPath(&tlvs.Tlv[i])] = types.YChild{"Tlv", &tlvs.Tlv[i]}
    }
    tlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv
// List of TLV types in the LSDB for the specified LSP.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the TLV's type. The type is one of
    // the following:
    // AREAADDRESSESIISNEIGHBORSINSTANCEIDAUTHENTICATIONPURGEOIEXTENDEDISREACHABILITYISNEIGHBORATTRIBUTEISISALIASIDIPV4INTERNALREACHABILITYNLPIDIPV4EXTERNALREACHABILITYIPV4INTERFACEADDRESSESIPV4TEROUTERIDEXTENDEDIPV4REACHABILITYDYNAMICNAMEIPV4SRLGIPV6SRLGIPV6TEROUTERIDMTISNMTISNEIGHBORATTRIBUTEMULTITOPOLOGYIPV6INTERFACEADDRESSESMTIPV4REACHABILITYIPV6REACHABILITYMTIPV6REACHABILITYROUTERCAPABILITY.
    Type_ interface{}

    // Operational state parameters relating to the specified LSP.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State

    // This container defines TLV 1.
    AreaAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress

    // This container defines TLV 14 - the LSP Buffer Size TLV.
    LspBufferSize NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize

    // This container defines TLV 129.
    Nlpid NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid

    // This container defines TLV 137.
    Hostname NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname

    // This container defines TLV 132.
    Ipv4InterfaceAddresses NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses

    // This container defines TLV 232.
    Ipv6InterfaceAddresses NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses

    // This container defines TLV 134.
    Ipv4TeRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId

    // This container defines TLV 140.
    Ipv6TeRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId

    // This container defines ISIS Instance Identifier TLV.
    InstanceIds NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds

    // This container defines ISIS SRLG TLV 138.
    Ipv4Srlgs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs

    // This container defines ISIS SRLG TLV.
    Ipv6Srlgs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs

    // This container defines ISIS purge TLV.
    PurgeOi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi

    // This container defines router capabilities.
    RouterCapabilities NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities

    // This container describes list of ISIS neighbors and attributes.
    IsReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability

    // This container defines list of IPv4 internal reachability information.
    Ipv4InternalReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability

    // This container defines list of IPv4 external reachability information.
    Ipv4ExternalReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability

    // This container defines authentication information of the node.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication

    // This container defines list of ISIS extended reachability neighbors.
    ExtendedIsReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability

    // This container defines list of IPv4 extended reachability information.
    ExtendedIpv4Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability

    // This container defines list of IPv6 reachability information.
    Ipv6Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability

    // This container defines the topology supported.
    MultiTopology NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology

    // This container defines list of ISIS topology neighbors for extended ISIS
    // LSP (multiple system IDs). .
    IsisNeighborAttribute NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute

    // This container defines the IS-Alias TLV which allows extension-capable ISs
    // to recognize the Originating System of an Extended LSP set. It identifies
    // the Normal system- id of the Originating System.
    IsAliasId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId

    // This container defines list of ISIS multi-topology neighbors.
    MtIsn NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn

    // This container defines list of ISIS multi-topology neighbors.
    MtIsisNeighborAttribute NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute

    // This container defines list of IPv4 reachability Information in
    // multi-topology environment.
    MtIpv4Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability

    // This container defines list of IPv6 reachability information in multi -
    // topology environment.
    MtIpv6Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability
}

func (tlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "openconfig"
    tlv.EntityData.ParentYangName = "tlvs"
    tlv.EntityData.SegmentPath = "tlv" + "[type='" + fmt.Sprintf("%v", tlv.Type_) + "']"
    tlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tlv.EntityData.Children = make(map[string]types.YChild)
    tlv.EntityData.Children["state"] = types.YChild{"State", &tlv.State}
    tlv.EntityData.Children["area-address"] = types.YChild{"AreaAddress", &tlv.AreaAddress}
    tlv.EntityData.Children["lsp-buffer-size"] = types.YChild{"LspBufferSize", &tlv.LspBufferSize}
    tlv.EntityData.Children["nlpid"] = types.YChild{"Nlpid", &tlv.Nlpid}
    tlv.EntityData.Children["hostname"] = types.YChild{"Hostname", &tlv.Hostname}
    tlv.EntityData.Children["ipv4-interface-addresses"] = types.YChild{"Ipv4InterfaceAddresses", &tlv.Ipv4InterfaceAddresses}
    tlv.EntityData.Children["ipv6-interface-addresses"] = types.YChild{"Ipv6InterfaceAddresses", &tlv.Ipv6InterfaceAddresses}
    tlv.EntityData.Children["ipv4-te-router-id"] = types.YChild{"Ipv4TeRouterId", &tlv.Ipv4TeRouterId}
    tlv.EntityData.Children["ipv6-te-router-id"] = types.YChild{"Ipv6TeRouterId", &tlv.Ipv6TeRouterId}
    tlv.EntityData.Children["instance-ids"] = types.YChild{"InstanceIds", &tlv.InstanceIds}
    tlv.EntityData.Children["ipv4-srlgs"] = types.YChild{"Ipv4Srlgs", &tlv.Ipv4Srlgs}
    tlv.EntityData.Children["ipv6-srlgs"] = types.YChild{"Ipv6Srlgs", &tlv.Ipv6Srlgs}
    tlv.EntityData.Children["purge-oi"] = types.YChild{"PurgeOi", &tlv.PurgeOi}
    tlv.EntityData.Children["router-capabilities"] = types.YChild{"RouterCapabilities", &tlv.RouterCapabilities}
    tlv.EntityData.Children["is-reachability"] = types.YChild{"IsReachability", &tlv.IsReachability}
    tlv.EntityData.Children["ipv4-internal-reachability"] = types.YChild{"Ipv4InternalReachability", &tlv.Ipv4InternalReachability}
    tlv.EntityData.Children["ipv4-external-reachability"] = types.YChild{"Ipv4ExternalReachability", &tlv.Ipv4ExternalReachability}
    tlv.EntityData.Children["authentication"] = types.YChild{"Authentication", &tlv.Authentication}
    tlv.EntityData.Children["extended-is-reachability"] = types.YChild{"ExtendedIsReachability", &tlv.ExtendedIsReachability}
    tlv.EntityData.Children["extended-ipv4-reachability"] = types.YChild{"ExtendedIpv4Reachability", &tlv.ExtendedIpv4Reachability}
    tlv.EntityData.Children["ipv6-reachability"] = types.YChild{"Ipv6Reachability", &tlv.Ipv6Reachability}
    tlv.EntityData.Children["multi-topology"] = types.YChild{"MultiTopology", &tlv.MultiTopology}
    tlv.EntityData.Children["isis-neighbor-attribute"] = types.YChild{"IsisNeighborAttribute", &tlv.IsisNeighborAttribute}
    tlv.EntityData.Children["is-alias-id"] = types.YChild{"IsAliasId", &tlv.IsAliasId}
    tlv.EntityData.Children["mt-isn"] = types.YChild{"MtIsn", &tlv.MtIsn}
    tlv.EntityData.Children["mt-isis-neighbor-attribute"] = types.YChild{"MtIsisNeighborAttribute", &tlv.MtIsisNeighborAttribute}
    tlv.EntityData.Children["mt-ipv4-reachability"] = types.YChild{"MtIpv4Reachability", &tlv.MtIpv4Reachability}
    tlv.EntityData.Children["mt-ipv6-reachability"] = types.YChild{"MtIpv6Reachability", &tlv.MtIpv6Reachability}
    tlv.EntityData.Leafs = make(map[string]types.YLeaf)
    tlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", tlv.Type_}
    return &(tlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State
// Operational state parameters relating to the specified
// LSP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of TLV being described. The type of TLV is expressed as a
    // canonical name. The type is one of the following:
    // AREAADDRESSESIISNEIGHBORSINSTANCEIDAUTHENTICATIONPURGEOIEXTENDEDISREACHABILITYISNEIGHBORATTRIBUTEISISALIASIDIPV4INTERNALREACHABILITYNLPIDIPV4EXTERNALREACHABILITYIPV4INTERFACEADDRESSESIPV4TEROUTERIDEXTENDEDIPV4REACHABILITYDYNAMICNAMEIPV4SRLGIPV6SRLGIPV6TEROUTERIDMTISNMTISNEIGHBORATTRIBUTEMULTITOPOLOGYIPV6INTERFACEADDRESSESMTIPV4REACHABILITYIPV6REACHABILITYMTIPV6REACHABILITYROUTERCAPABILITY.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress
// This container defines TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State
}

func (areaAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress) GetEntityData() *types.CommonEntityData {
    areaAddress.EntityData.YFilter = areaAddress.YFilter
    areaAddress.EntityData.YangName = "area-address"
    areaAddress.EntityData.BundleName = "openconfig"
    areaAddress.EntityData.ParentYangName = "tlv"
    areaAddress.EntityData.SegmentPath = "area-address"
    areaAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    areaAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    areaAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    areaAddress.EntityData.Children = make(map[string]types.YChild)
    areaAddress.EntityData.Children["state"] = types.YChild{"State", &areaAddress.State}
    areaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State
// State parameters of ISIS TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area adress(es) of the IS. Set of manual area addresses of this IS. The
    // type is slice of string with pattern:
    // b'^[0-9A-Fa-f]{2}\\.([0-9A-Fa-f]{4}\\.){0,3}$'.
    AreaAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "area-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["area-address"] = types.YLeaf{"AreaAddress", state.AreaAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize
// This container defines TLV 14 - the LSP Buffer Size TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State
}

func (lspBufferSize *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize) GetEntityData() *types.CommonEntityData {
    lspBufferSize.EntityData.YFilter = lspBufferSize.YFilter
    lspBufferSize.EntityData.YangName = "lsp-buffer-size"
    lspBufferSize.EntityData.BundleName = "openconfig"
    lspBufferSize.EntityData.ParentYangName = "tlv"
    lspBufferSize.EntityData.SegmentPath = "lsp-buffer-size"
    lspBufferSize.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspBufferSize.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspBufferSize.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspBufferSize.EntityData.Children = make(map[string]types.YChild)
    lspBufferSize.EntityData.Children["state"] = types.YChild{"State", &lspBufferSize.State}
    lspBufferSize.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lspBufferSize.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State
// State parameters of TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum MTU that the advertising system can receive, expressed in
    // bytes. The type is interface{} with range: 0..65535. Units are bytes.
    BufferSize interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp-buffer-size"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["buffer-size"] = types.YLeaf{"BufferSize", state.BufferSize}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid
// This container defines TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 129.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State
}

func (nlpid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid) GetEntityData() *types.CommonEntityData {
    nlpid.EntityData.YFilter = nlpid.YFilter
    nlpid.EntityData.YangName = "nlpid"
    nlpid.EntityData.BundleName = "openconfig"
    nlpid.EntityData.ParentYangName = "tlv"
    nlpid.EntityData.SegmentPath = "nlpid"
    nlpid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nlpid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nlpid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nlpid.EntityData.Children = make(map[string]types.YChild)
    nlpid.EntityData.Children["state"] = types.YChild{"State", &nlpid.State}
    nlpid.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nlpid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State
// State parameters of ISIS TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol supported. IPv4 is defined as (0xcc) and IPv6 - (0x8e). The type
    // is slice of Nlpid_.
    Nlpid []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "nlpid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["nlpid"] = types.YLeaf{"Nlpid", state.Nlpid}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ represents (0x8e)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ string

const (
    // IPv4 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid__IPV4 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ = "IPV4"

    // IPv6 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid__IPV6 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ = "IPV6"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname
// This container defines TLV 137.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 137.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State
}

func (hostname *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname) GetEntityData() *types.CommonEntityData {
    hostname.EntityData.YFilter = hostname.YFilter
    hostname.EntityData.YangName = "hostname"
    hostname.EntityData.BundleName = "openconfig"
    hostname.EntityData.ParentYangName = "tlv"
    hostname.EntityData.SegmentPath = "hostname"
    hostname.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    hostname.EntityData.NamespaceTable = openconfig.GetNamespaces()
    hostname.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    hostname.EntityData.Children = make(map[string]types.YChild)
    hostname.EntityData.Children["state"] = types.YChild{"State", &hostname.State}
    hostname.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hostname.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State
// State parameters of ISIS TLV 137.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the node. The type is slice of string.
    Hostname []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hostname"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["hostname"] = types.YLeaf{"Hostname", state.Hostname}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses
// This container defines TLV 132.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 132.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State
}

func (ipv4InterfaceAddresses *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddresses.EntityData.YFilter = ipv4InterfaceAddresses.YFilter
    ipv4InterfaceAddresses.EntityData.YangName = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddresses.EntityData.ParentYangName = "tlv"
    ipv4InterfaceAddresses.EntityData.SegmentPath = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddresses.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddresses.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddresses.EntityData.Children = make(map[string]types.YChild)
    ipv4InterfaceAddresses.EntityData.Children["state"] = types.YChild{"State", &ipv4InterfaceAddresses.State}
    ipv4InterfaceAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InterfaceAddresses.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State
// State parameters of ISIS TLV 132.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 address(es) of the interface corresponding to the SNPA over which this
    // PDU is to be transmitted. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddresses []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-interface-addresses"] = types.YLeaf{"Ipv4InterfaceAddresses", state.Ipv4InterfaceAddresses}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses
// This container defines TLV 232.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 232.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State
}

func (ipv6InterfaceAddresses *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddresses.EntityData.YFilter = ipv6InterfaceAddresses.YFilter
    ipv6InterfaceAddresses.EntityData.YangName = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddresses.EntityData.ParentYangName = "tlv"
    ipv6InterfaceAddresses.EntityData.SegmentPath = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddresses.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddresses.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddresses.EntityData.Children = make(map[string]types.YChild)
    ipv6InterfaceAddresses.EntityData.Children["state"] = types.YChild{"State", &ipv6InterfaceAddresses.State}
    ipv6InterfaceAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6InterfaceAddresses.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State
// State parameters of ISIS TLV 232.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 interface addresses of the node.  MUST contain only the non-link-local
    // IPv6 addresses assigned to the IS. The type is slice of string with
    // pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddresses []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-interface-addresses"] = types.YLeaf{"Ipv6InterfaceAddresses", state.Ipv6InterfaceAddresses}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId
// This container defines TLV 134.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 134.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State
}

func (ipv4TeRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv4TeRouterId.EntityData.YFilter = ipv4TeRouterId.YFilter
    ipv4TeRouterId.EntityData.YangName = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.BundleName = "openconfig"
    ipv4TeRouterId.EntityData.ParentYangName = "tlv"
    ipv4TeRouterId.EntityData.SegmentPath = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4TeRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4TeRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4TeRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv4TeRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv4TeRouterId.State}
    ipv4TeRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4TeRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State
// State parameters of ISIS TLV 134.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Traffic Engineering router ID of the node. For traffic engineering, it
    // guarantees that we have a single stable address that can always be
    // referenced in a path that will be reachable from multiple hops away,
    // regardless of the state of the node's interfaces. The type is slice of
    // string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    RouterId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", state.RouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId
// This container defines TLV 140.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 140.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State
}

func (ipv6TeRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv6TeRouterId.EntityData.YFilter = ipv6TeRouterId.YFilter
    ipv6TeRouterId.EntityData.YangName = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.BundleName = "openconfig"
    ipv6TeRouterId.EntityData.ParentYangName = "tlv"
    ipv6TeRouterId.EntityData.SegmentPath = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6TeRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6TeRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6TeRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv6TeRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv6TeRouterId.State}
    ipv6TeRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6TeRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State
// State parameters of ISIS TLV 140.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Traffic Engineering router ID of the node. For traffic engineering, it
    // guarantees that we have a single stable address that can always be
    // referenced in a path that will be reachable from multiple hops away,
    // regardless of the state of the node's interfaces. The type is slice of
    // string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    RouterId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", state.RouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds
// This container defines ISIS Instance Identifier TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of instance IDs received within TLV 7 within an IS-IS LSP. In the
    // case that more than one instance of TLV 7 is included in the LSP, the
    // instance IDs specified within the instances are concatenated within this
    // list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId.
    InstanceId []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId
}

func (instanceIds *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds) GetEntityData() *types.CommonEntityData {
    instanceIds.EntityData.YFilter = instanceIds.YFilter
    instanceIds.EntityData.YangName = "instance-ids"
    instanceIds.EntityData.BundleName = "openconfig"
    instanceIds.EntityData.ParentYangName = "tlv"
    instanceIds.EntityData.SegmentPath = "instance-ids"
    instanceIds.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    instanceIds.EntityData.NamespaceTable = openconfig.GetNamespaces()
    instanceIds.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    instanceIds.EntityData.Children = make(map[string]types.YChild)
    instanceIds.EntityData.Children["instance-id"] = types.YChild{"InstanceId", nil}
    for i := range instanceIds.InstanceId {
        instanceIds.EntityData.Children[types.GetSegmentPath(&instanceIds.InstanceId[i])] = types.YChild{"InstanceId", &instanceIds.InstanceId[i]}
    }
    instanceIds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(instanceIds.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId
// A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of TLV 7
// is included in the LSP, the instance IDs specified within
// the instances are concatenated within this list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the unique instance ID. The type is
    // string with range: 0..65535. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State_InstanceId
    InstanceId interface{}

    // State parameters of ISIS TLV 7.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State
}

func (instanceId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId) GetEntityData() *types.CommonEntityData {
    instanceId.EntityData.YFilter = instanceId.YFilter
    instanceId.EntityData.YangName = "instance-id"
    instanceId.EntityData.BundleName = "openconfig"
    instanceId.EntityData.ParentYangName = "instance-ids"
    instanceId.EntityData.SegmentPath = "instance-id" + "[instance-id='" + fmt.Sprintf("%v", instanceId.InstanceId) + "']"
    instanceId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    instanceId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    instanceId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    instanceId.EntityData.Children = make(map[string]types.YChild)
    instanceId.EntityData.Children["state"] = types.YChild{"State", &instanceId.State}
    instanceId.EntityData.Leafs = make(map[string]types.YLeaf)
    instanceId.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instanceId.InstanceId}
    return &(instanceId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State
// State parameters of ISIS TLV 7.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An Instance Identifier (IID) to uniquely identify an IS-IS instance. When
    // the IID = 0, the list of supported ITIDs MUST NOT be present. An IID-TLV
    // with IID = 0 MUST NOT appear in an SNP or LSP. When the TLV appears (with a
    // non-zero IID) in an SNP or LSP, exactly one ITID. MUST be present
    // indicating the topology with which the PDU is associated. If no ITIDs or
    // multiple ITIDs are present or the IID is zero, then the PDU MUST be
    // ignored. The type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Instance-Specific Topology Identifiers (ITIDs). The type is slice of
    // interface{} with range: 0..65535.
    TopologyId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "instance-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", state.InstanceId}
    state.EntityData.Leafs["topology-id"] = types.YLeaf{"TopologyId", state.TopologyId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs
// This container defines ISIS SRLG TLV 138.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv4 SRLG TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg.
    Ipv4Srlg []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg
}

func (ipv4Srlgs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs) GetEntityData() *types.CommonEntityData {
    ipv4Srlgs.EntityData.YFilter = ipv4Srlgs.YFilter
    ipv4Srlgs.EntityData.YangName = "ipv4-srlgs"
    ipv4Srlgs.EntityData.BundleName = "openconfig"
    ipv4Srlgs.EntityData.ParentYangName = "tlv"
    ipv4Srlgs.EntityData.SegmentPath = "ipv4-srlgs"
    ipv4Srlgs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Srlgs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Srlgs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Srlgs.EntityData.Children = make(map[string]types.YChild)
    ipv4Srlgs.EntityData.Children["ipv4-srlg"] = types.YChild{"Ipv4Srlg", nil}
    for i := range ipv4Srlgs.Ipv4Srlg {
        ipv4Srlgs.EntityData.Children[types.GetSegmentPath(&ipv4Srlgs.Ipv4Srlg[i])] = types.YChild{"Ipv4Srlg", &ipv4Srlgs.Ipv4Srlg[i]}
    }
    ipv4Srlgs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Srlgs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg
// Instance of the IPv4 SRLG TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the instance number of TLV 138. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 138.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State
}

func (ipv4Srlg *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg) GetEntityData() *types.CommonEntityData {
    ipv4Srlg.EntityData.YFilter = ipv4Srlg.YFilter
    ipv4Srlg.EntityData.YangName = "ipv4-srlg"
    ipv4Srlg.EntityData.BundleName = "openconfig"
    ipv4Srlg.EntityData.ParentYangName = "ipv4-srlgs"
    ipv4Srlg.EntityData.SegmentPath = "ipv4-srlg" + "[instance-number='" + fmt.Sprintf("%v", ipv4Srlg.InstanceNumber) + "']"
    ipv4Srlg.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Srlg.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Srlg.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Srlg.EntityData.Children = make(map[string]types.YChild)
    ipv4Srlg.EntityData.Children["state"] = types.YChild{"State", &ipv4Srlg.State}
    ipv4Srlg.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4Srlg.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", ipv4Srlg.InstanceNumber}
    return &(ipv4Srlg.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State
// State parameters of TLV 138.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The instance identifier is synthesised by the system and may be
    // renumbered for the same SRLG definition in subsequent advertised LSPs if
    // (and only if) the entire list of SRLGs is replaced. The type is interface{}
    // with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // SRLG flags. The type is slice of Flags.
    Flags []interface{}

    // IPv4 interface address. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddress interface{}

    // IPv4 neighbor address. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4NeighborAddress interface{}

    // List of SRLG values. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlgValue []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", state.InstanceNumber}
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["psn-number"] = types.YLeaf{"PsnNumber", state.PsnNumber}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["ipv4-interface-address"] = types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress}
    state.EntityData.Leafs["ipv4-neighbor-address"] = types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress}
    state.EntityData.Leafs["srlg-value"] = types.YLeaf{"SrlgValue", state.SrlgValue}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags represents SRLG flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags string

const (
    // When set, the interface is numbered, whereas if
    // unset indicates that the interface is
    // unnumbered.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags_NUMBERED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags = "NUMBERED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs
// This container defines ISIS SRLG TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv6 SRLG TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg.
    Ipv6Srlg []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg
}

func (ipv6Srlgs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs) GetEntityData() *types.CommonEntityData {
    ipv6Srlgs.EntityData.YFilter = ipv6Srlgs.YFilter
    ipv6Srlgs.EntityData.YangName = "ipv6-srlgs"
    ipv6Srlgs.EntityData.BundleName = "openconfig"
    ipv6Srlgs.EntityData.ParentYangName = "tlv"
    ipv6Srlgs.EntityData.SegmentPath = "ipv6-srlgs"
    ipv6Srlgs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Srlgs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Srlgs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Srlgs.EntityData.Children = make(map[string]types.YChild)
    ipv6Srlgs.EntityData.Children["ipv6-srlg"] = types.YChild{"Ipv6Srlg", nil}
    for i := range ipv6Srlgs.Ipv6Srlg {
        ipv6Srlgs.EntityData.Children[types.GetSegmentPath(&ipv6Srlgs.Ipv6Srlg[i])] = types.YChild{"Ipv6Srlg", &ipv6Srlgs.Ipv6Srlg[i]}
    }
    ipv6Srlgs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Srlgs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg
// Instance of the IPv6 SRLG TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the instance number of the IPv6
    // Shared Risk Link Group (SRLG) TLV. The type is string with range:
    // 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 139.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State
}

func (ipv6Srlg *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg) GetEntityData() *types.CommonEntityData {
    ipv6Srlg.EntityData.YFilter = ipv6Srlg.YFilter
    ipv6Srlg.EntityData.YangName = "ipv6-srlg"
    ipv6Srlg.EntityData.BundleName = "openconfig"
    ipv6Srlg.EntityData.ParentYangName = "ipv6-srlgs"
    ipv6Srlg.EntityData.SegmentPath = "ipv6-srlg" + "[instance-number='" + fmt.Sprintf("%v", ipv6Srlg.InstanceNumber) + "']"
    ipv6Srlg.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Srlg.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Srlg.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Srlg.EntityData.Children = make(map[string]types.YChild)
    ipv6Srlg.EntityData.Children["state"] = types.YChild{"State", &ipv6Srlg.State}
    ipv6Srlg.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Srlg.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", ipv6Srlg.InstanceNumber}
    return &(ipv6Srlg.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State
// State parameters of TLV 139.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The instance identifier is synthesised by the system and may be
    // renumbered for the same SRLG definition in subsequent advertised LSPs if
    // (and only if) the entire list of SRLGs is replaced. The type is interface{}
    // with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // IPv6 SRLG flags. The type is slice of Flags.
    Flags []interface{}

    // IPv6 interface address or Link Local Identifier. The type is string with
    // pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddress interface{}

    // IPv6 neighbor address or Link Remote Identifier. The type is string with
    // pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6NeighborAddress interface{}

    // SRLG values. The type is slice of interface{} with range: 0..4294967295.
    SrlgValue []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", state.InstanceNumber}
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["psn-number"] = types.YLeaf{"PsnNumber", state.PsnNumber}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["ipv6-interface-address"] = types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress}
    state.EntityData.Leafs["ipv6-neighbor-address"] = types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress}
    state.EntityData.Leafs["srlg-value"] = types.YLeaf{"SrlgValue", state.SrlgValue}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags represents IPv6 SRLG flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags string

const (
    // When set, the IPv6 neighbour address is included,
    // whereas if unset, it is omitted
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags_NA NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags = "NA"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi
// This container defines ISIS purge TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State
}

func (purgeOi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi) GetEntityData() *types.CommonEntityData {
    purgeOi.EntityData.YFilter = purgeOi.YFilter
    purgeOi.EntityData.YangName = "purge-oi"
    purgeOi.EntityData.BundleName = "openconfig"
    purgeOi.EntityData.ParentYangName = "tlv"
    purgeOi.EntityData.SegmentPath = "purge-oi"
    purgeOi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    purgeOi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    purgeOi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    purgeOi.EntityData.Children = make(map[string]types.YChild)
    purgeOi.EntityData.Children["state"] = types.YChild{"State", &purgeOi.State}
    purgeOi.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(purgeOi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State
// State parameters of TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of system IDs carried in this TLV. The type is interface{} with
    // range: 0..255.
    SystemIdCount interface{}

    // System ID of the Intermediate System that inserted this TLV. The type is
    // string with pattern: b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SourceSystemId interface{}

    // System ID of the Intermediate System from which the purge was received. The
    // type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    ReceivedSystemId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "purge-oi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["system-id-count"] = types.YLeaf{"SystemIdCount", state.SystemIdCount}
    state.EntityData.Leafs["source-system-id"] = types.YLeaf{"SourceSystemId", state.SourceSystemId}
    state.EntityData.Leafs["received-system-id"] = types.YLeaf{"ReceivedSystemId", state.ReceivedSystemId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities
// This container defines router capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IS Router capabilities. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability.
    RouterCapability []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability
}

func (routerCapabilities *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities) GetEntityData() *types.CommonEntityData {
    routerCapabilities.EntityData.YFilter = routerCapabilities.YFilter
    routerCapabilities.EntityData.YangName = "router-capabilities"
    routerCapabilities.EntityData.BundleName = "openconfig"
    routerCapabilities.EntityData.ParentYangName = "tlv"
    routerCapabilities.EntityData.SegmentPath = "router-capabilities"
    routerCapabilities.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routerCapabilities.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routerCapabilities.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routerCapabilities.EntityData.Children = make(map[string]types.YChild)
    routerCapabilities.EntityData.Children["router-capability"] = types.YChild{"RouterCapability", nil}
    for i := range routerCapabilities.RouterCapability {
        routerCapabilities.EntityData.Children[types.GetSegmentPath(&routerCapabilities.RouterCapability[i])] = types.YChild{"RouterCapability", &routerCapabilities.RouterCapability[i]}
    }
    routerCapabilities.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routerCapabilities.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability
// This list describes IS Router capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the instance number of the router
    // capability TLV. The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 242.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State

    // This container describes router capability TLV sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs
}

func (routerCapability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability) GetEntityData() *types.CommonEntityData {
    routerCapability.EntityData.YFilter = routerCapability.YFilter
    routerCapability.EntityData.YangName = "router-capability"
    routerCapability.EntityData.BundleName = "openconfig"
    routerCapability.EntityData.ParentYangName = "router-capabilities"
    routerCapability.EntityData.SegmentPath = "router-capability" + "[instance-number='" + fmt.Sprintf("%v", routerCapability.InstanceNumber) + "']"
    routerCapability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routerCapability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routerCapability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routerCapability.EntityData.Children = make(map[string]types.YChild)
    routerCapability.EntityData.Children["state"] = types.YChild{"State", &routerCapability.State}
    routerCapability.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &routerCapability.Subtlvs}
    routerCapability.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &routerCapability.UndefinedSubtlvs}
    routerCapability.EntityData.Leafs = make(map[string]types.YLeaf)
    routerCapability.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", routerCapability.InstanceNumber}
    return &(routerCapability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State
// State parameters of TLV 242.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique instance number for the instance of the router capabilities TLV.
    // The instance number should be autogenerated by the producer of the data and
    // may be renumbered if the entire LSP contents are replaced in subsequent
    // advertisements. The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // IPv4 router-id. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    RouterId interface{}

    // Router capability flags. The type is slice of Flags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "router-capability"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["instance-number"] = types.YLeaf{"InstanceNumber", state.InstanceNumber}
    state.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", state.RouterId}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags represents Router capability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags string

const (
    // When the S bit is set(1), the IS - IS Router
    // CAPABILITY TLV MUST be flooded across the entire
    // routing domain. When the S bit is not set(0),
    // the TLV MUST NOT be leaked between levels . This
    // bit MUST NOT be altered during the TLV
    // leaking.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags_FLOOD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags = "FLOOD"

    // When the IS-IS Router CAPABILITY TLV is leaked
    // from level - 2 to level-1, the Down bit MUST be
    // set. Otherwise, this bit MUST be clear. IS - IS
    // Router capability TLVs with the Down bit set
    // MUST NOT be leaked from level - 1 to level-2.
    // This is to prevent TLV looping.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags_DOWN NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags = "DOWN"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs
// This container describes router capability TLV
// sub-TLVs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "router-capability"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified
// TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters of IS Router Capabilities.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State

    // This container defines SR algorithm sub-TLV 19.
    SegmentRoutingAlgorithms NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms

    // This container defines SR Capability sub-TLV 2.
    SegmentRoutingCapability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["segment-routing-algorithms"] = types.YChild{"SegmentRoutingAlgorithms", &subtlv.SegmentRoutingAlgorithms}
    subtlv.EntityData.Children["segment-routing-capability"] = types.YChild{"SegmentRoutingCapability", &subtlv.SegmentRoutingCapability}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State
// State parameters of IS Router Capabilities
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms
// This container defines SR algorithm sub-TLV 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the segment routing algorithsm advertised within the TLV. The type
    // is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm.
    SegmentRoutingAlgorithm []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
}

func (segmentRoutingAlgorithms *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithms.EntityData.YFilter = segmentRoutingAlgorithms.YFilter
    segmentRoutingAlgorithms.EntityData.YangName = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.BundleName = "openconfig"
    segmentRoutingAlgorithms.EntityData.ParentYangName = "subtlv"
    segmentRoutingAlgorithms.EntityData.SegmentPath = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingAlgorithms.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingAlgorithms.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingAlgorithms.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingAlgorithms.EntityData.Children["segment-routing-algorithm"] = types.YChild{"SegmentRoutingAlgorithm", nil}
    for i := range segmentRoutingAlgorithms.SegmentRoutingAlgorithm {
        segmentRoutingAlgorithms.EntityData.Children[types.GetSegmentPath(&segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i])] = types.YChild{"SegmentRoutingAlgorithm", &segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i]}
    }
    segmentRoutingAlgorithms.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRoutingAlgorithms.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
// List of the segment routing algorithsm advertised within the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the SR algorithm that the subTLV
    // describes. The type is Algorithm. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm
    Algorithm interface{}

    // State parameters of sub-TLV 19 - Segment Routing Algorithm.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
}

func (segmentRoutingAlgorithm *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithm.EntityData.YFilter = segmentRoutingAlgorithm.YFilter
    segmentRoutingAlgorithm.EntityData.YangName = "segment-routing-algorithm"
    segmentRoutingAlgorithm.EntityData.BundleName = "openconfig"
    segmentRoutingAlgorithm.EntityData.ParentYangName = "segment-routing-algorithms"
    segmentRoutingAlgorithm.EntityData.SegmentPath = "segment-routing-algorithm" + "[algorithm='" + fmt.Sprintf("%v", segmentRoutingAlgorithm.Algorithm) + "']"
    segmentRoutingAlgorithm.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingAlgorithm.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingAlgorithm.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingAlgorithm.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingAlgorithm.EntityData.Children["state"] = types.YChild{"State", &segmentRoutingAlgorithm.State}
    segmentRoutingAlgorithm.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingAlgorithm.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", segmentRoutingAlgorithm.Algorithm}
    return &(segmentRoutingAlgorithm.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
// State parameters of sub-TLV 19 - Segment
// Routing Algorithm.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Segment Routing algorithm that is described by the TLV. The type is
    // Algorithm.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing-algorithm"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", state.Algorithm}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm represents by the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm string

const (
    // Shortest Path First (SPF) algorithm based
    // on link metric.  This is the well-known
    // shortest path algorithm as computed by
    // the IS-IS Decision process.  Consistent
    // with the deployed practice for link-
    // state protocols, algorithm 0 permits any
    // node to overwrite the SPF
    // path with a different path based on local
    // policy.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm_SPF NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm = "SPF"

    // Strict Shortest Path First (SPF)
    // algorithm based on link metric. The
    // algorithm is identical to algorithm 0 but
    // algorithm 1 requires that all nodes
    // along the path will honor the SPF routing
    // decision. Local policy MUST NOT alter the
    // forwarding decision computed by algorithm
    // 1 at the node claiming to support
    // algorithm 1.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm_STRICT_SPF NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm = "STRICT_SPF"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
// This container defines SR Capability sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS SR Router Capability.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State

    // SRGB Descriptors included within the SR capability sub-TLV.
    SrgbDescriptors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
}

func (segmentRoutingCapability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability) GetEntityData() *types.CommonEntityData {
    segmentRoutingCapability.EntityData.YFilter = segmentRoutingCapability.YFilter
    segmentRoutingCapability.EntityData.YangName = "segment-routing-capability"
    segmentRoutingCapability.EntityData.BundleName = "openconfig"
    segmentRoutingCapability.EntityData.ParentYangName = "subtlv"
    segmentRoutingCapability.EntityData.SegmentPath = "segment-routing-capability"
    segmentRoutingCapability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingCapability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingCapability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingCapability.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingCapability.EntityData.Children["state"] = types.YChild{"State", &segmentRoutingCapability.State}
    segmentRoutingCapability.EntityData.Children["srgb-descriptors"] = types.YChild{"SrgbDescriptors", &segmentRoutingCapability.SrgbDescriptors}
    segmentRoutingCapability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRoutingCapability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State
// State parameters of IS SR Router Capability
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Capability Flags. The type is slice of Flags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing-capability"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags represents Segment Routing Capability Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags string

const (
    // When set, the router is capable of
    // processing SR MPLS encapsulated IPv4
    // packets on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV4_MPLS NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV4_MPLS"

    // When set, the router is capable of
    // processing SR MPLS encapsulated IPv6
    // packets on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV6_MPLS NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV6_MPLS"

    // When set, the router is capable of
    // processing the IPv6 Segment Routing Header
    // on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV6_SR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV6_SR"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
// SRGB Descriptors included within the SR
// capability sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Descriptor entry within the SR capabilty sub-TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor.
    SrgbDescriptor []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
}

func (srgbDescriptors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors) GetEntityData() *types.CommonEntityData {
    srgbDescriptors.EntityData.YFilter = srgbDescriptors.YFilter
    srgbDescriptors.EntityData.YangName = "srgb-descriptors"
    srgbDescriptors.EntityData.BundleName = "openconfig"
    srgbDescriptors.EntityData.ParentYangName = "segment-routing-capability"
    srgbDescriptors.EntityData.SegmentPath = "srgb-descriptors"
    srgbDescriptors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbDescriptors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbDescriptors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbDescriptors.EntityData.Children = make(map[string]types.YChild)
    srgbDescriptors.EntityData.Children["srgb-descriptor"] = types.YChild{"SrgbDescriptor", nil}
    for i := range srgbDescriptors.SrgbDescriptor {
        srgbDescriptors.EntityData.Children[types.GetSegmentPath(&srgbDescriptors.SrgbDescriptor[i])] = types.YChild{"SrgbDescriptor", &srgbDescriptors.SrgbDescriptor[i]}
    }
    srgbDescriptors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(srgbDescriptors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
// Descriptor entry within the SR capabilty
// sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of the SR range.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
}

func (srgbDescriptor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor) GetEntityData() *types.CommonEntityData {
    srgbDescriptor.EntityData.YFilter = srgbDescriptor.YFilter
    srgbDescriptor.EntityData.YangName = "srgb-descriptor"
    srgbDescriptor.EntityData.BundleName = "openconfig"
    srgbDescriptor.EntityData.ParentYangName = "srgb-descriptors"
    srgbDescriptor.EntityData.SegmentPath = "srgb-descriptor"
    srgbDescriptor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbDescriptor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbDescriptor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbDescriptor.EntityData.Children = make(map[string]types.YChild)
    srgbDescriptor.EntityData.Children["state"] = types.YChild{"State", &srgbDescriptor.State}
    srgbDescriptor.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(srgbDescriptor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
// State parameters of the SR range
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SRGB elements. The range value MUST be greater than 0. The type
    // is interface{} with range: 0..4294967295.
    Range_ interface{}

    // The first value of the SRGB when expressed as an MPLS label. The type is
    // one of the following types: int with range: 16..1048575, or enumeration
    // MplsLabel.
    Label interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srgb-descriptor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["range"] = types.YLeaf{"Range_", state.Range_}
    state.EntityData.Leafs["label"] = types.YLeaf{"Label", state.Label}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "router-capability"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability
// This container describes list of ISIS neighbors and
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors
}

func (isReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability) GetEntityData() *types.CommonEntityData {
    isReachability.EntityData.YFilter = isReachability.YFilter
    isReachability.EntityData.YangName = "is-reachability"
    isReachability.EntityData.BundleName = "openconfig"
    isReachability.EntityData.ParentYangName = "tlv"
    isReachability.EntityData.SegmentPath = "is-reachability"
    isReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isReachability.EntityData.Children = make(map[string]types.YChild)
    isReachability.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &isReachability.Neighbors}
    isReachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS reachability neighbor attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors.
    Neighbors []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "is-reachability"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbors"] = types.YChild{"Neighbors", nil}
    for i := range neighbors.Neighbors {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbors[i])] = types.YChild{"Neighbors", &neighbors.Neighbors[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_
// IS reachability neighbor attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the system ID of the neighbor. The
    // type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__State_SystemId
    SystemId interface{}

    // State parameters of IS standard neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric
}

func (neighbors_ *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_) GetEntityData() *types.CommonEntityData {
    neighbors_.EntityData.YFilter = neighbors_.YFilter
    neighbors_.EntityData.YangName = "neighbors"
    neighbors_.EntityData.BundleName = "openconfig"
    neighbors_.EntityData.ParentYangName = "neighbors"
    neighbors_.EntityData.SegmentPath = "neighbors" + "[system-id='" + fmt.Sprintf("%v", neighbors_.SystemId) + "']"
    neighbors_.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors_.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors_.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors_.EntityData.Children = make(map[string]types.YChild)
    neighbors_.EntityData.Children["state"] = types.YChild{"State", &neighbors_.State}
    neighbors_.EntityData.Children["default-metric"] = types.YChild{"DefaultMetric", &neighbors_.DefaultMetric}
    neighbors_.EntityData.Children["delay-metric"] = types.YChild{"DelayMetric", &neighbors_.DelayMetric}
    neighbors_.EntityData.Children["expense-metric"] = types.YChild{"ExpenseMetric", &neighbors_.ExpenseMetric}
    neighbors_.EntityData.Children["error-metric"] = types.YChild{"ErrorMetric", &neighbors_.ErrorMetric}
    neighbors_.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbors_.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbors_.SystemId}
    return &(neighbors_.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__State
// State parameters of IS standard neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-ID of IS neighbor. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbors"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "neighbors"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = make(map[string]types.YChild)
    defaultMetric.EntityData.Children["state"] = types.YChild{"State", &defaultMetric.State}
    defaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", state.DefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "neighbors"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = make(map[string]types.YChild)
    delayMetric.EntityData.Children["state"] = types.YChild{"State", &delayMetric.State}
    delayMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "neighbors"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = make(map[string]types.YChild)
    expenseMetric.EntityData.Children["state"] = types.YChild{"State", &expenseMetric.State}
    expenseMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "neighbors"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = make(map[string]types.YChild)
    errorMetric.EntityData.Children["state"] = types.YChild{"State", &errorMetric.State}
    errorMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors__ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability
// This container defines list of IPv4 internal reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes
}

func (ipv4InternalReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4InternalReachability.EntityData.YFilter = ipv4InternalReachability.YFilter
    ipv4InternalReachability.EntityData.YangName = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.BundleName = "openconfig"
    ipv4InternalReachability.EntityData.ParentYangName = "tlv"
    ipv4InternalReachability.EntityData.SegmentPath = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InternalReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InternalReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InternalReachability.EntityData.Children = make(map[string]types.YChild)
    ipv4InternalReachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &ipv4InternalReachability.Prefixes}
    ipv4InternalReachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InternalReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes and internal reachability attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes.
    Prefixes []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv4-internal-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefixes"] = types.YChild{"Prefixes", nil}
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefixes[i])] = types.YChild{"Prefixes", &prefixes.Prefixes[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_
// IPv4 prefixes and internal reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IPv4 prefix. The type is string
    // with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__State_Prefix
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric
}

func (prefixes_ *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_) GetEntityData() *types.CommonEntityData {
    prefixes_.EntityData.YFilter = prefixes_.YFilter
    prefixes_.EntityData.YangName = "prefixes"
    prefixes_.EntityData.BundleName = "openconfig"
    prefixes_.EntityData.ParentYangName = "prefixes"
    prefixes_.EntityData.SegmentPath = "prefixes" + "[prefix='" + fmt.Sprintf("%v", prefixes_.Prefix) + "']"
    prefixes_.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes_.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes_.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes_.EntityData.Children = make(map[string]types.YChild)
    prefixes_.EntityData.Children["state"] = types.YChild{"State", &prefixes_.State}
    prefixes_.EntityData.Children["default-metric"] = types.YChild{"DefaultMetric", &prefixes_.DefaultMetric}
    prefixes_.EntityData.Children["delay-metric"] = types.YChild{"DelayMetric", &prefixes_.DelayMetric}
    prefixes_.EntityData.Children["expense-metric"] = types.YChild{"ExpenseMetric", &prefixes_.ExpenseMetric}
    prefixes_.EntityData.Children["error-metric"] = types.YChild{"ErrorMetric", &prefixes_.ErrorMetric}
    prefixes_.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixes_.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixes_.Prefix}
    return &(prefixes_.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__State
// State parameters of IPv4 standard prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string with
    // pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "prefixes"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = make(map[string]types.YChild)
    defaultMetric.EntityData.Children["state"] = types.YChild{"State", &defaultMetric.State}
    defaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", state.DefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "prefixes"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = make(map[string]types.YChild)
    delayMetric.EntityData.Children["state"] = types.YChild{"State", &delayMetric.State}
    delayMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "prefixes"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = make(map[string]types.YChild)
    expenseMetric.EntityData.Children["state"] = types.YChild{"State", &expenseMetric.State}
    expenseMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "prefixes"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = make(map[string]types.YChild)
    errorMetric.EntityData.Children["state"] = types.YChild{"State", &errorMetric.State}
    errorMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes__ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability
// This container defines list of IPv4 external reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes
}

func (ipv4ExternalReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4ExternalReachability.EntityData.YFilter = ipv4ExternalReachability.YFilter
    ipv4ExternalReachability.EntityData.YangName = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.BundleName = "openconfig"
    ipv4ExternalReachability.EntityData.ParentYangName = "tlv"
    ipv4ExternalReachability.EntityData.SegmentPath = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4ExternalReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4ExternalReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4ExternalReachability.EntityData.Children = make(map[string]types.YChild)
    ipv4ExternalReachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &ipv4ExternalReachability.Prefixes}
    ipv4ExternalReachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4ExternalReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 external prefixes and reachability attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes.
    Prefixes []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv4-external-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefixes"] = types.YChild{"Prefixes", nil}
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefixes[i])] = types.YChild{"Prefixes", &prefixes.Prefixes[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_
// IPv4 external prefixes and reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IPv4 prefix. The type is string
    // with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__State_Prefix
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric
}

func (prefixes_ *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_) GetEntityData() *types.CommonEntityData {
    prefixes_.EntityData.YFilter = prefixes_.YFilter
    prefixes_.EntityData.YangName = "prefixes"
    prefixes_.EntityData.BundleName = "openconfig"
    prefixes_.EntityData.ParentYangName = "prefixes"
    prefixes_.EntityData.SegmentPath = "prefixes" + "[prefix='" + fmt.Sprintf("%v", prefixes_.Prefix) + "']"
    prefixes_.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes_.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes_.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes_.EntityData.Children = make(map[string]types.YChild)
    prefixes_.EntityData.Children["state"] = types.YChild{"State", &prefixes_.State}
    prefixes_.EntityData.Children["default-metric"] = types.YChild{"DefaultMetric", &prefixes_.DefaultMetric}
    prefixes_.EntityData.Children["delay-metric"] = types.YChild{"DelayMetric", &prefixes_.DelayMetric}
    prefixes_.EntityData.Children["expense-metric"] = types.YChild{"ExpenseMetric", &prefixes_.ExpenseMetric}
    prefixes_.EntityData.Children["error-metric"] = types.YChild{"ErrorMetric", &prefixes_.ErrorMetric}
    prefixes_.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixes_.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixes_.Prefix}
    return &(prefixes_.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__State
// State parameters of IPv4 standard prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string with
    // pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "prefixes"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = make(map[string]types.YChild)
    defaultMetric.EntityData.Children["state"] = types.YChild{"State", &defaultMetric.State}
    defaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", state.DefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "prefixes"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = make(map[string]types.YChild)
    delayMetric.EntityData.Children["state"] = types.YChild{"State", &delayMetric.State}
    delayMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "prefixes"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = make(map[string]types.YChild)
    expenseMetric.EntityData.Children["state"] = types.YChild{"State", &expenseMetric.State}
    expenseMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "prefixes"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = make(map[string]types.YChild)
    errorMetric.EntityData.Children["state"] = types.YChild{"State", &errorMetric.State}
    errorMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes__ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication
// This container defines authentication information of the
// node.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "tlv"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["state"] = types.YChild{"State", &authentication.State}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State
// State parameters of TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type to be used. The type is CryptoType.
    CryptoType interface{}

    // Authentication key to be used. The type is string.
    AuthenticationKey interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["crypto-type"] = types.YLeaf{"CryptoType", state.CryptoType}
    state.EntityData.Leafs["authentication-key"] = types.YLeaf{"AuthenticationKey", state.AuthenticationKey}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType represents Authentication type to be used.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType string

const (
    // HMAC-MD5 Authentication type.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType_HMAC_MD5 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType = "HMAC_MD5"

    // Cleartext Authentication type.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType_CLEARTEXT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType = "CLEARTEXT"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability
// This container defines list of ISIS extended reachability
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors
}

func (extendedIsReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability) GetEntityData() *types.CommonEntityData {
    extendedIsReachability.EntityData.YFilter = extendedIsReachability.YFilter
    extendedIsReachability.EntityData.YangName = "extended-is-reachability"
    extendedIsReachability.EntityData.BundleName = "openconfig"
    extendedIsReachability.EntityData.ParentYangName = "tlv"
    extendedIsReachability.EntityData.SegmentPath = "extended-is-reachability"
    extendedIsReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedIsReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedIsReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedIsReachability.EntityData.Children = make(map[string]types.YChild)
    extendedIsReachability.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &extendedIsReachability.Neighbors}
    extendedIsReachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedIsReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS extended neigbors and reachability attributes. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors.
    Neighbors []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "extended-is-reachability"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbors"] = types.YChild{"Neighbors", nil}
    for i := range neighbors.Neighbors {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbors[i])] = types.YChild{"Neighbors", &neighbors.Neighbors[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_
// This list describes ISIS extended neigbors and
// reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the neighboring system's system ID.
    // The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__State_SystemId
    SystemId interface{}

    // State parameters of extended neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs
}

func (neighbors_ *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_) GetEntityData() *types.CommonEntityData {
    neighbors_.EntityData.YFilter = neighbors_.YFilter
    neighbors_.EntityData.YangName = "neighbors"
    neighbors_.EntityData.BundleName = "openconfig"
    neighbors_.EntityData.ParentYangName = "neighbors"
    neighbors_.EntityData.SegmentPath = "neighbors" + "[system-id='" + fmt.Sprintf("%v", neighbors_.SystemId) + "']"
    neighbors_.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors_.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors_.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors_.EntityData.Children = make(map[string]types.YChild)
    neighbors_.EntityData.Children["state"] = types.YChild{"State", &neighbors_.State}
    neighbors_.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &neighbors_.Subtlvs}
    neighbors_.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &neighbors_.UndefinedSubtlvs}
    neighbors_.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbors_.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbors_.SystemId}
    return &(neighbors_.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__State
// State parameters of extended neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-id of the neighbor. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // Metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbors"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbors"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["admin-group"] = types.YChild{"AdminGroup", &subtlv.AdminGroup}
    subtlv.EntityData.Children["ipv4-interface-address"] = types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress}
    subtlv.EntityData.Children["ipv4-neighbor-address"] = types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress}
    subtlv.EntityData.Children["max-link-bandwidth"] = types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth}
    subtlv.EntityData.Children["max-reservable-link-bandwidth"] = types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth}
    subtlv.EntityData.Children["unreserved-bandwidth"] = types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth}
    subtlv.EntityData.Children["ipv6-interface-address"] = types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress}
    subtlv.EntityData.Children["ipv6-neighbor-address"] = types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress}
    subtlv.EntityData.Children["extended-admin-group"] = types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup}
    subtlv.EntityData.Children["te-default-metric"] = types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric}
    subtlv.EntityData.Children["link-attributes"] = types.YChild{"LinkAttributes", &subtlv.LinkAttributes}
    subtlv.EntityData.Children["link-protection-type"] = types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType}
    subtlv.EntityData.Children["bandwidth-constraints"] = types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints}
    subtlv.EntityData.Children["unconstrained-lsp"] = types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp}
    subtlv.EntityData.Children["adjacency-sids"] = types.YChild{"AdjacencySids", &subtlv.AdjacencySids}
    subtlv.EntityData.Children["lan-adjacency-sids"] = types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids}
    subtlv.EntityData.Children["link-delay"] = types.YChild{"LinkDelay", &subtlv.LinkDelay}
    subtlv.EntityData.Children["min-max-link-delay"] = types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay}
    subtlv.EntityData.Children["link-delay-variation"] = types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation}
    subtlv.EntityData.Children["link-loss"] = types.YChild{"LinkLoss", &subtlv.LinkLoss}
    subtlv.EntityData.Children["residual-bandwidth"] = types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth}
    subtlv.EntityData.Children["available-bandwidth"] = types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth}
    subtlv.EntityData.Children["utilized-bandwidth"] = types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = make(map[string]types.YChild)
    adminGroup.EntityData.Children["state"] = types.YChild{"State", &adminGroup.State}
    adminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["admin-group"] = types.YLeaf{"AdminGroup", state.AdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4InterfaceAddress.State}
    ipv4InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-interface-address"] = types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4NeighborAddress.State}
    ipv4NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-neighbor-address"] = types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxLinkBandwidth.State}
    maxLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-link-bandwidth"] = types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxReservableLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxReservableLinkBandwidth.State}
    maxReservableLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-reservable-link-bandwidth"] = types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = make(map[string]types.YChild)
    unreservedBandwidth.EntityData.Children["setup-priority"] = types.YChild{"SetupPriority", nil}
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children[types.GetSegmentPath(&unreservedBandwidth.SetupPriority[i])] = types.YChild{"SetupPriority", &unreservedBandwidth.SetupPriority[i]}
    }
    unreservedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + "[priority='" + fmt.Sprintf("%v", setupPriority.Priority) + "']"
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = make(map[string]types.YChild)
    setupPriority.EntityData.Children["state"] = types.YChild{"State", &setupPriority.State}
    setupPriority.EntityData.Leafs = make(map[string]types.YLeaf)
    setupPriority.EntityData.Leafs["priority"] = types.YLeaf{"Priority", setupPriority.Priority}
    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["unreserved-bandwidth"] = types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6InterfaceAddress.State}
    ipv6InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-interface-address"] = types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6NeighborAddress.State}
    ipv6NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-neighbor-address"] = types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = make(map[string]types.YChild)
    extendedAdminGroup.EntityData.Children["state"] = types.YChild{"State", &extendedAdminGroup.State}
    extendedAdminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["extended-admin-group"] = types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = make(map[string]types.YChild)
    teDefaultMetric.EntityData.Children["state"] = types.YChild{"State", &teDefaultMetric.State}
    teDefaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["te-default-metric"] = types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = make(map[string]types.YChild)
    linkAttributes.EntityData.Children["state"] = types.YChild{"State", &linkAttributes.State}
    linkAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-protection"] = types.YLeaf{"LocalProtection", state.LocalProtection}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = make(map[string]types.YChild)
    linkProtectionType.EntityData.Children["state"] = types.YChild{"State", &linkProtectionType.State}
    linkProtectionType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["link-protection-type"] = types.YLeaf{"LinkProtectionType", state.LinkProtectionType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraints.EntityData.Children["bandwidth-constraint"] = types.YChild{"BandwidthConstraint", nil}
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children[types.GetSegmentPath(&bandwidthConstraints.BandwidthConstraint[i])] = types.YChild{"BandwidthConstraint", &bandwidthConstraints.BandwidthConstraint[i]}
    }
    bandwidthConstraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + "[model-id='" + fmt.Sprintf("%v", bandwidthConstraint.ModelId) + "']"
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraint.EntityData.Children["state"] = types.YChild{"State", &bandwidthConstraint.State}
    bandwidthConstraint.EntityData.Children["constraints"] = types.YChild{"Constraints", &bandwidthConstraint.Constraints}
    bandwidthConstraint.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidthConstraint.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", bandwidthConstraint.ModelId}
    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", state.ModelId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = make(map[string]types.YChild)
    constraints.EntityData.Children["constraint"] = types.YChild{"Constraint", nil}
    for i := range constraints.Constraint {
        constraints.EntityData.Children[types.GetSegmentPath(&constraints.Constraint[i])] = types.YChild{"Constraint", &constraints.Constraint[i]}
    }
    constraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + "[constraint-id='" + fmt.Sprintf("%v", constraint.ConstraintId) + "']"
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = make(map[string]types.YChild)
    constraint.EntityData.Children["state"] = types.YChild{"State", &constraint.State}
    constraint.EntityData.Leafs = make(map[string]types.YLeaf)
    constraint.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", constraint.ConstraintId}
    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32. Units
    // are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", state.ConstraintId}
    state.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", state.Bandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = make(map[string]types.YChild)
    unconstrainedLsp.EntityData.Children["state"] = types.YChild{"State", &unconstrainedLsp.State}
    unconstrainedLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["unconstrained-lsp"] = types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = make(map[string]types.YChild)
    adjacencySids.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", nil}
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children[types.GetSegmentPath(&adjacencySids.AdjacencySid[i])] = types.YChild{"AdjacencySid", &adjacencySids.AdjacencySid[i]}
    }
    adjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + "[value='" + fmt.Sprintf("%v", adjacencySid.Value) + "']"
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["state"] = types.YChild{"State", &adjacencySid.State}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", adjacencySid.Value}
    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySids.EntityData.Children["lan-adjacency-sid"] = types.YChild{"LanAdjacencySid", nil}
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children[types.GetSegmentPath(&lanAdjacencySids.LanAdjacencySid[i])] = types.YChild{"LanAdjacencySid", &lanAdjacencySids.LanAdjacencySid[i]}
    }
    lanAdjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + "[value='" + fmt.Sprintf("%v", lanAdjacencySid.Value) + "']"
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySid.EntityData.Children["state"] = types.YChild{"State", &lanAdjacencySid.State}
    lanAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    lanAdjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", lanAdjacencySid.Value}
    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    state.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", state.NeighborId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = make(map[string]types.YChild)
    linkDelay.EntityData.Children["state"] = types.YChild{"State", &linkDelay.State}
    linkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = make(map[string]types.YChild)
    minMaxLinkDelay.EntityData.Children["state"] = types.YChild{"State", &minMaxLinkDelay.State}
    minMaxLinkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["min-delay"] = types.YLeaf{"MinDelay", state.MinDelay}
    state.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", state.MaxDelay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = make(map[string]types.YChild)
    linkDelayVariation.EntityData.Children["state"] = types.YChild{"State", &linkDelayVariation.State}
    linkDelayVariation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = make(map[string]types.YChild)
    linkLoss.EntityData.Children["state"] = types.YChild{"State", &linkLoss.State}
    linkLoss.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["link-loss"] = types.YLeaf{"LinkLoss", state.LinkLoss}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = make(map[string]types.YChild)
    residualBandwidth.EntityData.Children["state"] = types.YChild{"State", &residualBandwidth.State}
    residualBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["residual-bandwidth"] = types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = make(map[string]types.YChild)
    availableBandwidth.EntityData.Children["state"] = types.YChild{"State", &availableBandwidth.State}
    availableBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32. Units are bytes per second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = make(map[string]types.YChild)
    utilizedBandwidth.EntityData.Children["state"] = types.YChild{"State", &utilizedBandwidth.State}
    utilizedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length: 32.
    // Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["utilized-bandwidth"] = types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbors"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors__UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability
// This container defines list of IPv4 extended reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes
}

func (extendedIpv4Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability) GetEntityData() *types.CommonEntityData {
    extendedIpv4Reachability.EntityData.YFilter = extendedIpv4Reachability.YFilter
    extendedIpv4Reachability.EntityData.YangName = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.BundleName = "openconfig"
    extendedIpv4Reachability.EntityData.ParentYangName = "tlv"
    extendedIpv4Reachability.EntityData.SegmentPath = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedIpv4Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedIpv4Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedIpv4Reachability.EntityData.Children = make(map[string]types.YChild)
    extendedIpv4Reachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &extendedIpv4Reachability.Prefixes}
    extendedIpv4Reachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedIpv4Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IPv4 extended prefixes and attributes. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix.
    Prefix []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "extended-ipv4-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefix[i])] = types.YChild{"Prefix", &prefixes.Prefix[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix
// This list describes IPv4 extended prefixes and
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IPv4 prefix that the TLV
    // describes the attributes of. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Children["state"] = types.YChild{"State", &prefix.State}
    prefix.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &prefix.Subtlvs}
    prefix.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs}
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefix.Prefix}
    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State
// State parameters of an IPv4 extended prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["s-bit"] = types.YLeaf{"SBit", state.SBit}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["tag"] = types.YChild{"Tag", &subtlv.Tag}
    subtlv.EntityData.Children["tag64"] = types.YChild{"Tag64", &subtlv.Tag64}
    subtlv.EntityData.Children["flags"] = types.YChild{"Flags", &subtlv.Flags}
    subtlv.EntityData.Children["ipv4-source-router-id"] = types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId}
    subtlv.EntityData.Children["ipv6-source-router-id"] = types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId}
    subtlv.EntityData.Children["prefix-sids"] = types.YChild{"PrefixSids", &subtlv.PrefixSids}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = make(map[string]types.YChild)
    tag.EntityData.Children["state"] = types.YChild{"State", &tag.State}
    tag.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag32"] = types.YLeaf{"Tag32", state.Tag32}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = make(map[string]types.YChild)
    tag64.EntityData.Children["state"] = types.YChild{"State", &tag64.State}
    tag64.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag64"] = types.YLeaf{"Tag64", state.Tag64}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = make(map[string]types.YChild)
    flags.EntityData.Children["state"] = types.YChild{"State", &flags.State}
    flags.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv4SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv4SourceRouterId.State}
    ipv4SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv4-source-router-id"] = types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv6SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv6SourceRouterId.State}
    ipv6SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv6-source-router-id"] = types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = make(map[string]types.YChild)
    prefixSids.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", nil}
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children[types.GetSegmentPath(&prefixSids.PrefixSid[i])] = types.YChild{"PrefixSid", &prefixSids.PrefixSid[i]}
    }
    prefixSids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + "[value='" + fmt.Sprintf("%v", prefixSid.Value) + "']"
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Children["state"] = types.YChild{"State", &prefixSid.State}
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["value"] = types.YLeaf{"Value", prefixSid.Value}
    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", state.Algorithm}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability
// This container defines list of IPv6 reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes
}

func (ipv6Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability) GetEntityData() *types.CommonEntityData {
    ipv6Reachability.EntityData.YFilter = ipv6Reachability.YFilter
    ipv6Reachability.EntityData.YangName = "ipv6-reachability"
    ipv6Reachability.EntityData.BundleName = "openconfig"
    ipv6Reachability.EntityData.ParentYangName = "tlv"
    ipv6Reachability.EntityData.SegmentPath = "ipv6-reachability"
    ipv6Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Reachability.EntityData.Children = make(map[string]types.YChild)
    ipv6Reachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &ipv6Reachability.Prefixes}
    ipv6Reachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines IPv6 extended prefix attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes.
    Prefixes []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv6-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefixes"] = types.YChild{"Prefixes", nil}
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefixes[i])] = types.YChild{"Prefixes", &prefixes.Prefixes[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_
// This list defines IPv6 extended prefix attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IPv6 prefix that the TLV
    // corresponds to. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__State_Prefix
    Prefix interface{}

    // State parameters of IPv6 prefix attributes.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs
}

func (prefixes_ *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_) GetEntityData() *types.CommonEntityData {
    prefixes_.EntityData.YFilter = prefixes_.YFilter
    prefixes_.EntityData.YangName = "prefixes"
    prefixes_.EntityData.BundleName = "openconfig"
    prefixes_.EntityData.ParentYangName = "prefixes"
    prefixes_.EntityData.SegmentPath = "prefixes" + "[prefix='" + fmt.Sprintf("%v", prefixes_.Prefix) + "']"
    prefixes_.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes_.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes_.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes_.EntityData.Children = make(map[string]types.YChild)
    prefixes_.EntityData.Children["state"] = types.YChild{"State", &prefixes_.State}
    prefixes_.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &prefixes_.Subtlvs}
    prefixes_.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &prefixes_.UndefinedSubtlvs}
    prefixes_.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixes_.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixes_.Prefix}
    return &(prefixes_.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__State
// State parameters of IPv6 prefix attributes
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["s-bit"] = types.YLeaf{"SBit", state.SBit}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefixes"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["tag"] = types.YChild{"Tag", &subtlv.Tag}
    subtlv.EntityData.Children["tag64"] = types.YChild{"Tag64", &subtlv.Tag64}
    subtlv.EntityData.Children["flags"] = types.YChild{"Flags", &subtlv.Flags}
    subtlv.EntityData.Children["ipv4-source-router-id"] = types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId}
    subtlv.EntityData.Children["ipv6-source-router-id"] = types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId}
    subtlv.EntityData.Children["prefix-sids"] = types.YChild{"PrefixSids", &subtlv.PrefixSids}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = make(map[string]types.YChild)
    tag.EntityData.Children["state"] = types.YChild{"State", &tag.State}
    tag.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag32"] = types.YLeaf{"Tag32", state.Tag32}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = make(map[string]types.YChild)
    tag64.EntityData.Children["state"] = types.YChild{"State", &tag64.State}
    tag64.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag64"] = types.YLeaf{"Tag64", state.Tag64}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = make(map[string]types.YChild)
    flags.EntityData.Children["state"] = types.YChild{"State", &flags.State}
    flags.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv4SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv4SourceRouterId.State}
    ipv4SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv4-source-router-id"] = types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv6SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv6SourceRouterId.State}
    ipv6SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv6-source-router-id"] = types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = make(map[string]types.YChild)
    prefixSids.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", nil}
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children[types.GetSegmentPath(&prefixSids.PrefixSid[i])] = types.YChild{"PrefixSid", &prefixSids.PrefixSid[i]}
    }
    prefixSids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + "[value='" + fmt.Sprintf("%v", prefixSid.Value) + "']"
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Children["state"] = types.YChild{"State", &prefixSid.State}
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["value"] = types.YLeaf{"Value", prefixSid.Value}
    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", state.Algorithm}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefixes"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes__UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology
// This container defines the topology supported.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS topologies.
    Topologies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies
}

func (multiTopology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "openconfig"
    multiTopology.EntityData.ParentYangName = "tlv"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    multiTopology.EntityData.Children = make(map[string]types.YChild)
    multiTopology.EntityData.Children["topologies"] = types.YChild{"Topologies", &multiTopology.Topologies}
    multiTopology.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiTopology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies
// This container describes IS topologies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes a topology. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology.
    Topology []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology
}

func (topologies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "openconfig"
    topologies.EntityData.ParentYangName = "multi-topology"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    topologies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    topologies.EntityData.Children = make(map[string]types.YChild)
    topologies.EntityData.Children["topology"] = types.YChild{"Topology", nil}
    for i := range topologies.Topology {
        topologies.EntityData.Children[types.GetSegmentPath(&topologies.Topology[i])] = types.YChild{"Topology", &topologies.Topology[i]}
    }
    topologies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topologies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology
// This list describes a topology.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the multi-topology ID being described
    // by the list entry. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_MtId
    MtId interface{}

    // State parameters of IS multi-topology TLV 229.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State
}

func (topology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "openconfig"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + "[mt-id='" + fmt.Sprintf("%v", topology.MtId) + "']"
    topology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    topology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    topology.EntityData.Children = make(map[string]types.YChild)
    topology.EntityData.Children["state"] = types.YChild{"State", &topology.State}
    topology.EntityData.Leafs = make(map[string]types.YLeaf)
    topology.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", topology.MtId}
    return &(topology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State
// State parameters of IS multi-topology TLV 229.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}

    // Attributes of the LSP for the associated topology. The type is Attributes.
    Attributes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", state.MtId}
    state.EntityData.Leafs["attributes"] = types.YLeaf{"Attributes", state.Attributes}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes represents topology.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes string

const (
    // When set, node is overloaded, still part of
    // the topology but cannot be used for transit.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes_OVERLOAD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes = "OVERLOAD"

    // When set, node is attached to another area
    // using the referred metric and can be used as
    // default gateway.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes_ATTACHED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes = "ATTACHED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute
// This container defines list of ISIS topology neighbors
// for extended ISIS LSP (multiple system IDs). 
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors
}

func (isisNeighborAttribute *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute) GetEntityData() *types.CommonEntityData {
    isisNeighborAttribute.EntityData.YFilter = isisNeighborAttribute.YFilter
    isisNeighborAttribute.EntityData.YangName = "isis-neighbor-attribute"
    isisNeighborAttribute.EntityData.BundleName = "openconfig"
    isisNeighborAttribute.EntityData.ParentYangName = "tlv"
    isisNeighborAttribute.EntityData.SegmentPath = "isis-neighbor-attribute"
    isisNeighborAttribute.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isisNeighborAttribute.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isisNeighborAttribute.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isisNeighborAttribute.EntityData.Children = make(map[string]types.YChild)
    isisNeighborAttribute.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &isisNeighborAttribute.Neighbors}
    isisNeighborAttribute.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isisNeighborAttribute.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines ISIS extended reachability neighbor attributes. The type
    // is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor.
    Neighbor []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "isis-neighbor-attribute"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor
// This list defines ISIS extended reachability neighbor
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the neighboring IS. The type is
    // string with pattern: b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of extended neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[system-id='" + fmt.Sprintf("%v", neighbor.SystemId) + "']"
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Children["state"] = types.YChild{"State", &neighbor.State}
    neighbor.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &neighbor.Subtlvs}
    neighbor.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs}
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbor.SystemId}
    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State
// State parameters of extended neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-id of the neighbor. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // Metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["admin-group"] = types.YChild{"AdminGroup", &subtlv.AdminGroup}
    subtlv.EntityData.Children["ipv4-interface-address"] = types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress}
    subtlv.EntityData.Children["ipv4-neighbor-address"] = types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress}
    subtlv.EntityData.Children["max-link-bandwidth"] = types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth}
    subtlv.EntityData.Children["max-reservable-link-bandwidth"] = types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth}
    subtlv.EntityData.Children["unreserved-bandwidth"] = types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth}
    subtlv.EntityData.Children["ipv6-interface-address"] = types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress}
    subtlv.EntityData.Children["ipv6-neighbor-address"] = types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress}
    subtlv.EntityData.Children["extended-admin-group"] = types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup}
    subtlv.EntityData.Children["te-default-metric"] = types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric}
    subtlv.EntityData.Children["link-attributes"] = types.YChild{"LinkAttributes", &subtlv.LinkAttributes}
    subtlv.EntityData.Children["link-protection-type"] = types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType}
    subtlv.EntityData.Children["bandwidth-constraints"] = types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints}
    subtlv.EntityData.Children["unconstrained-lsp"] = types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp}
    subtlv.EntityData.Children["adjacency-sids"] = types.YChild{"AdjacencySids", &subtlv.AdjacencySids}
    subtlv.EntityData.Children["lan-adjacency-sids"] = types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids}
    subtlv.EntityData.Children["link-delay"] = types.YChild{"LinkDelay", &subtlv.LinkDelay}
    subtlv.EntityData.Children["min-max-link-delay"] = types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay}
    subtlv.EntityData.Children["link-delay-variation"] = types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation}
    subtlv.EntityData.Children["link-loss"] = types.YChild{"LinkLoss", &subtlv.LinkLoss}
    subtlv.EntityData.Children["residual-bandwidth"] = types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth}
    subtlv.EntityData.Children["available-bandwidth"] = types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth}
    subtlv.EntityData.Children["utilized-bandwidth"] = types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = make(map[string]types.YChild)
    adminGroup.EntityData.Children["state"] = types.YChild{"State", &adminGroup.State}
    adminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["admin-group"] = types.YLeaf{"AdminGroup", state.AdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4InterfaceAddress.State}
    ipv4InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-interface-address"] = types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4NeighborAddress.State}
    ipv4NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-neighbor-address"] = types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxLinkBandwidth.State}
    maxLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-link-bandwidth"] = types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxReservableLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxReservableLinkBandwidth.State}
    maxReservableLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-reservable-link-bandwidth"] = types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = make(map[string]types.YChild)
    unreservedBandwidth.EntityData.Children["setup-priority"] = types.YChild{"SetupPriority", nil}
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children[types.GetSegmentPath(&unreservedBandwidth.SetupPriority[i])] = types.YChild{"SetupPriority", &unreservedBandwidth.SetupPriority[i]}
    }
    unreservedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + "[priority='" + fmt.Sprintf("%v", setupPriority.Priority) + "']"
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = make(map[string]types.YChild)
    setupPriority.EntityData.Children["state"] = types.YChild{"State", &setupPriority.State}
    setupPriority.EntityData.Leafs = make(map[string]types.YLeaf)
    setupPriority.EntityData.Leafs["priority"] = types.YLeaf{"Priority", setupPriority.Priority}
    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["unreserved-bandwidth"] = types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6InterfaceAddress.State}
    ipv6InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-interface-address"] = types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6NeighborAddress.State}
    ipv6NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-neighbor-address"] = types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = make(map[string]types.YChild)
    extendedAdminGroup.EntityData.Children["state"] = types.YChild{"State", &extendedAdminGroup.State}
    extendedAdminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["extended-admin-group"] = types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = make(map[string]types.YChild)
    teDefaultMetric.EntityData.Children["state"] = types.YChild{"State", &teDefaultMetric.State}
    teDefaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["te-default-metric"] = types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = make(map[string]types.YChild)
    linkAttributes.EntityData.Children["state"] = types.YChild{"State", &linkAttributes.State}
    linkAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-protection"] = types.YLeaf{"LocalProtection", state.LocalProtection}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = make(map[string]types.YChild)
    linkProtectionType.EntityData.Children["state"] = types.YChild{"State", &linkProtectionType.State}
    linkProtectionType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["link-protection-type"] = types.YLeaf{"LinkProtectionType", state.LinkProtectionType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraints.EntityData.Children["bandwidth-constraint"] = types.YChild{"BandwidthConstraint", nil}
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children[types.GetSegmentPath(&bandwidthConstraints.BandwidthConstraint[i])] = types.YChild{"BandwidthConstraint", &bandwidthConstraints.BandwidthConstraint[i]}
    }
    bandwidthConstraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + "[model-id='" + fmt.Sprintf("%v", bandwidthConstraint.ModelId) + "']"
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraint.EntityData.Children["state"] = types.YChild{"State", &bandwidthConstraint.State}
    bandwidthConstraint.EntityData.Children["constraints"] = types.YChild{"Constraints", &bandwidthConstraint.Constraints}
    bandwidthConstraint.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidthConstraint.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", bandwidthConstraint.ModelId}
    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", state.ModelId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = make(map[string]types.YChild)
    constraints.EntityData.Children["constraint"] = types.YChild{"Constraint", nil}
    for i := range constraints.Constraint {
        constraints.EntityData.Children[types.GetSegmentPath(&constraints.Constraint[i])] = types.YChild{"Constraint", &constraints.Constraint[i]}
    }
    constraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + "[constraint-id='" + fmt.Sprintf("%v", constraint.ConstraintId) + "']"
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = make(map[string]types.YChild)
    constraint.EntityData.Children["state"] = types.YChild{"State", &constraint.State}
    constraint.EntityData.Leafs = make(map[string]types.YLeaf)
    constraint.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", constraint.ConstraintId}
    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32. Units
    // are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", state.ConstraintId}
    state.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", state.Bandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = make(map[string]types.YChild)
    unconstrainedLsp.EntityData.Children["state"] = types.YChild{"State", &unconstrainedLsp.State}
    unconstrainedLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["unconstrained-lsp"] = types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = make(map[string]types.YChild)
    adjacencySids.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", nil}
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children[types.GetSegmentPath(&adjacencySids.AdjacencySid[i])] = types.YChild{"AdjacencySid", &adjacencySids.AdjacencySid[i]}
    }
    adjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + "[value='" + fmt.Sprintf("%v", adjacencySid.Value) + "']"
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["state"] = types.YChild{"State", &adjacencySid.State}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", adjacencySid.Value}
    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySids.EntityData.Children["lan-adjacency-sid"] = types.YChild{"LanAdjacencySid", nil}
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children[types.GetSegmentPath(&lanAdjacencySids.LanAdjacencySid[i])] = types.YChild{"LanAdjacencySid", &lanAdjacencySids.LanAdjacencySid[i]}
    }
    lanAdjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + "[value='" + fmt.Sprintf("%v", lanAdjacencySid.Value) + "']"
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySid.EntityData.Children["state"] = types.YChild{"State", &lanAdjacencySid.State}
    lanAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    lanAdjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", lanAdjacencySid.Value}
    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    state.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", state.NeighborId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = make(map[string]types.YChild)
    linkDelay.EntityData.Children["state"] = types.YChild{"State", &linkDelay.State}
    linkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = make(map[string]types.YChild)
    minMaxLinkDelay.EntityData.Children["state"] = types.YChild{"State", &minMaxLinkDelay.State}
    minMaxLinkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["min-delay"] = types.YLeaf{"MinDelay", state.MinDelay}
    state.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", state.MaxDelay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = make(map[string]types.YChild)
    linkDelayVariation.EntityData.Children["state"] = types.YChild{"State", &linkDelayVariation.State}
    linkDelayVariation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = make(map[string]types.YChild)
    linkLoss.EntityData.Children["state"] = types.YChild{"State", &linkLoss.State}
    linkLoss.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["link-loss"] = types.YLeaf{"LinkLoss", state.LinkLoss}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = make(map[string]types.YChild)
    residualBandwidth.EntityData.Children["state"] = types.YChild{"State", &residualBandwidth.State}
    residualBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["residual-bandwidth"] = types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = make(map[string]types.YChild)
    availableBandwidth.EntityData.Children["state"] = types.YChild{"State", &availableBandwidth.State}
    availableBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32. Units are bytes per second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = make(map[string]types.YChild)
    utilizedBandwidth.EntityData.Children["state"] = types.YChild{"State", &utilizedBandwidth.State}
    utilizedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length: 32.
    // Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["utilized-bandwidth"] = types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId
// This container defines the IS-Alias TLV which allows
// extension-capable ISs to recognize the Originating System
// of an Extended LSP set. It identifies the Normal system-
// id of the Originating System.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of alias ID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State
}

func (isAliasId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId) GetEntityData() *types.CommonEntityData {
    isAliasId.EntityData.YFilter = isAliasId.YFilter
    isAliasId.EntityData.YangName = "is-alias-id"
    isAliasId.EntityData.BundleName = "openconfig"
    isAliasId.EntityData.ParentYangName = "tlv"
    isAliasId.EntityData.SegmentPath = "is-alias-id"
    isAliasId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isAliasId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isAliasId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isAliasId.EntityData.Children = make(map[string]types.YChild)
    isAliasId.EntityData.Children["state"] = types.YChild{"State", &isAliasId.State}
    isAliasId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isAliasId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State
// State parameters of alias ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of alias ID(s). The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    AliasId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "is-alias-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["alias-id"] = types.YLeaf{"AliasId", state.AliasId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn
// This container defines list of ISIS multi-topology
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MT-IS neigbor attributes.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors
}

func (mtIsn *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn) GetEntityData() *types.CommonEntityData {
    mtIsn.EntityData.YFilter = mtIsn.YFilter
    mtIsn.EntityData.YangName = "mt-isn"
    mtIsn.EntityData.BundleName = "openconfig"
    mtIsn.EntityData.ParentYangName = "tlv"
    mtIsn.EntityData.SegmentPath = "mt-isn"
    mtIsn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIsn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIsn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIsn.EntityData.Children = make(map[string]types.YChild)
    mtIsn.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &mtIsn.Neighbors}
    mtIsn.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mtIsn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors
// MT-IS neigbor attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor.
    Neighbor []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "mt-isn"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key.        Reference to the topology that the neighbor
    // is within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the System ID of the neighbor. The
    // type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of MT neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[mt-id='" + fmt.Sprintf("%v", neighbor.MtId) + "']" + "[system-id='" + fmt.Sprintf("%v", neighbor.SystemId) + "']"
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Children["state"] = types.YChild{"State", &neighbor.State}
    neighbor.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &neighbor.Subtlvs}
    neighbor.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs}
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", neighbor.MtId}
    neighbor.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbor.SystemId}
    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State
// State parameters of MT neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of a topology being announced. The type is interface{} with
    // range: 0..4095.
    MtId interface{}

    // System-id of the IS neighbor. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", state.MtId}
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["admin-group"] = types.YChild{"AdminGroup", &subtlv.AdminGroup}
    subtlv.EntityData.Children["ipv4-interface-address"] = types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress}
    subtlv.EntityData.Children["ipv4-neighbor-address"] = types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress}
    subtlv.EntityData.Children["max-link-bandwidth"] = types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth}
    subtlv.EntityData.Children["max-reservable-link-bandwidth"] = types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth}
    subtlv.EntityData.Children["unreserved-bandwidth"] = types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth}
    subtlv.EntityData.Children["ipv6-interface-address"] = types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress}
    subtlv.EntityData.Children["ipv6-neighbor-address"] = types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress}
    subtlv.EntityData.Children["extended-admin-group"] = types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup}
    subtlv.EntityData.Children["te-default-metric"] = types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric}
    subtlv.EntityData.Children["link-attributes"] = types.YChild{"LinkAttributes", &subtlv.LinkAttributes}
    subtlv.EntityData.Children["link-protection-type"] = types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType}
    subtlv.EntityData.Children["bandwidth-constraints"] = types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints}
    subtlv.EntityData.Children["unconstrained-lsp"] = types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp}
    subtlv.EntityData.Children["adjacency-sids"] = types.YChild{"AdjacencySids", &subtlv.AdjacencySids}
    subtlv.EntityData.Children["lan-adjacency-sids"] = types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids}
    subtlv.EntityData.Children["link-delay"] = types.YChild{"LinkDelay", &subtlv.LinkDelay}
    subtlv.EntityData.Children["min-max-link-delay"] = types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay}
    subtlv.EntityData.Children["link-delay-variation"] = types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation}
    subtlv.EntityData.Children["link-loss"] = types.YChild{"LinkLoss", &subtlv.LinkLoss}
    subtlv.EntityData.Children["residual-bandwidth"] = types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth}
    subtlv.EntityData.Children["available-bandwidth"] = types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth}
    subtlv.EntityData.Children["utilized-bandwidth"] = types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = make(map[string]types.YChild)
    adminGroup.EntityData.Children["state"] = types.YChild{"State", &adminGroup.State}
    adminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["admin-group"] = types.YLeaf{"AdminGroup", state.AdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4InterfaceAddress.State}
    ipv4InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-interface-address"] = types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4NeighborAddress.State}
    ipv4NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-neighbor-address"] = types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxLinkBandwidth.State}
    maxLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-link-bandwidth"] = types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxReservableLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxReservableLinkBandwidth.State}
    maxReservableLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-reservable-link-bandwidth"] = types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = make(map[string]types.YChild)
    unreservedBandwidth.EntityData.Children["setup-priority"] = types.YChild{"SetupPriority", nil}
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children[types.GetSegmentPath(&unreservedBandwidth.SetupPriority[i])] = types.YChild{"SetupPriority", &unreservedBandwidth.SetupPriority[i]}
    }
    unreservedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + "[priority='" + fmt.Sprintf("%v", setupPriority.Priority) + "']"
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = make(map[string]types.YChild)
    setupPriority.EntityData.Children["state"] = types.YChild{"State", &setupPriority.State}
    setupPriority.EntityData.Leafs = make(map[string]types.YLeaf)
    setupPriority.EntityData.Leafs["priority"] = types.YLeaf{"Priority", setupPriority.Priority}
    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["unreserved-bandwidth"] = types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6InterfaceAddress.State}
    ipv6InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-interface-address"] = types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6NeighborAddress.State}
    ipv6NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-neighbor-address"] = types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = make(map[string]types.YChild)
    extendedAdminGroup.EntityData.Children["state"] = types.YChild{"State", &extendedAdminGroup.State}
    extendedAdminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["extended-admin-group"] = types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = make(map[string]types.YChild)
    teDefaultMetric.EntityData.Children["state"] = types.YChild{"State", &teDefaultMetric.State}
    teDefaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["te-default-metric"] = types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = make(map[string]types.YChild)
    linkAttributes.EntityData.Children["state"] = types.YChild{"State", &linkAttributes.State}
    linkAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-protection"] = types.YLeaf{"LocalProtection", state.LocalProtection}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = make(map[string]types.YChild)
    linkProtectionType.EntityData.Children["state"] = types.YChild{"State", &linkProtectionType.State}
    linkProtectionType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["link-protection-type"] = types.YLeaf{"LinkProtectionType", state.LinkProtectionType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraints.EntityData.Children["bandwidth-constraint"] = types.YChild{"BandwidthConstraint", nil}
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children[types.GetSegmentPath(&bandwidthConstraints.BandwidthConstraint[i])] = types.YChild{"BandwidthConstraint", &bandwidthConstraints.BandwidthConstraint[i]}
    }
    bandwidthConstraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + "[model-id='" + fmt.Sprintf("%v", bandwidthConstraint.ModelId) + "']"
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraint.EntityData.Children["state"] = types.YChild{"State", &bandwidthConstraint.State}
    bandwidthConstraint.EntityData.Children["constraints"] = types.YChild{"Constraints", &bandwidthConstraint.Constraints}
    bandwidthConstraint.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidthConstraint.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", bandwidthConstraint.ModelId}
    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", state.ModelId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = make(map[string]types.YChild)
    constraints.EntityData.Children["constraint"] = types.YChild{"Constraint", nil}
    for i := range constraints.Constraint {
        constraints.EntityData.Children[types.GetSegmentPath(&constraints.Constraint[i])] = types.YChild{"Constraint", &constraints.Constraint[i]}
    }
    constraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + "[constraint-id='" + fmt.Sprintf("%v", constraint.ConstraintId) + "']"
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = make(map[string]types.YChild)
    constraint.EntityData.Children["state"] = types.YChild{"State", &constraint.State}
    constraint.EntityData.Leafs = make(map[string]types.YLeaf)
    constraint.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", constraint.ConstraintId}
    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32. Units
    // are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", state.ConstraintId}
    state.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", state.Bandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = make(map[string]types.YChild)
    unconstrainedLsp.EntityData.Children["state"] = types.YChild{"State", &unconstrainedLsp.State}
    unconstrainedLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["unconstrained-lsp"] = types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = make(map[string]types.YChild)
    adjacencySids.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", nil}
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children[types.GetSegmentPath(&adjacencySids.AdjacencySid[i])] = types.YChild{"AdjacencySid", &adjacencySids.AdjacencySid[i]}
    }
    adjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + "[value='" + fmt.Sprintf("%v", adjacencySid.Value) + "']"
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["state"] = types.YChild{"State", &adjacencySid.State}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", adjacencySid.Value}
    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySids.EntityData.Children["lan-adjacency-sid"] = types.YChild{"LanAdjacencySid", nil}
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children[types.GetSegmentPath(&lanAdjacencySids.LanAdjacencySid[i])] = types.YChild{"LanAdjacencySid", &lanAdjacencySids.LanAdjacencySid[i]}
    }
    lanAdjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + "[value='" + fmt.Sprintf("%v", lanAdjacencySid.Value) + "']"
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySid.EntityData.Children["state"] = types.YChild{"State", &lanAdjacencySid.State}
    lanAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    lanAdjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", lanAdjacencySid.Value}
    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    state.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", state.NeighborId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = make(map[string]types.YChild)
    linkDelay.EntityData.Children["state"] = types.YChild{"State", &linkDelay.State}
    linkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = make(map[string]types.YChild)
    minMaxLinkDelay.EntityData.Children["state"] = types.YChild{"State", &minMaxLinkDelay.State}
    minMaxLinkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["min-delay"] = types.YLeaf{"MinDelay", state.MinDelay}
    state.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", state.MaxDelay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = make(map[string]types.YChild)
    linkDelayVariation.EntityData.Children["state"] = types.YChild{"State", &linkDelayVariation.State}
    linkDelayVariation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = make(map[string]types.YChild)
    linkLoss.EntityData.Children["state"] = types.YChild{"State", &linkLoss.State}
    linkLoss.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["link-loss"] = types.YLeaf{"LinkLoss", state.LinkLoss}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = make(map[string]types.YChild)
    residualBandwidth.EntityData.Children["state"] = types.YChild{"State", &residualBandwidth.State}
    residualBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["residual-bandwidth"] = types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = make(map[string]types.YChild)
    availableBandwidth.EntityData.Children["state"] = types.YChild{"State", &availableBandwidth.State}
    availableBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32. Units are bytes per second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = make(map[string]types.YChild)
    utilizedBandwidth.EntityData.Children["state"] = types.YChild{"State", &utilizedBandwidth.State}
    utilizedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length: 32.
    // Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["utilized-bandwidth"] = types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute
// This container defines list of ISIS multi-topology
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors
}

func (mtIsisNeighborAttribute *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute) GetEntityData() *types.CommonEntityData {
    mtIsisNeighborAttribute.EntityData.YFilter = mtIsisNeighborAttribute.YFilter
    mtIsisNeighborAttribute.EntityData.YangName = "mt-isis-neighbor-attribute"
    mtIsisNeighborAttribute.EntityData.BundleName = "openconfig"
    mtIsisNeighborAttribute.EntityData.ParentYangName = "tlv"
    mtIsisNeighborAttribute.EntityData.SegmentPath = "mt-isis-neighbor-attribute"
    mtIsisNeighborAttribute.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIsisNeighborAttribute.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIsisNeighborAttribute.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIsisNeighborAttribute.EntityData.Children = make(map[string]types.YChild)
    mtIsisNeighborAttribute.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &mtIsisNeighborAttribute.Neighbors}
    mtIsisNeighborAttribute.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mtIsisNeighborAttribute.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of multi-topology neighbors. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor.
    Neighbor []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "mt-isis-neighbor-attribute"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor
// List of multi-topology neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the topology that the neighbor is
    // within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the system ID of the neighbor. The
    // type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of MT neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[mt-id='" + fmt.Sprintf("%v", neighbor.MtId) + "']" + "[system-id='" + fmt.Sprintf("%v", neighbor.SystemId) + "']"
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Children["state"] = types.YChild{"State", &neighbor.State}
    neighbor.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &neighbor.Subtlvs}
    neighbor.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs}
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", neighbor.MtId}
    neighbor.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbor.SystemId}
    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State
// State parameters of MT neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of a topology being announced. The type is interface{} with
    // range: 0..4095.
    MtId interface{}

    // System-id of the IS neighbor. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", state.MtId}
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["admin-group"] = types.YChild{"AdminGroup", &subtlv.AdminGroup}
    subtlv.EntityData.Children["ipv4-interface-address"] = types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress}
    subtlv.EntityData.Children["ipv4-neighbor-address"] = types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress}
    subtlv.EntityData.Children["max-link-bandwidth"] = types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth}
    subtlv.EntityData.Children["max-reservable-link-bandwidth"] = types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth}
    subtlv.EntityData.Children["unreserved-bandwidth"] = types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth}
    subtlv.EntityData.Children["ipv6-interface-address"] = types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress}
    subtlv.EntityData.Children["ipv6-neighbor-address"] = types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress}
    subtlv.EntityData.Children["extended-admin-group"] = types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup}
    subtlv.EntityData.Children["te-default-metric"] = types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric}
    subtlv.EntityData.Children["link-attributes"] = types.YChild{"LinkAttributes", &subtlv.LinkAttributes}
    subtlv.EntityData.Children["link-protection-type"] = types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType}
    subtlv.EntityData.Children["bandwidth-constraints"] = types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints}
    subtlv.EntityData.Children["unconstrained-lsp"] = types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp}
    subtlv.EntityData.Children["adjacency-sids"] = types.YChild{"AdjacencySids", &subtlv.AdjacencySids}
    subtlv.EntityData.Children["lan-adjacency-sids"] = types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids}
    subtlv.EntityData.Children["link-delay"] = types.YChild{"LinkDelay", &subtlv.LinkDelay}
    subtlv.EntityData.Children["min-max-link-delay"] = types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay}
    subtlv.EntityData.Children["link-delay-variation"] = types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation}
    subtlv.EntityData.Children["link-loss"] = types.YChild{"LinkLoss", &subtlv.LinkLoss}
    subtlv.EntityData.Children["residual-bandwidth"] = types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth}
    subtlv.EntityData.Children["available-bandwidth"] = types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth}
    subtlv.EntityData.Children["utilized-bandwidth"] = types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = make(map[string]types.YChild)
    adminGroup.EntityData.Children["state"] = types.YChild{"State", &adminGroup.State}
    adminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["admin-group"] = types.YLeaf{"AdminGroup", state.AdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4InterfaceAddress.State}
    ipv4InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-interface-address"] = types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv4NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv4NeighborAddress.State}
    ipv4NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv4-neighbor-address"] = types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxLinkBandwidth.State}
    maxLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-link-bandwidth"] = types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = make(map[string]types.YChild)
    maxReservableLinkBandwidth.EntityData.Children["state"] = types.YChild{"State", &maxReservableLinkBandwidth.State}
    maxReservableLinkBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["max-reservable-link-bandwidth"] = types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = make(map[string]types.YChild)
    unreservedBandwidth.EntityData.Children["setup-priority"] = types.YChild{"SetupPriority", nil}
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children[types.GetSegmentPath(&unreservedBandwidth.SetupPriority[i])] = types.YChild{"SetupPriority", &unreservedBandwidth.SetupPriority[i]}
    }
    unreservedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + "[priority='" + fmt.Sprintf("%v", setupPriority.Priority) + "']"
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = make(map[string]types.YChild)
    setupPriority.EntityData.Children["state"] = types.YChild{"State", &setupPriority.State}
    setupPriority.EntityData.Leafs = make(map[string]types.YLeaf)
    setupPriority.EntityData.Leafs["priority"] = types.YLeaf{"Priority", setupPriority.Priority}
    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["unreserved-bandwidth"] = types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6InterfaceAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6InterfaceAddress.State}
    ipv6InterfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-interface-address"] = types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = make(map[string]types.YChild)
    ipv6NeighborAddress.EntityData.Children["state"] = types.YChild{"State", &ipv6NeighborAddress.State}
    ipv6NeighborAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["ipv6-neighbor-address"] = types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = make(map[string]types.YChild)
    extendedAdminGroup.EntityData.Children["state"] = types.YChild{"State", &extendedAdminGroup.State}
    extendedAdminGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["extended-admin-group"] = types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = make(map[string]types.YChild)
    teDefaultMetric.EntityData.Children["state"] = types.YChild{"State", &teDefaultMetric.State}
    teDefaultMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["te-default-metric"] = types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = make(map[string]types.YChild)
    linkAttributes.EntityData.Children["state"] = types.YChild{"State", &linkAttributes.State}
    linkAttributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["local-protection"] = types.YLeaf{"LocalProtection", state.LocalProtection}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = make(map[string]types.YChild)
    linkProtectionType.EntityData.Children["state"] = types.YChild{"State", &linkProtectionType.State}
    linkProtectionType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["link-protection-type"] = types.YLeaf{"LinkProtectionType", state.LinkProtectionType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraints.EntityData.Children["bandwidth-constraint"] = types.YChild{"BandwidthConstraint", nil}
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children[types.GetSegmentPath(&bandwidthConstraints.BandwidthConstraint[i])] = types.YChild{"BandwidthConstraint", &bandwidthConstraints.BandwidthConstraint[i]}
    }
    bandwidthConstraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + "[model-id='" + fmt.Sprintf("%v", bandwidthConstraint.ModelId) + "']"
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = make(map[string]types.YChild)
    bandwidthConstraint.EntityData.Children["state"] = types.YChild{"State", &bandwidthConstraint.State}
    bandwidthConstraint.EntityData.Children["constraints"] = types.YChild{"Constraints", &bandwidthConstraint.Constraints}
    bandwidthConstraint.EntityData.Leafs = make(map[string]types.YLeaf)
    bandwidthConstraint.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", bandwidthConstraint.ModelId}
    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["model-id"] = types.YLeaf{"ModelId", state.ModelId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = make(map[string]types.YChild)
    constraints.EntityData.Children["constraint"] = types.YChild{"Constraint", nil}
    for i := range constraints.Constraint {
        constraints.EntityData.Children[types.GetSegmentPath(&constraints.Constraint[i])] = types.YChild{"Constraint", &constraints.Constraint[i]}
    }
    constraints.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + "[constraint-id='" + fmt.Sprintf("%v", constraint.ConstraintId) + "']"
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = make(map[string]types.YChild)
    constraint.EntityData.Children["state"] = types.YChild{"State", &constraint.State}
    constraint.EntityData.Leafs = make(map[string]types.YLeaf)
    constraint.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", constraint.ConstraintId}
    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32. Units
    // are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["constraint-id"] = types.YLeaf{"ConstraintId", state.ConstraintId}
    state.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", state.Bandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = make(map[string]types.YChild)
    unconstrainedLsp.EntityData.Children["state"] = types.YChild{"State", &unconstrainedLsp.State}
    unconstrainedLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["unconstrained-lsp"] = types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = make(map[string]types.YChild)
    adjacencySids.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", nil}
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children[types.GetSegmentPath(&adjacencySids.AdjacencySid[i])] = types.YChild{"AdjacencySid", &adjacencySids.AdjacencySid[i]}
    }
    adjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + "[value='" + fmt.Sprintf("%v", adjacencySid.Value) + "']"
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["state"] = types.YChild{"State", &adjacencySid.State}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", adjacencySid.Value}
    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySids.EntityData.Children["lan-adjacency-sid"] = types.YChild{"LanAdjacencySid", nil}
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children[types.GetSegmentPath(&lanAdjacencySids.LanAdjacencySid[i])] = types.YChild{"LanAdjacencySid", &lanAdjacencySids.LanAdjacencySid[i]}
    }
    lanAdjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + "[value='" + fmt.Sprintf("%v", lanAdjacencySid.Value) + "']"
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    lanAdjacencySid.EntityData.Children["state"] = types.YChild{"State", &lanAdjacencySid.State}
    lanAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    lanAdjacencySid.EntityData.Leafs["value"] = types.YLeaf{"Value", lanAdjacencySid.Value}
    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["weight"] = types.YLeaf{"Weight", state.Weight}
    state.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", state.NeighborId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = make(map[string]types.YChild)
    linkDelay.EntityData.Children["state"] = types.YChild{"State", &linkDelay.State}
    linkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = make(map[string]types.YChild)
    minMaxLinkDelay.EntityData.Children["state"] = types.YChild{"State", &minMaxLinkDelay.State}
    minMaxLinkDelay.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["min-delay"] = types.YLeaf{"MinDelay", state.MinDelay}
    state.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", state.MaxDelay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = make(map[string]types.YChild)
    linkDelayVariation.EntityData.Children["state"] = types.YChild{"State", &linkDelayVariation.State}
    linkDelayVariation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["delay"] = types.YLeaf{"Delay", state.Delay}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = make(map[string]types.YChild)
    linkLoss.EntityData.Children["state"] = types.YChild{"State", &linkLoss.State}
    linkLoss.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["a-bit"] = types.YLeaf{"ABit", state.ABit}
    state.EntityData.Leafs["link-loss"] = types.YLeaf{"LinkLoss", state.LinkLoss}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = make(map[string]types.YChild)
    residualBandwidth.EntityData.Children["state"] = types.YChild{"State", &residualBandwidth.State}
    residualBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["residual-bandwidth"] = types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = make(map[string]types.YChild)
    availableBandwidth.EntityData.Children["state"] = types.YChild{"State", &availableBandwidth.State}
    availableBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32. Units are bytes per second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = make(map[string]types.YChild)
    utilizedBandwidth.EntityData.Children["state"] = types.YChild{"State", &utilizedBandwidth.State}
    utilizedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length: 32.
    // Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["utilized-bandwidth"] = types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability
// This container defines list of IPv4 reachability
// Information in multi-topology environment.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes
}

func (mtIpv4Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv4Reachability.EntityData.YFilter = mtIpv4Reachability.YFilter
    mtIpv4Reachability.EntityData.YangName = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.BundleName = "openconfig"
    mtIpv4Reachability.EntityData.ParentYangName = "tlv"
    mtIpv4Reachability.EntityData.SegmentPath = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIpv4Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIpv4Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIpv4Reachability.EntityData.Children = make(map[string]types.YChild)
    mtIpv4Reachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &mtIpv4Reachability.Prefixes}
    mtIpv4Reachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mtIpv4Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes that are contained within MT reachability TLV. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix.
    Prefix []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "mt-ipv4-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefix[i])] = types.YChild{"Prefix", &prefixes.Prefix[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix
// IPv4 prefixes that are contained within MT
// reachability TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the topology ID of the topology that
    // the prefix is within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the prefix to which reachability is
    // being advertised. The type is string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + "[mt-id='" + fmt.Sprintf("%v", prefix.MtId) + "']" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Children["state"] = types.YChild{"State", &prefix.State}
    prefix.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &prefix.Subtlvs}
    prefix.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs}
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", prefix.MtId}
    prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefix.Prefix}
    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State
// State parameters of an IPv4 extended prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$'.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["s-bit"] = types.YLeaf{"SBit", state.SBit}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", state.MtId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["tag"] = types.YChild{"Tag", &subtlv.Tag}
    subtlv.EntityData.Children["tag64"] = types.YChild{"Tag64", &subtlv.Tag64}
    subtlv.EntityData.Children["flags"] = types.YChild{"Flags", &subtlv.Flags}
    subtlv.EntityData.Children["ipv4-source-router-id"] = types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId}
    subtlv.EntityData.Children["ipv6-source-router-id"] = types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId}
    subtlv.EntityData.Children["prefix-sids"] = types.YChild{"PrefixSids", &subtlv.PrefixSids}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = make(map[string]types.YChild)
    tag.EntityData.Children["state"] = types.YChild{"State", &tag.State}
    tag.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag32"] = types.YLeaf{"Tag32", state.Tag32}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = make(map[string]types.YChild)
    tag64.EntityData.Children["state"] = types.YChild{"State", &tag64.State}
    tag64.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag64"] = types.YLeaf{"Tag64", state.Tag64}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = make(map[string]types.YChild)
    flags.EntityData.Children["state"] = types.YChild{"State", &flags.State}
    flags.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv4SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv4SourceRouterId.State}
    ipv4SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv4-source-router-id"] = types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv6SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv6SourceRouterId.State}
    ipv6SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv6-source-router-id"] = types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = make(map[string]types.YChild)
    prefixSids.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", nil}
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children[types.GetSegmentPath(&prefixSids.PrefixSid[i])] = types.YChild{"PrefixSid", &prefixSids.PrefixSid[i]}
    }
    prefixSids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + "[value='" + fmt.Sprintf("%v", prefixSid.Value) + "']"
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Children["state"] = types.YChild{"State", &prefixSid.State}
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["value"] = types.YLeaf{"Value", prefixSid.Value}
    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", state.Algorithm}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability
// This container defines list of IPv6 reachability
// information in multi - topology environment.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes
}

func (mtIpv6Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv6Reachability.EntityData.YFilter = mtIpv6Reachability.YFilter
    mtIpv6Reachability.EntityData.YangName = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.BundleName = "openconfig"
    mtIpv6Reachability.EntityData.ParentYangName = "tlv"
    mtIpv6Reachability.EntityData.SegmentPath = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIpv6Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIpv6Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIpv6Reachability.EntityData.Children = make(map[string]types.YChild)
    mtIpv6Reachability.EntityData.Children["prefixes"] = types.YChild{"Prefixes", &mtIpv6Reachability.Prefixes}
    mtIpv6Reachability.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mtIpv6Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of IPv6 prefixes contained within MT reachability TLV. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix.
    Prefix []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "mt-ipv6-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = make(map[string]types.YChild)
    prefixes.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children[types.GetSegmentPath(&prefixes.Prefix[i])] = types.YChild{"Prefix", &prefixes.Prefix[i]}
    }
    prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix
// List of IPv6 prefixes contained within MT
// reachability TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IPv6 prefix described by the TLV.
    // The type is string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$'.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // This attribute is a key. Reference to the multi-topology ID. The type is
    // string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State_MtId
    MtId interface{}

    // State parameters relating an IPv6 prefix attribute.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']" + "[mt-id='" + fmt.Sprintf("%v", prefix.MtId) + "']"
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Children["state"] = types.YChild{"State", &prefix.State}
    prefix.EntityData.Children["subtlvs"] = types.YChild{"Subtlvs", &prefix.Subtlvs}
    prefix.EntityData.Children["undefined-subtlvs"] = types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs}
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefix.Prefix}
    prefix.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", prefix.MtId}
    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State
// State parameters relating an IPv6 prefix attribute
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The external bit. Set when the prefix was distributed into IS-IS from
    // another routing protocol. The type is bool.
    XBit interface{}

    // The sub-tlv present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv6 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$'.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["up-down"] = types.YLeaf{"UpDown", state.UpDown}
    state.EntityData.Leafs["x-bit"] = types.YLeaf{"XBit", state.XBit}
    state.EntityData.Leafs["s-bit"] = types.YLeaf{"SBit", state.SBit}
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["mt-id"] = types.YLeaf{"MtId", state.MtId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = make(map[string]types.YChild)
    subtlvs.EntityData.Children["subtlv"] = types.YChild{"Subtlv", nil}
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children[types.GetSegmentPath(&subtlvs.Subtlv[i])] = types.YChild{"Subtlv", &subtlvs.Subtlv[i]}
    }
    subtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + "[type='" + fmt.Sprintf("%v", subtlv.Type_) + "']"
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = make(map[string]types.YChild)
    subtlv.EntityData.Children["state"] = types.YChild{"State", &subtlv.State}
    subtlv.EntityData.Children["tag"] = types.YChild{"Tag", &subtlv.Tag}
    subtlv.EntityData.Children["tag64"] = types.YChild{"Tag64", &subtlv.Tag64}
    subtlv.EntityData.Children["flags"] = types.YChild{"Flags", &subtlv.Flags}
    subtlv.EntityData.Children["ipv4-source-router-id"] = types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId}
    subtlv.EntityData.Children["ipv6-source-router-id"] = types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId}
    subtlv.EntityData.Children["prefix-sids"] = types.YChild{"PrefixSids", &subtlv.PrefixSids}
    subtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    subtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", subtlv.Type_}
    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = make(map[string]types.YChild)
    tag.EntityData.Children["state"] = types.YChild{"State", &tag.State}
    tag.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag32"] = types.YLeaf{"Tag32", state.Tag32}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = make(map[string]types.YChild)
    tag64.EntityData.Children["state"] = types.YChild{"State", &tag64.State}
    tag64.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["tag64"] = types.YLeaf{"Tag64", state.Tag64}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = make(map[string]types.YChild)
    flags.EntityData.Children["state"] = types.YChild{"State", &flags.State}
    flags.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv4SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv4SourceRouterId.State}
    ipv4SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv4-source-router-id"] = types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = make(map[string]types.YChild)
    ipv6SourceRouterId.EntityData.Children["state"] = types.YChild{"State", &ipv6SourceRouterId.State}
    ipv6SourceRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYADMINGROUPISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYTEDEFAULTMETRICISREACHABILITYLINKATTRIBUTESISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYADJSIDISREACHABILITYADJLANSIDISREACHABILITYLINKDELAYISREACHABILITYMINMAXLINKDELAYISREACHABILITYLINKDELAYVARIATIONISREACHABILITYLINKLOSSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYUTILIZEDBANDWIDTHIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYTAG64IPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYIPV4ROUTERIDIPREACHABILITYIPV6ROUTERIDROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHM.
    Type_ interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // b'^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$'.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["ipv6-source-router-id"] = types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = make(map[string]types.YChild)
    prefixSids.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", nil}
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children[types.GetSegmentPath(&prefixSids.PrefixSid[i])] = types.YChild{"PrefixSid", &prefixSids.PrefixSid[i]}
    }
    prefixSids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + "[value='" + fmt.Sprintf("%v", prefixSid.Value) + "']"
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Children["state"] = types.YChild{"State", &prefixSid.State}
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["value"] = types.YLeaf{"Value", prefixSid.Value}
    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    state.EntityData.Leafs["flags"] = types.YLeaf{"Flags", state.Flags}
    state.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", state.Algorithm}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlvs.EntityData.Children["undefined-subtlv"] = types.YChild{"UndefinedSubtlv", nil}
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children[types.GetSegmentPath(&undefinedSubtlvs.UndefinedSubtlv[i])] = types.YChild{"UndefinedSubtlv", &undefinedSubtlvs.UndefinedSubtlv[i]}
    }
    undefinedSubtlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + "[type='" + fmt.Sprintf("%v", undefinedSubtlv.Type_) + "']"
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = make(map[string]types.YChild)
    undefinedSubtlv.EntityData.Children["state"] = types.YChild{"State", &undefinedSubtlv.State}
    undefinedSubtlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedSubtlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedSubtlv.Type_}
    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs
// Surrounding container for a list of unknown TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs that are not defined within the model, or are not recognised
    // by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv.
    UndefinedTlv []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv
}

func (undefinedTlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs) GetEntityData() *types.CommonEntityData {
    undefinedTlvs.EntityData.YFilter = undefinedTlvs.YFilter
    undefinedTlvs.EntityData.YangName = "undefined-tlvs"
    undefinedTlvs.EntityData.BundleName = "openconfig"
    undefinedTlvs.EntityData.ParentYangName = "lsp"
    undefinedTlvs.EntityData.SegmentPath = "undefined-tlvs"
    undefinedTlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedTlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedTlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedTlvs.EntityData.Children = make(map[string]types.YChild)
    undefinedTlvs.EntityData.Children["undefined-tlv"] = types.YChild{"UndefinedTlv", nil}
    for i := range undefinedTlvs.UndefinedTlv {
        undefinedTlvs.EntityData.Children[types.GetSegmentPath(&undefinedTlvs.UndefinedTlv[i])] = types.YChild{"UndefinedTlv", &undefinedTlvs.UndefinedTlv[i]}
    }
    undefinedTlvs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(undefinedTlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv
// List of TLVs that are not defined within the model, or are
// not recognised by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the undefined TLV's type. The type is
    // string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State_Type_
    Type_ interface{}

    // State parameters of the undefined TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State
}

func (undefinedTlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv) GetEntityData() *types.CommonEntityData {
    undefinedTlv.EntityData.YFilter = undefinedTlv.YFilter
    undefinedTlv.EntityData.YangName = "undefined-tlv"
    undefinedTlv.EntityData.BundleName = "openconfig"
    undefinedTlv.EntityData.ParentYangName = "undefined-tlvs"
    undefinedTlv.EntityData.SegmentPath = "undefined-tlv" + "[type='" + fmt.Sprintf("%v", undefinedTlv.Type_) + "']"
    undefinedTlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedTlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedTlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedTlv.EntityData.Children = make(map[string]types.YChild)
    undefinedTlv.EntityData.Children["state"] = types.YChild{"State", &undefinedTlv.State}
    undefinedTlv.EntityData.Leafs = make(map[string]types.YLeaf)
    undefinedTlv.EntityData.Leafs["type"] = types.YLeaf{"Type_", undefinedTlv.Type_}
    return &(undefinedTlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State
// State parameters of the undefined TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type_ interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-tlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["type"] = types.YLeaf{"Type_", state.Type_}
    state.EntityData.Leafs["length"] = types.YLeaf{"Length", state.Length}
    state.EntityData.Leafs["value"] = types.YLeaf{"Value", state.Value}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering
// This container defines ISIS TE.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS TE configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config

    // This container defines ISIS TE state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
}

func (trafficEngineering *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering) GetEntityData() *types.CommonEntityData {
    trafficEngineering.EntityData.YFilter = trafficEngineering.YFilter
    trafficEngineering.EntityData.YangName = "traffic-engineering"
    trafficEngineering.EntityData.BundleName = "openconfig"
    trafficEngineering.EntityData.ParentYangName = "level"
    trafficEngineering.EntityData.SegmentPath = "traffic-engineering"
    trafficEngineering.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    trafficEngineering.EntityData.NamespaceTable = openconfig.GetNamespaces()
    trafficEngineering.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    trafficEngineering.EntityData.Children = make(map[string]types.YChild)
    trafficEngineering.EntityData.Children["config"] = types.YChild{"Config", &trafficEngineering.Config}
    trafficEngineering.EntityData.Children["state"] = types.YChild{"State", &trafficEngineering.State}
    trafficEngineering.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(trafficEngineering.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config
// This container defines ISIS TE configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // IPv4 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4RouterId interface{}

    // IPv6 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6RouterId interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "traffic-engineering"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["ipv4-router-id"] = types.YLeaf{"Ipv4RouterId", config.Ipv4RouterId}
    config.EntityData.Leafs["ipv6-router-id"] = types.YLeaf{"Ipv6RouterId", config.Ipv6RouterId}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
// This container defines ISIS TE state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // IPv4 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4RouterId interface{}

    // IPv6 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6RouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "traffic-engineering"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["ipv4-router-id"] = types.YLeaf{"Ipv4RouterId", state.Ipv4RouterId}
    state.EntityData.Leafs["ipv6-router-id"] = types.YLeaf{"Ipv6RouterId", state.Ipv6RouterId}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference
// This container defines Administrative Distance (or preference)
// assigned to ISIS routes (level1 internal, level2 internal, level1
// external, level2 external).
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines route preference configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config

    // This container defines ISIS route preference state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
}

func (routePreference *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference) GetEntityData() *types.CommonEntityData {
    routePreference.EntityData.YFilter = routePreference.YFilter
    routePreference.EntityData.YangName = "route-preference"
    routePreference.EntityData.BundleName = "openconfig"
    routePreference.EntityData.ParentYangName = "level"
    routePreference.EntityData.SegmentPath = "route-preference"
    routePreference.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routePreference.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routePreference.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routePreference.EntityData.Children = make(map[string]types.YChild)
    routePreference.EntityData.Children["config"] = types.YChild{"Config", &routePreference.Config}
    routePreference.EntityData.Children["state"] = types.YChild{"State", &routePreference.State}
    routePreference.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routePreference.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config
// This container defines route preference configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative Distance(preference) for external ISIS routes. The type is
    // interface{} with range: 1..255.
    ExternalRoutePreference interface{}

    // Administrative Distance(preference) for internal ISIS routes. The type is
    // interface{} with range: 1..255.
    InternalRoutePreference interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-preference"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["external-route-preference"] = types.YLeaf{"ExternalRoutePreference", config.ExternalRoutePreference}
    config.EntityData.Leafs["internal-route-preference"] = types.YLeaf{"InternalRoutePreference", config.InternalRoutePreference}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
// This container defines ISIS route preference state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative Distance(preference) for external ISIS routes. The type is
    // interface{} with range: 1..255.
    ExternalRoutePreference interface{}

    // Administrative Distance(preference) for internal ISIS routes. The type is
    // interface{} with range: 1..255.
    InternalRoutePreference interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-preference"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["external-route-preference"] = types.YLeaf{"ExternalRoutePreference", state.ExternalRoutePreference}
    state.EntityData.Leafs["internal-route-preference"] = types.YLeaf{"InternalRoutePreference", state.InternalRoutePreference}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "level"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["config"] = types.YChild{"Config", &authentication.Config}
    authentication.EntityData.Children["state"] = types.YChild{"State", &authentication.State}
    authentication.EntityData.Children["key"] = types.YChild{"Key", &authentication.Key}
    authentication.EntityData.Children["keychain"] = types.YChild{"Keychain", &authentication.Keychain}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable for IS-IS CSNPs. The type is bool. The default value is
    // false.
    CsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS PSNPs. The type is bool. The
    // default value is false.
    PsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS LSPs. The type is bool. The
    // default value is false.
    LspAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["csnp-authentication"] = types.YLeaf{"CsnpAuthentication", config.CsnpAuthentication}
    config.EntityData.Leafs["psnp-authentication"] = types.YLeaf{"PsnpAuthentication", config.PsnpAuthentication}
    config.EntityData.Leafs["lsp-authentication"] = types.YLeaf{"LspAuthentication", config.LspAuthentication}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable for IS-IS CSNPs. The type is bool. The default value is
    // false.
    CsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS PSNPs. The type is bool. The
    // default value is false.
    PsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS LSPs. The type is bool. The
    // default value is false.
    LspAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["csnp-authentication"] = types.YLeaf{"CsnpAuthentication", state.CsnpAuthentication}
    state.EntityData.Leafs["psnp-authentication"] = types.YLeaf{"PsnpAuthentication", state.PsnpAuthentication}
    state.EntityData.Leafs["lsp-authentication"] = types.YLeaf{"LspAuthentication", state.LspAuthentication}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = make(map[string]types.YChild)
    key.EntityData.Children["config"] = types.YChild{"Config", &key.Config}
    key.EntityData.Children["state"] = types.YChild{"State", &key.State}
    key.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", config.AuthPassword}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", state.AuthPassword}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = make(map[string]types.YChild)
    keychain.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces
// This container defines global ISIS interface configuration and
// state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list contains ISIS interfaces. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_.
    Interface_ []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface
}

func (interfaces *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "openconfig"
    interfaces.EntityData.ParentYangName = "isis"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaces.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaces.EntityData.Children = make(map[string]types.YChild)
    interfaces.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range interfaces.Interface_ {
        interfaces.EntityData.Children[types.GetSegmentPath(&interfaces.Interface_[i])] = types.YChild{"Interface_", &interfaces.Interface_[i]}
    }
    interfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaces.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface
// This list contains ISIS interfaces.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to interface-id. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config_InterfaceId
    InterfaceId interface{}

    // This container defines ISIS interface configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config

    // This container defines state information for ISIS interfaces.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State

    // This container defines state information for ISIS circuit counters.
    CircuitCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters

    // This container defines ISIS authentication.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi

    // This container defines ISIS level specific configuration and state
    // information.
    Levels NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels

    // This container describes ISIS interface timers configuration.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers

    // This container defines BFD.
    Bfd NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + "[interface-id='" + fmt.Sprintf("%v", self.InterfaceId) + "']"
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Children["config"] = types.YChild{"Config", &self.Config}
    self.EntityData.Children["state"] = types.YChild{"State", &self.State}
    self.EntityData.Children["circuit-counters"] = types.YChild{"CircuitCounters", &self.CircuitCounters}
    self.EntityData.Children["authentication"] = types.YChild{"Authentication", &self.Authentication}
    self.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", &self.AfiSafi}
    self.EntityData.Children["levels"] = types.YChild{"Levels", &self.Levels}
    self.EntityData.Children["timers"] = types.YChild{"Timers", &self.Timers}
    self.EntityData.Children["bfd"] = types.YChild{"Bfd", &self.Bfd}
    self.EntityData.Children["interface-ref"] = types.YChild{"InterfaceRef", &self.InterfaceRef}
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["interface-id"] = types.YLeaf{"InterfaceId", self.InterfaceId}
    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config
// This container defines ISIS interface configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Interface for which ISIS configuration is to be applied. The type is
    // string.
    InterfaceId interface{}

    // When set to true, the referenced interface is a passive interface such that
    // it is not eligible to establish adjacencies with other systems, but is
    // advertised into the IS-IS topology. The type is bool. The default value is
    // false.
    Passive interface{}

    // This leaf controls padding type for IS-IS Hello PDUs. The type is
    // HelloPaddingType.
    HelloPadding interface{}

    // ISIS circuit type (p2p, broadcast). The type is CircuitType.
    CircuitType interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    config.EntityData.Leafs["interface-id"] = types.YLeaf{"InterfaceId", config.InterfaceId}
    config.EntityData.Leafs["passive"] = types.YLeaf{"Passive", config.Passive}
    config.EntityData.Leafs["hello-padding"] = types.YLeaf{"HelloPadding", config.HelloPadding}
    config.EntityData.Leafs["circuit-type"] = types.YLeaf{"CircuitType", config.CircuitType}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State
// This container defines state information for ISIS interfaces.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Interface for which ISIS configuration is to be applied. The type is
    // string.
    InterfaceId interface{}

    // When set to true, the referenced interface is a passive interface such that
    // it is not eligible to establish adjacencies with other systems, but is
    // advertised into the IS-IS topology. The type is bool. The default value is
    // false.
    Passive interface{}

    // This leaf controls padding type for IS-IS Hello PDUs. The type is
    // HelloPaddingType.
    HelloPadding interface{}

    // ISIS circuit type (p2p, broadcast). The type is CircuitType.
    CircuitType interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    state.EntityData.Leafs["interface-id"] = types.YLeaf{"InterfaceId", state.InterfaceId}
    state.EntityData.Leafs["passive"] = types.YLeaf{"Passive", state.Passive}
    state.EntityData.Leafs["hello-padding"] = types.YLeaf{"HelloPadding", state.HelloPadding}
    state.EntityData.Leafs["circuit-type"] = types.YLeaf{"CircuitType", state.CircuitType}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters
// This container defines state information for ISIS circuit counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of counters for IS circuit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State
}

func (circuitCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters) GetEntityData() *types.CommonEntityData {
    circuitCounters.EntityData.YFilter = circuitCounters.YFilter
    circuitCounters.EntityData.YangName = "circuit-counters"
    circuitCounters.EntityData.BundleName = "openconfig"
    circuitCounters.EntityData.ParentYangName = "interface"
    circuitCounters.EntityData.SegmentPath = "circuit-counters"
    circuitCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    circuitCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    circuitCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    circuitCounters.EntityData.Children = make(map[string]types.YChild)
    circuitCounters.EntityData.Children["state"] = types.YChild{"State", &circuitCounters.State}
    circuitCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(circuitCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State
// The container defines a list of counters for IS circuit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of times an adjacency state change has occurred on this circuit. MIB
    // Entry: CircAdjChanges. The type is interface{} with range: 0..4294967295.
    AdjChanges interface{}

    // Number of times initialization of this circuit has failed. This counts
    // events such as PPP NCP failures. MIB Entry: CircInitFails. The type is
    // interface{} with range: 0..4294967295.
    InitFails interface{}

    // Number of times an adjacency has been rejected on this circuit. MIB Entry:
    // CircRejAdjs. The type is interface{} with range: 0..4294967295.
    RejectedAdj interface{}

    // Number of times an IS-IS control PDU with an ID field length different from
    // that for this system has been received. MIB Entry:
    // CircIDFieldLenMismatches. The type is interface{} with range:
    // 0..4294967295.
    IdFieldLenMismatches interface{}

    // Number of times an IS-IS control PDU with a max area address field
    // different from that for this system has been received. MIB Entry:
    // CircMaxAreaAddrMismatches. The type is interface{} with range:
    // 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // Number of times an IS-IS control PDU with an auth type field different from
    // that for this system has been received. MIB Entry: CircAuthTypeFails. The
    // type is interface{} with range: 0..4294967295.
    AuthTypeFails interface{}

    // Number of times an IS-IS control PDU with the correct auth type has failed
    // to pass authentication validation. MIB Entry: CircAuthFails. The type is
    // interface{} with range: 0..4294967295.
    AuthFails interface{}

    // Number of times the Designated IS has changed on this circuit at this
    // level. If the circuit is point to point, this count is zero. MIB Entry:
    // CircLANDesISChanges. The type is interface{} with range: 0..4294967295.
    LanDisChanges interface{}

    // Number of adjacencies on this circuit. MIB Entry: CircNumAdj. The type is
    // interface{} with range: 0..4294967295.
    AdjNumber interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "circuit-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["adj-changes"] = types.YLeaf{"AdjChanges", state.AdjChanges}
    state.EntityData.Leafs["init-fails"] = types.YLeaf{"InitFails", state.InitFails}
    state.EntityData.Leafs["rejected-adj"] = types.YLeaf{"RejectedAdj", state.RejectedAdj}
    state.EntityData.Leafs["id-field-len-mismatches"] = types.YLeaf{"IdFieldLenMismatches", state.IdFieldLenMismatches}
    state.EntityData.Leafs["max-area-address-mismatches"] = types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches}
    state.EntityData.Leafs["auth-type-fails"] = types.YLeaf{"AuthTypeFails", state.AuthTypeFails}
    state.EntityData.Leafs["auth-fails"] = types.YLeaf{"AuthFails", state.AuthFails}
    state.EntityData.Leafs["lan-dis-changes"] = types.YLeaf{"LanDisChanges", state.LanDisChanges}
    state.EntityData.Leafs["adj-number"] = types.YLeaf{"AdjNumber", state.AdjNumber}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "interface"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["config"] = types.YChild{"Config", &authentication.Config}
    authentication.EntityData.Children["state"] = types.YChild{"State", &authentication.State}
    authentication.EntityData.Children["key"] = types.YChild{"Key", &authentication.Key}
    authentication.EntityData.Children["keychain"] = types.YChild{"Keychain", &authentication.Keychain}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["hello-authentication"] = types.YLeaf{"HelloAuthentication", config.HelloAuthentication}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["hello-authentication"] = types.YLeaf{"HelloAuthentication", state.HelloAuthentication}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = make(map[string]types.YChild)
    key.EntityData.Children["config"] = types.YChild{"Config", &key.Config}
    key.EntityData.Children["state"] = types.YChild{"State", &key.State}
    key.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", config.AuthPassword}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", state.AuthPassword}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = make(map[string]types.YChild)
    keychain.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af.
    Af []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "interface"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["af"] = types.YChild{"Af", nil}
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children[types.GetSegmentPath(&afiSafi.Af[i])] = types.YChild{"Af", &afiSafi.Af[i]}
    }
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters. Single topology
    // is the default setting.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + "[afi-name='" + fmt.Sprintf("%v", af.AfiName) + "']" + "[safi-name='" + fmt.Sprintf("%v", af.SafiName) + "']"
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Children["config"] = types.YChild{"Config", &af.Config}
    af.EntityData.Children["state"] = types.YChild{"State", &af.State}
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", af.AfiName}
    af.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", af.SafiName}
    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters. Single
// topology is the default setting.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", config.AfiName}
    config.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", config.SafiName}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", state.AfiName}
    state.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", state.SafiName}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels
// This container defines ISIS level specific configuration and
// state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level on an IS-IS enabled interface. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level.
    Level []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level
}

func (levels *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "openconfig"
    levels.EntityData.ParentYangName = "interface"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    levels.EntityData.NamespaceTable = openconfig.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    levels.EntityData.Children = make(map[string]types.YChild)
    levels.EntityData.Children["level"] = types.YChild{"Level", nil}
    for i := range levels.Level {
        levels.EntityData.Children[types.GetSegmentPath(&levels.Level[i])] = types.YChild{"Level", &levels.Level[i]}
    }
    levels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(levels.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level
// Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to ISIS level-number. The type is string
    // with range: 1..2. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config_LevelNumber
    LevelNumber interface{}

    // This container defines interface ISIS level configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config

    // This container defines interface ISIS level state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State

    // This container defines ISIS interface packet counters.
    PacketCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters

    // This container defines ISIS adjacencies.
    Adjacencies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies

    // This container defines ISIS timers.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi

    // This container defines ISIS authentication.
    HelloAuthentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication
}

func (level *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "openconfig"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + "[level-number='" + fmt.Sprintf("%v", level.LevelNumber) + "']"
    level.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level.EntityData.Children = make(map[string]types.YChild)
    level.EntityData.Children["config"] = types.YChild{"Config", &level.Config}
    level.EntityData.Children["state"] = types.YChild{"State", &level.State}
    level.EntityData.Children["packet-counters"] = types.YChild{"PacketCounters", &level.PacketCounters}
    level.EntityData.Children["adjacencies"] = types.YChild{"Adjacencies", &level.Adjacencies}
    level.EntityData.Children["timers"] = types.YChild{"Timers", &level.Timers}
    level.EntityData.Children["afi-safi"] = types.YChild{"AfiSafi", &level.AfiSafi}
    level.EntityData.Children["hello-authentication"] = types.YChild{"HelloAuthentication", &level.HelloAuthentication}
    level.EntityData.Leafs = make(map[string]types.YLeaf)
    level.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", level.LevelNumber}
    return &(level.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config
// This container defines interface ISIS level configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number(level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS passive interface admin enable/disable function. The type is bool. The
    // default value is false.
    Passive interface{}

    // ISIS neighbor priority(LAN hello PDU only). The type is interface{} with
    // range: 0..127.
    Priority interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", config.LevelNumber}
    config.EntityData.Leafs["passive"] = types.YLeaf{"Passive", config.Passive}
    config.EntityData.Leafs["priority"] = types.YLeaf{"Priority", config.Priority}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State
// This container defines interface ISIS level state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number(level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS passive interface admin enable/disable function. The type is bool. The
    // default value is false.
    Passive interface{}

    // ISIS neighbor priority(LAN hello PDU only). The type is interface{} with
    // range: 0..127.
    Priority interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["level-number"] = types.YLeaf{"LevelNumber", state.LevelNumber}
    state.EntityData.Leafs["passive"] = types.YLeaf{"Passive", state.Passive}
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters
// This container defines ISIS interface packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP packet counters.
    Lsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp

    // This container defines IIH packet counters.
    Iih NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih

    // This container defines ISH packet counters.
    Ish NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish

    // This container defines ESH packet counters.
    Esh NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh

    // This container defines PSNP packet counters.
    Psnp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp

    // Operational state parameters relating to CNSPs.
    Cnsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp

    // Operational state parameters relating to IS-IS PDUs that are not otherwise
    // classified - referred to as Unknown PDUs.
    Unknown NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown
}

func (packetCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters) GetEntityData() *types.CommonEntityData {
    packetCounters.EntityData.YFilter = packetCounters.YFilter
    packetCounters.EntityData.YangName = "packet-counters"
    packetCounters.EntityData.BundleName = "openconfig"
    packetCounters.EntityData.ParentYangName = "level"
    packetCounters.EntityData.SegmentPath = "packet-counters"
    packetCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    packetCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    packetCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    packetCounters.EntityData.Children = make(map[string]types.YChild)
    packetCounters.EntityData.Children["lsp"] = types.YChild{"Lsp", &packetCounters.Lsp}
    packetCounters.EntityData.Children["iih"] = types.YChild{"Iih", &packetCounters.Iih}
    packetCounters.EntityData.Children["ish"] = types.YChild{"Ish", &packetCounters.Ish}
    packetCounters.EntityData.Children["esh"] = types.YChild{"Esh", &packetCounters.Esh}
    packetCounters.EntityData.Children["psnp"] = types.YChild{"Psnp", &packetCounters.Psnp}
    packetCounters.EntityData.Children["cnsp"] = types.YChild{"Cnsp", &packetCounters.Cnsp}
    packetCounters.EntityData.Children["unknown"] = types.YChild{"Unknown", &packetCounters.Unknown}
    packetCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(packetCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp
// This container defines LSP packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP PDU counters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State
}

func (lsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "openconfig"
    lsp.EntityData.ParentYangName = "packet-counters"
    lsp.EntityData.SegmentPath = "lsp"
    lsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lsp.EntityData.Children = make(map[string]types.YChild)
    lsp.EntityData.Children["state"] = types.YChild{"State", &lsp.State}
    lsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State
// This container defines LSP PDU counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih
// This container defines IIH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational counters relating to IIH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State
}

func (iih *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih) GetEntityData() *types.CommonEntityData {
    iih.EntityData.YFilter = iih.YFilter
    iih.EntityData.YangName = "iih"
    iih.EntityData.BundleName = "openconfig"
    iih.EntityData.ParentYangName = "packet-counters"
    iih.EntityData.SegmentPath = "iih"
    iih.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    iih.EntityData.NamespaceTable = openconfig.GetNamespaces()
    iih.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    iih.EntityData.Children = make(map[string]types.YChild)
    iih.EntityData.Children["state"] = types.YChild{"State", &iih.State}
    iih.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iih.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State
// Operational counters relating to IIH PDUs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "iih"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish
// This container defines ISH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state relating to ISH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State
}

func (ish *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish) GetEntityData() *types.CommonEntityData {
    ish.EntityData.YFilter = ish.YFilter
    ish.EntityData.YangName = "ish"
    ish.EntityData.BundleName = "openconfig"
    ish.EntityData.ParentYangName = "packet-counters"
    ish.EntityData.SegmentPath = "ish"
    ish.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ish.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ish.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ish.EntityData.Children = make(map[string]types.YChild)
    ish.EntityData.Children["state"] = types.YChild{"State", &ish.State}
    ish.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ish.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State
// Operational state relating to ISH PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ish"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh
// This container defines ESH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state relating to ESH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State
}

func (esh *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh) GetEntityData() *types.CommonEntityData {
    esh.EntityData.YFilter = esh.YFilter
    esh.EntityData.YangName = "esh"
    esh.EntityData.BundleName = "openconfig"
    esh.EntityData.ParentYangName = "packet-counters"
    esh.EntityData.SegmentPath = "esh"
    esh.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    esh.EntityData.NamespaceTable = openconfig.GetNamespaces()
    esh.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    esh.EntityData.Children = make(map[string]types.YChild)
    esh.EntityData.Children["state"] = types.YChild{"State", &esh.State}
    esh.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(esh.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State
// Operational state relating to ESH PDUs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "esh"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp
// This container defines PSNP packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to PSNPs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State
}

func (psnp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp) GetEntityData() *types.CommonEntityData {
    psnp.EntityData.YFilter = psnp.YFilter
    psnp.EntityData.YangName = "psnp"
    psnp.EntityData.BundleName = "openconfig"
    psnp.EntityData.ParentYangName = "packet-counters"
    psnp.EntityData.SegmentPath = "psnp"
    psnp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    psnp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    psnp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    psnp.EntityData.Children = make(map[string]types.YChild)
    psnp.EntityData.Children["state"] = types.YChild{"State", &psnp.State}
    psnp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(psnp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State
// Packet counters relating to PSNPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "psnp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp
// Operational state parameters relating to CNSPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to CNSPs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State
}

func (cnsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp) GetEntityData() *types.CommonEntityData {
    cnsp.EntityData.YFilter = cnsp.YFilter
    cnsp.EntityData.YangName = "cnsp"
    cnsp.EntityData.BundleName = "openconfig"
    cnsp.EntityData.ParentYangName = "packet-counters"
    cnsp.EntityData.SegmentPath = "cnsp"
    cnsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    cnsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    cnsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    cnsp.EntityData.Children = make(map[string]types.YChild)
    cnsp.EntityData.Children["state"] = types.YChild{"State", &cnsp.State}
    cnsp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cnsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State
// Packet counters relating to CNSPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "cnsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown
// Operational state parameters relating to IS-IS PDUs that are not
// otherwise classified - referred to as Unknown PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to unknown PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State
}

func (unknown *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "openconfig"
    unknown.EntityData.ParentYangName = "packet-counters"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unknown.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unknown.EntityData.Children = make(map[string]types.YChild)
    unknown.EntityData.Children["state"] = types.YChild{"State", &unknown.State}
    unknown.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(unknown.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State
// Packet counters relating to unknown PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unknown"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["received"] = types.YLeaf{"Received", state.Received}
    state.EntityData.Leafs["processed"] = types.YLeaf{"Processed", state.Processed}
    state.EntityData.Leafs["dropped"] = types.YLeaf{"Dropped", state.Dropped}
    state.EntityData.Leafs["sent"] = types.YLeaf{"Sent", state.Sent}
    state.EntityData.Leafs["retransmit"] = types.YLeaf{"Retransmit", state.Retransmit}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies
// This container defines ISIS adjacencies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the local system's IS-IS adjacencies. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency.
    Adjacency []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency
}

func (adjacencies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies) GetEntityData() *types.CommonEntityData {
    adjacencies.EntityData.YFilter = adjacencies.YFilter
    adjacencies.EntityData.YangName = "adjacencies"
    adjacencies.EntityData.BundleName = "openconfig"
    adjacencies.EntityData.ParentYangName = "level"
    adjacencies.EntityData.SegmentPath = "adjacencies"
    adjacencies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencies.EntityData.Children = make(map[string]types.YChild)
    adjacencies.EntityData.Children["adjacency"] = types.YChild{"Adjacency", nil}
    for i := range adjacencies.Adjacency {
        adjacencies.EntityData.Children[types.GetSegmentPath(&adjacencies.Adjacency[i])] = types.YChild{"Adjacency", &adjacencies.Adjacency[i]}
    }
    adjacencies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency
// List of the local system's IS-IS adjacencies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the IS neighbor. The type is string
    // with pattern: b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'. Refers
    // to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_SystemId
    SystemId interface{}

    // Operational state relating to the IS-IS adjacency with the remote system.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State
}

func (adjacency *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency) GetEntityData() *types.CommonEntityData {
    adjacency.EntityData.YFilter = adjacency.YFilter
    adjacency.EntityData.YangName = "adjacency"
    adjacency.EntityData.BundleName = "openconfig"
    adjacency.EntityData.ParentYangName = "adjacencies"
    adjacency.EntityData.SegmentPath = "adjacency" + "[system-id='" + fmt.Sprintf("%v", adjacency.SystemId) + "']"
    adjacency.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacency.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacency.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacency.EntityData.Children = make(map[string]types.YChild)
    adjacency.EntityData.Children["state"] = types.YChild{"State", &adjacency.State}
    adjacency.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacency.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", adjacency.SystemId}
    return &(adjacency.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State
// Operational state relating to the IS-IS adjacency with the
// remote system
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS neighbor system-id. The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    SystemId interface{}

    // ISIS Neighbor IPv4 address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborIpv4Address interface{}

    // ISIS Neighbor IPv6 address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborIpv6Address interface{}

    // ISIS neighbor SNPA. The type is string with length: 0..20.
    NeighborSnpa interface{}

    // Local extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    LocalExtendedCircuitId interface{}

    // ISIS neighbor extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    NeighborExtendedCircuitId interface{}

    // Priority of the neighboring IS(LAN Hello only). The type is interface{}
    // with range: 0..127.
    Priority interface{}

    // DIS System ID(LAN hello only). The type is string with pattern:
    // b'^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$'.
    DisSystemId interface{}

    // Received ISIS circuit type (level-1, level-2, level-1-2). The type is
    // LevelType.
    NeighborCircuitType interface{}

    // Formed ISIS adjacency type(level-1, level-2, level-1-2). The type is
    // LevelType.
    AdjacencyType interface{}

    // P2P 3-way ISIS adjacency state(up, down, init, failed). The type is
    // IsisInterfaceAdjState.
    AdjacencyState interface{}

    // Holding time in seconds for adjacency. This value is based on received
    // hello PDUs and the elapsed time since receipt. The type is interface{} with
    // range: 0..65535. Units are seconds.
    RemainingHoldTime interface{}

    // Adjacency up time. The type is interface{} with range: 0..4294967295.
    UpTime interface{}

    // When set to true, ISIS multi-topology is supported. The type is bool.
    MultiTopology interface{}

    // ISIS topology type support(ipv4-unicast, ipv6-unicast, ipv4-multicast,
    // ipv6-multicast). The type is slice of ['IPV4UNICAST', 'IPV6MULTICAST',
    // 'IPV4MULTICAST', 'IPV6UNICAST'].
    Topology []interface{}

    // When set to true, Graceful-restart signaling is supported. The type is
    // bool.
    RestartSupport interface{}

    // When set to true, adjacency is not advertised. The SA bit is used by a
    // starting router to  request that its neighbor suppress advertisement of the
    // adjacency  to the starting router in the neighbor's LSPs. The type is bool.
    RestartSuppress interface{}

    // When set to true, neighbor is being helped. The RR bit is used by a
    // (re)starting router to signal to its neighbors that a (re)start is in
    // progress. The type is bool.
    RestartStatus interface{}

    // List of ISIS area-address(es). The type is slice of string with pattern:
    // b'^[0-9A-Fa-f]{2}\\.([0-9A-Fa-f]{4}\\.){0,3}$'.
    AreaAddress []interface{}

    // Supported Protocol. IPv4 is defined as (0xcc) and IPv6 - (0x8e). ISIS
    // reference is TLV 129. The type is slice of Nlpid.
    Nlpid []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", state.SystemId}
    state.EntityData.Leafs["neighbor-ipv4-address"] = types.YLeaf{"NeighborIpv4Address", state.NeighborIpv4Address}
    state.EntityData.Leafs["neighbor-ipv6-address"] = types.YLeaf{"NeighborIpv6Address", state.NeighborIpv6Address}
    state.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", state.NeighborSnpa}
    state.EntityData.Leafs["local-extended-circuit-id"] = types.YLeaf{"LocalExtendedCircuitId", state.LocalExtendedCircuitId}
    state.EntityData.Leafs["neighbor-extended-circuit-id"] = types.YLeaf{"NeighborExtendedCircuitId", state.NeighborExtendedCircuitId}
    state.EntityData.Leafs["priority"] = types.YLeaf{"Priority", state.Priority}
    state.EntityData.Leafs["dis-system-id"] = types.YLeaf{"DisSystemId", state.DisSystemId}
    state.EntityData.Leafs["neighbor-circuit-type"] = types.YLeaf{"NeighborCircuitType", state.NeighborCircuitType}
    state.EntityData.Leafs["adjacency-type"] = types.YLeaf{"AdjacencyType", state.AdjacencyType}
    state.EntityData.Leafs["adjacency-state"] = types.YLeaf{"AdjacencyState", state.AdjacencyState}
    state.EntityData.Leafs["remaining-hold-time"] = types.YLeaf{"RemainingHoldTime", state.RemainingHoldTime}
    state.EntityData.Leafs["up-time"] = types.YLeaf{"UpTime", state.UpTime}
    state.EntityData.Leafs["multi-topology"] = types.YLeaf{"MultiTopology", state.MultiTopology}
    state.EntityData.Leafs["topology"] = types.YLeaf{"Topology", state.Topology}
    state.EntityData.Leafs["restart-support"] = types.YLeaf{"RestartSupport", state.RestartSupport}
    state.EntityData.Leafs["restart-suppress"] = types.YLeaf{"RestartSuppress", state.RestartSuppress}
    state.EntityData.Leafs["restart-status"] = types.YLeaf{"RestartStatus", state.RestartStatus}
    state.EntityData.Leafs["area-address"] = types.YLeaf{"AreaAddress", state.AreaAddress}
    state.EntityData.Leafs["nlpid"] = types.YLeaf{"Nlpid", state.Nlpid}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid represents and IPv6 - (0x8e). ISIS reference is TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid string

const (
    // IPv4 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid_IPV4 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid = "IPV4"

    // IPv6 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid_IPV6 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid = "IPV6"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers
// This container defines ISIS timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS interface hello-timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config

    // This container defines ISIS interface hello-timers state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "level"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["config"] = types.YChild{"Config", &timers.Config}
    timers.EntityData.Children["state"] = types.YChild{"State", &timers.State}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config
// This container defines ISIS interface hello-timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS hello-interval value. The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // ISIS hello-multiplier value. The type is interface{} with range: 0..255.
    HelloMultiplier interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", config.HelloInterval}
    config.EntityData.Leafs["hello-multiplier"] = types.YLeaf{"HelloMultiplier", config.HelloMultiplier}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State
// This container defines ISIS interface hello-timers state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS hello-interval value. The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // ISIS hello-multiplier value. The type is interface{} with range: 0..255.
    HelloMultiplier interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", state.HelloInterval}
    state.EntityData.Leafs["hello-multiplier"] = types.YLeaf{"HelloMultiplier", state.HelloMultiplier}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af.
    Af []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "level"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = make(map[string]types.YChild)
    afiSafi.EntityData.Children["af"] = types.YChild{"Af", nil}
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children[types.GetSegmentPath(&afiSafi.Af[i])] = types.YChild{"Af", &afiSafi.Af[i]}
    }
    afiSafi.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters. Single topology
    // is the default setting.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State

    // Configuration and operatioanl state parameters relating to segment routing
    // for an interface within the IGP.
    SegmentRouting NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + "[afi-name='" + fmt.Sprintf("%v", af.AfiName) + "']" + "[safi-name='" + fmt.Sprintf("%v", af.SafiName) + "']"
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Children["config"] = types.YChild{"Config", &af.Config}
    af.EntityData.Children["state"] = types.YChild{"State", &af.State}
    af.EntityData.Children["segment-routing"] = types.YChild{"SegmentRouting", &af.SegmentRouting}
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", af.AfiName}
    af.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", af.SafiName}
    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters. Single
// topology is the default setting.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", config.AfiName}
    config.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", config.SafiName}
    config.EntityData.Leafs["metric"] = types.YLeaf{"Metric", config.Metric}
    config.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", config.Enabled}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["afi-name"] = types.YLeaf{"AfiName", state.AfiName}
    state.EntityData.Leafs["safi-name"] = types.YLeaf{"SafiName", state.SafiName}
    state.EntityData.Leafs["metric"] = types.YLeaf{"Metric", state.Metric}
    state.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", state.Enabled}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting
// Configuration and operatioanl state parameters relating to segment
// routing for an interface within the IGP.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters relating to the
    // advertisement of a segment routing IGP-Prefix SID for this interface.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids

    // Configuration and operational state parameters relating to the
    // advertisement of a segment routing adjacency SID for this interface.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids
}

func (segmentRouting *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "af"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = make(map[string]types.YChild)
    segmentRouting.EntityData.Children["prefix-sids"] = types.YChild{"PrefixSids", &segmentRouting.PrefixSids}
    segmentRouting.EntityData.Children["adjacency-sids"] = types.YChild{"AdjacencySids", &segmentRouting.AdjacencySids}
    segmentRouting.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids
// Configuration and operational state parameters relating to
// the advertisement of a segment routing IGP-Prefix SID for this
// interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IGP prefix that should have a segment routing IGP-Prefix SID allocated
    // to it. The value of the SID is specified by the SID ID, as an absolute
    // value. If the absolute value falls within the SRGB, the Global flag should
    // be advertised by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid.
    PrefixSid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "segment-routing"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = make(map[string]types.YChild)
    prefixSids.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", nil}
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children[types.GetSegmentPath(&prefixSids.PrefixSid[i])] = types.YChild{"PrefixSid", &prefixSids.PrefixSid[i]}
    }
    prefixSids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid
// An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the prefix for which the IGP-Prefix
    // SID is to be advertised. The type is one of the following types: string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // Configuration parameters for the IGP Prefix SID.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config

    // Operational state parameters for the IGP-Prefix SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + "[prefix='" + fmt.Sprintf("%v", prefixSid.Prefix) + "']"
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Children["config"] = types.YChild{"Config", &prefixSid.Config}
    prefixSid.EntityData.Children["state"] = types.YChild{"State", &prefixSid.State}
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixSid.Prefix}
    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config
// Configuration parameters for the IGP Prefix SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix for which the IGP prefix SID should be advertised. The value
    // specified is a local prefix on the interface which is advertised into the
    // IGP. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // The Segment Identifier to be used when advertising the IGP Prefix SID. The
    // type is one of the following types: int with range: 16..1048575, or
    // :go:struct:`MplsLabel <ydk/models/segment_routing/MplsLabel>`., or string
    // with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SidId interface{}

    // The options associated with the IGP prefix SID for MPLS. The value of this
    // leaf specifies the option that the SID should be advertised into the IGP
    // with. The type is LabelOptions.
    LabelOptions interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-sid"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", config.Prefix}
    config.EntityData.Leafs["sid-id"] = types.YLeaf{"SidId", config.SidId}
    config.EntityData.Leafs["label-options"] = types.YLeaf{"LabelOptions", config.LabelOptions}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions represents into the IGP with.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions string

const (
    // When this value is specified, the penultimate hop must not pop
    // the Prefix-SID label before forwarding it to the local system.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions_NO_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions = "NO_PHP"

    // When set, the penultimate hop must swap the prefix SID for the
    // relevant explicit null label before forwarding the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions = "EXPLICIT_NULL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State
// Operational state parameters for the IGP-Prefix SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix for which the IGP prefix SID should be advertised. The value
    // specified is a local prefix on the interface which is advertised into the
    // IGP. The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'.
    Prefix interface{}

    // The Segment Identifier to be used when advertising the IGP Prefix SID. The
    // type is one of the following types: int with range: 16..1048575, or
    // :go:struct:`MplsLabel <ydk/models/segment_routing/MplsLabel>`., or string
    // with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SidId interface{}

    // The options associated with the IGP prefix SID for MPLS. The value of this
    // leaf specifies the option that the SID should be advertised into the IGP
    // with. The type is LabelOptions.
    LabelOptions interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", state.Prefix}
    state.EntityData.Leafs["sid-id"] = types.YLeaf{"SidId", state.SidId}
    state.EntityData.Leafs["label-options"] = types.YLeaf{"LabelOptions", state.LabelOptions}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions represents into the IGP with.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions string

const (
    // When this value is specified, the penultimate hop must not pop
    // the Prefix-SID label before forwarding it to the local system.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions_NO_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions = "NO_PHP"

    // When set, the penultimate hop must swap the prefix SID for the
    // relevant explicit null label before forwarding the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions = "EXPLICIT_NULL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids
// Configuration and operational state parameters relating to
// the advertisement of a segment routing adjacency SID for this
// interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An Adjacency SID to be advertised for the specified interface. The
    // Adj-SID's identifier (the SID ID) must be unique, with flags specified
    // indicating the parameters that should be set for the SID. Where a SID value
    // is specified that is allocated from the SRGB, the global flag must be set
    // by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid.
    AdjacencySid []NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "segment-routing"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = make(map[string]types.YChild)
    adjacencySids.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", nil}
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children[types.GetSegmentPath(&adjacencySids.AdjacencySid[i])] = types.YChild{"AdjacencySid", &adjacencySids.AdjacencySid[i]}
    }
    adjacencySids.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid
// An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Reference to the neighbor with which the Adjacency
    // SID is associated. The type is one of the following types: string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Neighbor interface{}

    // This attribute is a key. Reference to the segment identifier to be used by
    // the local system. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/segment_routing/MplsLabel>`., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or
    // :go:struct:`NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId
    // <ydk/models/network_instance/NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId>`.
    SidId interface{}

    // Configuraton parameters relating to the AdjSID.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config

    // Operational state parameters relating to the AdjSID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + "[neighbor='" + fmt.Sprintf("%v", adjacencySid.Neighbor) + "']" + "[sid-id='" + fmt.Sprintf("%v", adjacencySid.SidId) + "']"
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["config"] = types.YChild{"Config", &adjacencySid.Config}
    adjacencySid.EntityData.Children["state"] = types.YChild{"State", &adjacencySid.State}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["neighbor"] = types.YLeaf{"Neighbor", adjacencySid.Neighbor}
    adjacencySid.EntityData.Leafs["sid-id"] = types.YLeaf{"SidId", adjacencySid.SidId}
    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config
// Configuraton parameters relating to the AdjSID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of the Adj-SID to be advertised. Where a static SID identifier is
    // specified, this should be advertised directly by the system. Where the
    // DYNAMIC value is specified, this should be treated as a dynamically
    // allocated value. When the MPLS data plane is in use the dynamic value
    // should not fall within a reserved-label-block. The type is one of the
    // following types: int with range: 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/segment_routing/MplsLabel>`., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or enumeration
    // NetworkInstances.NetworkInstance.Protocols.Protocol.Isis.Interfaces.Interface.Levels.Level.AfiSafi.Af.SegmentRouting.AdjacencySids.AdjacencySid.State.SidId.
    SidId interface{}

    // Whether the Adj-SID should be considered to be eligible for protection
    // using IP or MPLS FRR during a network failure. When this value is set to
    // true, the B-flag of the Adj-SID is set to 1, and the local system should
    // provide FRR paths for the associated label forwarding entry. When it is set
    // to false, the local system must not provide FRR for the specified LFIB
    // entry. The type is bool. The default value is true.
    ProtectionEligible interface{}

    // When set to true, the Adj-SID is indicated to be part of a group, and the G
    // flag is set to 1 in the corresponding advertisement in the IGP. The type is
    // bool. The default value is false.
    Group interface{}

    // The remote system on the interface with which the Adj-SID is associated.
    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Neighbor interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "adjacency-sid"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["sid-id"] = types.YLeaf{"SidId", config.SidId}
    config.EntityData.Leafs["protection-eligible"] = types.YLeaf{"ProtectionEligible", config.ProtectionEligible}
    config.EntityData.Leafs["group"] = types.YLeaf{"Group", config.Group}
    config.EntityData.Leafs["neighbor"] = types.YLeaf{"Neighbor", config.Neighbor}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId represents the dynamic value should not fall within a reserved-label-block.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId string

const (
    // The SID chosen for the Adjacency SID should be dynamically
    // allocated from the system's dynamic range of Segment
    // Identifiers. For MPLS, this range should be considered to be
    // those labels that do not fall within a reserved label block.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_DYNAMIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State
// Operational state parameters relating to the AdjSID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of the Adj-SID to be advertised. Where a static SID identifier is
    // specified, this should be advertised directly by the system. Where the
    // DYNAMIC value is specified, this should be treated as a dynamically
    // allocated value. When the MPLS data plane is in use the dynamic value
    // should not fall within a reserved-label-block. The type is one of the
    // following types: int with range: 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/segment_routing/MplsLabel>`., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.,
    // or enumeration
    // NetworkInstances.NetworkInstance.Protocols.Protocol.Isis.Interfaces.Interface.Levels.Level.AfiSafi.Af.SegmentRouting.AdjacencySids.AdjacencySid.State.SidId.
    SidId interface{}

    // Whether the Adj-SID should be considered to be eligible for protection
    // using IP or MPLS FRR during a network failure. When this value is set to
    // true, the B-flag of the Adj-SID is set to 1, and the local system should
    // provide FRR paths for the associated label forwarding entry. When it is set
    // to false, the local system must not provide FRR for the specified LFIB
    // entry. The type is bool. The default value is true.
    ProtectionEligible interface{}

    // When set to true, the Adj-SID is indicated to be part of a group, and the G
    // flag is set to 1 in the corresponding advertisement in the IGP. The type is
    // bool. The default value is false.
    Group interface{}

    // The remote system on the interface with which the Adj-SID is associated.
    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Neighbor interface{}

    // Where an Adjacency SID with a dynamic value is to be allocated by the
    // system, this leaf reports to the value of the Adj-SID allocated to this
    // interface. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/segment_routing/MplsLabel>`., or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    AllocatedDynamicLocal interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["sid-id"] = types.YLeaf{"SidId", state.SidId}
    state.EntityData.Leafs["protection-eligible"] = types.YLeaf{"ProtectionEligible", state.ProtectionEligible}
    state.EntityData.Leafs["group"] = types.YLeaf{"Group", state.Group}
    state.EntityData.Leafs["neighbor"] = types.YLeaf{"Neighbor", state.Neighbor}
    state.EntityData.Leafs["allocated-dynamic-local"] = types.YLeaf{"AllocatedDynamicLocal", state.AllocatedDynamicLocal}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId represents the dynamic value should not fall within a reserved-label-block.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId string

const (
    // The SID chosen for the Adjacency SID should be dynamically
    // allocated from the system's dynamic range of Segment
    // Identifiers. For MPLS, this range should be considered to be
    // those labels that do not fall within a reserved label block.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_DYNAMIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain
}

func (helloAuthentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication) GetEntityData() *types.CommonEntityData {
    helloAuthentication.EntityData.YFilter = helloAuthentication.YFilter
    helloAuthentication.EntityData.YangName = "hello-authentication"
    helloAuthentication.EntityData.BundleName = "openconfig"
    helloAuthentication.EntityData.ParentYangName = "level"
    helloAuthentication.EntityData.SegmentPath = "hello-authentication"
    helloAuthentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    helloAuthentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    helloAuthentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    helloAuthentication.EntityData.Children = make(map[string]types.YChild)
    helloAuthentication.EntityData.Children["config"] = types.YChild{"Config", &helloAuthentication.Config}
    helloAuthentication.EntityData.Children["state"] = types.YChild{"State", &helloAuthentication.State}
    helloAuthentication.EntityData.Children["key"] = types.YChild{"Key", &helloAuthentication.Key}
    helloAuthentication.EntityData.Children["keychain"] = types.YChild{"Keychain", &helloAuthentication.Keychain}
    helloAuthentication.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(helloAuthentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "hello-authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["hello-authentication"] = types.YLeaf{"HelloAuthentication", config.HelloAuthentication}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hello-authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["hello-authentication"] = types.YLeaf{"HelloAuthentication", state.HelloAuthentication}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "hello-authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = make(map[string]types.YChild)
    key.EntityData.Children["config"] = types.YChild{"Config", &key.Config}
    key.EntityData.Children["state"] = types.YChild{"State", &key.State}
    key.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", config.AuthPassword}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["auth-password"] = types.YLeaf{"AuthPassword", state.AuthPassword}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "hello-authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = make(map[string]types.YChild)
    keychain.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers
// This container describes ISIS interface timers configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to interface timers for IS-IS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config

    // This container defines state information for ISIS interface timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "interface"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["config"] = types.YChild{"Config", &timers.Config}
    timers.EntityData.Children["state"] = types.YChild{"State", &timers.State}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config
// Configuration parameters relating to interface
// timers for IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The interval, specified in seconds, at which periodic CSNP packets should
    // be transmitted by the local IS. The type is interface{} with range:
    // 0..65535. Units are seconds.
    CsnpInterval interface{}

    // The interval interval in milliseconds between the detection of topology
    // change and when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    LspPacingInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["csnp-interval"] = types.YLeaf{"CsnpInterval", config.CsnpInterval}
    config.EntityData.Leafs["lsp-pacing-interval"] = types.YLeaf{"LspPacingInterval", config.LspPacingInterval}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State
// This container defines state information for ISIS interface timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The interval, specified in seconds, at which periodic CSNP packets should
    // be transmitted by the local IS. The type is interface{} with range:
    // 0..65535. Units are seconds.
    CsnpInterval interface{}

    // The interval interval in milliseconds between the detection of topology
    // change and when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    LspPacingInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["csnp-interval"] = types.YLeaf{"CsnpInterval", state.CsnpInterval}
    state.EntityData.Leafs["lsp-pacing-interval"] = types.YLeaf{"LspPacingInterval", state.LspPacingInterval}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd
// This container defines BFD.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines BFD configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config

    // This container defines BFD state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State
}

func (bfd *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "openconfig"
    bfd.EntityData.ParentYangName = "interface"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bfd.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Children["config"] = types.YChild{"Config", &bfd.Config}
    bfd.EntityData.Children["state"] = types.YChild{"State", &bfd.State}
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfd.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config
// This container defines BFD configuration parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, BFD TLV is used. This enables support for the IS-IS BFD
    // TLV options, which specify that a BFD session must be established before an
    // IS-IS adjacency can transition to the established state. This option should
    // be enabled on all IS-IS neighbors on a shared interface. The type is bool.
    BfdTlv interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "bfd"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["bfd-tlv"] = types.YLeaf{"BfdTlv", config.BfdTlv}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State
// This container defines BFD state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, BFD TLV is used. This enables support for the IS-IS BFD
    // TLV options, which specify that a BFD session must be established before an
    // IS-IS adjacency can transition to the established state. This option should
    // be enabled on all IS-IS neighbors on a shared interface. The type is bool.
    BfdTlv interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bfd"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["bfd-tlv"] = types.YLeaf{"BfdTlv", state.BfdTlv}
    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = make(map[string]types.YChild)
    interfaceRef.EntityData.Children["config"] = types.YChild{"Config", &interfaceRef.Config}
    interfaceRef.EntityData.Children["state"] = types.YChild{"State", &interfaceRef.State}
    interfaceRef.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = make(map[string]types.YChild)
    config.EntityData.Leafs = make(map[string]types.YLeaf)
    config.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", config.Interface_}
    config.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", config.Subinterface}
    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface_ interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    state.EntityData.Leafs["interface"] = types.YLeaf{"Interface_", state.Interface_}
    state.EntityData.Leafs["subinterface"] = types.YLeaf{"Subinterface", state.Subinterface}
    return &(state.EntityData)
}

