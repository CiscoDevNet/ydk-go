// An OpenConfig description of a network-instance. This may be
// a Layer 3 forwarding construct such as a virtual routing and
// forwarding (VRF) instance, or a Layer 2 instance such as a
// virtual switch instance (VSI). Mixed Layer 2 and Layer 3
// instances are also supported.
package network_instance

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/openconfig"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package network_instance"))
    ydk.RegisterEntity("{http://openconfig.net/yang/network-instance network-instances}", reflect.TypeOf(NetworkInstances{}))
    ydk.RegisterEntity("openconfig-network-instance:network-instances", reflect.TypeOf(NetworkInstances{}))
}

// NetworkInstances
// The L2, L3, or L2+L3 forwarding instances that are
// configured on the local system
type NetworkInstances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network instances configured on the local system. The type is slice of
    // NetworkInstances_NetworkInstance.
    NetworkInstance []*NetworkInstances_NetworkInstance
}

func (networkInstances *NetworkInstances) GetEntityData() *types.CommonEntityData {
    networkInstances.EntityData.YFilter = networkInstances.YFilter
    networkInstances.EntityData.YangName = "network-instances"
    networkInstances.EntityData.BundleName = "openconfig"
    networkInstances.EntityData.ParentYangName = "openconfig-network-instance"
    networkInstances.EntityData.SegmentPath = "openconfig-network-instance:network-instances"
    networkInstances.EntityData.AbsolutePath = networkInstances.EntityData.SegmentPath
    networkInstances.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    networkInstances.EntityData.NamespaceTable = openconfig.GetNamespaces()
    networkInstances.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    networkInstances.EntityData.Children = types.NewOrderedMap()
    networkInstances.EntityData.Children.Append("network-instance", types.YChild{"NetworkInstance", nil})
    for i := range networkInstances.NetworkInstance {
        networkInstances.EntityData.Children.Append(types.GetSegmentPath(networkInstances.NetworkInstance[i]), types.YChild{"NetworkInstance", networkInstances.NetworkInstance[i]})
    }
    networkInstances.EntityData.Leafs = types.NewOrderedMap()

    networkInstances.EntityData.YListKeys = []string {}

    return &(networkInstances.EntityData)
}

// NetworkInstances_NetworkInstance
// Network instances configured on the local system
type NetworkInstances_NetworkInstance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique name identifying the network instance.
    // The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    Name interface{}

    // Operational state and configuration parameters relating to the forwarding
    // database of the network instance.
    Fdb NetworkInstances_NetworkInstance_Fdb

    // Configuration parameters relating to a network instance.
    Config NetworkInstances_NetworkInstance_Config

    // Operational state parameters relating to a network instance.
    State NetworkInstances_NetworkInstance_State

    // Configuration parameters relating to the encapsulation used for the network
    // instance.
    Encapsulation NetworkInstances_NetworkInstance_Encapsulation

    // Policies dictating how RIB or FIB entries are imported to and exported from
    // this instance.
    InterInstancePolicies NetworkInstances_NetworkInstance_InterInstancePolicies

    // Policies dictating how RIB or FIB entries are propagated between tables.
    TableConnections NetworkInstances_NetworkInstance_TableConnections

    // The interfaces that are associated with this network instance.
    Interfaces NetworkInstances_NetworkInstance_Interfaces

    // The routing tables that are managed by this network instance.
    Tables NetworkInstances_NetworkInstance_Tables

    // The set of connection points within a forwarding instance.
    ConnectionPoints NetworkInstances_NetworkInstance_ConnectionPoints

    // Anchor point for mpls configuration and operational data.
    Mpls NetworkInstances_NetworkInstance_Mpls

    // Configuration and operational state parameters relating to segment routing.
    SegmentRouting NetworkInstances_NetworkInstance_SegmentRouting

    // Container for VLAN configuration and state variables.
    Vlans NetworkInstances_NetworkInstance_Vlans

    // The abstract forwarding tables (AFTs) that are associated with the network
    // instance. An AFT is instantiated per-protocol running within the
    // network-instance - such that one exists for IPv4 Unicast, IPv6 Unicast,
    // MPLS, L2 forwarding entries, etc. A forwarding entry within the FIB has a
    // set of next-hops, which may be a reference to an entry within another table
    // - e.g., where a Layer 3 next-hop has an associated Layer 2 forwarding
    // entry.
    Afts NetworkInstances_NetworkInstance_Afts

    // The routing protocols that are enabled for this network-instance.
    Protocols NetworkInstances_NetworkInstance_Protocols
}

func (networkInstance *NetworkInstances_NetworkInstance) GetEntityData() *types.CommonEntityData {
    networkInstance.EntityData.YFilter = networkInstance.YFilter
    networkInstance.EntityData.YangName = "network-instance"
    networkInstance.EntityData.BundleName = "openconfig"
    networkInstance.EntityData.ParentYangName = "network-instances"
    networkInstance.EntityData.SegmentPath = "network-instance" + types.AddKeyToken(networkInstance.Name, "name")
    networkInstance.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/" + networkInstance.EntityData.SegmentPath
    networkInstance.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    networkInstance.EntityData.NamespaceTable = openconfig.GetNamespaces()
    networkInstance.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    networkInstance.EntityData.Children = types.NewOrderedMap()
    networkInstance.EntityData.Children.Append("fdb", types.YChild{"Fdb", &networkInstance.Fdb})
    networkInstance.EntityData.Children.Append("config", types.YChild{"Config", &networkInstance.Config})
    networkInstance.EntityData.Children.Append("state", types.YChild{"State", &networkInstance.State})
    networkInstance.EntityData.Children.Append("encapsulation", types.YChild{"Encapsulation", &networkInstance.Encapsulation})
    networkInstance.EntityData.Children.Append("inter-instance-policies", types.YChild{"InterInstancePolicies", &networkInstance.InterInstancePolicies})
    networkInstance.EntityData.Children.Append("table-connections", types.YChild{"TableConnections", &networkInstance.TableConnections})
    networkInstance.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &networkInstance.Interfaces})
    networkInstance.EntityData.Children.Append("tables", types.YChild{"Tables", &networkInstance.Tables})
    networkInstance.EntityData.Children.Append("connection-points", types.YChild{"ConnectionPoints", &networkInstance.ConnectionPoints})
    networkInstance.EntityData.Children.Append("mpls", types.YChild{"Mpls", &networkInstance.Mpls})
    networkInstance.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &networkInstance.SegmentRouting})
    networkInstance.EntityData.Children.Append("vlans", types.YChild{"Vlans", &networkInstance.Vlans})
    networkInstance.EntityData.Children.Append("afts", types.YChild{"Afts", &networkInstance.Afts})
    networkInstance.EntityData.Children.Append("protocols", types.YChild{"Protocols", &networkInstance.Protocols})
    networkInstance.EntityData.Leafs = types.NewOrderedMap()
    networkInstance.EntityData.Leafs.Append("name", types.YLeaf{"Name", networkInstance.Name})

    networkInstance.EntityData.YListKeys = []string {"Name"}

    return &(networkInstance.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb
// Operational state and configuration parameters relating to
// the forwarding database of the network instance
type NetworkInstances_NetworkInstance_Fdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the FDB.
    Config NetworkInstances_NetworkInstance_Fdb_Config

    // Operational state parameters relating to the FDB.
    State NetworkInstances_NetworkInstance_Fdb_State

    // Table of learned or statically configured MAC addresses and corresponding
    // VLANs in the bridge domain.
    MacTable NetworkInstances_NetworkInstance_Fdb_MacTable
}

func (fdb *NetworkInstances_NetworkInstance_Fdb) GetEntityData() *types.CommonEntityData {
    fdb.EntityData.YFilter = fdb.YFilter
    fdb.EntityData.YangName = "fdb"
    fdb.EntityData.BundleName = "openconfig"
    fdb.EntityData.ParentYangName = "network-instance"
    fdb.EntityData.SegmentPath = "fdb"
    fdb.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + fdb.EntityData.SegmentPath
    fdb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    fdb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    fdb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    fdb.EntityData.Children = types.NewOrderedMap()
    fdb.EntityData.Children.Append("config", types.YChild{"Config", &fdb.Config})
    fdb.EntityData.Children.Append("state", types.YChild{"State", &fdb.State})
    fdb.EntityData.Children.Append("mac-table", types.YChild{"MacTable", &fdb.MacTable})
    fdb.EntityData.Leafs = types.NewOrderedMap()

    fdb.EntityData.YListKeys = []string {}

    return &(fdb.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_Config
// Configuration parameters relating to the FDB
type NetworkInstances_NetworkInstance_Fdb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, MAC learning is enabled for the network
    // instance, such that MAC addresses are learned from ingress frames and added
    // to the FDB. The type is bool.
    MacLearning interface{}

    // The number of seconds of inactivity after which the entry in the local FDB
    // is timed out. The type is interface{} with range: 0..65535. Units are
    // seconds.
    MacAgingTime interface{}

    // The maximum number of MAC address entries that should be accepted into the
    // FDB. The type is interface{} with range: 0..65535.
    MaximumEntries interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "fdb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("mac-learning", types.YLeaf{"MacLearning", config.MacLearning})
    config.EntityData.Leafs.Append("mac-aging-time", types.YLeaf{"MacAgingTime", config.MacAgingTime})
    config.EntityData.Leafs.Append("maximum-entries", types.YLeaf{"MaximumEntries", config.MaximumEntries})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_State
// Operational state parameters relating to the FDB
type NetworkInstances_NetworkInstance_Fdb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, MAC learning is enabled for the network
    // instance, such that MAC addresses are learned from ingress frames and added
    // to the FDB. The type is bool.
    MacLearning interface{}

    // The number of seconds of inactivity after which the entry in the local FDB
    // is timed out. The type is interface{} with range: 0..65535. Units are
    // seconds.
    MacAgingTime interface{}

    // The maximum number of MAC address entries that should be accepted into the
    // FDB. The type is interface{} with range: 0..65535.
    MaximumEntries interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "fdb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mac-learning", types.YLeaf{"MacLearning", state.MacLearning})
    state.EntityData.Leafs.Append("mac-aging-time", types.YLeaf{"MacAgingTime", state.MacAgingTime})
    state.EntityData.Leafs.Append("maximum-entries", types.YLeaf{"MaximumEntries", state.MaximumEntries})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable
// Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
type NetworkInstances_NetworkInstance_Fdb_MacTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enclosing container for list of MAC table entries.
    Entries NetworkInstances_NetworkInstance_Fdb_MacTable_Entries
}

func (macTable *NetworkInstances_NetworkInstance_Fdb_MacTable) GetEntityData() *types.CommonEntityData {
    macTable.EntityData.YFilter = macTable.YFilter
    macTable.EntityData.YangName = "mac-table"
    macTable.EntityData.BundleName = "openconfig"
    macTable.EntityData.ParentYangName = "fdb"
    macTable.EntityData.SegmentPath = "mac-table"
    macTable.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/" + macTable.EntityData.SegmentPath
    macTable.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    macTable.EntityData.NamespaceTable = openconfig.GetNamespaces()
    macTable.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    macTable.EntityData.Children = types.NewOrderedMap()
    macTable.EntityData.Children.Append("entries", types.YChild{"Entries", &macTable.Entries})
    macTable.EntityData.Leafs = types.NewOrderedMap()

    macTable.EntityData.YListKeys = []string {}

    return &(macTable.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries
// Enclosing container for list of MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of learned MAC addresses. The type is slice of
    // NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry.
    Entry []*NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry
}

func (entries *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) GetEntityData() *types.CommonEntityData {
    entries.EntityData.YFilter = entries.YFilter
    entries.EntityData.YangName = "entries"
    entries.EntityData.BundleName = "openconfig"
    entries.EntityData.ParentYangName = "mac-table"
    entries.EntityData.SegmentPath = "entries"
    entries.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/" + entries.EntityData.SegmentPath
    entries.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entries.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entries.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entries.EntityData.Children = types.NewOrderedMap()
    entries.EntityData.Children.Append("entry", types.YChild{"Entry", nil})
    for i := range entries.Entry {
        entries.EntityData.Children.Append(types.GetSegmentPath(entries.Entry[i]), types.YChild{"Entry", entries.Entry[i]})
    }
    entries.EntityData.Leafs = types.NewOrderedMap()

    entries.EntityData.YListKeys = []string {}

    return &(entries.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry
// List of learned MAC addresses
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to mac-address list key. The type is
    // string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config_MacAddress
    MacAddress interface{}

    // Configuration data for MAC table entries.
    Config NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config

    // Operational state data for MAC table entries.
    State NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State

    // Reference to the base and/or subinterface for the MAC table entry.
    Interface NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface
}

func (entry *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetEntityData() *types.CommonEntityData {
    entry.EntityData.YFilter = entry.YFilter
    entry.EntityData.YangName = "entry"
    entry.EntityData.BundleName = "openconfig"
    entry.EntityData.ParentYangName = "entries"
    entry.EntityData.SegmentPath = "entry" + types.AddKeyToken(entry.MacAddress, "mac-address")
    entry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/" + entry.EntityData.SegmentPath
    entry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    entry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    entry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    entry.EntityData.Children = types.NewOrderedMap()
    entry.EntityData.Children.Append("config", types.YChild{"Config", &entry.Config})
    entry.EntityData.Children.Append("state", types.YChild{"State", &entry.State})
    entry.EntityData.Children.Append("interface", types.YChild{"Interface", &entry.Interface})
    entry.EntityData.Leafs = types.NewOrderedMap()
    entry.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", entry.MacAddress})

    entry.EntityData.YListKeys = []string {"MacAddress"}

    return &(entry.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config
// Configuration data for MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address for the dynamic or static MAC table entry. The type is string
    // with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddress interface{}

    // VLAN from which this MAC address was received. The type is string with
    // range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    Vlan interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", config.MacAddress})
    config.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", config.Vlan})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State
// Operational state data for MAC table entries
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address for the dynamic or static MAC table entry. The type is string
    // with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddress interface{}

    // VLAN from which this MAC address was received. The type is string with
    // range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    Vlan interface{}

    // The time in seconds since the MAC address has been in the table. The type
    // is interface{} with range: 0..18446744073709551615. Units are seconds.
    Age interface{}

    // Indicates whether the entry was statically configured, or dynamically
    // learned. The type is EntryType.
    EntryType interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", state.Vlan})
    state.EntityData.Leafs.Append("age", types.YLeaf{"Age", state.Age})
    state.EntityData.Leafs.Append("entry-type", types.YLeaf{"EntryType", state.EntryType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType represents dynamically learned.
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType string

const (
    // Statically programmed MAC table entry
    NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType_STATIC NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType = "STATIC"

    // Dynamically learned MAC table entry
    NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType_DYNAMIC NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface
// Reference to the base and/or subinterface for the
// MAC table entry
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "entry"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Leafs = types.NewOrderedMap()

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Config
// Configuration parameters relating to a network
// instance
type NetworkInstances_NetworkInstance_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An operator-assigned unique name for the forwarding instance. The type is
    // string.
    Name interface{}

    // The type of network instance. The value of this leaf indicates the type of
    // forwarding entries that should be supported by this network instance. The
    // type is one of the following: L2VSIL3VRFL2P2PDEFAULTINSTANCEL2L3.
    Type interface{}

    // Whether the network instance should be configured to be active on the
    // network element. The type is bool.
    Enabled interface{}

    // A free-form string to be used by the network operator to describe the
    // function of this network instance. The type is string.
    Description interface{}

    // A identifier for the local network instance - typically used within
    // associated routing protocols or signalling routing information in another
    // network instance. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).
    RouterId interface{}

    // The route distinguisher that should be used for the local VRF or VSI
    // instance when it is signalled via BGP. The type is one of the following
    // types: string with pattern:
    // ^(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9])$,
    // or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9])$,
    // or string with pattern:
    // ^(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9]):(65[0-5][0-3][0-5]|[1-5]{2}[0-9]{3}|[1-9]{0,2}[0-9][0-9]|[1-9])$.
    RouteDistinguisher interface{}

    // The address families that are to be enabled for this network instance. The
    // type is slice of [u'L2ETHERNET', u'IPV6', u'MPLS', u'IPV4'].
    EnabledAddressFamilies []interface{}

    // The maximum frame size which should be supported for this instance for
    // Layer 2 frames. The type is interface{} with range: 0..65535.
    Mtu interface{}
}

func (config *NetworkInstances_NetworkInstance_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "network-instance"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("type", types.YLeaf{"Type", config.Type})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("description", types.YLeaf{"Description", config.Description})
    config.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", config.RouterId})
    config.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", config.RouteDistinguisher})
    config.EntityData.Leafs.Append("enabled-address-families", types.YLeaf{"EnabledAddressFamilies", config.EnabledAddressFamilies})
    config.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", config.Mtu})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_State
// Operational state parameters relating to a network
// instance
type NetworkInstances_NetworkInstance_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An operator-assigned unique name for the forwarding instance. The type is
    // string.
    Name interface{}

    // The type of network instance. The value of this leaf indicates the type of
    // forwarding entries that should be supported by this network instance. The
    // type is one of the following: L2VSIL3VRFL2P2PDEFAULTINSTANCEL2L3.
    Type interface{}

    // Whether the network instance should be configured to be active on the
    // network element. The type is bool.
    Enabled interface{}

    // A free-form string to be used by the network operator to describe the
    // function of this network instance. The type is string.
    Description interface{}

    // A identifier for the local network instance - typically used within
    // associated routing protocols or signalling routing information in another
    // network instance. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).
    RouterId interface{}

    // The route distinguisher that should be used for the local VRF or VSI
    // instance when it is signalled via BGP. The type is one of the following
    // types: string with pattern:
    // ^(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9])$,
    // or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(65[0-5][0-3][0-5]|[1-5][1-5][0-9][0-9][0-9]|[1-9]?[1-9]?[0-9][0-9]|[1-9])$,
    // or string with pattern:
    // ^(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-5]|[0-3][0-9]{9}|[1-9][0-9]{1,8}|[1-9]):(65[0-5][0-3][0-5]|[1-5]{2}[0-9]{3}|[1-9]{0,2}[0-9][0-9]|[1-9])$.
    RouteDistinguisher interface{}

    // The address families that are to be enabled for this network instance. The
    // type is slice of [u'L2ETHERNET', u'IPV6', u'MPLS', u'IPV4'].
    EnabledAddressFamilies []interface{}

    // The maximum frame size which should be supported for this instance for
    // Layer 2 frames. The type is interface{} with range: 0..65535.
    Mtu interface{}
}

func (state *NetworkInstances_NetworkInstance_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "network-instance"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("description", types.YLeaf{"Description", state.Description})
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})
    state.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", state.RouteDistinguisher})
    state.EntityData.Leafs.Append("enabled-address-families", types.YLeaf{"EnabledAddressFamilies", state.EnabledAddressFamilies})
    state.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", state.Mtu})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation
// Configuration parameters relating to the encapsulation
// used for the network instance
type NetworkInstances_NetworkInstance_Encapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the encapsulation of the network
    // instance.
    Config NetworkInstances_NetworkInstance_Encapsulation_Config

    // State parameters relating to the encapsulation of the network instance.
    State NetworkInstances_NetworkInstance_Encapsulation_State
}

func (encapsulation *NetworkInstances_NetworkInstance_Encapsulation) GetEntityData() *types.CommonEntityData {
    encapsulation.EntityData.YFilter = encapsulation.YFilter
    encapsulation.EntityData.YangName = "encapsulation"
    encapsulation.EntityData.BundleName = "openconfig"
    encapsulation.EntityData.ParentYangName = "network-instance"
    encapsulation.EntityData.SegmentPath = "encapsulation"
    encapsulation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + encapsulation.EntityData.SegmentPath
    encapsulation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    encapsulation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    encapsulation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    encapsulation.EntityData.Children = types.NewOrderedMap()
    encapsulation.EntityData.Children.Append("config", types.YChild{"Config", &encapsulation.Config})
    encapsulation.EntityData.Children.Append("state", types.YChild{"State", &encapsulation.State})
    encapsulation.EntityData.Leafs = types.NewOrderedMap()

    encapsulation.EntityData.YListKeys = []string {}

    return &(encapsulation.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation_Config
// Configuration parameters relating to the encapsulation
// of the network instance
type NetworkInstances_NetworkInstance_Encapsulation_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The on-the-wire encapsulation that should be used when sending traffic from
    // this network instance. The type is one of the following: MPLSVXLAN.
    EncapsulationType interface{}

    // The label allocation mode to be used for L3 entries in the network
    // instance. The type is one of the following:
    // INSTANCELABELPERPREFIXPERNEXTHOP.
    LabelAllocationMode interface{}

    // Whether the control-word should be used for the network instance. The type
    // is bool.
    ControlWord interface{}
}

func (config *NetworkInstances_NetworkInstance_Encapsulation_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "encapsulation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/encapsulation/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", config.EncapsulationType})
    config.EntityData.Leafs.Append("label-allocation-mode", types.YLeaf{"LabelAllocationMode", config.LabelAllocationMode})
    config.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", config.ControlWord})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Encapsulation_State
// State parameters relating to the encapsulation of
// the network instance
type NetworkInstances_NetworkInstance_Encapsulation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The on-the-wire encapsulation that should be used when sending traffic from
    // this network instance. The type is one of the following: MPLSVXLAN.
    EncapsulationType interface{}

    // The label allocation mode to be used for L3 entries in the network
    // instance. The type is one of the following:
    // INSTANCELABELPERPREFIXPERNEXTHOP.
    LabelAllocationMode interface{}

    // Whether the control-word should be used for the network instance. The type
    // is bool.
    ControlWord interface{}
}

func (state *NetworkInstances_NetworkInstance_Encapsulation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "encapsulation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/encapsulation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", state.EncapsulationType})
    state.EntityData.Leafs.Append("label-allocation-mode", types.YLeaf{"LabelAllocationMode", state.LabelAllocationMode})
    state.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", state.ControlWord})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies
// Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
type NetworkInstances_NetworkInstance_InterInstancePolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy
}

func (interInstancePolicies *NetworkInstances_NetworkInstance_InterInstancePolicies) GetEntityData() *types.CommonEntityData {
    interInstancePolicies.EntityData.YFilter = interInstancePolicies.YFilter
    interInstancePolicies.EntityData.YangName = "inter-instance-policies"
    interInstancePolicies.EntityData.BundleName = "openconfig"
    interInstancePolicies.EntityData.ParentYangName = "network-instance"
    interInstancePolicies.EntityData.SegmentPath = "inter-instance-policies"
    interInstancePolicies.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + interInstancePolicies.EntityData.SegmentPath
    interInstancePolicies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interInstancePolicies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interInstancePolicies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interInstancePolicies.EntityData.Children = types.NewOrderedMap()
    interInstancePolicies.EntityData.Children.Append("apply-policy", types.YChild{"ApplyPolicy", &interInstancePolicies.ApplyPolicy})
    interInstancePolicies.EntityData.Leafs = types.NewOrderedMap()

    interInstancePolicies.EntityData.YListKeys = []string {}

    return &(interInstancePolicies.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "inter-instance-policies"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/inter-instance-policies/" + applyPolicy.EntityData.SegmentPath
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = types.NewOrderedMap()
    applyPolicy.EntityData.Children.Append("config", types.YChild{"Config", &applyPolicy.Config})
    applyPolicy.EntityData.Children.Append("state", types.YChild{"State", &applyPolicy.State})
    applyPolicy.EntityData.Leafs = types.NewOrderedMap()

    applyPolicy.EntityData.YListKeys = []string {}

    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/inter-instance-policies/apply-policy/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})
    config.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", config.ExportPolicy})
    config.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/inter-instance-policies/apply-policy/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})
    state.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", state.ExportPolicy})
    state.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections
// Policies dictating how RIB or FIB entries are propagated
// between tables
type NetworkInstances_NetworkInstance_TableConnections struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of connections between pairs of routing or forwarding tables, the
    // leaking of entries between which is specified by the import policy.  A
    // connection connecting a source table to a destination table implies that
    // routes that match the policy specified for the connection are available for
    // the destination protocol to advertise, or match within its policies. The
    // type is slice of
    // NetworkInstances_NetworkInstance_TableConnections_TableConnection.
    TableConnection []*NetworkInstances_NetworkInstance_TableConnections_TableConnection
}

func (tableConnections *NetworkInstances_NetworkInstance_TableConnections) GetEntityData() *types.CommonEntityData {
    tableConnections.EntityData.YFilter = tableConnections.YFilter
    tableConnections.EntityData.YangName = "table-connections"
    tableConnections.EntityData.BundleName = "openconfig"
    tableConnections.EntityData.ParentYangName = "network-instance"
    tableConnections.EntityData.SegmentPath = "table-connections"
    tableConnections.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + tableConnections.EntityData.SegmentPath
    tableConnections.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tableConnections.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tableConnections.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tableConnections.EntityData.Children = types.NewOrderedMap()
    tableConnections.EntityData.Children.Append("table-connection", types.YChild{"TableConnection", nil})
    for i := range tableConnections.TableConnection {
        tableConnections.EntityData.Children.Append(types.GetSegmentPath(tableConnections.TableConnection[i]), types.YChild{"TableConnection", tableConnections.TableConnection[i]})
    }
    tableConnections.EntityData.Leafs = types.NewOrderedMap()

    tableConnections.EntityData.YListKeys = []string {}

    return &(tableConnections.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection
// A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
// 
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
type NetworkInstances_NetworkInstance_TableConnections_TableConnection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The name of the protocol associated with the table
    // which should be utilised as the source of forwarding or routing
    // information. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    SrcProtocol interface{}

    // This attribute is a key. The table to which routing entries should be
    // exported. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    DstProtocol interface{}

    // This attribute is a key. The address family associated with the connection.
    // The type is one of the following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}

    // Configuration parameters relating to the connection between tables.
    Config NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config

    // State parameters relating to the connection between tables.
    State NetworkInstances_NetworkInstance_TableConnections_TableConnection_State
}

func (tableConnection *NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetEntityData() *types.CommonEntityData {
    tableConnection.EntityData.YFilter = tableConnection.YFilter
    tableConnection.EntityData.YangName = "table-connection"
    tableConnection.EntityData.BundleName = "openconfig"
    tableConnection.EntityData.ParentYangName = "table-connections"
    tableConnection.EntityData.SegmentPath = "table-connection" + types.AddKeyToken(tableConnection.SrcProtocol, "src-protocol") + types.AddKeyToken(tableConnection.DstProtocol, "dst-protocol") + types.AddKeyToken(tableConnection.AddressFamily, "address-family")
    tableConnection.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/table-connections/" + tableConnection.EntityData.SegmentPath
    tableConnection.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tableConnection.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tableConnection.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tableConnection.EntityData.Children = types.NewOrderedMap()
    tableConnection.EntityData.Children.Append("config", types.YChild{"Config", &tableConnection.Config})
    tableConnection.EntityData.Children.Append("state", types.YChild{"State", &tableConnection.State})
    tableConnection.EntityData.Leafs = types.NewOrderedMap()
    tableConnection.EntityData.Leafs.Append("src-protocol", types.YLeaf{"SrcProtocol", tableConnection.SrcProtocol})
    tableConnection.EntityData.Leafs.Append("dst-protocol", types.YLeaf{"DstProtocol", tableConnection.DstProtocol})
    tableConnection.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", tableConnection.AddressFamily})

    tableConnection.EntityData.YListKeys = []string {"SrcProtocol", "DstProtocol", "AddressFamily"}

    return &(tableConnection.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config
// Configuration parameters relating to the connection
// between tables
type NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The source protocol for the table connection. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    SrcProtocol interface{}

    // The address family associated with the connection. This must be defined for
    // the source protocol. The target address family is implicitly defined by the
    // address family specified for the source protocol. The type is one of the
    // following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}

    // The destination protocol for the table connection. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    DstProtocol interface{}

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "table-connection"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/table-connections/table-connection/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("src-protocol", types.YLeaf{"SrcProtocol", config.SrcProtocol})
    config.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", config.AddressFamily})
    config.EntityData.Leafs.Append("dst-protocol", types.YLeaf{"DstProtocol", config.DstProtocol})
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_TableConnections_TableConnection_State
// State parameters relating to the connection between
// tables
type NetworkInstances_NetworkInstance_TableConnections_TableConnection_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The source protocol for the table connection. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    SrcProtocol interface{}

    // The address family associated with the connection. This must be defined for
    // the source protocol. The target address family is implicitly defined by the
    // address family specified for the source protocol. The type is one of the
    // following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}

    // The destination protocol for the table connection. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    DstProtocol interface{}

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "table-connection"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/table-connections/table-connection/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("src-protocol", types.YLeaf{"SrcProtocol", state.SrcProtocol})
    state.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", state.AddressFamily})
    state.EntityData.Leafs.Append("dst-protocol", types.YLeaf{"DstProtocol", state.DstProtocol})
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces
// The interfaces that are associated with this network
// instance
type NetworkInstances_NetworkInstance_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An interface associated with the network instance. The type is slice of
    // NetworkInstances_NetworkInstance_Interfaces_Interface.
    Interface []*NetworkInstances_NetworkInstance_Interfaces_Interface
}

func (interfaces *NetworkInstances_NetworkInstance_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "openconfig"
    interfaces.EntityData.ParentYangName = "network-instance"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaces.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface
// An interface associated with the network instance
type NetworkInstances_NetworkInstance_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to an identifier for this interface
    // which acts as a key for this list. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Interfaces_Interface_Config_Id
    Id interface{}

    // Configuration parameters relating to the associated interface.
    Config NetworkInstances_NetworkInstance_Interfaces_Interface_Config

    // Operational state parameters relating to the associated interface.
    State NetworkInstances_NetworkInstance_Interfaces_Interface_State
}

func (self *NetworkInstances_NetworkInstance_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.Id, "id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("id", types.YLeaf{"Id", self.Id})

    self.EntityData.YListKeys = []string {"Id"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface_Config
// Configuration parameters relating to the associated
// interface
type NetworkInstances_NetworkInstance_Interfaces_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for this interface - this is expressed as a free-text
    // string. The type is string.
    Id interface{}

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}

    // The address families on the subinterface which are to be associated with
    // this network instance. When this leaf-list is empty and the network
    // instance requires Layer 3 information the address families for which the
    // network instance is enabled should be imported. If the value of this
    // leaf-list is specified then the association MUST only be made for those
    // address families that are included in the list. The type is slice of
    // [u'L2ETHERNET', u'IPV6', u'MPLS', u'IPV4'].
    AssociatedAddressFamilies []interface{}
}

func (config *NetworkInstances_NetworkInstance_Interfaces_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/interfaces/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("id", types.YLeaf{"Id", config.Id})
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})
    config.EntityData.Leafs.Append("associated-address-families", types.YLeaf{"AssociatedAddressFamilies", config.AssociatedAddressFamilies})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Interfaces_Interface_State
// Operational state parameters relating to the
// associated interface
type NetworkInstances_NetworkInstance_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for this interface - this is expressed as a free-text
    // string. The type is string.
    Id interface{}

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}

    // The address families on the subinterface which are to be associated with
    // this network instance. When this leaf-list is empty and the network
    // instance requires Layer 3 information the address families for which the
    // network instance is enabled should be imported. If the value of this
    // leaf-list is specified then the association MUST only be made for those
    // address families that are included in the list. The type is slice of
    // [u'L2ETHERNET', u'IPV6', u'MPLS', u'IPV4'].
    AssociatedAddressFamilies []interface{}
}

func (state *NetworkInstances_NetworkInstance_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/interfaces/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("id", types.YLeaf{"Id", state.Id})
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})
    state.EntityData.Leafs.Append("associated-address-families", types.YLeaf{"AssociatedAddressFamilies", state.AssociatedAddressFamilies})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Tables
// The routing tables that are managed by this network
// instance
type NetworkInstances_NetworkInstance_Tables struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A network instance manages one or more forwarding or routing tables. These
    // may reflect a Layer 2 forwarding information base, a Layer 3 routing table,
    // or an MPLS LFIB.  The table populated by a protocol within an instance is
    // identified by the protocol identifier (e.g., BGP, IS-IS) and the address
    // family (e.g., IPv4, IPv6) supported by that protocol. Multiple instances of
    // the same protocol populate a single table -- such that a single IS-IS or
    // OSPF IPv4 table exists per network instance.  An implementation is expected
    // to create entries within this list when the relevant protocol context is
    // enabled. i.e., when a BGP instance is created with IPv4 and IPv6 address
    // families enabled, the protocol=BGP, address-family=IPv4 table is created by
    // the system. The type is slice of
    // NetworkInstances_NetworkInstance_Tables_Table.
    Table []*NetworkInstances_NetworkInstance_Tables_Table
}

func (tables *NetworkInstances_NetworkInstance_Tables) GetEntityData() *types.CommonEntityData {
    tables.EntityData.YFilter = tables.YFilter
    tables.EntityData.YangName = "tables"
    tables.EntityData.BundleName = "openconfig"
    tables.EntityData.ParentYangName = "network-instance"
    tables.EntityData.SegmentPath = "tables"
    tables.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + tables.EntityData.SegmentPath
    tables.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tables.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tables.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tables.EntityData.Children = types.NewOrderedMap()
    tables.EntityData.Children.Append("table", types.YChild{"Table", nil})
    for i := range tables.Table {
        tables.EntityData.Children.Append(types.GetSegmentPath(tables.Table[i]), types.YChild{"Table", tables.Table[i]})
    }
    tables.EntityData.Leafs = types.NewOrderedMap()

    tables.EntityData.YListKeys = []string {}

    return &(tables.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table
// A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
// 
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
// 
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
type NetworkInstances_NetworkInstance_Tables_Table struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the protocol that populates the
    // table. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Protocol interface{}

    // This attribute is a key. A reference to the address-family that the table
    // represents. The type is one of the following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}

    // Configuration parameters relating to the table.
    Config NetworkInstances_NetworkInstance_Tables_Table_Config

    // State parameters related to the table.
    State NetworkInstances_NetworkInstance_Tables_Table_State
}

func (table *NetworkInstances_NetworkInstance_Tables_Table) GetEntityData() *types.CommonEntityData {
    table.EntityData.YFilter = table.YFilter
    table.EntityData.YangName = "table"
    table.EntityData.BundleName = "openconfig"
    table.EntityData.ParentYangName = "tables"
    table.EntityData.SegmentPath = "table" + types.AddKeyToken(table.Protocol, "protocol") + types.AddKeyToken(table.AddressFamily, "address-family")
    table.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/tables/" + table.EntityData.SegmentPath
    table.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    table.EntityData.NamespaceTable = openconfig.GetNamespaces()
    table.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    table.EntityData.Children = types.NewOrderedMap()
    table.EntityData.Children.Append("config", types.YChild{"Config", &table.Config})
    table.EntityData.Children.Append("state", types.YChild{"State", &table.State})
    table.EntityData.Leafs = types.NewOrderedMap()
    table.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", table.Protocol})
    table.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", table.AddressFamily})

    table.EntityData.YListKeys = []string {"Protocol", "AddressFamily"}

    return &(table.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table_Config
// Configuration parameters relating to the
// table
type NetworkInstances_NetworkInstance_Tables_Table_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to the protocol that the table is associated with. The type is
    // one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Protocol interface{}

    // The address family (IPv4, IPv6) of the table's entries. The type is one of
    // the following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}
}

func (config *NetworkInstances_NetworkInstance_Tables_Table_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "table"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/tables/table/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", config.Protocol})
    config.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", config.AddressFamily})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Tables_Table_State
// State parameters related to the table
type NetworkInstances_NetworkInstance_Tables_Table_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to the protocol that the table is associated with. The type is
    // one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Protocol interface{}

    // The address family (IPv4, IPv6) of the table's entries. The type is one of
    // the following: L2ETHERNETIPV6MPLSIPV4.
    AddressFamily interface{}
}

func (state *NetworkInstances_NetworkInstance_Tables_Table_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "table"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/tables/table/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", state.Protocol})
    state.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", state.AddressFamily})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints
// The set of connection points within a forwarding
// instance
type NetworkInstances_NetworkInstance_ConnectionPoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A connection point within a Layer 2 network instance. Each connection-point
    // consists of a set of interfaces only one of which is active at any one
    // time. Other than the specification of whether an interface is local (i.e.,
    // exists within this network-instance), or remote, all configuration and
    // state parameters are common. The type is slice of
    // NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint.
    ConnectionPoint []*NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint
}

func (connectionPoints *NetworkInstances_NetworkInstance_ConnectionPoints) GetEntityData() *types.CommonEntityData {
    connectionPoints.EntityData.YFilter = connectionPoints.YFilter
    connectionPoints.EntityData.YangName = "connection-points"
    connectionPoints.EntityData.BundleName = "openconfig"
    connectionPoints.EntityData.ParentYangName = "network-instance"
    connectionPoints.EntityData.SegmentPath = "connection-points"
    connectionPoints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + connectionPoints.EntityData.SegmentPath
    connectionPoints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    connectionPoints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    connectionPoints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    connectionPoints.EntityData.Children = types.NewOrderedMap()
    connectionPoints.EntityData.Children.Append("connection-point", types.YChild{"ConnectionPoint", nil})
    for i := range connectionPoints.ConnectionPoint {
        connectionPoints.EntityData.Children.Append(types.GetSegmentPath(connectionPoints.ConnectionPoint[i]), types.YChild{"ConnectionPoint", connectionPoints.ConnectionPoint[i]})
    }
    connectionPoints.EntityData.Leafs = types.NewOrderedMap()

    connectionPoints.EntityData.YListKeys = []string {}

    return &(connectionPoints.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint
// A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A locally significant reference for the
    // connection-point. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config_ConnectionPointId
    ConnectionPointId interface{}

    // Configuration parameters relating to a Layer 2 network instance connection
    // point.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config

    // Operational state parameters relating to a Layer 2 network instance
    // connection point.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State

    // The set of endpoints which are grouped within the connection point.
    Endpoints NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints
}

func (connectionPoint *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetEntityData() *types.CommonEntityData {
    connectionPoint.EntityData.YFilter = connectionPoint.YFilter
    connectionPoint.EntityData.YangName = "connection-point"
    connectionPoint.EntityData.BundleName = "openconfig"
    connectionPoint.EntityData.ParentYangName = "connection-points"
    connectionPoint.EntityData.SegmentPath = "connection-point" + types.AddKeyToken(connectionPoint.ConnectionPointId, "connection-point-id")
    connectionPoint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/" + connectionPoint.EntityData.SegmentPath
    connectionPoint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    connectionPoint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    connectionPoint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    connectionPoint.EntityData.Children = types.NewOrderedMap()
    connectionPoint.EntityData.Children.Append("config", types.YChild{"Config", &connectionPoint.Config})
    connectionPoint.EntityData.Children.Append("state", types.YChild{"State", &connectionPoint.State})
    connectionPoint.EntityData.Children.Append("endpoints", types.YChild{"Endpoints", &connectionPoint.Endpoints})
    connectionPoint.EntityData.Leafs = types.NewOrderedMap()
    connectionPoint.EntityData.Leafs.Append("connection-point-id", types.YLeaf{"ConnectionPointId", connectionPoint.ConnectionPointId})

    connectionPoint.EntityData.YListKeys = []string {"ConnectionPointId"}

    return &(connectionPoint.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config
// Configuration parameters relating to a Layer 2
// network instance connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for a connection point. The type is string.
    ConnectionPointId interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "connection-point"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("connection-point-id", types.YLeaf{"ConnectionPointId", config.ConnectionPointId})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State
// Operational state parameters relating to a Layer 2
// network instance connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for a connection point. The type is string.
    ConnectionPointId interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "connection-point"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("connection-point-id", types.YLeaf{"ConnectionPointId", state.ConnectionPointId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints
// The set of endpoints which are grouped within the
// connection point
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of the endpoints (interfaces or remote connection points that can be
    // used for this connection point). The active endpoint is selected based on
    // the precedence that it is configured with. The type is slice of
    // NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint.
    Endpoint []*NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint
}

func (endpoints *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) GetEntityData() *types.CommonEntityData {
    endpoints.EntityData.YFilter = endpoints.YFilter
    endpoints.EntityData.YangName = "endpoints"
    endpoints.EntityData.BundleName = "openconfig"
    endpoints.EntityData.ParentYangName = "connection-point"
    endpoints.EntityData.SegmentPath = "endpoints"
    endpoints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/" + endpoints.EntityData.SegmentPath
    endpoints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    endpoints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    endpoints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    endpoints.EntityData.Children = types.NewOrderedMap()
    endpoints.EntityData.Children.Append("endpoint", types.YChild{"Endpoint", nil})
    for i := range endpoints.Endpoint {
        endpoints.EntityData.Children.Append(types.GetSegmentPath(endpoints.Endpoint[i]), types.YChild{"Endpoint", endpoints.Endpoint[i]})
    }
    endpoints.EntityData.Leafs = types.NewOrderedMap()

    endpoints.EntityData.YListKeys = []string {}

    return &(endpoints.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint
// A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A pointer to the configured identifier for the
    // endpoint. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config_EndpointId
    EndpointId interface{}

    // Configuration parameters relating to the endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config

    // Operational state parameters relating to the endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State

    // Configuration and operational state parameters relating to a local
    // interface.
    Local NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local

    // Configuration and operational state parameters relating to a remote
    // interface.
    Remote NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote
}

func (endpoint *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetEntityData() *types.CommonEntityData {
    endpoint.EntityData.YFilter = endpoint.YFilter
    endpoint.EntityData.YangName = "endpoint"
    endpoint.EntityData.BundleName = "openconfig"
    endpoint.EntityData.ParentYangName = "endpoints"
    endpoint.EntityData.SegmentPath = "endpoint" + types.AddKeyToken(endpoint.EndpointId, "endpoint-id")
    endpoint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/" + endpoint.EntityData.SegmentPath
    endpoint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    endpoint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    endpoint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    endpoint.EntityData.Children = types.NewOrderedMap()
    endpoint.EntityData.Children.Append("config", types.YChild{"Config", &endpoint.Config})
    endpoint.EntityData.Children.Append("state", types.YChild{"State", &endpoint.State})
    endpoint.EntityData.Children.Append("local", types.YChild{"Local", &endpoint.Local})
    endpoint.EntityData.Children.Append("remote", types.YChild{"Remote", &endpoint.Remote})
    endpoint.EntityData.Leafs = types.NewOrderedMap()
    endpoint.EntityData.Leafs.Append("endpoint-id", types.YLeaf{"EndpointId", endpoint.EndpointId})

    endpoint.EntityData.YListKeys = []string {"EndpointId"}

    return &(endpoint.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config
// Configuration parameters relating to the
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for the endpoint. The type is string.
    EndpointId interface{}

    // The precedence of the endpoint - the lowest precendence viable endpoint
    // will be utilised as the active endpoint within a connection. The type is
    // interface{} with range: 0..65535.
    Precedence interface{}

    // The type of endpoint that is referred to by the current endpoint. The type
    // is one of the following: REMOTELOCAL.
    Type interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "endpoint"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("endpoint-id", types.YLeaf{"EndpointId", config.EndpointId})
    config.EntityData.Leafs.Append("precedence", types.YLeaf{"Precedence", config.Precedence})
    config.EntityData.Leafs.Append("type", types.YLeaf{"Type", config.Type})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State
// Operational state parameters relating to the
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An identifier for the endpoint. The type is string.
    EndpointId interface{}

    // The precedence of the endpoint - the lowest precendence viable endpoint
    // will be utilised as the active endpoint within a connection. The type is
    // interface{} with range: 0..65535.
    Precedence interface{}

    // The type of endpoint that is referred to by the current endpoint. The type
    // is one of the following: REMOTELOCAL.
    Type interface{}

    // When the backup endpoint is active, the value of this parameter is set to
    // true. The type is bool.
    Active interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "endpoint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("endpoint-id", types.YLeaf{"EndpointId", state.EndpointId})
    state.EntityData.Leafs.Append("precedence", types.YLeaf{"Precedence", state.Precedence})
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("active", types.YLeaf{"Active", state.Active})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local
// Configuration and operational state parameters
// relating to a local interface
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to a local endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config

    // Operational state parameters relating to a local endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State
}

func (local *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "openconfig"
    local.EntityData.ParentYangName = "endpoint"
    local.EntityData.SegmentPath = "local"
    local.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/" + local.EntityData.SegmentPath
    local.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    local.EntityData.NamespaceTable = openconfig.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    local.EntityData.Children = types.NewOrderedMap()
    local.EntityData.Children.Append("config", types.YChild{"Config", &local.Config})
    local.EntityData.Children.Append("state", types.YChild{"State", &local.State})
    local.EntityData.Leafs = types.NewOrderedMap()

    local.EntityData.YListKeys = []string {}

    return &(local.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config
// Configuration parameters relating to a local
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "local"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State
// Operational state parameters relating to a
// local endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "local"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote
// Configuration and operational state parameters
// relating to a remote interface
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to a remote endpoint.
    Config NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config

    // Operational state parameters relating to a remote endpoint.
    State NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State
}

func (remote *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetEntityData() *types.CommonEntityData {
    remote.EntityData.YFilter = remote.YFilter
    remote.EntityData.YangName = "remote"
    remote.EntityData.BundleName = "openconfig"
    remote.EntityData.ParentYangName = "endpoint"
    remote.EntityData.SegmentPath = "remote"
    remote.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/" + remote.EntityData.SegmentPath
    remote.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    remote.EntityData.NamespaceTable = openconfig.GetNamespaces()
    remote.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    remote.EntityData.Children = types.NewOrderedMap()
    remote.EntityData.Children.Append("config", types.YChild{"Config", &remote.Config})
    remote.EntityData.Children.Append("state", types.YChild{"State", &remote.State})
    remote.EntityData.Leafs = types.NewOrderedMap()

    remote.EntityData.YListKeys = []string {}

    return &(remote.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config
// Configuration parameters relating to a remote
// endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP address of the device which hosts the remote end-point. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteSystem interface{}

    // The virtual-circuit identifier that identifies the connection at the remote
    // end-point. The type is interface{} with range: 0..4294967295.
    VirtualCircuitIdentifier interface{}
}

func (config *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "remote"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("remote-system", types.YLeaf{"RemoteSystem", config.RemoteSystem})
    config.EntityData.Leafs.Append("virtual-circuit-identifier", types.YLeaf{"VirtualCircuitIdentifier", config.VirtualCircuitIdentifier})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State
// Operational state parameters relating to
// a remote endpoint
type NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP address of the device which hosts the remote end-point. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteSystem interface{}

    // The virtual-circuit identifier that identifies the connection at the remote
    // end-point. The type is interface{} with range: 0..4294967295.
    VirtualCircuitIdentifier interface{}
}

func (state *NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "remote"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("remote-system", types.YLeaf{"RemoteSystem", state.RemoteSystem})
    state.EntityData.Leafs.Append("virtual-circuit-identifier", types.YLeaf{"VirtualCircuitIdentifier", state.VirtualCircuitIdentifier})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls
// Anchor point for mpls configuration and operational
// data
type NetworkInstances_NetworkInstance_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // general mpls configuration applicable to any type of LSP and signaling
    // protocol - label ranges, entropy label supportmay be added here.
    Global NetworkInstances_NetworkInstance_Mpls_Global

    // traffic-engineering global attributes.
    TeGlobalAttributes NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes

    // traffic engineering attributes specific for interfaces.
    TeInterfaceAttributes NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes

    // top-level signaling protocol configuration.
    SignalingProtocols NetworkInstances_NetworkInstance_Mpls_SignalingProtocols

    // LSP definitions and configuration.
    Lsps NetworkInstances_NetworkInstance_Mpls_Lsps
}

func (mpls *NetworkInstances_NetworkInstance_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "openconfig"
    mpls.EntityData.ParentYangName = "network-instance"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("global", types.YChild{"Global", &mpls.Global})
    mpls.EntityData.Children.Append("te-global-attributes", types.YChild{"TeGlobalAttributes", &mpls.TeGlobalAttributes})
    mpls.EntityData.Children.Append("te-interface-attributes", types.YChild{"TeInterfaceAttributes", &mpls.TeInterfaceAttributes})
    mpls.EntityData.Children.Append("signaling-protocols", types.YChild{"SignalingProtocols", &mpls.SignalingProtocols})
    mpls.EntityData.Children.Append("lsps", types.YChild{"Lsps", &mpls.Lsps})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global
// general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
type NetworkInstances_NetworkInstance_Mpls_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Top level global MPLS configuration.
    Config NetworkInstances_NetworkInstance_Mpls_Global_Config

    // Top level global MPLS state.
    State NetworkInstances_NetworkInstance_Mpls_Global_State

    // Parameters related to MPLS interfaces.
    InterfaceAttributes NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes

    // A range of labels starting with the start-label and up-to and including the
    // end label that should be allocated as reserved. These labels should not be
    // utilised by any dynamic label allocation on the local system unless the
    // allocating protocol is explicitly configured to specify that allocation of
    // labels should be out of the label block specified.
    ReservedLabelBlocks NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks
}

func (global *NetworkInstances_NetworkInstance_Mpls_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "mpls"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("config", types.YChild{"Config", &global.Config})
    global.EntityData.Children.Append("state", types.YChild{"State", &global.State})
    global.EntityData.Children.Append("interface-attributes", types.YChild{"InterfaceAttributes", &global.InterfaceAttributes})
    global.EntityData.Children.Append("reserved-label-blocks", types.YChild{"ReservedLabelBlocks", &global.ReservedLabelBlocks})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_Config
// Top level global MPLS configuration
type NetworkInstances_NetworkInstance_Mpls_Global_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The null-label type used, implicit or explicit. The type is one of the
    // following: EXPLICITIMPLICIT. The default value is oc-mplst:IMPLICIT.
    NullLabel interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Global_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "global"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", config.NullLabel})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_State
// Top level global MPLS state
type NetworkInstances_NetworkInstance_Mpls_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The null-label type used, implicit or explicit. The type is one of the
    // following: EXPLICITIMPLICIT. The default value is oc-mplst:IMPLICIT.
    NullLabel interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", state.NullLabel})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes
// Parameters related to MPLS interfaces
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TE interfaces. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface.
    Interface []*NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface
}

func (interfaceAttributes *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) GetEntityData() *types.CommonEntityData {
    interfaceAttributes.EntityData.YFilter = interfaceAttributes.YFilter
    interfaceAttributes.EntityData.YangName = "interface-attributes"
    interfaceAttributes.EntityData.BundleName = "openconfig"
    interfaceAttributes.EntityData.ParentYangName = "global"
    interfaceAttributes.EntityData.SegmentPath = "interface-attributes"
    interfaceAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/" + interfaceAttributes.EntityData.SegmentPath
    interfaceAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceAttributes.EntityData.Children = types.NewOrderedMap()
    interfaceAttributes.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceAttributes.Interface {
        interfaceAttributes.EntityData.Children.Append(types.GetSegmentPath(interfaceAttributes.Interface[i]), types.YChild{"Interface", interfaceAttributes.Interface[i]})
    }
    interfaceAttributes.EntityData.Leafs = types.NewOrderedMap()

    interfaceAttributes.EntityData.YListKeys = []string {}

    return &(interfaceAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface
// List of TE interfaces
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the interface id list key. The type
    // is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config_InterfaceId
    InterfaceId interface{}

    // Configuration parameters related to MPLS interfaces:.
    Config NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config

    // State parameters related to TE interfaces.
    State NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interface-attributes"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceId, "interface-id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", self.InterfaceId})

    self.EntityData.YListKeys = []string {"InterfaceId"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config
// Configuration parameters related to MPLS interfaces:
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indentifier for the MPLS interface. The type is string.
    InterfaceId interface{}

    // Enable MPLS forwarding on this interface. The type is bool. The default
    // value is false.
    MplsEnabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", config.InterfaceId})
    config.EntityData.Leafs.Append("mpls-enabled", types.YLeaf{"MplsEnabled", config.MplsEnabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State
// State parameters related to TE interfaces
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indentifier for the MPLS interface. The type is string.
    InterfaceId interface{}

    // Enable MPLS forwarding on this interface. The type is bool. The default
    // value is false.
    MplsEnabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", state.InterfaceId})
    state.EntityData.Leafs.Append("mpls-enabled", types.YLeaf{"MplsEnabled", state.MplsEnabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks
// A range of labels starting with the start-label and up-to and including
// the end label that should be allocated as reserved. These labels should
// not be utilised by any dynamic label allocation on the local system unless
// the allocating protocol is explicitly configured to specify that
// allocation of labels should be out of the label block specified.
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A range of labels starting with the start-label up to and including the end
    // label that should be allocated for use by a specific protocol. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock.
    ReservedLabelBlock []*NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock
}

func (reservedLabelBlocks *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) GetEntityData() *types.CommonEntityData {
    reservedLabelBlocks.EntityData.YFilter = reservedLabelBlocks.YFilter
    reservedLabelBlocks.EntityData.YangName = "reserved-label-blocks"
    reservedLabelBlocks.EntityData.BundleName = "openconfig"
    reservedLabelBlocks.EntityData.ParentYangName = "global"
    reservedLabelBlocks.EntityData.SegmentPath = "reserved-label-blocks"
    reservedLabelBlocks.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/" + reservedLabelBlocks.EntityData.SegmentPath
    reservedLabelBlocks.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    reservedLabelBlocks.EntityData.NamespaceTable = openconfig.GetNamespaces()
    reservedLabelBlocks.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    reservedLabelBlocks.EntityData.Children = types.NewOrderedMap()
    reservedLabelBlocks.EntityData.Children.Append("reserved-label-block", types.YChild{"ReservedLabelBlock", nil})
    for i := range reservedLabelBlocks.ReservedLabelBlock {
        reservedLabelBlocks.EntityData.Children.Append(types.GetSegmentPath(reservedLabelBlocks.ReservedLabelBlock[i]), types.YChild{"ReservedLabelBlock", reservedLabelBlocks.ReservedLabelBlock[i]})
    }
    reservedLabelBlocks.EntityData.Leafs = types.NewOrderedMap()

    reservedLabelBlocks.EntityData.YListKeys = []string {}

    return &(reservedLabelBlocks.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock
// A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to a unique local identifier for this
    // label block. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    LocalId interface{}

    // Configuration parameters relating to the label block.
    Config NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config

    // State parameters relating to the label block.
    State NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State
}

func (reservedLabelBlock *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetEntityData() *types.CommonEntityData {
    reservedLabelBlock.EntityData.YFilter = reservedLabelBlock.YFilter
    reservedLabelBlock.EntityData.YangName = "reserved-label-block"
    reservedLabelBlock.EntityData.BundleName = "openconfig"
    reservedLabelBlock.EntityData.ParentYangName = "reserved-label-blocks"
    reservedLabelBlock.EntityData.SegmentPath = "reserved-label-block" + types.AddKeyToken(reservedLabelBlock.LocalId, "local-id")
    reservedLabelBlock.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/reserved-label-blocks/" + reservedLabelBlock.EntityData.SegmentPath
    reservedLabelBlock.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    reservedLabelBlock.EntityData.NamespaceTable = openconfig.GetNamespaces()
    reservedLabelBlock.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    reservedLabelBlock.EntityData.Children = types.NewOrderedMap()
    reservedLabelBlock.EntityData.Children.Append("config", types.YChild{"Config", &reservedLabelBlock.Config})
    reservedLabelBlock.EntityData.Children.Append("state", types.YChild{"State", &reservedLabelBlock.State})
    reservedLabelBlock.EntityData.Leafs = types.NewOrderedMap()
    reservedLabelBlock.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", reservedLabelBlock.LocalId})

    reservedLabelBlock.EntityData.YListKeys = []string {"LocalId"}

    return &(reservedLabelBlock.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config
// Configuration parameters relating to the label block.
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A local identifier for the global label block allocation. The type is
    // string.
    LocalId interface{}

    // Lower bound of the global label block. The block is defined to include this
    // label. The type is one of the following types: int with range: 16..1048575,
    // or enumeration MplsLabel.
    LowerBound interface{}

    // Upper bound for the global label block. The block is defined to include
    // this label. The type is one of the following types: int with range:
    // 16..1048575, or enumeration MplsLabel.
    UpperBound interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reserved-label-block"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", config.LocalId})
    config.EntityData.Leafs.Append("lower-bound", types.YLeaf{"LowerBound", config.LowerBound})
    config.EntityData.Leafs.Append("upper-bound", types.YLeaf{"UpperBound", config.UpperBound})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State
// State parameters relating to the label block.
type NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A local identifier for the global label block allocation. The type is
    // string.
    LocalId interface{}

    // Lower bound of the global label block. The block is defined to include this
    // label. The type is one of the following types: int with range: 16..1048575,
    // or enumeration MplsLabel.
    LowerBound interface{}

    // Upper bound for the global label block. The block is defined to include
    // this label. The type is one of the following types: int with range:
    // 16..1048575, or enumeration MplsLabel.
    UpperBound interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "reserved-label-block"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", state.LocalId})
    state.EntityData.Leafs.Append("lower-bound", types.YLeaf{"LowerBound", state.LowerBound})
    state.EntityData.Leafs.Append("upper-bound", types.YLeaf{"UpperBound", state.UpperBound})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes
// traffic-engineering global attributes
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Shared risk link groups attributes.
    Srlgs NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs

    // Top-level container for admin-groups configuration and state.
    MplsAdminGroups NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups

    // Definition for delays associated with setup and cleanup of TE LSPs.
    TeLspTimers NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers

    // Configuration and operational state parameters related to how bandwidth
    // utilisation is measured and flooded into the IGP.
    BandwidthMeasurement NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement
}

func (teGlobalAttributes *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes) GetEntityData() *types.CommonEntityData {
    teGlobalAttributes.EntityData.YFilter = teGlobalAttributes.YFilter
    teGlobalAttributes.EntityData.YangName = "te-global-attributes"
    teGlobalAttributes.EntityData.BundleName = "openconfig"
    teGlobalAttributes.EntityData.ParentYangName = "mpls"
    teGlobalAttributes.EntityData.SegmentPath = "te-global-attributes"
    teGlobalAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/" + teGlobalAttributes.EntityData.SegmentPath
    teGlobalAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teGlobalAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teGlobalAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teGlobalAttributes.EntityData.Children = types.NewOrderedMap()
    teGlobalAttributes.EntityData.Children.Append("srlgs", types.YChild{"Srlgs", &teGlobalAttributes.Srlgs})
    teGlobalAttributes.EntityData.Children.Append("mpls-admin-groups", types.YChild{"MplsAdminGroups", &teGlobalAttributes.MplsAdminGroups})
    teGlobalAttributes.EntityData.Children.Append("te-lsp-timers", types.YChild{"TeLspTimers", &teGlobalAttributes.TeLspTimers})
    teGlobalAttributes.EntityData.Children.Append("openconfig-rsvp-sr-ext:bandwidth-measurement", types.YChild{"BandwidthMeasurement", &teGlobalAttributes.BandwidthMeasurement})
    teGlobalAttributes.EntityData.Leafs = types.NewOrderedMap()

    teGlobalAttributes.EntityData.YListKeys = []string {}

    return &(teGlobalAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs
// Shared risk link groups attributes
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of shared risk link groups. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg.
    Srlg []*NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg
}

func (srlgs *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs) GetEntityData() *types.CommonEntityData {
    srlgs.EntityData.YFilter = srlgs.YFilter
    srlgs.EntityData.YangName = "srlgs"
    srlgs.EntityData.BundleName = "openconfig"
    srlgs.EntityData.ParentYangName = "te-global-attributes"
    srlgs.EntityData.SegmentPath = "srlgs"
    srlgs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/" + srlgs.EntityData.SegmentPath
    srlgs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlgs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlgs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlgs.EntityData.Children = types.NewOrderedMap()
    srlgs.EntityData.Children.Append("srlg", types.YChild{"Srlg", nil})
    for i := range srlgs.Srlg {
        srlgs.EntityData.Children.Append(types.GetSegmentPath(srlgs.Srlg[i]), types.YChild{"Srlg", srlgs.Srlg[i]})
    }
    srlgs.EntityData.Leafs = types.NewOrderedMap()

    srlgs.EntityData.YListKeys = []string {}

    return &(srlgs.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg
// List of shared risk link groups
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The SRLG group identifier. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Config_Name
    Name interface{}

    // Configuration parameters related to the SRLG.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Config

    // State parameters related to the SRLG.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_State

    // SRLG members for static (not flooded) SRLGs .
    StaticSrlgMembers NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers
}

func (srlg *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg) GetEntityData() *types.CommonEntityData {
    srlg.EntityData.YFilter = srlg.YFilter
    srlg.EntityData.YangName = "srlg"
    srlg.EntityData.BundleName = "openconfig"
    srlg.EntityData.ParentYangName = "srlgs"
    srlg.EntityData.SegmentPath = "srlg" + types.AddKeyToken(srlg.Name, "name")
    srlg.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/" + srlg.EntityData.SegmentPath
    srlg.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlg.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlg.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlg.EntityData.Children = types.NewOrderedMap()
    srlg.EntityData.Children.Append("config", types.YChild{"Config", &srlg.Config})
    srlg.EntityData.Children.Append("state", types.YChild{"State", &srlg.State})
    srlg.EntityData.Children.Append("static-srlg-members", types.YChild{"StaticSrlgMembers", &srlg.StaticSrlgMembers})
    srlg.EntityData.Leafs = types.NewOrderedMap()
    srlg.EntityData.Leafs.Append("name", types.YLeaf{"Name", srlg.Name})

    srlg.EntityData.YListKeys = []string {"Name"}

    return &(srlg.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Config
// Configuration parameters related to the SRLG
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SRLG group identifier. The type is string.
    Name interface{}

    // group ID for the SRLG. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // The cost of the SRLG to the computation algorithm. The type is interface{}
    // with range: 0..4294967295.
    Cost interface{}

    // The type of SRLG, either flooded in the IGP or statically configured. The
    // type is MplsSrlgFloodingType. The default value is FLOODED_SRLG.
    FloodingType interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "srlg"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("value", types.YLeaf{"Value", config.Value})
    config.EntityData.Leafs.Append("cost", types.YLeaf{"Cost", config.Cost})
    config.EntityData.Leafs.Append("flooding-type", types.YLeaf{"FloodingType", config.FloodingType})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_State
// State parameters related to the SRLG
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SRLG group identifier. The type is string.
    Name interface{}

    // group ID for the SRLG. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // The cost of the SRLG to the computation algorithm. The type is interface{}
    // with range: 0..4294967295.
    Cost interface{}

    // The type of SRLG, either flooded in the IGP or statically configured. The
    // type is MplsSrlgFloodingType. The default value is FLOODED_SRLG.
    FloodingType interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("cost", types.YLeaf{"Cost", state.Cost})
    state.EntityData.Leafs.Append("flooding-type", types.YLeaf{"FloodingType", state.FloodingType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers
// SRLG members for static (not flooded) SRLGs 
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of SRLG members, which are expressed as IP address endpoints of links
    // contained in the SRLG. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList.
    MembersList []*NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList
}

func (staticSrlgMembers *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers) GetEntityData() *types.CommonEntityData {
    staticSrlgMembers.EntityData.YFilter = staticSrlgMembers.YFilter
    staticSrlgMembers.EntityData.YangName = "static-srlg-members"
    staticSrlgMembers.EntityData.BundleName = "openconfig"
    staticSrlgMembers.EntityData.ParentYangName = "srlg"
    staticSrlgMembers.EntityData.SegmentPath = "static-srlg-members"
    staticSrlgMembers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/" + staticSrlgMembers.EntityData.SegmentPath
    staticSrlgMembers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    staticSrlgMembers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    staticSrlgMembers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    staticSrlgMembers.EntityData.Children = types.NewOrderedMap()
    staticSrlgMembers.EntityData.Children.Append("members-list", types.YChild{"MembersList", nil})
    for i := range staticSrlgMembers.MembersList {
        staticSrlgMembers.EntityData.Children.Append(types.GetSegmentPath(staticSrlgMembers.MembersList[i]), types.YChild{"MembersList", staticSrlgMembers.MembersList[i]})
    }
    staticSrlgMembers.EntityData.Leafs = types.NewOrderedMap()

    staticSrlgMembers.EntityData.YListKeys = []string {}

    return &(staticSrlgMembers.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList
// List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The from address of the link in the SRLG. The type
    // is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    FromAddress interface{}

    // Configuration parameters relating to the SRLG members.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_Config

    // State parameters relating to the SRLG members.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_State
}

func (membersList *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList) GetEntityData() *types.CommonEntityData {
    membersList.EntityData.YFilter = membersList.YFilter
    membersList.EntityData.YangName = "members-list"
    membersList.EntityData.BundleName = "openconfig"
    membersList.EntityData.ParentYangName = "static-srlg-members"
    membersList.EntityData.SegmentPath = "members-list" + types.AddKeyToken(membersList.FromAddress, "from-address")
    membersList.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/" + membersList.EntityData.SegmentPath
    membersList.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    membersList.EntityData.NamespaceTable = openconfig.GetNamespaces()
    membersList.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    membersList.EntityData.Children = types.NewOrderedMap()
    membersList.EntityData.Children.Append("config", types.YChild{"Config", &membersList.Config})
    membersList.EntityData.Children.Append("state", types.YChild{"State", &membersList.State})
    membersList.EntityData.Leafs = types.NewOrderedMap()
    membersList.EntityData.Leafs.Append("from-address", types.YLeaf{"FromAddress", membersList.FromAddress})

    membersList.EntityData.YListKeys = []string {"FromAddress"}

    return &(membersList.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_Config
// Configuration parameters relating to the
// SRLG members
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the a-side of the SRLG link. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    FromAddress interface{}

    // IP address of the z-side of the SRLG link. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    ToAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "members-list"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("from-address", types.YLeaf{"FromAddress", config.FromAddress})
    config.EntityData.Leafs.Append("to-address", types.YLeaf{"ToAddress", config.ToAddress})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_State
// State parameters relating to the SRLG
// members
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the a-side of the SRLG link. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    FromAddress interface{}

    // IP address of the z-side of the SRLG link. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    ToAddress interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_StaticSrlgMembers_MembersList_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "members-list"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("from-address", types.YLeaf{"FromAddress", state.FromAddress})
    state.EntityData.Leafs.Append("to-address", types.YLeaf{"ToAddress", state.ToAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups
// Top-level container for admin-groups configuration
// and state
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // configuration of value to name mapping for mpls affinities/admin-groups.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup.
    AdminGroup []*NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup
}

func (mplsAdminGroups *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups) GetEntityData() *types.CommonEntityData {
    mplsAdminGroups.EntityData.YFilter = mplsAdminGroups.YFilter
    mplsAdminGroups.EntityData.YangName = "mpls-admin-groups"
    mplsAdminGroups.EntityData.BundleName = "openconfig"
    mplsAdminGroups.EntityData.ParentYangName = "te-global-attributes"
    mplsAdminGroups.EntityData.SegmentPath = "mpls-admin-groups"
    mplsAdminGroups.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/" + mplsAdminGroups.EntityData.SegmentPath
    mplsAdminGroups.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mplsAdminGroups.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mplsAdminGroups.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mplsAdminGroups.EntityData.Children = types.NewOrderedMap()
    mplsAdminGroups.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", nil})
    for i := range mplsAdminGroups.AdminGroup {
        mplsAdminGroups.EntityData.Children.Append(types.GetSegmentPath(mplsAdminGroups.AdminGroup[i]), types.YChild{"AdminGroup", mplsAdminGroups.AdminGroup[i]})
    }
    mplsAdminGroups.EntityData.Leafs = types.NewOrderedMap()

    mplsAdminGroups.EntityData.YListKeys = []string {}

    return &(mplsAdminGroups.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup
// configuration of value to name mapping
// for mpls affinities/admin-groups
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. name for mpls admin-group. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_Config_AdminGroupName
    AdminGroupName interface{}

    // Configurable items for admin-groups.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_Config

    // Operational state for admin-groups.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "mpls-admin-groups"
    adminGroup.EntityData.SegmentPath = "admin-group" + types.AddKeyToken(adminGroup.AdminGroupName, "admin-group-name")
    adminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("config", types.YChild{"Config", &adminGroup.Config})
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()
    adminGroup.EntityData.Leafs.Append("admin-group-name", types.YLeaf{"AdminGroupName", adminGroup.AdminGroupName})

    adminGroup.EntityData.YListKeys = []string {"AdminGroupName"}

    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_Config
// Configurable items for admin-groups
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // name for mpls admin-group. The type is string.
    AdminGroupName interface{}

    // bit-position value for mpls admin-group. The value for the admin group is
    // an integer that represents one of the bit positions in the admin-group
    // bitmask. Values between 0 and 31 are interpreted as the original limit of
    // 32 admin groups. Values >=32 are interpreted as extended admin group values
    // as per RFC7308. The type is interface{} with range: 0..4294967295.
    BitPosition interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "admin-group"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("admin-group-name", types.YLeaf{"AdminGroupName", config.AdminGroupName})
    config.EntityData.Leafs.Append("bit-position", types.YLeaf{"BitPosition", config.BitPosition})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_State
// Operational state for admin-groups
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // name for mpls admin-group. The type is string.
    AdminGroupName interface{}

    // bit-position value for mpls admin-group. The value for the admin group is
    // an integer that represents one of the bit positions in the admin-group
    // bitmask. Values between 0 and 31 are interpreted as the original limit of
    // 32 admin groups. Values >=32 are interpreted as extended admin group values
    // as per RFC7308. The type is interface{} with range: 0..4294967295.
    BitPosition interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group-name", types.YLeaf{"AdminGroupName", state.AdminGroupName})
    state.EntityData.Leafs.Append("bit-position", types.YLeaf{"BitPosition", state.BitPosition})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers
// Definition for delays associated with setup
// and cleanup of TE LSPs
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters related to timers for TE LSPs.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_Config

    // State related to timers for TE LSPs.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_State
}

func (teLspTimers *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) GetEntityData() *types.CommonEntityData {
    teLspTimers.EntityData.YFilter = teLspTimers.YFilter
    teLspTimers.EntityData.YangName = "te-lsp-timers"
    teLspTimers.EntityData.BundleName = "openconfig"
    teLspTimers.EntityData.ParentYangName = "te-global-attributes"
    teLspTimers.EntityData.SegmentPath = "te-lsp-timers"
    teLspTimers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/" + teLspTimers.EntityData.SegmentPath
    teLspTimers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teLspTimers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teLspTimers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teLspTimers.EntityData.Children = types.NewOrderedMap()
    teLspTimers.EntityData.Children.Append("config", types.YChild{"Config", &teLspTimers.Config})
    teLspTimers.EntityData.Children.Append("state", types.YChild{"State", &teLspTimers.State})
    teLspTimers.EntityData.Leafs = types.NewOrderedMap()

    teLspTimers.EntityData.YListKeys = []string {}

    return &(teLspTimers.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_Config
// Configuration parameters related
// to timers for TE LSPs
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // delay the use of newly installed te lsp for a specified amount of time. The
    // type is interface{} with range: 0..3600. Units are seconds.
    InstallDelay interface{}

    // delay the removal of old te lsp for a specified amount of time. The type is
    // interface{} with range: 0..65535. Units are seconds.
    CleanupDelay interface{}

    // frequency of reoptimization of a traffic engineered LSP. The type is
    // interface{} with range: 0..65535. Units are seconds.
    ReoptimizeTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "te-lsp-timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("install-delay", types.YLeaf{"InstallDelay", config.InstallDelay})
    config.EntityData.Leafs.Append("cleanup-delay", types.YLeaf{"CleanupDelay", config.CleanupDelay})
    config.EntityData.Leafs.Append("reoptimize-timer", types.YLeaf{"ReoptimizeTimer", config.ReoptimizeTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_State
// State related to timers for TE LSPs
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // delay the use of newly installed te lsp for a specified amount of time. The
    // type is interface{} with range: 0..3600. Units are seconds.
    InstallDelay interface{}

    // delay the removal of old te lsp for a specified amount of time. The type is
    // interface{} with range: 0..65535. Units are seconds.
    CleanupDelay interface{}

    // frequency of reoptimization of a traffic engineered LSP. The type is
    // interface{} with range: 0..65535. Units are seconds.
    ReoptimizeTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-lsp-timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("install-delay", types.YLeaf{"InstallDelay", state.InstallDelay})
    state.EntityData.Leafs.Append("cleanup-delay", types.YLeaf{"CleanupDelay", state.CleanupDelay})
    state.EntityData.Leafs.Append("reoptimize-timer", types.YLeaf{"ReoptimizeTimer", state.ReoptimizeTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement
// Configuration and operational state parameters related to
// how bandwidth utilisation is measured and flooded into the
// IGP.
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to bandwidth measurement.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_Config

    // Operational state parameters relating to bandwidth measurement.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_State

    // Configuration and operational state parameters related to the update
    // trigger for flooding new bandwidth information into the IGP.
    UpdateTrigger NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger
}

func (bandwidthMeasurement *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement) GetEntityData() *types.CommonEntityData {
    bandwidthMeasurement.EntityData.YFilter = bandwidthMeasurement.YFilter
    bandwidthMeasurement.EntityData.YangName = "bandwidth-measurement"
    bandwidthMeasurement.EntityData.BundleName = "openconfig"
    bandwidthMeasurement.EntityData.ParentYangName = "te-global-attributes"
    bandwidthMeasurement.EntityData.SegmentPath = "openconfig-rsvp-sr-ext:bandwidth-measurement"
    bandwidthMeasurement.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/" + bandwidthMeasurement.EntityData.SegmentPath
    bandwidthMeasurement.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthMeasurement.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthMeasurement.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthMeasurement.EntityData.Children = types.NewOrderedMap()
    bandwidthMeasurement.EntityData.Children.Append("config", types.YChild{"Config", &bandwidthMeasurement.Config})
    bandwidthMeasurement.EntityData.Children.Append("state", types.YChild{"State", &bandwidthMeasurement.State})
    bandwidthMeasurement.EntityData.Children.Append("update-trigger", types.YChild{"UpdateTrigger", &bandwidthMeasurement.UpdateTrigger})
    bandwidthMeasurement.EntityData.Leafs = types.NewOrderedMap()

    bandwidthMeasurement.EntityData.YListKeys = []string {}

    return &(bandwidthMeasurement.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_Config
// Configuration parameters relating to bandwidth
// measurement.
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the local system should measure the
    // bandwidth utilisation of SR traffic on interfaces for which TED entries are
    // being generated.  In the case that this functionality is enabled, traffic
    // forwarded using LFIB entries that correspond to MPLS labels which
    // correspond to SR SIDs should be accounted for. The type is bool.
    MeasureSrTraffic interface{}

    // The interval at which the collection of interface statistics relating to
    // non-RSVP-TE traffic should be performed. The type is interface{} with
    // range: 0..4294967295. Units are seconds.
    CollectionInterval interface{}

    // The interval after which an adjustment to the utilised bandwidth on the
    // interface is made. This value must be greater than, or equal to, the
    // collection interval for statistics.  This value is referred to as N in
    // draft-sitaraman-sr-rsvp-coexistence-rec-01.  After N seconds have expired,
    // the arithmetic mean of the samples is taken, and this is considered as the
    // non-RSVP-TE utilisation of the interface. In the case that the adjustment
    // interval is an integer >1 multiple of the collection interval, this serves
    // to provide smoothing of the collected bandwidth statistics. The type is
    // interface{} with range: 0..4294967295. Units are seconds.
    AdjustmentInterval interface{}

    // A multiplier applied to the sampled bandwidth which determines the value
    // that is propagated to the IGP TED. By default this value is 1.0000, and
    // hence the actual sampled value is flooded. The type is string with range:
    // -922337203685477.5808..922337203685477.5807. The default value is 1.0000.
    BandwidthMultiplier interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "bandwidth-measurement"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/openconfig-rsvp-sr-ext:bandwidth-measurement/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("measure-sr-traffic", types.YLeaf{"MeasureSrTraffic", config.MeasureSrTraffic})
    config.EntityData.Leafs.Append("collection-interval", types.YLeaf{"CollectionInterval", config.CollectionInterval})
    config.EntityData.Leafs.Append("adjustment-interval", types.YLeaf{"AdjustmentInterval", config.AdjustmentInterval})
    config.EntityData.Leafs.Append("bandwidth-multiplier", types.YLeaf{"BandwidthMultiplier", config.BandwidthMultiplier})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_State
// Operational state parameters relating to bandwidth
// measurement
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the local system should measure the
    // bandwidth utilisation of SR traffic on interfaces for which TED entries are
    // being generated.  In the case that this functionality is enabled, traffic
    // forwarded using LFIB entries that correspond to MPLS labels which
    // correspond to SR SIDs should be accounted for. The type is bool.
    MeasureSrTraffic interface{}

    // The interval at which the collection of interface statistics relating to
    // non-RSVP-TE traffic should be performed. The type is interface{} with
    // range: 0..4294967295. Units are seconds.
    CollectionInterval interface{}

    // The interval after which an adjustment to the utilised bandwidth on the
    // interface is made. This value must be greater than, or equal to, the
    // collection interval for statistics.  This value is referred to as N in
    // draft-sitaraman-sr-rsvp-coexistence-rec-01.  After N seconds have expired,
    // the arithmetic mean of the samples is taken, and this is considered as the
    // non-RSVP-TE utilisation of the interface. In the case that the adjustment
    // interval is an integer >1 multiple of the collection interval, this serves
    // to provide smoothing of the collected bandwidth statistics. The type is
    // interface{} with range: 0..4294967295. Units are seconds.
    AdjustmentInterval interface{}

    // A multiplier applied to the sampled bandwidth which determines the value
    // that is propagated to the IGP TED. By default this value is 1.0000, and
    // hence the actual sampled value is flooded. The type is string with range:
    // -922337203685477.5808..922337203685477.5807. The default value is 1.0000.
    BandwidthMultiplier interface{}

    // The effective adjustment interval that is being used by the system. In the
    // case that the adjustment-interval leaf is set to a non-integer multiple of
    // the collection-interval, and the system does not support this, the value of
    // this leaf should reflect the effective value of the adjustment interval
    // that it has selected. In the case where no rounding of the adjustment
    // interval has occurred, this value should have the same value as the
    // adjustment-inerval leaf. The type is interface{} with range: 0..4294967295.
    // Units are seconds.
    EffectiveAdjustmentInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-measurement"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/openconfig-rsvp-sr-ext:bandwidth-measurement/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("measure-sr-traffic", types.YLeaf{"MeasureSrTraffic", state.MeasureSrTraffic})
    state.EntityData.Leafs.Append("collection-interval", types.YLeaf{"CollectionInterval", state.CollectionInterval})
    state.EntityData.Leafs.Append("adjustment-interval", types.YLeaf{"AdjustmentInterval", state.AdjustmentInterval})
    state.EntityData.Leafs.Append("bandwidth-multiplier", types.YLeaf{"BandwidthMultiplier", state.BandwidthMultiplier})
    state.EntityData.Leafs.Append("effective-adjustment-interval", types.YLeaf{"EffectiveAdjustmentInterval", state.EffectiveAdjustmentInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger
// Configuration and operational state parameters related
// to the update trigger for flooding new bandwidth
// information into the IGP.
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters related to the bandwidth measurement update
    // trigger.
    Config NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config

    // Operational state parameters related to the bandwidth measurement update
    // trigger.
    State NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State
}

func (updateTrigger *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger) GetEntityData() *types.CommonEntityData {
    updateTrigger.EntityData.YFilter = updateTrigger.YFilter
    updateTrigger.EntityData.YangName = "update-trigger"
    updateTrigger.EntityData.BundleName = "openconfig"
    updateTrigger.EntityData.ParentYangName = "bandwidth-measurement"
    updateTrigger.EntityData.SegmentPath = "update-trigger"
    updateTrigger.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/openconfig-rsvp-sr-ext:bandwidth-measurement/" + updateTrigger.EntityData.SegmentPath
    updateTrigger.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    updateTrigger.EntityData.NamespaceTable = openconfig.GetNamespaces()
    updateTrigger.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    updateTrigger.EntityData.Children = types.NewOrderedMap()
    updateTrigger.EntityData.Children.Append("config", types.YChild{"Config", &updateTrigger.Config})
    updateTrigger.EntityData.Children.Append("state", types.YChild{"State", &updateTrigger.State})
    updateTrigger.EntityData.Leafs = types.NewOrderedMap()

    updateTrigger.EntityData.YListKeys = []string {}

    return &(updateTrigger.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config
// Configuration parameters related to the bandwidth
// measurement update trigger.
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The trigger that should be used to determine when the IGP TED is updated
    // with new information as to the effective maximum reservable bandwidth
    // (adjusted-absolute-subscription-bw). The type is UpdateTrigger_.
    UpdateTrigger interface{}

    // The delta in the adjusted-max-reservable-bandwidth that should trigger an
    // update in the value which is flooded through the IGP TED. The delta is
    // measured as a percentage of the current adjusted value of the maximum
    // reservable bandwidth of the interface, as specified by the
    // adjusted-absolute-subscription-bw RSVP-TE leaf. The type is interface{}
    // with range: 0..100.
    AdjustedMaxReservableBwPct interface{}

    // The change in the calculated SR traffic on the interface that should
    // trigger an update in the value of the maximum reservable bandwidth flooded
    // through the IGP TED. The value is specified as a percentage of the
    // last-calculated-sr-traffic state leaf. The type is interface{} with range:
    // 0..100.
    SrTrafficPct interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "update-trigger"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/openconfig-rsvp-sr-ext:bandwidth-measurement/update-trigger/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("update-trigger", types.YLeaf{"UpdateTrigger", config.UpdateTrigger})
    config.EntityData.Leafs.Append("adjusted-max-reservable-bw-pct", types.YLeaf{"AdjustedMaxReservableBwPct", config.AdjustedMaxReservableBwPct})
    config.EntityData.Leafs.Append("sr-traffic-pct", types.YLeaf{"SrTrafficPct", config.SrTrafficPct})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger_ represents (adjusted-absolute-subscription-bw)
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger_ string

const (
    // Update of a new maximum reservable bandwidth IGP
    // TLV is based on the value changing >= X% of
    // the currently flooded adjusted-absolute-subscription-bw.
    // The percentage of this value that is used is specified
    // by the adjusted-max-reservable-bw-pct leaf.
    NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger__ADJUSTED_MAX_RESERVABLE_PCT NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger_ = "ADJUSTED_MAX_RESERVABLE_PCT"

    // Update of the new maximum reservable bandwidth IGP
    // TLV is based on the value changing >= X% of the last
    // calculated segment routing traffic utilisation for the
    // interface. The percentage delta of this value is
    // specified by the sr-traffic-pct leaf.
    NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger__SR_TRAFFIC_PCT NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_Config_UpdateTrigger_ = "SR_TRAFFIC_PCT"
)

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State
// Operational state parameters related to the bandwidth
// measurement update trigger.
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The trigger that should be used to determine when the IGP TED is updated
    // with new information as to the effective maximum reservable bandwidth
    // (adjusted-absolute-subscription-bw). The type is UpdateTrigger_.
    UpdateTrigger interface{}

    // The delta in the adjusted-max-reservable-bandwidth that should trigger an
    // update in the value which is flooded through the IGP TED. The delta is
    // measured as a percentage of the current adjusted value of the maximum
    // reservable bandwidth of the interface, as specified by the
    // adjusted-absolute-subscription-bw RSVP-TE leaf. The type is interface{}
    // with range: 0..100.
    AdjustedMaxReservableBwPct interface{}

    // The change in the calculated SR traffic on the interface that should
    // trigger an update in the value of the maximum reservable bandwidth flooded
    // through the IGP TED. The value is specified as a percentage of the
    // last-calculated-sr-traffic state leaf. The type is interface{} with range:
    // 0..100.
    SrTrafficPct interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "update-trigger"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-global-attributes/openconfig-rsvp-sr-ext:bandwidth-measurement/update-trigger/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("update-trigger", types.YLeaf{"UpdateTrigger", state.UpdateTrigger})
    state.EntityData.Leafs.Append("adjusted-max-reservable-bw-pct", types.YLeaf{"AdjustedMaxReservableBwPct", state.AdjustedMaxReservableBwPct})
    state.EntityData.Leafs.Append("sr-traffic-pct", types.YLeaf{"SrTrafficPct", state.SrTrafficPct})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger_ represents (adjusted-absolute-subscription-bw)
type NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger_ string

const (
    // Update of a new maximum reservable bandwidth IGP
    // TLV is based on the value changing >= X% of
    // the currently flooded adjusted-absolute-subscription-bw.
    // The percentage of this value that is used is specified
    // by the adjusted-max-reservable-bw-pct leaf.
    NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger__ADJUSTED_MAX_RESERVABLE_PCT NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger_ = "ADJUSTED_MAX_RESERVABLE_PCT"

    // Update of the new maximum reservable bandwidth IGP
    // TLV is based on the value changing >= X% of the last
    // calculated segment routing traffic utilisation for the
    // interface. The percentage delta of this value is
    // specified by the sr-traffic-pct leaf.
    NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger__SR_TRAFFIC_PCT NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_BandwidthMeasurement_UpdateTrigger_State_UpdateTrigger_ = "SR_TRAFFIC_PCT"
)

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes
// traffic engineering attributes specific
// for interfaces
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TE interfaces. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface.
    Interface []*NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface
}

func (teInterfaceAttributes *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes) GetEntityData() *types.CommonEntityData {
    teInterfaceAttributes.EntityData.YFilter = teInterfaceAttributes.YFilter
    teInterfaceAttributes.EntityData.YangName = "te-interface-attributes"
    teInterfaceAttributes.EntityData.BundleName = "openconfig"
    teInterfaceAttributes.EntityData.ParentYangName = "mpls"
    teInterfaceAttributes.EntityData.SegmentPath = "te-interface-attributes"
    teInterfaceAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/" + teInterfaceAttributes.EntityData.SegmentPath
    teInterfaceAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teInterfaceAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teInterfaceAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teInterfaceAttributes.EntityData.Children = types.NewOrderedMap()
    teInterfaceAttributes.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range teInterfaceAttributes.Interface {
        teInterfaceAttributes.EntityData.Children.Append(types.GetSegmentPath(teInterfaceAttributes.Interface[i]), types.YChild{"Interface", teInterfaceAttributes.Interface[i]})
    }
    teInterfaceAttributes.EntityData.Leafs = types.NewOrderedMap()

    teInterfaceAttributes.EntityData.YListKeys = []string {}

    return &(teInterfaceAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface
// List of TE interfaces
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the interface id list key. The type
    // is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_Config_InterfaceId
    InterfaceId interface{}

    // Configuration parameters related to TE interfaces:.
    Config NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_Config

    // State parameters related to TE interfaces.
    State NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef

    // Interface bandwidth change percentages that trigger update events into the
    // IGP traffic engineering database (TED).
    IgpFloodingBandwidth NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth

    // Configuration and operational state parameters relating to per-interface
    // bandwidth measurement. These parameters are used in the case that RSVP-TE
    // coexists with other MPLS signaling protocols on an interface.
    BandwidthMeasurement NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement
}

func (self *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "te-interface-attributes"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceId, "interface-id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Children.Append("igp-flooding-bandwidth", types.YChild{"IgpFloodingBandwidth", &self.IgpFloodingBandwidth})
    self.EntityData.Children.Append("openconfig-rsvp-sr-ext:bandwidth-measurement", types.YChild{"BandwidthMeasurement", &self.BandwidthMeasurement})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", self.InterfaceId})

    self.EntityData.YListKeys = []string {"InterfaceId"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_Config
// Configuration parameters related to TE interfaces:
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Id of the interface. The type is string.
    InterfaceId interface{}

    // TE specific metric for the link. The type is interface{} with range:
    // 0..4294967295.
    TeMetric interface{}

    // list of references to named shared risk link groups that the interface
    // belongs to. The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Name
    SrlgMembership []interface{}

    // list of admin groups (by name) on the interface. The type is slice of
    // string.
    AdminGroup []interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", config.InterfaceId})
    config.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", config.TeMetric})
    config.EntityData.Leafs.Append("srlg-membership", types.YLeaf{"SrlgMembership", config.SrlgMembership})
    config.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", config.AdminGroup})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_State
// State parameters related to TE interfaces
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Id of the interface. The type is string.
    InterfaceId interface{}

    // TE specific metric for the link. The type is interface{} with range:
    // 0..4294967295.
    TeMetric interface{}

    // list of references to named shared risk link groups that the interface
    // belongs to. The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_Srlgs_Srlg_Name
    SrlgMembership []interface{}

    // list of admin groups (by name) on the interface. The type is slice of
    // string.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", state.InterfaceId})
    state.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", state.TeMetric})
    state.EntityData.Leafs.Append("srlg-membership", types.YLeaf{"SrlgMembership", state.SrlgMembership})
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth
// Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters for TED update threshold .
    Config NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config

    // State parameters for TED update threshold .
    State NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State
}

func (igpFloodingBandwidth *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth) GetEntityData() *types.CommonEntityData {
    igpFloodingBandwidth.EntityData.YFilter = igpFloodingBandwidth.YFilter
    igpFloodingBandwidth.EntityData.YangName = "igp-flooding-bandwidth"
    igpFloodingBandwidth.EntityData.BundleName = "openconfig"
    igpFloodingBandwidth.EntityData.ParentYangName = "interface"
    igpFloodingBandwidth.EntityData.SegmentPath = "igp-flooding-bandwidth"
    igpFloodingBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/" + igpFloodingBandwidth.EntityData.SegmentPath
    igpFloodingBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    igpFloodingBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    igpFloodingBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    igpFloodingBandwidth.EntityData.Children = types.NewOrderedMap()
    igpFloodingBandwidth.EntityData.Children.Append("config", types.YChild{"Config", &igpFloodingBandwidth.Config})
    igpFloodingBandwidth.EntityData.Children.Append("state", types.YChild{"State", &igpFloodingBandwidth.State})
    igpFloodingBandwidth.EntityData.Leafs = types.NewOrderedMap()

    igpFloodingBandwidth.EntityData.YListKeys = []string {}

    return &(igpFloodingBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config
// Configuration parameters for TED
// update threshold 
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of threshold that should be used to specify the values at which
    // bandwidth is flooded. DELTA indicates that the local system should flood
    // IGP updates when a change in reserved bandwidth >= the specified delta
    // occurs on the interface. Where THRESHOLD_CROSSED is specified, the local
    // system should trigger an update (and hence flood) the reserved bandwidth
    // when the reserved bandwidth changes such that it crosses, or becomes equal
    // to one of the threshold values. The type is ThresholdType.
    ThresholdType interface{}

    // The percentage of the maximum-reservable-bandwidth considered as the delta
    // that results in an IGP update being flooded. The type is interface{} with
    // range: 0..100.
    DeltaPercentage interface{}

    // This value specifies whether a single set of threshold values should be
    // used for both increasing and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded in the IGP TE extensions.
    // MIRRORED-UP-DOWN indicates that a single value (or set of values) should be
    // used for both increasing and decreasing values, where SEPARATE-UP-DOWN
    // specifies that the increasing and decreasing values will be separately
    // specified. The type is ThresholdSpecification.
    ThresholdSpecification interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth) at which bandwidth updates are to be triggered when the
    // bandwidth is increasing. The type is slice of interface{} with range:
    // 0..100.
    UpThresholds []interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth) at which bandwidth updates are to be triggered when the
    // bandwidth is decreasing. The type is slice of interface{} with range:
    // 0..100.
    DownThresholds []interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth of the interface) at which bandwidth updates are flooded - used
    // both when the bandwidth is increasing and decreasing. The type is slice of
    // interface{} with range: 0..100.
    UpDownThresholds []interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "igp-flooding-bandwidth"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("threshold-type", types.YLeaf{"ThresholdType", config.ThresholdType})
    config.EntityData.Leafs.Append("delta-percentage", types.YLeaf{"DeltaPercentage", config.DeltaPercentage})
    config.EntityData.Leafs.Append("threshold-specification", types.YLeaf{"ThresholdSpecification", config.ThresholdSpecification})
    config.EntityData.Leafs.Append("up-thresholds", types.YLeaf{"UpThresholds", config.UpThresholds})
    config.EntityData.Leafs.Append("down-thresholds", types.YLeaf{"DownThresholds", config.DownThresholds})
    config.EntityData.Leafs.Append("up-down-thresholds", types.YLeaf{"UpDownThresholds", config.UpDownThresholds})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification represents and decreasing values will be separately specified
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification string

const (
    // MIRRORED_UP_DOWN indicates that a single set of
    // threshold values should be used for both increasing
    // and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded
    // in the IGP TE extensions.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification_MIRRORED_UP_DOWN NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification = "MIRRORED_UP_DOWN"

    // SEPARATE_UP_DOWN indicates that a separate
    // threshold values should be used for the increasing
    // and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded
    // in the IGP TE extensions.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification_SEPARATE_UP_DOWN NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdSpecification = "SEPARATE_UP_DOWN"
)

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType represents values
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType string

const (
    // DELTA indicates that the local
    // system should flood IGP updates when a
    // change in reserved bandwidth >= the specified
    // delta occurs on the interface.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType_DELTA NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType = "DELTA"

    // THRESHOLD-CROSSED indicates that
    // the local system should trigger an update (and
    // hence flood) the reserved bandwidth when the
    // reserved bandwidth changes such that it crosses,
    // or becomes equal to one of the threshold values.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType_THRESHOLD_CROSSED NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_Config_ThresholdType = "THRESHOLD_CROSSED"
)

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State
// State parameters for TED update threshold 
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of threshold that should be used to specify the values at which
    // bandwidth is flooded. DELTA indicates that the local system should flood
    // IGP updates when a change in reserved bandwidth >= the specified delta
    // occurs on the interface. Where THRESHOLD_CROSSED is specified, the local
    // system should trigger an update (and hence flood) the reserved bandwidth
    // when the reserved bandwidth changes such that it crosses, or becomes equal
    // to one of the threshold values. The type is ThresholdType.
    ThresholdType interface{}

    // The percentage of the maximum-reservable-bandwidth considered as the delta
    // that results in an IGP update being flooded. The type is interface{} with
    // range: 0..100.
    DeltaPercentage interface{}

    // This value specifies whether a single set of threshold values should be
    // used for both increasing and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded in the IGP TE extensions.
    // MIRRORED-UP-DOWN indicates that a single value (or set of values) should be
    // used for both increasing and decreasing values, where SEPARATE-UP-DOWN
    // specifies that the increasing and decreasing values will be separately
    // specified. The type is ThresholdSpecification.
    ThresholdSpecification interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth) at which bandwidth updates are to be triggered when the
    // bandwidth is increasing. The type is slice of interface{} with range:
    // 0..100.
    UpThresholds []interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth) at which bandwidth updates are to be triggered when the
    // bandwidth is decreasing. The type is slice of interface{} with range:
    // 0..100.
    DownThresholds []interface{}

    // The thresholds (expressed as a percentage of the maximum reservable
    // bandwidth of the interface) at which bandwidth updates are flooded - used
    // both when the bandwidth is increasing and decreasing. The type is slice of
    // interface{} with range: 0..100.
    UpDownThresholds []interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "igp-flooding-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("threshold-type", types.YLeaf{"ThresholdType", state.ThresholdType})
    state.EntityData.Leafs.Append("delta-percentage", types.YLeaf{"DeltaPercentage", state.DeltaPercentage})
    state.EntityData.Leafs.Append("threshold-specification", types.YLeaf{"ThresholdSpecification", state.ThresholdSpecification})
    state.EntityData.Leafs.Append("up-thresholds", types.YLeaf{"UpThresholds", state.UpThresholds})
    state.EntityData.Leafs.Append("down-thresholds", types.YLeaf{"DownThresholds", state.DownThresholds})
    state.EntityData.Leafs.Append("up-down-thresholds", types.YLeaf{"UpDownThresholds", state.UpDownThresholds})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification represents and decreasing values will be separately specified
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification string

const (
    // MIRRORED_UP_DOWN indicates that a single set of
    // threshold values should be used for both increasing
    // and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded
    // in the IGP TE extensions.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification_MIRRORED_UP_DOWN NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification = "MIRRORED_UP_DOWN"

    // SEPARATE_UP_DOWN indicates that a separate
    // threshold values should be used for the increasing
    // and decreasing bandwidth when determining whether
    // to trigger updated bandwidth values to be flooded
    // in the IGP TE extensions.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification_SEPARATE_UP_DOWN NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdSpecification = "SEPARATE_UP_DOWN"
)

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType represents values
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType string

const (
    // DELTA indicates that the local
    // system should flood IGP updates when a
    // change in reserved bandwidth >= the specified
    // delta occurs on the interface.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType_DELTA NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType = "DELTA"

    // THRESHOLD-CROSSED indicates that
    // the local system should trigger an update (and
    // hence flood) the reserved bandwidth when the
    // reserved bandwidth changes such that it crosses,
    // or becomes equal to one of the threshold values.
    NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType_THRESHOLD_CROSSED NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_IgpFloodingBandwidth_State_ThresholdType = "THRESHOLD_CROSSED"
)

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement
// Configuration and operational state parameters relating to
// per-interface bandwidth measurement. These parameters are
// used in the case that RSVP-TE coexists with other MPLS
// signaling protocols on an interface.
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state parameters relating to the containing interface's
    // bandwidth measurement.
    State NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement_State
}

func (bandwidthMeasurement *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement) GetEntityData() *types.CommonEntityData {
    bandwidthMeasurement.EntityData.YFilter = bandwidthMeasurement.YFilter
    bandwidthMeasurement.EntityData.YangName = "bandwidth-measurement"
    bandwidthMeasurement.EntityData.BundleName = "openconfig"
    bandwidthMeasurement.EntityData.ParentYangName = "interface"
    bandwidthMeasurement.EntityData.SegmentPath = "openconfig-rsvp-sr-ext:bandwidth-measurement"
    bandwidthMeasurement.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/" + bandwidthMeasurement.EntityData.SegmentPath
    bandwidthMeasurement.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthMeasurement.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthMeasurement.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthMeasurement.EntityData.Children = types.NewOrderedMap()
    bandwidthMeasurement.EntityData.Children.Append("state", types.YChild{"State", &bandwidthMeasurement.State})
    bandwidthMeasurement.EntityData.Leafs = types.NewOrderedMap()

    bandwidthMeasurement.EntityData.YListKeys = []string {}

    return &(bandwidthMeasurement.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement_State
// Operational state parameters relating to the containing
// interface's bandwidth measurement.
type NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The time at which the last sample of bandwidth utilisation for both RSVP-TE
    // and non-RSVP-TE traffic was taken. This value is represented in nanoseconds
    // since the Unix epoch. The type is interface{} with range:
    // 0..18446744073709551615.
    LastSampleTime interface{}

    // The measured RSVP-TE bandwidth utilisation at the last sample (whose time
    // is indicated in last-sample-time). This value is expressed as a 64-bit
    // unsigned integer representing the number of kilobits per second that
    // RSVP-TE traffic is consuming on the interface. The type is interface{} with
    // range: 0..18446744073709551615. Units are kbps.
    LastSampleMeasuredRsvpUtil interface{}

    // The measured Segment Routing bandwidth utilisation at the last sample
    // (whose time is indicated in last-sample-time). This value is expressed as a
    // 64-bit unsigned integer representing the number of kilobits per second that
    // Segment Routing traffic is consuming on the interface. The type is
    // interface{} with range: 0..18446744073709551615. Units are kbps.
    LastSampleMeasuredSrUtil interface{}

    // The time at which the last calculated value for bandwidth utilisation was
    // performed. The type is interface{} with range: 0..18446744073709551615.
    LastCalculatedTime interface{}

    // The last calculated value of the Segment Routing  utilisation (taken post
    // any averaging or adjustment that occurs). This value is updated regardless
    // of whether the value was flooded or not. The type is interface{} with
    // range: 0..18446744073709551615.
    LastCalculatedSrUtilisation interface{}

    // The time, expressed in nanoseconds since the epoch, at which the bandwidth
    // utilisation of non-RSVP-TE traffic resulted in the value being flooded in
    // the IGP. If the configuration of the local system specifies a 0% change
    // requires flooding, this leaf will always reflect the value of the
    // last-calculated-time. In systems that have suppression due to a >0% delta
    // being required then it indicates the last time that the percentage
    // threshold was exceeded. The type is interface{} with range:
    // 0..18446744073709551615.
    LastFloodedTime interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes_Interface_BandwidthMeasurement_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-measurement"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/te-interface-attributes/interface/openconfig-rsvp-sr-ext:bandwidth-measurement/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("last-sample-time", types.YLeaf{"LastSampleTime", state.LastSampleTime})
    state.EntityData.Leafs.Append("last-sample-measured-rsvp-util", types.YLeaf{"LastSampleMeasuredRsvpUtil", state.LastSampleMeasuredRsvpUtil})
    state.EntityData.Leafs.Append("last-sample-measured-sr-util", types.YLeaf{"LastSampleMeasuredSrUtil", state.LastSampleMeasuredSrUtil})
    state.EntityData.Leafs.Append("last-calculated-time", types.YLeaf{"LastCalculatedTime", state.LastCalculatedTime})
    state.EntityData.Leafs.Append("last-calculated-sr-utilisation", types.YLeaf{"LastCalculatedSrUtilisation", state.LastCalculatedSrUtilisation})
    state.EntityData.Leafs.Append("last-flooded-time", types.YLeaf{"LastFloodedTime", state.LastFloodedTime})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols
// top-level signaling protocol configuration
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP-TE global signaling protocol configuration.
    RsvpTe NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe

    // LDP global signaling configuration.
    Ldp NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp

    // MPLS-specific Segment Routing configuration and operational state
    // parameters.
    SegmentRouting NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting
}

func (signalingProtocols *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetEntityData() *types.CommonEntityData {
    signalingProtocols.EntityData.YFilter = signalingProtocols.YFilter
    signalingProtocols.EntityData.YangName = "signaling-protocols"
    signalingProtocols.EntityData.BundleName = "openconfig"
    signalingProtocols.EntityData.ParentYangName = "mpls"
    signalingProtocols.EntityData.SegmentPath = "signaling-protocols"
    signalingProtocols.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/" + signalingProtocols.EntityData.SegmentPath
    signalingProtocols.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    signalingProtocols.EntityData.NamespaceTable = openconfig.GetNamespaces()
    signalingProtocols.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    signalingProtocols.EntityData.Children = types.NewOrderedMap()
    signalingProtocols.EntityData.Children.Append("rsvp-te", types.YChild{"RsvpTe", &signalingProtocols.RsvpTe})
    signalingProtocols.EntityData.Children.Append("ldp", types.YChild{"Ldp", &signalingProtocols.Ldp})
    signalingProtocols.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &signalingProtocols.SegmentRouting})
    signalingProtocols.EntityData.Leafs = types.NewOrderedMap()

    signalingProtocols.EntityData.YListKeys = []string {}

    return &(signalingProtocols.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe
// RSVP-TE global signaling protocol configuration
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enclosing container for sessions.
    Sessions NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions

    // Configuration and state for RSVP neighbors connecting to the device.
    Neighbors NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors

    // Platform wide RSVP configuration and state.
    Global NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global

    // Attributes relating to RSVP-TE enabled interfaces.
    InterfaceAttributes NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes
}

func (rsvpTe *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetEntityData() *types.CommonEntityData {
    rsvpTe.EntityData.YFilter = rsvpTe.YFilter
    rsvpTe.EntityData.YangName = "rsvp-te"
    rsvpTe.EntityData.BundleName = "openconfig"
    rsvpTe.EntityData.ParentYangName = "signaling-protocols"
    rsvpTe.EntityData.SegmentPath = "rsvp-te"
    rsvpTe.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/" + rsvpTe.EntityData.SegmentPath
    rsvpTe.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    rsvpTe.EntityData.NamespaceTable = openconfig.GetNamespaces()
    rsvpTe.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    rsvpTe.EntityData.Children = types.NewOrderedMap()
    rsvpTe.EntityData.Children.Append("sessions", types.YChild{"Sessions", &rsvpTe.Sessions})
    rsvpTe.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &rsvpTe.Neighbors})
    rsvpTe.EntityData.Children.Append("global", types.YChild{"Global", &rsvpTe.Global})
    rsvpTe.EntityData.Children.Append("interface-attributes", types.YChild{"InterfaceAttributes", &rsvpTe.InterfaceAttributes})
    rsvpTe.EntityData.Leafs = types.NewOrderedMap()

    rsvpTe.EntityData.YListKeys = []string {}

    return &(rsvpTe.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions
// Enclosing container for sessions
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of RSVP sessions. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session.
    Session []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session
}

func (sessions *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "openconfig"
    sessions.EntityData.ParentYangName = "rsvp-te"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    sessions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Children.Append("session", types.YChild{"Session", nil})
    for i := range sessions.Session {
        sessions.EntityData.Children.Append(types.GetSegmentPath(sessions.Session[i]), types.YChild{"Session", sessions.Session[i]})
    }
    sessions.EntityData.Leafs = types.NewOrderedMap()

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session
// List of RSVP sessions
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the local index for the RSVP session.
    // The type is string with range: 0..18446744073709551615. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LocalIndex
    LocalIndex interface{}

    // Enclosing container for MPLS RRO objects associated with the traffic
    // engineered tunnel.
    RecordRouteObjects NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects

    // Operational state parameters relating to the RSVP session.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State
}

func (session *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "openconfig"
    session.EntityData.ParentYangName = "sessions"
    session.EntityData.SegmentPath = "session" + types.AddKeyToken(session.LocalIndex, "local-index")
    session.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    session.EntityData.NamespaceTable = openconfig.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("record-route-objects", types.YChild{"RecordRouteObjects", &session.RecordRouteObjects})
    session.EntityData.Children.Append("state", types.YChild{"State", &session.State})
    session.EntityData.Leafs = types.NewOrderedMap()
    session.EntityData.Leafs.Append("local-index", types.YLeaf{"LocalIndex", session.LocalIndex})

    session.EntityData.YListKeys = []string {"LocalIndex"}

    return &(session.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects
// Enclosing container for MPLS RRO objects associated with the
// traffic engineered tunnel.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Read-only list of record route objects associated with the traffic
    // engineered tunnel. Each entry in the list may contain a hop IP address,
    // MPLS label allocated at the hop, and the flags associated with the entry.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject.
    RecordRouteObject []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject
}

func (recordRouteObjects *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects) GetEntityData() *types.CommonEntityData {
    recordRouteObjects.EntityData.YFilter = recordRouteObjects.YFilter
    recordRouteObjects.EntityData.YangName = "record-route-objects"
    recordRouteObjects.EntityData.BundleName = "openconfig"
    recordRouteObjects.EntityData.ParentYangName = "session"
    recordRouteObjects.EntityData.SegmentPath = "record-route-objects"
    recordRouteObjects.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/" + recordRouteObjects.EntityData.SegmentPath
    recordRouteObjects.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    recordRouteObjects.EntityData.NamespaceTable = openconfig.GetNamespaces()
    recordRouteObjects.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    recordRouteObjects.EntityData.Children = types.NewOrderedMap()
    recordRouteObjects.EntityData.Children.Append("record-route-object", types.YChild{"RecordRouteObject", nil})
    for i := range recordRouteObjects.RecordRouteObject {
        recordRouteObjects.EntityData.Children.Append(types.GetSegmentPath(recordRouteObjects.RecordRouteObject[i]), types.YChild{"RecordRouteObject", recordRouteObjects.RecordRouteObject[i]})
    }
    recordRouteObjects.EntityData.Leafs = types.NewOrderedMap()

    recordRouteObjects.EntityData.YListKeys = []string {}

    return &(recordRouteObjects.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject
// Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the index of the record route object.
    // The index is used to indicate the ordering of hops in the path. The type is
    // string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_Index
    Index interface{}

    // Information related to RRO objects. The hop, label, and optional flags are
    // present for each entry in the list.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State
}

func (recordRouteObject *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject) GetEntityData() *types.CommonEntityData {
    recordRouteObject.EntityData.YFilter = recordRouteObject.YFilter
    recordRouteObject.EntityData.YangName = "record-route-object"
    recordRouteObject.EntityData.BundleName = "openconfig"
    recordRouteObject.EntityData.ParentYangName = "record-route-objects"
    recordRouteObject.EntityData.SegmentPath = "record-route-object" + types.AddKeyToken(recordRouteObject.Index, "index")
    recordRouteObject.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/" + recordRouteObject.EntityData.SegmentPath
    recordRouteObject.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    recordRouteObject.EntityData.NamespaceTable = openconfig.GetNamespaces()
    recordRouteObject.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    recordRouteObject.EntityData.Children = types.NewOrderedMap()
    recordRouteObject.EntityData.Children.Append("state", types.YChild{"State", &recordRouteObject.State})
    recordRouteObject.EntityData.Leafs = types.NewOrderedMap()
    recordRouteObject.EntityData.Leafs.Append("index", types.YLeaf{"Index", recordRouteObject.Index})

    recordRouteObject.EntityData.YListKeys = []string {"Index"}

    return &(recordRouteObject.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State
// Information related to RRO objects. The hop, label, and
// optional flags are present for each entry in the list.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Index of object in the list. Used for ordering. The type is interface{}
    // with range: 0..255.
    Index interface{}

    // IP router hop for RRO entry. The type is one of the following types: string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Address interface{}

    // Label reported for RRO hop. The type is one of the following types: int
    // with range: 16..1048575, or enumeration MplsLabel.
    ReportedLabel interface{}

    // Subobject flags for MPLS label. The type is interface{} with range: 0..255.
    ReportedFlags interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "record-route-object"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("address", types.YLeaf{"Address", state.Address})
    state.EntityData.Leafs.Append("reported-label", types.YLeaf{"ReportedLabel", state.ReportedLabel})
    state.EntityData.Leafs.Append("reported-flags", types.YLeaf{"ReportedFlags", state.ReportedFlags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State
// Operational state parameters relating to the
// RSVP session
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The index used to identify the RSVP session on the local network element.
    // This index is generated by the device and is unique only to the local
    // network element. The type is interface{} with range:
    // 0..18446744073709551615.
    LocalIndex interface{}

    // Origin address of RSVP session. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    SourceAddress interface{}

    // Destination address of RSVP session. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    DestinationAddress interface{}

    // The tunnel ID is an identifier used in the RSVP session, which remains
    // constant over the life of the tunnel. The type is interface{} with range:
    // 0..65535.
    TunnelId interface{}

    // The LSP ID distinguishes between two LSPs originated from the same headend,
    // and is commonly used to distinguish RSVP sessions during make before break
    // operations. The type is interface{} with range: 0..65535.
    LspId interface{}

    // The signaled name of this RSVP session. The type is string.
    SessionName interface{}

    // Enumeration of RSVP session states. The type is Status.
    Status interface{}

    // The type/role of the RSVP session, signifing the session's role on the
    // current device, such as a transit session vs. an ingress session. The type
    // is one of the following: INGRESSEGRESSTRANSIT.
    Type interface{}

    // The type of protection requested for the RSVP session. The type is one of
    // the following:
    // LINKPROTECTIONREQUIREDLINKNODEPROTECTIONREQUESTEDUNPROTECTED.
    ProtectionRequested interface{}

    // Incoming MPLS label associated with this RSVP session. The type is one of
    // the following types: int with range: 16..1048575, or enumeration MplsLabel.
    LabelIn interface{}

    // Outgoing MPLS label associated with this RSVP session. The type is one of
    // the following types: int with range: 16..1048575, or enumeration MplsLabel.
    LabelOut interface{}

    // Operational state statistics relating to the SENDER_TSPEC received for the
    // RSVP session.
    SenderTspec NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "session"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("sender-tspec", types.YChild{"SenderTspec", &state.SenderTspec})
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-index", types.YLeaf{"LocalIndex", state.LocalIndex})
    state.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", state.SourceAddress})
    state.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", state.DestinationAddress})
    state.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", state.TunnelId})
    state.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", state.LspId})
    state.EntityData.Leafs.Append("session-name", types.YLeaf{"SessionName", state.SessionName})
    state.EntityData.Leafs.Append("status", types.YLeaf{"Status", state.Status})
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("protection-requested", types.YLeaf{"ProtectionRequested", state.ProtectionRequested})
    state.EntityData.Leafs.Append("label-in", types.YLeaf{"LabelIn", state.LabelIn})
    state.EntityData.Leafs.Append("label-out", types.YLeaf{"LabelOut", state.LabelOut})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec
// Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The rate at which the head-end device generates traffic, expressed in bytes
    // per second. The type is string with length: 32..32. Units are Bps.
    Rate interface{}

    // The size of the token bucket that is used to determine the rate at which
    // the head-end device generates traffic, expressed in bytes per second. The
    // type is string with length: 32..32. Units are bytes per second.
    Size interface{}

    // The maximum traffic generation rate that the head-end device sends traffic
    // at. The type is one of the following types: string with length: 32..32
    // Units are bytes per second., or enumeration
    // NetworkInstances.NetworkInstance.Mpls.SignalingProtocols.RsvpTe.Sessions.Session.State.SenderTspec.PeakDataRate
    // Units are bytes per second..
    PeakDataRate interface{}
}

func (senderTspec *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec) GetEntityData() *types.CommonEntityData {
    senderTspec.EntityData.YFilter = senderTspec.YFilter
    senderTspec.EntityData.YangName = "sender-tspec"
    senderTspec.EntityData.BundleName = "openconfig"
    senderTspec.EntityData.ParentYangName = "state"
    senderTspec.EntityData.SegmentPath = "sender-tspec"
    senderTspec.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/" + senderTspec.EntityData.SegmentPath
    senderTspec.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    senderTspec.EntityData.NamespaceTable = openconfig.GetNamespaces()
    senderTspec.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    senderTspec.EntityData.Children = types.NewOrderedMap()
    senderTspec.EntityData.Leafs = types.NewOrderedMap()
    senderTspec.EntityData.Leafs.Append("rate", types.YLeaf{"Rate", senderTspec.Rate})
    senderTspec.EntityData.Leafs.Append("size", types.YLeaf{"Size", senderTspec.Size})
    senderTspec.EntityData.Leafs.Append("peak-data-rate", types.YLeaf{"PeakDataRate", senderTspec.PeakDataRate})

    senderTspec.EntityData.YListKeys = []string {}

    return &(senderTspec.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec_PeakDataRate represents device sends traffic at.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec_PeakDataRate string

const (
    // The head-end device has no maximum data rate.
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec_PeakDataRate_INFINITY NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_SenderTspec_PeakDataRate = "INFINITY"
)

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status represents Enumeration of RSVP session states
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status string

const (
    // RSVP session is up
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status_UP NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status = "UP"

    // RSVP session is down
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status_DOWN NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_Status = "DOWN"
)

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors
// Configuration and state for RSVP neighbors connecting
// to the device
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of RSVP neighbors of the local system. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor.
    Neighbor []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "rsvp-te"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor
// List of RSVP neighbors of the local system
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the address of the RSVP neighbor. The
    // type is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Address interface{}

    // Operational state parameters relating to the RSVP neighbor.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State
}

func (neighbor *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.Address, "address")
    neighbor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("address", types.YLeaf{"Address", neighbor.Address})

    neighbor.EntityData.YListKeys = []string {"Address"}

    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State
// Operational state parameters relating to the
// RSVP neighbor
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address of RSVP neighbor. The type is one of the following types: string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Address interface{}

    // Interface where RSVP neighbor was detected. The type is string.
    DetectedInterface interface{}

    // Enumuration of possible RSVP neighbor states. The type is NeighborStatus.
    NeighborStatus interface{}

    // Suppport of neighbor for RSVP refresh reduction. The type is bool.
    RefreshReduction interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("address", types.YLeaf{"Address", state.Address})
    state.EntityData.Leafs.Append("detected-interface", types.YLeaf{"DetectedInterface", state.DetectedInterface})
    state.EntityData.Leafs.Append("neighbor-status", types.YLeaf{"NeighborStatus", state.NeighborStatus})
    state.EntityData.Leafs.Append("refresh-reduction", types.YLeaf{"RefreshReduction", state.RefreshReduction})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus represents Enumuration of possible RSVP neighbor states
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus string

const (
    // RSVP hello messages are detected from the neighbor
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus_UP NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus = "UP"

    // RSVP neighbor not detected as up, due to a
    // communication failure or IGP notification
    // the neighbor is unavailable
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus_DOWN NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors_Neighbor_State_NeighborStatus = "DOWN"
)

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global
// Platform wide RSVP configuration and state
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state and configuration parameters relating to graceful-restart
    // for RSVP.
    GracefulRestart NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart

    // Protocol options relating to RSVP soft preemption.
    SoftPreemption NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption

    // Top level container for RSVP hello parameters.
    Hellos NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos

    // Platform wide RSVP state, including counters.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State
}

func (global *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "rsvp-te"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &global.GracefulRestart})
    global.EntityData.Children.Append("soft-preemption", types.YChild{"SoftPreemption", &global.SoftPreemption})
    global.EntityData.Children.Append("hellos", types.YChild{"Hellos", &global.Hellos})
    global.EntityData.Children.Append("state", types.YChild{"State", &global.State})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart
// Operational state and configuration parameters relating to
// graceful-restart for RSVP
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config

    // State information associated with RSVP graceful-restart.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config
// Configuration parameters relating to
// graceful-restart
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables graceful restart on the node. The type is bool. The default value
    // is false.
    Enable interface{}

    // Graceful restart time (seconds). The type is interface{} with range:
    // 0..4294967295.
    RestartTime interface{}

    // RSVP state recovery time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTime interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", config.Enable})
    config.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", config.RestartTime})
    config.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", config.RecoveryTime})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State
// State information associated with
// RSVP graceful-restart
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables graceful restart on the node. The type is bool. The default value
    // is false.
    Enable interface{}

    // Graceful restart time (seconds). The type is interface{} with range:
    // 0..4294967295.
    RestartTime interface{}

    // RSVP state recovery time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTime interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", state.Enable})
    state.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", state.RestartTime})
    state.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", state.RecoveryTime})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption
// Protocol options relating to RSVP
// soft preemption
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to RSVP soft preemption support.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config

    // State parameters relating to RSVP soft preemption support.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State
}

func (softPreemption *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetEntityData() *types.CommonEntityData {
    softPreemption.EntityData.YFilter = softPreemption.YFilter
    softPreemption.EntityData.YangName = "soft-preemption"
    softPreemption.EntityData.BundleName = "openconfig"
    softPreemption.EntityData.ParentYangName = "global"
    softPreemption.EntityData.SegmentPath = "soft-preemption"
    softPreemption.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/" + softPreemption.EntityData.SegmentPath
    softPreemption.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    softPreemption.EntityData.NamespaceTable = openconfig.GetNamespaces()
    softPreemption.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    softPreemption.EntityData.Children = types.NewOrderedMap()
    softPreemption.EntityData.Children.Append("config", types.YChild{"Config", &softPreemption.Config})
    softPreemption.EntityData.Children.Append("state", types.YChild{"State", &softPreemption.State})
    softPreemption.EntityData.Leafs = types.NewOrderedMap()

    softPreemption.EntityData.YListKeys = []string {}

    return &(softPreemption.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config
// Configuration parameters relating to RSVP
// soft preemption support
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables soft preemption on a node. The type is bool. The default value is
    // false.
    Enable interface{}

    // Timeout value for soft preemption to revert to hard preemption. The default
    // timeout for soft-preemption is 30 seconds - after which the local system
    // reverts to hard pre-emption. The type is interface{} with range: 0..65535.
    // The default value is 30.
    SoftPreemptionTimeout interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "soft-preemption"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", config.Enable})
    config.EntityData.Leafs.Append("soft-preemption-timeout", types.YLeaf{"SoftPreemptionTimeout", config.SoftPreemptionTimeout})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State
// State parameters relating to RSVP
// soft preemption support
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables soft preemption on a node. The type is bool. The default value is
    // false.
    Enable interface{}

    // Timeout value for soft preemption to revert to hard preemption. The default
    // timeout for soft-preemption is 30 seconds - after which the local system
    // reverts to hard pre-emption. The type is interface{} with range: 0..65535.
    // The default value is 30.
    SoftPreemptionTimeout interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "soft-preemption"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", state.Enable})
    state.EntityData.Leafs.Append("soft-preemption-timeout", types.YLeaf{"SoftPreemptionTimeout", state.SoftPreemptionTimeout})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos
// Top level container for RSVP hello parameters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to RSVP hellos.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config

    // State information associated with RSVP hellos.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State
}

func (hellos *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetEntityData() *types.CommonEntityData {
    hellos.EntityData.YFilter = hellos.YFilter
    hellos.EntityData.YangName = "hellos"
    hellos.EntityData.BundleName = "openconfig"
    hellos.EntityData.ParentYangName = "global"
    hellos.EntityData.SegmentPath = "hellos"
    hellos.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/" + hellos.EntityData.SegmentPath
    hellos.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    hellos.EntityData.NamespaceTable = openconfig.GetNamespaces()
    hellos.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    hellos.EntityData.Children = types.NewOrderedMap()
    hellos.EntityData.Children.Append("config", types.YChild{"Config", &hellos.Config})
    hellos.EntityData.Children.Append("state", types.YChild{"State", &hellos.State})
    hellos.EntityData.Leafs = types.NewOrderedMap()

    hellos.EntityData.YListKeys = []string {}

    return &(hellos.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config
// Configuration parameters relating to RSVP
// hellos
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set the interval in ms between RSVP hello messages. The type is interface{}
    // with range: 1000..60000. Units are milliseconds. The default value is 9000.
    HelloInterval interface{}

    // enables all RSVP refresh reduction message bundling, RSVP message ID,
    // reliable message delivery and summary refresh. The type is bool. The
    // default value is true.
    RefreshReduction interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "hellos"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", config.HelloInterval})
    config.EntityData.Leafs.Append("refresh-reduction", types.YLeaf{"RefreshReduction", config.RefreshReduction})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State
// State information associated with RSVP hellos
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set the interval in ms between RSVP hello messages. The type is interface{}
    // with range: 1000..60000. Units are milliseconds. The default value is 9000.
    HelloInterval interface{}

    // enables all RSVP refresh reduction message bundling, RSVP message ID,
    // reliable message delivery and summary refresh. The type is bool. The
    // default value is true.
    RefreshReduction interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hellos"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", state.HelloInterval})
    state.EntityData.Leafs.Append("refresh-reduction", types.YLeaf{"RefreshReduction", state.RefreshReduction})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State
// Platform wide RSVP state, including counters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Platform wide RSVP statistics and counters.
    Counters NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("counters", types.YChild{"Counters", &state.Counters})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters
// Platform wide RSVP statistics and counters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TODO. The type is interface{} with range: 0..18446744073709551615.
    PathTimeouts interface{}

    // TODO. The type is interface{} with range: 0..18446744073709551615.
    ReservationTimeouts interface{}

    // RSVP messages dropped due to rate limiting. The type is interface{} with
    // range: 0..18446744073709551615.
    RateLimitedMessages interface{}

    // Number of received RSVP Path messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InPathMessages interface{}

    // Number of received RSVP Path Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Number of received RSVP Path Tear messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Number of received RSVP Resv messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InReservationMessages interface{}

    // Number of received RSVP Resv Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Number of received RSVP Resv Tear messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Number of received RSVP hello messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InHelloMessages interface{}

    // Number of received RSVP summary refresh messages. The type is interface{}
    // with range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Number of received RSVP refresh reduction ack messages. The type is
    // interface{} with range: 0..18446744073709551615.
    InAckMessages interface{}

    // Number of sent RSVP PATH messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathMessages interface{}

    // Number of sent RSVP Path Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Number of sent RSVP Path Tear messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Number of sent RSVP Resv messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutReservationMessages interface{}

    // Number of sent RSVP Resv Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Number of sent RSVP Resv Tear messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Number of sent RSVP hello messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutHelloMessages interface{}

    // Number of sent RSVP summary refresh messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Number of sent RSVP refresh reduction ack messages. The type is interface{}
    // with range: 0..18446744073709551615.
    OutAckMessages interface{}
}

func (counters *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "openconfig"
    counters.EntityData.ParentYangName = "state"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    counters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("path-timeouts", types.YLeaf{"PathTimeouts", counters.PathTimeouts})
    counters.EntityData.Leafs.Append("reservation-timeouts", types.YLeaf{"ReservationTimeouts", counters.ReservationTimeouts})
    counters.EntityData.Leafs.Append("rate-limited-messages", types.YLeaf{"RateLimitedMessages", counters.RateLimitedMessages})
    counters.EntityData.Leafs.Append("in-path-messages", types.YLeaf{"InPathMessages", counters.InPathMessages})
    counters.EntityData.Leafs.Append("in-path-error-messages", types.YLeaf{"InPathErrorMessages", counters.InPathErrorMessages})
    counters.EntityData.Leafs.Append("in-path-tear-messages", types.YLeaf{"InPathTearMessages", counters.InPathTearMessages})
    counters.EntityData.Leafs.Append("in-reservation-messages", types.YLeaf{"InReservationMessages", counters.InReservationMessages})
    counters.EntityData.Leafs.Append("in-reservation-error-messages", types.YLeaf{"InReservationErrorMessages", counters.InReservationErrorMessages})
    counters.EntityData.Leafs.Append("in-reservation-tear-messages", types.YLeaf{"InReservationTearMessages", counters.InReservationTearMessages})
    counters.EntityData.Leafs.Append("in-hello-messages", types.YLeaf{"InHelloMessages", counters.InHelloMessages})
    counters.EntityData.Leafs.Append("in-srefresh-messages", types.YLeaf{"InSrefreshMessages", counters.InSrefreshMessages})
    counters.EntityData.Leafs.Append("in-ack-messages", types.YLeaf{"InAckMessages", counters.InAckMessages})
    counters.EntityData.Leafs.Append("out-path-messages", types.YLeaf{"OutPathMessages", counters.OutPathMessages})
    counters.EntityData.Leafs.Append("out-path-error-messages", types.YLeaf{"OutPathErrorMessages", counters.OutPathErrorMessages})
    counters.EntityData.Leafs.Append("out-path-tear-messages", types.YLeaf{"OutPathTearMessages", counters.OutPathTearMessages})
    counters.EntityData.Leafs.Append("out-reservation-messages", types.YLeaf{"OutReservationMessages", counters.OutReservationMessages})
    counters.EntityData.Leafs.Append("out-reservation-error-messages", types.YLeaf{"OutReservationErrorMessages", counters.OutReservationErrorMessages})
    counters.EntityData.Leafs.Append("out-reservation-tear-messages", types.YLeaf{"OutReservationTearMessages", counters.OutReservationTearMessages})
    counters.EntityData.Leafs.Append("out-hello-messages", types.YLeaf{"OutHelloMessages", counters.OutHelloMessages})
    counters.EntityData.Leafs.Append("out-srefresh-messages", types.YLeaf{"OutSrefreshMessages", counters.OutSrefreshMessages})
    counters.EntityData.Leafs.Append("out-ack-messages", types.YLeaf{"OutAckMessages", counters.OutAckMessages})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes
// Attributes relating to RSVP-TE enabled interfaces
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of per-interface RSVP configurations. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface.
    Interface []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface
}

func (interfaceAttributes *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) GetEntityData() *types.CommonEntityData {
    interfaceAttributes.EntityData.YFilter = interfaceAttributes.YFilter
    interfaceAttributes.EntityData.YangName = "interface-attributes"
    interfaceAttributes.EntityData.BundleName = "openconfig"
    interfaceAttributes.EntityData.ParentYangName = "rsvp-te"
    interfaceAttributes.EntityData.SegmentPath = "interface-attributes"
    interfaceAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/" + interfaceAttributes.EntityData.SegmentPath
    interfaceAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceAttributes.EntityData.Children = types.NewOrderedMap()
    interfaceAttributes.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceAttributes.Interface {
        interfaceAttributes.EntityData.Children.Append(types.GetSegmentPath(interfaceAttributes.Interface[i]), types.YChild{"Interface", interfaceAttributes.Interface[i]})
    }
    interfaceAttributes.EntityData.Leafs = types.NewOrderedMap()

    interfaceAttributes.EntityData.YListKeys = []string {}

    return &(interfaceAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface
// list of per-interface RSVP configurations
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. reference to the interface-id data. The type is
    // string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config_InterfaceId
    InterfaceId interface{}

    // Configuration of per-interface RSVP parameters.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config

    // Per-interface RSVP protocol and state information.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef

    // Enclosing container for bandwidth reservation.
    BandwidthReservations NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations

    // Top level container for RSVP hello parameters.
    Hellos NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos

    // Configuration and state parameters relating to RSVP authentication as per
    // RFC2747.
    Authentication NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication

    // Bandwidth percentage reservable by RSVP on an interface.
    Subscription NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription

    // link-protection (NHOP) related configuration.
    Protection NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection
}

func (self *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interface-attributes"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceId, "interface-id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Children.Append("bandwidth-reservations", types.YChild{"BandwidthReservations", &self.BandwidthReservations})
    self.EntityData.Children.Append("hellos", types.YChild{"Hellos", &self.Hellos})
    self.EntityData.Children.Append("authentication", types.YChild{"Authentication", &self.Authentication})
    self.EntityData.Children.Append("subscription", types.YChild{"Subscription", &self.Subscription})
    self.EntityData.Children.Append("protection", types.YChild{"Protection", &self.Protection})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", self.InterfaceId})

    self.EntityData.YListKeys = []string {"InterfaceId"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config
// Configuration of per-interface RSVP parameters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the interface. The type is string.
    InterfaceId interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", config.InterfaceId})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State
// Per-interface RSVP protocol and state information
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the interface. The type is string.
    InterfaceId interface{}

    // Interface specific RSVP statistics and counters.
    Counters NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State_Counters
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("counters", types.YChild{"Counters", &state.Counters})
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", state.InterfaceId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State_Counters
// Interface specific RSVP statistics and counters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of received RSVP Path messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InPathMessages interface{}

    // Number of received RSVP Path Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Number of received RSVP Path Tear messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Number of received RSVP Resv messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InReservationMessages interface{}

    // Number of received RSVP Resv Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Number of received RSVP Resv Tear messages. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Number of received RSVP hello messages. The type is interface{} with range:
    // 0..18446744073709551615.
    InHelloMessages interface{}

    // Number of received RSVP summary refresh messages. The type is interface{}
    // with range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Number of received RSVP refresh reduction ack messages. The type is
    // interface{} with range: 0..18446744073709551615.
    InAckMessages interface{}

    // Number of sent RSVP PATH messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathMessages interface{}

    // Number of sent RSVP Path Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Number of sent RSVP Path Tear messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Number of sent RSVP Resv messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutReservationMessages interface{}

    // Number of sent RSVP Resv Error messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Number of sent RSVP Resv Tear messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Number of sent RSVP hello messages. The type is interface{} with range:
    // 0..18446744073709551615.
    OutHelloMessages interface{}

    // Number of sent RSVP summary refresh messages. The type is interface{} with
    // range: 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Number of sent RSVP refresh reduction ack messages. The type is interface{}
    // with range: 0..18446744073709551615.
    OutAckMessages interface{}
}

func (counters *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "openconfig"
    counters.EntityData.ParentYangName = "state"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    counters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("in-path-messages", types.YLeaf{"InPathMessages", counters.InPathMessages})
    counters.EntityData.Leafs.Append("in-path-error-messages", types.YLeaf{"InPathErrorMessages", counters.InPathErrorMessages})
    counters.EntityData.Leafs.Append("in-path-tear-messages", types.YLeaf{"InPathTearMessages", counters.InPathTearMessages})
    counters.EntityData.Leafs.Append("in-reservation-messages", types.YLeaf{"InReservationMessages", counters.InReservationMessages})
    counters.EntityData.Leafs.Append("in-reservation-error-messages", types.YLeaf{"InReservationErrorMessages", counters.InReservationErrorMessages})
    counters.EntityData.Leafs.Append("in-reservation-tear-messages", types.YLeaf{"InReservationTearMessages", counters.InReservationTearMessages})
    counters.EntityData.Leafs.Append("in-hello-messages", types.YLeaf{"InHelloMessages", counters.InHelloMessages})
    counters.EntityData.Leafs.Append("in-srefresh-messages", types.YLeaf{"InSrefreshMessages", counters.InSrefreshMessages})
    counters.EntityData.Leafs.Append("in-ack-messages", types.YLeaf{"InAckMessages", counters.InAckMessages})
    counters.EntityData.Leafs.Append("out-path-messages", types.YLeaf{"OutPathMessages", counters.OutPathMessages})
    counters.EntityData.Leafs.Append("out-path-error-messages", types.YLeaf{"OutPathErrorMessages", counters.OutPathErrorMessages})
    counters.EntityData.Leafs.Append("out-path-tear-messages", types.YLeaf{"OutPathTearMessages", counters.OutPathTearMessages})
    counters.EntityData.Leafs.Append("out-reservation-messages", types.YLeaf{"OutReservationMessages", counters.OutReservationMessages})
    counters.EntityData.Leafs.Append("out-reservation-error-messages", types.YLeaf{"OutReservationErrorMessages", counters.OutReservationErrorMessages})
    counters.EntityData.Leafs.Append("out-reservation-tear-messages", types.YLeaf{"OutReservationTearMessages", counters.OutReservationTearMessages})
    counters.EntityData.Leafs.Append("out-hello-messages", types.YLeaf{"OutHelloMessages", counters.OutHelloMessages})
    counters.EntityData.Leafs.Append("out-srefresh-messages", types.YLeaf{"OutSrefreshMessages", counters.OutSrefreshMessages})
    counters.EntityData.Leafs.Append("out-ack-messages", types.YLeaf{"OutAckMessages", counters.OutAckMessages})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations
// Enclosing container for bandwidth reservation
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Available and reserved bandwidth by priority on the interface. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation.
    BandwidthReservation []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation
}

func (bandwidthReservations *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations) GetEntityData() *types.CommonEntityData {
    bandwidthReservations.EntityData.YFilter = bandwidthReservations.YFilter
    bandwidthReservations.EntityData.YangName = "bandwidth-reservations"
    bandwidthReservations.EntityData.BundleName = "openconfig"
    bandwidthReservations.EntityData.ParentYangName = "interface"
    bandwidthReservations.EntityData.SegmentPath = "bandwidth-reservations"
    bandwidthReservations.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + bandwidthReservations.EntityData.SegmentPath
    bandwidthReservations.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthReservations.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthReservations.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthReservations.EntityData.Children = types.NewOrderedMap()
    bandwidthReservations.EntityData.Children.Append("bandwidth-reservation", types.YChild{"BandwidthReservation", nil})
    for i := range bandwidthReservations.BandwidthReservation {
        bandwidthReservations.EntityData.Children.Append(types.GetSegmentPath(bandwidthReservations.BandwidthReservation[i]), types.YChild{"BandwidthReservation", bandwidthReservations.BandwidthReservation[i]})
    }
    bandwidthReservations.EntityData.Leafs = types.NewOrderedMap()

    bandwidthReservations.EntityData.YListKeys = []string {}

    return &(bandwidthReservations.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation
// Available and reserved bandwidth by priority on
// the interface.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the RSVP priority level. The type is
    // one of the following types: int with range: 0..7, or
    // :go:struct:`NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority
    // <ydk/models/network_instance/NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority>`.
    Priority interface{}

    // Operational state parameters relating to a bandwidth reservation at a
    // certain priority.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State
}

func (bandwidthReservation *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation) GetEntityData() *types.CommonEntityData {
    bandwidthReservation.EntityData.YFilter = bandwidthReservation.YFilter
    bandwidthReservation.EntityData.YangName = "bandwidth-reservation"
    bandwidthReservation.EntityData.BundleName = "openconfig"
    bandwidthReservation.EntityData.ParentYangName = "bandwidth-reservations"
    bandwidthReservation.EntityData.SegmentPath = "bandwidth-reservation" + types.AddKeyToken(bandwidthReservation.Priority, "priority")
    bandwidthReservation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/" + bandwidthReservation.EntityData.SegmentPath
    bandwidthReservation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthReservation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthReservation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthReservation.EntityData.Children = types.NewOrderedMap()
    bandwidthReservation.EntityData.Children.Append("state", types.YChild{"State", &bandwidthReservation.State})
    bandwidthReservation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthReservation.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", bandwidthReservation.Priority})

    bandwidthReservation.EntityData.YListKeys = []string {"Priority"}

    return &(bandwidthReservation.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State
// Operational state parameters relating to a
// bandwidth reservation at a certain priority
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP priority level for LSPs traversing the interface. The type is one of
    // the following types: int with range: 0..7, or enumeration
    // NetworkInstances.NetworkInstance.Mpls.SignalingProtocols.RsvpTe.InterfaceAttributes.Interface.BandwidthReservations.BandwidthReservation.State.Priority.
    Priority interface{}

    // Bandwidth currently available with the priority level, or for the entire
    // interface when the priority is set to ALL. The type is interface{} with
    // range: 0..18446744073709551615.
    AvailableBandwidth interface{}

    // Bandwidth currently reserved within the priority level, or the sum of all
    // priority levels when the keyword is set to ALL. The type is interface{}
    // with range: 0..18446744073709551615.
    ReservedBandwidth interface{}

    // Number of active RSVP reservations in the associated priority, or the sum
    // of all reservations when the priority level is set to ALL. The type is
    // interface{} with range: 0..18446744073709551615.
    ActiveReservationsCount interface{}

    // Maximum bandwidth reserved on the interface within the priority, or across
    // all priorities in the case that the priority level is set to ALL. The type
    // is interface{} with range: 0..18446744073709551615.
    HighwaterMark interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-reservation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("available-bandwidth", types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth})
    state.EntityData.Leafs.Append("reserved-bandwidth", types.YLeaf{"ReservedBandwidth", state.ReservedBandwidth})
    state.EntityData.Leafs.Append("active-reservations-count", types.YLeaf{"ActiveReservationsCount", state.ActiveReservationsCount})
    state.EntityData.Leafs.Append("highwater-mark", types.YLeaf{"HighwaterMark", state.HighwaterMark})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority represents RSVP priority level for LSPs traversing the interface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority string

const (
    // The ALL keyword represents the overall
    // state of the interface - i.e., the union
    // of all of the priority levels
    NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_ALL NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority = "ALL"
)

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos
// Top level container for RSVP hello parameters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to RSVP hellos.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_Config

    // State information associated with RSVP hellos.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_State
}

func (hellos *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos) GetEntityData() *types.CommonEntityData {
    hellos.EntityData.YFilter = hellos.YFilter
    hellos.EntityData.YangName = "hellos"
    hellos.EntityData.BundleName = "openconfig"
    hellos.EntityData.ParentYangName = "interface"
    hellos.EntityData.SegmentPath = "hellos"
    hellos.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + hellos.EntityData.SegmentPath
    hellos.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    hellos.EntityData.NamespaceTable = openconfig.GetNamespaces()
    hellos.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    hellos.EntityData.Children = types.NewOrderedMap()
    hellos.EntityData.Children.Append("config", types.YChild{"Config", &hellos.Config})
    hellos.EntityData.Children.Append("state", types.YChild{"State", &hellos.State})
    hellos.EntityData.Leafs = types.NewOrderedMap()

    hellos.EntityData.YListKeys = []string {}

    return &(hellos.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_Config
// Configuration parameters relating to RSVP
// hellos
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set the interval in ms between RSVP hello messages. The type is interface{}
    // with range: 1000..60000. Units are milliseconds. The default value is 9000.
    HelloInterval interface{}

    // enables all RSVP refresh reduction message bundling, RSVP message ID,
    // reliable message delivery and summary refresh. The type is bool. The
    // default value is true.
    RefreshReduction interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "hellos"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", config.HelloInterval})
    config.EntityData.Leafs.Append("refresh-reduction", types.YLeaf{"RefreshReduction", config.RefreshReduction})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_State
// State information associated with RSVP hellos
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // set the interval in ms between RSVP hello messages. The type is interface{}
    // with range: 1000..60000. Units are milliseconds. The default value is 9000.
    HelloInterval interface{}

    // enables all RSVP refresh reduction message bundling, RSVP message ID,
    // reliable message delivery and summary refresh. The type is bool. The
    // default value is true.
    RefreshReduction interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hellos"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", state.HelloInterval})
    state.EntityData.Leafs.Append("refresh-reduction", types.YLeaf{"RefreshReduction", state.RefreshReduction})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication
// Configuration and state parameters relating to RSVP
// authentication as per RFC2747
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to authentication.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config

    // State information associated with authentication.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State
}

func (authentication *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "interface"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("config", types.YChild{"Config", &authentication.Config})
    authentication.EntityData.Children.Append("state", types.YChild{"State", &authentication.State})
    authentication.EntityData.Leafs = types.NewOrderedMap()

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config
// Configuration parameters relating
// to authentication
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables RSVP authentication on the node. The type is bool. The default
    // value is false.
    Enable interface{}

    // authenticate RSVP signaling messages. The type is string with length:
    // 1..32.
    AuthenticationKey interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", config.Enable})
    config.EntityData.Leafs.Append("authentication-key", types.YLeaf{"AuthenticationKey", config.AuthenticationKey})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State
// State information associated
// with authentication
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enables RSVP authentication on the node. The type is bool. The default
    // value is false.
    Enable interface{}

    // authenticate RSVP signaling messages. The type is string with length:
    // 1..32.
    AuthenticationKey interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", state.Enable})
    state.EntityData.Leafs.Append("authentication-key", types.YLeaf{"AuthenticationKey", state.AuthenticationKey})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription
// Bandwidth percentage reservable by RSVP
// on an interface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to RSVP subscription options.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_Config

    // State parameters relating to RSVP subscription options.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_State
}

func (subscription *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription) GetEntityData() *types.CommonEntityData {
    subscription.EntityData.YFilter = subscription.YFilter
    subscription.EntityData.YangName = "subscription"
    subscription.EntityData.BundleName = "openconfig"
    subscription.EntityData.ParentYangName = "interface"
    subscription.EntityData.SegmentPath = "subscription"
    subscription.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + subscription.EntityData.SegmentPath
    subscription.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subscription.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subscription.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subscription.EntityData.Children = types.NewOrderedMap()
    subscription.EntityData.Children.Append("config", types.YChild{"Config", &subscription.Config})
    subscription.EntityData.Children.Append("state", types.YChild{"State", &subscription.State})
    subscription.EntityData.Leafs = types.NewOrderedMap()

    subscription.EntityData.YListKeys = []string {}

    return &(subscription.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_Config
// Configuration parameters relating to RSVP
// subscription options
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // percentage of the interface bandwidth that RSVP can reserve. The type is
    // interface{} with range: 0..100.
    Subscription interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "subscription"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("subscription", types.YLeaf{"Subscription", config.Subscription})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_State
// State parameters relating to RSVP
// subscription options
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // percentage of the interface bandwidth that RSVP can reserve. The type is
    // interface{} with range: 0..100.
    Subscription interface{}

    // The calculated absolute value of the bandwidth which is reservable to
    // RSVP-TE on the interface prior to any adjustments that may be made from
    // external sources. The type is interface{} with range:
    // 0..18446744073709551615. Units are kbps.
    CalculatedAbsoluteSubscriptionBw interface{}

    // The adjusted absolute value (in kbps) of the bandwidth which is reservable
    // to RSVP-TE on the local system. In the case that the bandwidth-measurement
    // configuration does not account for non-RSVP-TE traffic then this value is
    // equal to the calculated-absolute-subscription-bw, in the case that
    // non-RSVP-TE traffic is being accounted for, it is lower such that
    // calculated-absolute-subscription-bw - adjusted-absolute-subscription-bw =
    // the current calculated non-RSVP-TE traffic.  This value reflects the last
    // flooded value of the maximum reservable bandwidth, or subscription. The
    // type is interface{} with range: 0..18446744073709551615. Units are kbps.
    AdjustedAbsoluteSubscriptionBw interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subscription"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("subscription", types.YLeaf{"Subscription", state.Subscription})
    state.EntityData.Leafs.Append("calculated-absolute-subscription-bw", types.YLeaf{"CalculatedAbsoluteSubscriptionBw", state.CalculatedAbsoluteSubscriptionBw})
    state.EntityData.Leafs.Append("adjusted-absolute-subscription-bw", types.YLeaf{"AdjustedAbsoluteSubscriptionBw", state.AdjustedAbsoluteSubscriptionBw})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection
// link-protection (NHOP) related configuration
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for link-protection.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_Config

    // State for link-protection.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_State
}

func (protection *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection) GetEntityData() *types.CommonEntityData {
    protection.EntityData.YFilter = protection.YFilter
    protection.EntityData.YangName = "protection"
    protection.EntityData.BundleName = "openconfig"
    protection.EntityData.ParentYangName = "interface"
    protection.EntityData.SegmentPath = "protection"
    protection.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/" + protection.EntityData.SegmentPath
    protection.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    protection.EntityData.NamespaceTable = openconfig.GetNamespaces()
    protection.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    protection.EntityData.Children = types.NewOrderedMap()
    protection.EntityData.Children.Append("config", types.YChild{"Config", &protection.Config})
    protection.EntityData.Children.Append("state", types.YChild{"State", &protection.State})
    protection.EntityData.Leafs = types.NewOrderedMap()

    protection.EntityData.YListKeys = []string {}

    return &(protection.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_Config
// Configuration for link-protection
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Style of mpls frr protection desired: link, link-node, or unprotected. The
    // type is one of the following:
    // LINKPROTECTIONREQUIREDLINKNODEPROTECTIONREQUESTEDUNPROTECTED. The default
    // value is oc-mplst:LINK_NODE_PROTECTION_REQUESTED.
    LinkProtectionStyleRequested interface{}

    // interval between periodic optimization of the bypass LSPs. The type is
    // interface{} with range: 0..65535. Units are seconds.
    BypassOptimizeInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "protection"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("link-protection-style-requested", types.YLeaf{"LinkProtectionStyleRequested", config.LinkProtectionStyleRequested})
    config.EntityData.Leafs.Append("bypass-optimize-interval", types.YLeaf{"BypassOptimizeInterval", config.BypassOptimizeInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_State
// State for link-protection
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Style of mpls frr protection desired: link, link-node, or unprotected. The
    // type is one of the following:
    // LINKPROTECTIONREQUIREDLINKNODEPROTECTIONREQUESTEDUNPROTECTED. The default
    // value is oc-mplst:LINK_NODE_PROTECTION_REQUESTED.
    LinkProtectionStyleRequested interface{}

    // interval between periodic optimization of the bypass LSPs. The type is
    // interface{} with range: 0..65535. Units are seconds.
    BypassOptimizeInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "protection"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("link-protection-style-requested", types.YLeaf{"LinkProtectionStyleRequested", state.LinkProtectionStyleRequested})
    state.EntityData.Leafs.Append("bypass-optimize-interval", types.YLeaf{"BypassOptimizeInterval", state.BypassOptimizeInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp
// LDP global signaling configuration
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ldp *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetEntityData() *types.CommonEntityData {
    ldp.EntityData.YFilter = ldp.YFilter
    ldp.EntityData.YangName = "ldp"
    ldp.EntityData.BundleName = "openconfig"
    ldp.EntityData.ParentYangName = "signaling-protocols"
    ldp.EntityData.SegmentPath = "ldp"
    ldp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/" + ldp.EntityData.SegmentPath
    ldp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ldp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ldp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ldp.EntityData.Children = types.NewOrderedMap()
    ldp.EntityData.Leafs = types.NewOrderedMap()

    ldp.EntityData.YListKeys = []string {}

    return &(ldp.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting
// MPLS-specific Segment Routing configuration and operational state
// parameters
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-SID counters aggregated across all interfaces on the local system.
    AggregateSidCounters NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters

    // Interface related Segment Routing parameters.
    Interfaces NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces
}

func (segmentRouting *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "signaling-protocols"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("aggregate-sid-counters", types.YChild{"AggregateSidCounters", &segmentRouting.AggregateSidCounters})
    segmentRouting.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &segmentRouting.Interfaces})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters
// Per-SID counters aggregated across all interfaces on the local system
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Counters aggregated across all of the interfaces of the local system
    // corresponding to traffic received or forwarded with a particular SID. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter.
    AggregateSidCounter []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter
}

func (aggregateSidCounters *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters) GetEntityData() *types.CommonEntityData {
    aggregateSidCounters.EntityData.YFilter = aggregateSidCounters.YFilter
    aggregateSidCounters.EntityData.YangName = "aggregate-sid-counters"
    aggregateSidCounters.EntityData.BundleName = "openconfig"
    aggregateSidCounters.EntityData.ParentYangName = "segment-routing"
    aggregateSidCounters.EntityData.SegmentPath = "aggregate-sid-counters"
    aggregateSidCounters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/" + aggregateSidCounters.EntityData.SegmentPath
    aggregateSidCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    aggregateSidCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    aggregateSidCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    aggregateSidCounters.EntityData.Children = types.NewOrderedMap()
    aggregateSidCounters.EntityData.Children.Append("aggregate-sid-counter", types.YChild{"AggregateSidCounter", nil})
    for i := range aggregateSidCounters.AggregateSidCounter {
        aggregateSidCounters.EntityData.Children.Append(types.GetSegmentPath(aggregateSidCounters.AggregateSidCounter[i]), types.YChild{"AggregateSidCounter", aggregateSidCounters.AggregateSidCounter[i]})
    }
    aggregateSidCounters.EntityData.Leafs = types.NewOrderedMap()

    aggregateSidCounters.EntityData.YListKeys = []string {}

    return &(aggregateSidCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter
// Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The MPLS label representing the segment
    // identifier. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    MplsLabel interface{}

    // State parameters for per-SID statistics.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State
}

func (aggregateSidCounter *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter) GetEntityData() *types.CommonEntityData {
    aggregateSidCounter.EntityData.YFilter = aggregateSidCounter.YFilter
    aggregateSidCounter.EntityData.YangName = "aggregate-sid-counter"
    aggregateSidCounter.EntityData.BundleName = "openconfig"
    aggregateSidCounter.EntityData.ParentYangName = "aggregate-sid-counters"
    aggregateSidCounter.EntityData.SegmentPath = "aggregate-sid-counter" + types.AddKeyToken(aggregateSidCounter.MplsLabel, "mpls-label")
    aggregateSidCounter.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/" + aggregateSidCounter.EntityData.SegmentPath
    aggregateSidCounter.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    aggregateSidCounter.EntityData.NamespaceTable = openconfig.GetNamespaces()
    aggregateSidCounter.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    aggregateSidCounter.EntityData.Children = types.NewOrderedMap()
    aggregateSidCounter.EntityData.Children.Append("state", types.YChild{"State", &aggregateSidCounter.State})
    aggregateSidCounter.EntityData.Leafs = types.NewOrderedMap()
    aggregateSidCounter.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", aggregateSidCounter.MplsLabel})

    aggregateSidCounter.EntityData.YListKeys = []string {"MplsLabel"}

    return &(aggregateSidCounter.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State
// State parameters for per-SID statistics
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MPLS label used for the segment identifier. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    MplsLabel interface{}

    // A cumulative counter of the packets received within the context which have
    // matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InPkts interface{}

    // The cumulative counter of the total bytes received within the context which
    // have matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InOctets interface{}

    // A cumulative counter of the total number of packets transmitted by the
    // local system within the context which have a label imposed that corresponds
    // to an Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPkts interface{}

    // A cumulative counter of the total bytes transmitted by the local system
    // within the context which have a label imported that corresponds to an SR
    // Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutOctets interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "aggregate-sid-counter"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", state.MplsLabel})
    state.EntityData.Leafs.Append("in-pkts", types.YLeaf{"InPkts", state.InPkts})
    state.EntityData.Leafs.Append("in-octets", types.YLeaf{"InOctets", state.InOctets})
    state.EntityData.Leafs.Append("out-pkts", types.YLeaf{"OutPkts", state.OutPkts})
    state.EntityData.Leafs.Append("out-octets", types.YLeaf{"OutOctets", state.OutOctets})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces
// Interface related Segment Routing parameters.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Parameters and MPLS-specific configuration relating to Segment Routing on
    // an interface. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface.
    Interface []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface
}

func (interfaces *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "openconfig"
    interfaces.EntityData.ParentYangName = "segment-routing"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaces.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface
// Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the ID for the interface for which
    // SR is configured. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_Config_InterfaceId
    InterfaceId interface{}

    // MPLS-specific Segment Routing configuration parameters related to an
    // interface.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_Config

    // MPLS-specific Segment Routing operational state parameters related to an
    // interface.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_State

    // Per-SID statistics for MPLS.
    SidCounters NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceId, "interface-id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Children.Append("sid-counters", types.YChild{"SidCounters", &self.SidCounters})
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", self.InterfaceId})

    self.EntityData.YListKeys = []string {"InterfaceId"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_Config
// MPLS-specific Segment Routing configuration parameters
// related to an interface.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for the interface. The type is string.
    InterfaceId interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", config.InterfaceId})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_State
// MPLS-specific Segment Routing operational state parameters
// related to an interface.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for the interface. The type is string.
    InterfaceId interface{}

    // A cumulative counter of the packets received within the context which have
    // matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InPkts interface{}

    // The cumulative counter of the total bytes received within the context which
    // have matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InOctets interface{}

    // A cumulative counter of the total number of packets transmitted by the
    // local system within the context which have a label imposed that corresponds
    // to an Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPkts interface{}

    // A cumulative counter of the total bytes transmitted by the local system
    // within the context which have a label imported that corresponds to an SR
    // Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutOctets interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", state.InterfaceId})
    state.EntityData.Leafs.Append("in-pkts", types.YLeaf{"InPkts", state.InPkts})
    state.EntityData.Leafs.Append("in-octets", types.YLeaf{"InOctets", state.InOctets})
    state.EntityData.Leafs.Append("out-pkts", types.YLeaf{"OutPkts", state.OutPkts})
    state.EntityData.Leafs.Append("out-octets", types.YLeaf{"OutOctets", state.OutOctets})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters
// Per-SID statistics for MPLS
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per segment identifier counters for the MPLS dataplane. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter.
    SidCounter []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter
}

func (sidCounters *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters) GetEntityData() *types.CommonEntityData {
    sidCounters.EntityData.YFilter = sidCounters.YFilter
    sidCounters.EntityData.YangName = "sid-counters"
    sidCounters.EntityData.BundleName = "openconfig"
    sidCounters.EntityData.ParentYangName = "interface"
    sidCounters.EntityData.SegmentPath = "sid-counters"
    sidCounters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/" + sidCounters.EntityData.SegmentPath
    sidCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    sidCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    sidCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    sidCounters.EntityData.Children = types.NewOrderedMap()
    sidCounters.EntityData.Children.Append("sid-counter", types.YChild{"SidCounter", nil})
    for i := range sidCounters.SidCounter {
        sidCounters.EntityData.Children.Append(types.GetSegmentPath(sidCounters.SidCounter[i]), types.YChild{"SidCounter", sidCounters.SidCounter[i]})
    }
    sidCounters.EntityData.Leafs = types.NewOrderedMap()

    sidCounters.EntityData.YListKeys = []string {}

    return &(sidCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter
// Per segment identifier counters for the MPLS dataplane.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The MPLS label representing the segment
    // identifier. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    MplsLabel interface{}

    // State parameters for per-SID statistics.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State

    // Per-SID per-forwarding class counters for Segment Routing.
    ForwardingClasses NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses
}

func (sidCounter *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter) GetEntityData() *types.CommonEntityData {
    sidCounter.EntityData.YFilter = sidCounter.YFilter
    sidCounter.EntityData.YangName = "sid-counter"
    sidCounter.EntityData.BundleName = "openconfig"
    sidCounter.EntityData.ParentYangName = "sid-counters"
    sidCounter.EntityData.SegmentPath = "sid-counter" + types.AddKeyToken(sidCounter.MplsLabel, "mpls-label")
    sidCounter.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/" + sidCounter.EntityData.SegmentPath
    sidCounter.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    sidCounter.EntityData.NamespaceTable = openconfig.GetNamespaces()
    sidCounter.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    sidCounter.EntityData.Children = types.NewOrderedMap()
    sidCounter.EntityData.Children.Append("state", types.YChild{"State", &sidCounter.State})
    sidCounter.EntityData.Children.Append("forwarding-classes", types.YChild{"ForwardingClasses", &sidCounter.ForwardingClasses})
    sidCounter.EntityData.Leafs = types.NewOrderedMap()
    sidCounter.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", sidCounter.MplsLabel})

    sidCounter.EntityData.YListKeys = []string {"MplsLabel"}

    return &(sidCounter.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State
// State parameters for per-SID statistics
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MPLS label used for the segment identifier. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    MplsLabel interface{}

    // A cumulative counter of the packets received within the context which have
    // matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InPkts interface{}

    // The cumulative counter of the total bytes received within the context which
    // have matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InOctets interface{}

    // A cumulative counter of the total number of packets transmitted by the
    // local system within the context which have a label imposed that corresponds
    // to an Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPkts interface{}

    // A cumulative counter of the total bytes transmitted by the local system
    // within the context which have a label imported that corresponds to an SR
    // Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutOctets interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "sid-counter"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", state.MplsLabel})
    state.EntityData.Leafs.Append("in-pkts", types.YLeaf{"InPkts", state.InPkts})
    state.EntityData.Leafs.Append("in-octets", types.YLeaf{"InOctets", state.InOctets})
    state.EntityData.Leafs.Append("out-pkts", types.YLeaf{"OutPkts", state.OutPkts})
    state.EntityData.Leafs.Append("out-octets", types.YLeaf{"OutOctets", state.OutOctets})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses
// Per-SID per-forwarding class counters for Segment Routing.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID entries for the forwarding class associated with the referenced MPLS
    // EXP. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass.
    ForwardingClass []*NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass
}

func (forwardingClasses *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses) GetEntityData() *types.CommonEntityData {
    forwardingClasses.EntityData.YFilter = forwardingClasses.YFilter
    forwardingClasses.EntityData.YangName = "forwarding-classes"
    forwardingClasses.EntityData.BundleName = "openconfig"
    forwardingClasses.EntityData.ParentYangName = "sid-counter"
    forwardingClasses.EntityData.SegmentPath = "forwarding-classes"
    forwardingClasses.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/" + forwardingClasses.EntityData.SegmentPath
    forwardingClasses.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    forwardingClasses.EntityData.NamespaceTable = openconfig.GetNamespaces()
    forwardingClasses.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    forwardingClasses.EntityData.Children = types.NewOrderedMap()
    forwardingClasses.EntityData.Children.Append("forwarding-class", types.YChild{"ForwardingClass", nil})
    for i := range forwardingClasses.ForwardingClass {
        forwardingClasses.EntityData.Children.Append(types.GetSegmentPath(forwardingClasses.ForwardingClass[i]), types.YChild{"ForwardingClass", forwardingClasses.ForwardingClass[i]})
    }
    forwardingClasses.EntityData.Leafs = types.NewOrderedMap()

    forwardingClasses.EntityData.YListKeys = []string {}

    return &(forwardingClasses.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass
// SID entries for the forwarding class associated with the
// referenced MPLS EXP.
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the EXP bits of the
    // segment identifier. The type is string with range: 0..7. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass_State_Exp
    Exp interface{}

    // Per-SID, per forwarding class counters for Segment Routing with the MPLS
    // dataplane.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass_State
}

func (forwardingClass *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass) GetEntityData() *types.CommonEntityData {
    forwardingClass.EntityData.YFilter = forwardingClass.YFilter
    forwardingClass.EntityData.YangName = "forwarding-class"
    forwardingClass.EntityData.BundleName = "openconfig"
    forwardingClass.EntityData.ParentYangName = "forwarding-classes"
    forwardingClass.EntityData.SegmentPath = "forwarding-class" + types.AddKeyToken(forwardingClass.Exp, "exp")
    forwardingClass.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/" + forwardingClass.EntityData.SegmentPath
    forwardingClass.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    forwardingClass.EntityData.NamespaceTable = openconfig.GetNamespaces()
    forwardingClass.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    forwardingClass.EntityData.Children = types.NewOrderedMap()
    forwardingClass.EntityData.Children.Append("state", types.YChild{"State", &forwardingClass.State})
    forwardingClass.EntityData.Leafs = types.NewOrderedMap()
    forwardingClass.EntityData.Leafs.Append("exp", types.YLeaf{"Exp", forwardingClass.Exp})

    forwardingClass.EntityData.YListKeys = []string {"Exp"}

    return &(forwardingClass.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass_State
// Per-SID, per forwarding class counters for Segment Routing
// with the MPLS dataplane
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of the MPLS EXP (experimental) or Traffic Class bits that the SID
    // statistics relate to. Packets received with a MPLS label value equal to the
    // SID's MPLS label and EXP bits equal to the this value should be counted
    // towards the associated ingress statistics. Packets that are forwarded to
    // the destination MPLS label corresponding to the SID should be counted
    // towards this value. In the egress direction, where forwarding follows a SID
    // value that requires PHP at the local node, packets should still be counted
    // towards the egress counters. The type is interface{} with range: 0..7.
    Exp interface{}

    // A cumulative counter of the packets received within the context which have
    // matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InPkts interface{}

    // The cumulative counter of the total bytes received within the context which
    // have matched a label corresponding to an SR Segment Identifier. The type is
    // interface{} with range: 0..18446744073709551615.
    InOctets interface{}

    // A cumulative counter of the total number of packets transmitted by the
    // local system within the context which have a label imposed that corresponds
    // to an Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPkts interface{}

    // A cumulative counter of the total bytes transmitted by the local system
    // within the context which have a label imported that corresponds to an SR
    // Segment Identifier. The type is interface{} with range:
    // 0..18446744073709551615.
    OutOctets interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_ForwardingClasses_ForwardingClass_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "forwarding-class"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("exp", types.YLeaf{"Exp", state.Exp})
    state.EntityData.Leafs.Append("in-pkts", types.YLeaf{"InPkts", state.InPkts})
    state.EntityData.Leafs.Append("in-octets", types.YLeaf{"InOctets", state.InOctets})
    state.EntityData.Leafs.Append("out-pkts", types.YLeaf{"OutPkts", state.OutPkts})
    state.EntityData.Leafs.Append("out-octets", types.YLeaf{"OutOctets", state.OutOctets})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps
// LSP definitions and configuration
type NetworkInstances_NetworkInstance_Mpls_Lsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // traffic-engineered LSPs supporting different path computation and signaling
    // methods.
    ConstrainedPath NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath

    // LSPs that use the IGP-determined path, i.e., non traffic-engineered, or non
    // constrained-path.
    UnconstrainedPath NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath

    // statically configured LSPs, without dynamic signaling.
    StaticLsps NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps
}

func (lsps *NetworkInstances_NetworkInstance_Mpls_Lsps) GetEntityData() *types.CommonEntityData {
    lsps.EntityData.YFilter = lsps.YFilter
    lsps.EntityData.YangName = "lsps"
    lsps.EntityData.BundleName = "openconfig"
    lsps.EntityData.ParentYangName = "mpls"
    lsps.EntityData.SegmentPath = "lsps"
    lsps.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/" + lsps.EntityData.SegmentPath
    lsps.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lsps.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lsps.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lsps.EntityData.Children = types.NewOrderedMap()
    lsps.EntityData.Children.Append("constrained-path", types.YChild{"ConstrainedPath", &lsps.ConstrainedPath})
    lsps.EntityData.Children.Append("unconstrained-path", types.YChild{"UnconstrainedPath", &lsps.UnconstrainedPath})
    lsps.EntityData.Children.Append("static-lsps", types.YChild{"StaticLsps", &lsps.StaticLsps})
    lsps.EntityData.Leafs = types.NewOrderedMap()

    lsps.EntityData.YListKeys = []string {}

    return &(lsps.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath
// traffic-engineered LSPs supporting different
// path computation and signaling methods
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enclosing container for the named explicit paths.
    NamedExplicitPaths NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths

    // Enclosing container for tunnels.
    Tunnels NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels
}

func (constrainedPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) GetEntityData() *types.CommonEntityData {
    constrainedPath.EntityData.YFilter = constrainedPath.YFilter
    constrainedPath.EntityData.YangName = "constrained-path"
    constrainedPath.EntityData.BundleName = "openconfig"
    constrainedPath.EntityData.ParentYangName = "lsps"
    constrainedPath.EntityData.SegmentPath = "constrained-path"
    constrainedPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/" + constrainedPath.EntityData.SegmentPath
    constrainedPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constrainedPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constrainedPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constrainedPath.EntityData.Children = types.NewOrderedMap()
    constrainedPath.EntityData.Children.Append("named-explicit-paths", types.YChild{"NamedExplicitPaths", &constrainedPath.NamedExplicitPaths})
    constrainedPath.EntityData.Children.Append("tunnels", types.YChild{"Tunnels", &constrainedPath.Tunnels})
    constrainedPath.EntityData.Leafs = types.NewOrderedMap()

    constrainedPath.EntityData.YListKeys = []string {}

    return &(constrainedPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths
// Enclosing container for the named explicit paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of explicit paths. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath.
    NamedExplicitPath []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath
}

func (namedExplicitPaths *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) GetEntityData() *types.CommonEntityData {
    namedExplicitPaths.EntityData.YFilter = namedExplicitPaths.YFilter
    namedExplicitPaths.EntityData.YangName = "named-explicit-paths"
    namedExplicitPaths.EntityData.BundleName = "openconfig"
    namedExplicitPaths.EntityData.ParentYangName = "constrained-path"
    namedExplicitPaths.EntityData.SegmentPath = "named-explicit-paths"
    namedExplicitPaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/" + namedExplicitPaths.EntityData.SegmentPath
    namedExplicitPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    namedExplicitPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    namedExplicitPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    namedExplicitPaths.EntityData.Children = types.NewOrderedMap()
    namedExplicitPaths.EntityData.Children.Append("named-explicit-path", types.YChild{"NamedExplicitPath", nil})
    for i := range namedExplicitPaths.NamedExplicitPath {
        namedExplicitPaths.EntityData.Children.Append(types.GetSegmentPath(namedExplicitPaths.NamedExplicitPath[i]), types.YChild{"NamedExplicitPath", namedExplicitPaths.NamedExplicitPath[i]})
    }
    namedExplicitPaths.EntityData.Leafs = types.NewOrderedMap()

    namedExplicitPaths.EntityData.YListKeys = []string {}

    return &(namedExplicitPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath
// A list of explicit paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A string name that uniquely identifies an explicit
    // path. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_Name
    Name interface{}

    // Configuration parameters relating to named explicit paths.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config

    // Operational state parameters relating to the named explicit paths.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State

    // Enclosing container for EROs.
    ExplicitRouteObjects NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects
}

func (namedExplicitPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetEntityData() *types.CommonEntityData {
    namedExplicitPath.EntityData.YFilter = namedExplicitPath.YFilter
    namedExplicitPath.EntityData.YangName = "named-explicit-path"
    namedExplicitPath.EntityData.BundleName = "openconfig"
    namedExplicitPath.EntityData.ParentYangName = "named-explicit-paths"
    namedExplicitPath.EntityData.SegmentPath = "named-explicit-path" + types.AddKeyToken(namedExplicitPath.Name, "name")
    namedExplicitPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/" + namedExplicitPath.EntityData.SegmentPath
    namedExplicitPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    namedExplicitPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    namedExplicitPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    namedExplicitPath.EntityData.Children = types.NewOrderedMap()
    namedExplicitPath.EntityData.Children.Append("config", types.YChild{"Config", &namedExplicitPath.Config})
    namedExplicitPath.EntityData.Children.Append("state", types.YChild{"State", &namedExplicitPath.State})
    namedExplicitPath.EntityData.Children.Append("explicit-route-objects", types.YChild{"ExplicitRouteObjects", &namedExplicitPath.ExplicitRouteObjects})
    namedExplicitPath.EntityData.Leafs = types.NewOrderedMap()
    namedExplicitPath.EntityData.Leafs.Append("name", types.YLeaf{"Name", namedExplicitPath.Name})

    namedExplicitPath.EntityData.YListKeys = []string {"Name"}

    return &(namedExplicitPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config
// Configuration parameters relating to named explicit
// paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A string name that uniquely identifies an explicit path. The type is
    // string.
    Name interface{}

    // The restrictions placed on the SIDs to be selected by the calculation
    // method for the explicit path when it is instantiated for a SR-TE LSP. The
    // type is SidSelectionMode. The default value is MIXED_MODE.
    SidSelectionMode interface{}

    // When this value is set to true, only SIDs that are protected are to be
    // selected by the calculating method when the explicit path is instantiated
    // by a SR-TE LSP. The type is bool. The default value is false.
    SidProtectionRequired interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "named-explicit-path"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("sid-selection-mode", types.YLeaf{"SidSelectionMode", config.SidSelectionMode})
    config.EntityData.Leafs.Append("sid-protection-required", types.YLeaf{"SidProtectionRequired", config.SidProtectionRequired})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode represents instantiated for a SR-TE LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode string

const (
    // The SR-TE tunnel should only use adjacency SIDs
    // to build the SID stack to be pushed for the LSP
    NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode_ADJ_SID_ONLY NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode = "ADJ_SID_ONLY"

    // The SR-TE tunnel can use a mix of adjacency
    // and prefix SIDs to build the SID stack to be pushed
    // to the LSP
    NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode_MIXED_MODE NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode = "MIXED_MODE"
)

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State
// Operational state parameters relating to the named
// explicit paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A string name that uniquely identifies an explicit path. The type is
    // string.
    Name interface{}

    // The restrictions placed on the SIDs to be selected by the calculation
    // method for the explicit path when it is instantiated for a SR-TE LSP. The
    // type is SidSelectionMode. The default value is MIXED_MODE.
    SidSelectionMode interface{}

    // When this value is set to true, only SIDs that are protected are to be
    // selected by the calculating method when the explicit path is instantiated
    // by a SR-TE LSP. The type is bool. The default value is false.
    SidProtectionRequired interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "named-explicit-path"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("sid-selection-mode", types.YLeaf{"SidSelectionMode", state.SidSelectionMode})
    state.EntityData.Leafs.Append("sid-protection-required", types.YLeaf{"SidProtectionRequired", state.SidProtectionRequired})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode represents instantiated for a SR-TE LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode string

const (
    // The SR-TE tunnel should only use adjacency SIDs
    // to build the SID stack to be pushed for the LSP
    NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode_ADJ_SID_ONLY NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode = "ADJ_SID_ONLY"

    // The SR-TE tunnel can use a mix of adjacency
    // and prefix SIDs to build the SID stack to be pushed
    // to the LSP
    NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode_MIXED_MODE NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State_SidSelectionMode = "MIXED_MODE"
)

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects
// Enclosing container for EROs
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of explicit route objects. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject.
    ExplicitRouteObject []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject
}

func (explicitRouteObjects *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) GetEntityData() *types.CommonEntityData {
    explicitRouteObjects.EntityData.YFilter = explicitRouteObjects.YFilter
    explicitRouteObjects.EntityData.YangName = "explicit-route-objects"
    explicitRouteObjects.EntityData.BundleName = "openconfig"
    explicitRouteObjects.EntityData.ParentYangName = "named-explicit-path"
    explicitRouteObjects.EntityData.SegmentPath = "explicit-route-objects"
    explicitRouteObjects.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/" + explicitRouteObjects.EntityData.SegmentPath
    explicitRouteObjects.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    explicitRouteObjects.EntityData.NamespaceTable = openconfig.GetNamespaces()
    explicitRouteObjects.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    explicitRouteObjects.EntityData.Children = types.NewOrderedMap()
    explicitRouteObjects.EntityData.Children.Append("explicit-route-object", types.YChild{"ExplicitRouteObject", nil})
    for i := range explicitRouteObjects.ExplicitRouteObject {
        explicitRouteObjects.EntityData.Children.Append(types.GetSegmentPath(explicitRouteObjects.ExplicitRouteObject[i]), types.YChild{"ExplicitRouteObject", explicitRouteObjects.ExplicitRouteObject[i]})
    }
    explicitRouteObjects.EntityData.Leafs = types.NewOrderedMap()

    explicitRouteObjects.EntityData.YListKeys = []string {}

    return &(explicitRouteObjects.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject
// List of explicit route objects
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Index of this explicit route object, to express
    // the order of hops in path. The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config_Index
    Index interface{}

    // Configuration parameters relating to an explicit route.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config

    // State parameters relating to an explicit route.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State
}

func (explicitRouteObject *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) GetEntityData() *types.CommonEntityData {
    explicitRouteObject.EntityData.YFilter = explicitRouteObject.YFilter
    explicitRouteObject.EntityData.YangName = "explicit-route-object"
    explicitRouteObject.EntityData.BundleName = "openconfig"
    explicitRouteObject.EntityData.ParentYangName = "explicit-route-objects"
    explicitRouteObject.EntityData.SegmentPath = "explicit-route-object" + types.AddKeyToken(explicitRouteObject.Index, "index")
    explicitRouteObject.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/" + explicitRouteObject.EntityData.SegmentPath
    explicitRouteObject.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    explicitRouteObject.EntityData.NamespaceTable = openconfig.GetNamespaces()
    explicitRouteObject.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    explicitRouteObject.EntityData.Children = types.NewOrderedMap()
    explicitRouteObject.EntityData.Children.Append("config", types.YChild{"Config", &explicitRouteObject.Config})
    explicitRouteObject.EntityData.Children.Append("state", types.YChild{"State", &explicitRouteObject.State})
    explicitRouteObject.EntityData.Leafs = types.NewOrderedMap()
    explicitRouteObject.EntityData.Leafs.Append("index", types.YLeaf{"Index", explicitRouteObject.Index})

    explicitRouteObject.EntityData.YListKeys = []string {"Index"}

    return &(explicitRouteObject.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config
// Configuration parameters relating to an explicit
// route
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // router hop for the LSP path. The type is one of the following types: string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Address interface{}

    // strict or loose hop. The type is MplsHopType.
    HopType interface{}

    // Index of this explicit route object to express the order of hops in the
    // path. The type is interface{} with range: 0..255.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "explicit-route-object"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("address", types.YLeaf{"Address", config.Address})
    config.EntityData.Leafs.Append("hop-type", types.YLeaf{"HopType", config.HopType})
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State
// State parameters relating to an explicit route
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // router hop for the LSP path. The type is one of the following types: string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Address interface{}

    // strict or loose hop. The type is MplsHopType.
    HopType interface{}

    // Index of this explicit route object to express the order of hops in the
    // path. The type is interface{} with range: 0..255.
    Index interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "explicit-route-object"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("address", types.YLeaf{"Address", state.Address})
    state.EntityData.Leafs.Append("hop-type", types.YLeaf{"HopType", state.HopType})
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels
// Enclosing container for tunnels
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TE tunnels. This list contains only the LSPs that the current
    // device originates (i.e., for which it is the head-end). Where the signaling
    // protocol utilised for an LSP allows a mid-point or tail device to be aware
    // of the LSP (e.g., RSVP-TE), then the associated sessions are maintained per
    // protocol. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel.
    Tunnel []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel
}

func (tunnels *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) GetEntityData() *types.CommonEntityData {
    tunnels.EntityData.YFilter = tunnels.YFilter
    tunnels.EntityData.YangName = "tunnels"
    tunnels.EntityData.BundleName = "openconfig"
    tunnels.EntityData.ParentYangName = "constrained-path"
    tunnels.EntityData.SegmentPath = "tunnels"
    tunnels.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/" + tunnels.EntityData.SegmentPath
    tunnels.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tunnels.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tunnels.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tunnels.EntityData.Children = types.NewOrderedMap()
    tunnels.EntityData.Children.Append("tunnel", types.YChild{"Tunnel", nil})
    for i := range tunnels.Tunnel {
        tunnels.EntityData.Children.Append(types.GetSegmentPath(tunnels.Tunnel[i]), types.YChild{"Tunnel", tunnels.Tunnel[i]})
    }
    tunnels.EntityData.Leafs = types.NewOrderedMap()

    tunnels.EntityData.YListKeys = []string {}

    return &(tunnels.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel
// List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The tunnel name. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config_Name
    Name interface{}

    // Configuration parameters related to TE tunnels:.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config

    // State parameters related to TE tunnels.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State

    // Bandwidth configuration for TE LSPs.
    Bandwidth NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth

    // Parameters related to LSPs of type P2P.
    P2pTunnelAttributes NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes
}

func (tunnel *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetEntityData() *types.CommonEntityData {
    tunnel.EntityData.YFilter = tunnel.YFilter
    tunnel.EntityData.YangName = "tunnel"
    tunnel.EntityData.BundleName = "openconfig"
    tunnel.EntityData.ParentYangName = "tunnels"
    tunnel.EntityData.SegmentPath = "tunnel" + types.AddKeyToken(tunnel.Name, "name")
    tunnel.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/" + tunnel.EntityData.SegmentPath
    tunnel.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tunnel.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tunnel.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tunnel.EntityData.Children = types.NewOrderedMap()
    tunnel.EntityData.Children.Append("config", types.YChild{"Config", &tunnel.Config})
    tunnel.EntityData.Children.Append("state", types.YChild{"State", &tunnel.State})
    tunnel.EntityData.Children.Append("bandwidth", types.YChild{"Bandwidth", &tunnel.Bandwidth})
    tunnel.EntityData.Children.Append("p2p-tunnel-attributes", types.YChild{"P2pTunnelAttributes", &tunnel.P2pTunnelAttributes})
    tunnel.EntityData.Leafs = types.NewOrderedMap()
    tunnel.EntityData.Leafs.Append("name", types.YLeaf{"Name", tunnel.Name})

    tunnel.EntityData.YListKeys = []string {"Name"}

    return &(tunnel.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config
// Configuration parameters related to TE tunnels:
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The tunnel name. The type is string.
    Name interface{}

    // Tunnel type, p2p or p2mp. The type is one of the following: P2PP2MP.
    Type interface{}

    // Signaling protocol used to set up this tunnel. The type is one of the
    // following: PATHSETUPSRPATHSETUPRSVPPATHSETUPLDP.
    SignalingProtocol interface{}

    // optional text description for the tunnel. The type is string.
    Description interface{}

    // TE tunnel administrative state. The type is one of the following:
    // ADMINUPADMINDOWN. The default value is oc-mplst:ADMIN_UP.
    AdminStatus interface{}

    // Specifies a preference for this tunnel. A lower number signifies a better
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // The type of metric specification that should be used to set the LSP(s)
    // metric. The type is one of the following:
    // LSPMETRICINHERITEDLSPMETRICABSOLUTELSPMETRICRELATIVE. The default value is
    // oc-mplst:LSP_METRIC_INHERITED.
    MetricType interface{}

    // The value of the metric that should be specified. The value supplied in
    // this leaf is used in conjunction with the metric type to determine the
    // value of the metric used by the system. Where the metric-type is set to
    // LSP_METRIC_ABSOLUTE - the value of this leaf is used directly; where it is
    // set to LSP_METRIC_RELATIVE, the relevant (positive or negative) offset is
    // used to formulate the metric; where metric-type is LSP_METRIC_INHERITED,
    // the value of this leaf is not utilised. The type is interface{} with range:
    // -2147483648..2147483647.
    Metric interface{}

    // Whether this LSP is considered to be eligible for us as a shortcut in the
    // IGP. In the case that this leaf is set to true, the IGP SPF calculation
    // uses the metric specified to determine whether traffic should be carried
    // over this LSP. The type is bool. The default value is true.
    ShortcutEligible interface{}

    // style of mpls frr protection desired: can be link, link-node or
    // unprotected. The type is one of the following:
    // LINKPROTECTIONREQUIREDLINKNODEPROTECTIONREQUESTEDUNPROTECTED. The default
    // value is oc-mplst:UNPROTECTED.
    ProtectionStyleRequested interface{}

    // frequency of reoptimization of a traffic engineered LSP. The type is
    // interface{} with range: 0..65535. Units are seconds.
    ReoptimizeTimer interface{}

    // RSVP-TE tunnel source address. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Source interface{}

    // Enables RSVP soft-preemption on this LSP. The type is bool. The default
    // value is false.
    SoftPreemption interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "tunnel"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("type", types.YLeaf{"Type", config.Type})
    config.EntityData.Leafs.Append("signaling-protocol", types.YLeaf{"SignalingProtocol", config.SignalingProtocol})
    config.EntityData.Leafs.Append("description", types.YLeaf{"Description", config.Description})
    config.EntityData.Leafs.Append("admin-status", types.YLeaf{"AdminStatus", config.AdminStatus})
    config.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", config.Preference})
    config.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", config.MetricType})
    config.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", config.Metric})
    config.EntityData.Leafs.Append("shortcut-eligible", types.YLeaf{"ShortcutEligible", config.ShortcutEligible})
    config.EntityData.Leafs.Append("protection-style-requested", types.YLeaf{"ProtectionStyleRequested", config.ProtectionStyleRequested})
    config.EntityData.Leafs.Append("reoptimize-timer", types.YLeaf{"ReoptimizeTimer", config.ReoptimizeTimer})
    config.EntityData.Leafs.Append("source", types.YLeaf{"Source", config.Source})
    config.EntityData.Leafs.Append("soft-preemption", types.YLeaf{"SoftPreemption", config.SoftPreemption})
    config.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", config.SetupPriority})
    config.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", config.HoldPriority})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State
// State parameters related to TE tunnels
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The tunnel name. The type is string.
    Name interface{}

    // Tunnel type, p2p or p2mp. The type is one of the following: P2PP2MP.
    Type interface{}

    // Signaling protocol used to set up this tunnel. The type is one of the
    // following: PATHSETUPSRPATHSETUPRSVPPATHSETUPLDP.
    SignalingProtocol interface{}

    // optional text description for the tunnel. The type is string.
    Description interface{}

    // TE tunnel administrative state. The type is one of the following:
    // ADMINUPADMINDOWN. The default value is oc-mplst:ADMIN_UP.
    AdminStatus interface{}

    // Specifies a preference for this tunnel. A lower number signifies a better
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // The type of metric specification that should be used to set the LSP(s)
    // metric. The type is one of the following:
    // LSPMETRICINHERITEDLSPMETRICABSOLUTELSPMETRICRELATIVE. The default value is
    // oc-mplst:LSP_METRIC_INHERITED.
    MetricType interface{}

    // The value of the metric that should be specified. The value supplied in
    // this leaf is used in conjunction with the metric type to determine the
    // value of the metric used by the system. Where the metric-type is set to
    // LSP_METRIC_ABSOLUTE - the value of this leaf is used directly; where it is
    // set to LSP_METRIC_RELATIVE, the relevant (positive or negative) offset is
    // used to formulate the metric; where metric-type is LSP_METRIC_INHERITED,
    // the value of this leaf is not utilised. The type is interface{} with range:
    // -2147483648..2147483647.
    Metric interface{}

    // Whether this LSP is considered to be eligible for us as a shortcut in the
    // IGP. In the case that this leaf is set to true, the IGP SPF calculation
    // uses the metric specified to determine whether traffic should be carried
    // over this LSP. The type is bool. The default value is true.
    ShortcutEligible interface{}

    // style of mpls frr protection desired: can be link, link-node or
    // unprotected. The type is one of the following:
    // LINKPROTECTIONREQUIREDLINKNODEPROTECTIONREQUESTEDUNPROTECTED. The default
    // value is oc-mplst:UNPROTECTED.
    ProtectionStyleRequested interface{}

    // frequency of reoptimization of a traffic engineered LSP. The type is
    // interface{} with range: 0..65535. Units are seconds.
    ReoptimizeTimer interface{}

    // RSVP-TE tunnel source address. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Source interface{}

    // Enables RSVP soft-preemption on this LSP. The type is bool. The default
    // value is false.
    SoftPreemption interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}

    // The operational status of the TE tunnel. The type is one of the following:
    // DOWNUP.
    OperStatus interface{}

    // The lsp role at the current node, whether it is headend, transit or
    // tailend. The type is one of the following: INGRESSEGRESSTRANSIT.
    Role interface{}

    // State data for MPLS label switched paths. This state data is specific to a
    // single label switched path.
    Counters NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tunnel"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("counters", types.YChild{"Counters", &state.Counters})
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("signaling-protocol", types.YLeaf{"SignalingProtocol", state.SignalingProtocol})
    state.EntityData.Leafs.Append("description", types.YLeaf{"Description", state.Description})
    state.EntityData.Leafs.Append("admin-status", types.YLeaf{"AdminStatus", state.AdminStatus})
    state.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", state.Preference})
    state.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", state.MetricType})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("shortcut-eligible", types.YLeaf{"ShortcutEligible", state.ShortcutEligible})
    state.EntityData.Leafs.Append("protection-style-requested", types.YLeaf{"ProtectionStyleRequested", state.ProtectionStyleRequested})
    state.EntityData.Leafs.Append("reoptimize-timer", types.YLeaf{"ReoptimizeTimer", state.ReoptimizeTimer})
    state.EntityData.Leafs.Append("source", types.YLeaf{"Source", state.Source})
    state.EntityData.Leafs.Append("soft-preemption", types.YLeaf{"SoftPreemption", state.SoftPreemption})
    state.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", state.SetupPriority})
    state.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", state.HoldPriority})
    state.EntityData.Leafs.Append("oper-status", types.YLeaf{"OperStatus", state.OperStatus})
    state.EntityData.Leafs.Append("role", types.YLeaf{"Role", state.Role})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters
// State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of bytes that have been forwarded over the label switched path. The
    // type is interface{} with range: 0..18446744073709551615.
    Bytes interface{}

    // Number of pacets that have been forwarded over the label switched path. The
    // type is interface{} with range: 0..18446744073709551615.
    Packets interface{}

    // Number of path changes for the label switched path. The type is interface{}
    // with range: 0..18446744073709551615.
    PathChanges interface{}

    // Number of state changes for the label switched path. The type is
    // interface{} with range: 0..18446744073709551615.
    StateChanges interface{}

    // Indication of the time the label switched path transitioned to an Oper Up
    // or in-service state. The type is string with pattern:
    // ^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?Z[+-][0-9]{2}:[0-9]{2}$.
    OnlineTime interface{}

    // Indicates the time the LSP switched onto its current path. This is reset
    // upon a LSP path change. The type is string with pattern:
    // ^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?Z[+-][0-9]{2}:[0-9]{2}$.
    CurrentPathTime interface{}

    // Indicates the next scheduled time the LSP will be reoptimized. The type is
    // string with pattern:
    // ^[0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?Z[+-][0-9]{2}:[0-9]{2}$.
    NextReoptimizationTime interface{}
}

func (counters *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "openconfig"
    counters.EntityData.ParentYangName = "state"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    counters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("bytes", types.YLeaf{"Bytes", counters.Bytes})
    counters.EntityData.Leafs.Append("packets", types.YLeaf{"Packets", counters.Packets})
    counters.EntityData.Leafs.Append("path-changes", types.YLeaf{"PathChanges", counters.PathChanges})
    counters.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", counters.StateChanges})
    counters.EntityData.Leafs.Append("online-time", types.YLeaf{"OnlineTime", counters.OnlineTime})
    counters.EntityData.Leafs.Append("current-path-time", types.YLeaf{"CurrentPathTime", counters.CurrentPathTime})
    counters.EntityData.Leafs.Append("next-reoptimization-time", types.YLeaf{"NextReoptimizationTime", counters.NextReoptimizationTime})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth
// Bandwidth configuration for TE LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters related to bandwidth on TE tunnels:.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config

    // State parameters related to bandwidth configuration of TE tunnels.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State

    // Parameters related to auto-bandwidth.
    AutoBandwidth NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth
}

func (bandwidth *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetEntityData() *types.CommonEntityData {
    bandwidth.EntityData.YFilter = bandwidth.YFilter
    bandwidth.EntityData.YangName = "bandwidth"
    bandwidth.EntityData.BundleName = "openconfig"
    bandwidth.EntityData.ParentYangName = "tunnel"
    bandwidth.EntityData.SegmentPath = "bandwidth"
    bandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/" + bandwidth.EntityData.SegmentPath
    bandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidth.EntityData.Children = types.NewOrderedMap()
    bandwidth.EntityData.Children.Append("config", types.YChild{"Config", &bandwidth.Config})
    bandwidth.EntityData.Children.Append("state", types.YChild{"State", &bandwidth.State})
    bandwidth.EntityData.Children.Append("auto-bandwidth", types.YChild{"AutoBandwidth", &bandwidth.AutoBandwidth})
    bandwidth.EntityData.Leafs = types.NewOrderedMap()

    bandwidth.EntityData.YListKeys = []string {}

    return &(bandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config
// Configuration parameters related to bandwidth on TE
// tunnels:
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The method used for settign the bandwidth, either explicitly specified or
    // configured. The type is TeBandwidthType. The default value is SPECIFIED.
    SpecificationType interface{}

    // set bandwidth explicitly, e.g., using offline calculation. The type is
    // interface{} with range: 0..18446744073709551615.
    SetBandwidth interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "bandwidth"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("specification-type", types.YLeaf{"SpecificationType", config.SpecificationType})
    config.EntityData.Leafs.Append("set-bandwidth", types.YLeaf{"SetBandwidth", config.SetBandwidth})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State
// State parameters related to bandwidth
// configuration of TE tunnels
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The method used for settign the bandwidth, either explicitly specified or
    // configured. The type is TeBandwidthType. The default value is SPECIFIED.
    SpecificationType interface{}

    // set bandwidth explicitly, e.g., using offline calculation. The type is
    // interface{} with range: 0..18446744073709551615.
    SetBandwidth interface{}

    // The currently signaled bandwidth of the LSP. In the case where the
    // bandwidth is specified explicitly, then this will match the value of the
    // set-bandwidth leaf; in cases where the bandwidth is dynamically computed by
    // the system, the current value of the bandwidth should be reflected. The
    // type is interface{} with range: 0..18446744073709551615.
    SignaledBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("specification-type", types.YLeaf{"SpecificationType", state.SpecificationType})
    state.EntityData.Leafs.Append("set-bandwidth", types.YLeaf{"SetBandwidth", state.SetBandwidth})
    state.EntityData.Leafs.Append("signaled-bandwidth", types.YLeaf{"SignaledBandwidth", state.SignaledBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth
// Parameters related to auto-bandwidth
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to MPLS auto-bandwidth on the tunnel.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config

    // State parameters relating to MPLS auto-bandwidth on the tunnel.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State

    // configuration of MPLS overflow bandwidth adjustement for the LSP.
    Overflow NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow

    // configuration of MPLS underflow bandwidth adjustement for the LSP.
    Underflow NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow
}

func (autoBandwidth *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetEntityData() *types.CommonEntityData {
    autoBandwidth.EntityData.YFilter = autoBandwidth.YFilter
    autoBandwidth.EntityData.YangName = "auto-bandwidth"
    autoBandwidth.EntityData.BundleName = "openconfig"
    autoBandwidth.EntityData.ParentYangName = "bandwidth"
    autoBandwidth.EntityData.SegmentPath = "auto-bandwidth"
    autoBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/" + autoBandwidth.EntityData.SegmentPath
    autoBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    autoBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    autoBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    autoBandwidth.EntityData.Children = types.NewOrderedMap()
    autoBandwidth.EntityData.Children.Append("config", types.YChild{"Config", &autoBandwidth.Config})
    autoBandwidth.EntityData.Children.Append("state", types.YChild{"State", &autoBandwidth.State})
    autoBandwidth.EntityData.Children.Append("overflow", types.YChild{"Overflow", &autoBandwidth.Overflow})
    autoBandwidth.EntityData.Children.Append("underflow", types.YChild{"Underflow", &autoBandwidth.Underflow})
    autoBandwidth.EntityData.Leafs = types.NewOrderedMap()

    autoBandwidth.EntityData.YListKeys = []string {}

    return &(autoBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config
// Configuration parameters relating to MPLS
// auto-bandwidth on the tunnel.
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables mpls auto-bandwidth on the lsp. The type is bool. The default value
    // is false.
    Enabled interface{}

    // set the minimum bandwidth in Kbps for an auto-bandwidth LSP. The type is
    // interface{} with range: 0..18446744073709551615.
    MinBw interface{}

    // set the maximum bandwidth in Kbps for an auto-bandwidth LSP. The type is
    // interface{} with range: 0..18446744073709551615.
    MaxBw interface{}

    // time in seconds between adjustments to LSP bandwidth. The type is
    // interface{} with range: 0..4294967295.
    AdjustInterval interface{}

    // percentage difference between the LSP's specified bandwidth and its current
    // bandwidth allocation -- if the difference is greater than the specified
    // percentage, auto-bandwidth adjustment is triggered. The type is interface{}
    // with range: 0..100.
    AdjustThreshold interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "auto-bandwidth"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("min-bw", types.YLeaf{"MinBw", config.MinBw})
    config.EntityData.Leafs.Append("max-bw", types.YLeaf{"MaxBw", config.MaxBw})
    config.EntityData.Leafs.Append("adjust-interval", types.YLeaf{"AdjustInterval", config.AdjustInterval})
    config.EntityData.Leafs.Append("adjust-threshold", types.YLeaf{"AdjustThreshold", config.AdjustThreshold})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State
// State parameters relating to MPLS
// auto-bandwidth on the tunnel.
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables mpls auto-bandwidth on the lsp. The type is bool. The default value
    // is false.
    Enabled interface{}

    // set the minimum bandwidth in Kbps for an auto-bandwidth LSP. The type is
    // interface{} with range: 0..18446744073709551615.
    MinBw interface{}

    // set the maximum bandwidth in Kbps for an auto-bandwidth LSP. The type is
    // interface{} with range: 0..18446744073709551615.
    MaxBw interface{}

    // time in seconds between adjustments to LSP bandwidth. The type is
    // interface{} with range: 0..4294967295.
    AdjustInterval interface{}

    // percentage difference between the LSP's specified bandwidth and its current
    // bandwidth allocation -- if the difference is greater than the specified
    // percentage, auto-bandwidth adjustment is triggered. The type is interface{}
    // with range: 0..100.
    AdjustThreshold interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "auto-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("min-bw", types.YLeaf{"MinBw", state.MinBw})
    state.EntityData.Leafs.Append("max-bw", types.YLeaf{"MaxBw", state.MaxBw})
    state.EntityData.Leafs.Append("adjust-interval", types.YLeaf{"AdjustInterval", state.AdjustInterval})
    state.EntityData.Leafs.Append("adjust-threshold", types.YLeaf{"AdjustThreshold", state.AdjustThreshold})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow
// configuration of MPLS overflow bandwidth
// adjustement for the LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Config information for MPLS overflow bandwidth adjustment.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config

    // Config information for MPLS overflow bandwidth adjustment.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State
}

func (overflow *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) GetEntityData() *types.CommonEntityData {
    overflow.EntityData.YFilter = overflow.YFilter
    overflow.EntityData.YangName = "overflow"
    overflow.EntityData.BundleName = "openconfig"
    overflow.EntityData.ParentYangName = "auto-bandwidth"
    overflow.EntityData.SegmentPath = "overflow"
    overflow.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/" + overflow.EntityData.SegmentPath
    overflow.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    overflow.EntityData.NamespaceTable = openconfig.GetNamespaces()
    overflow.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    overflow.EntityData.Children = types.NewOrderedMap()
    overflow.EntityData.Children.Append("config", types.YChild{"Config", &overflow.Config})
    overflow.EntityData.Children.Append("state", types.YChild{"State", &overflow.State})
    overflow.EntityData.Leafs = types.NewOrderedMap()

    overflow.EntityData.YListKeys = []string {}

    return &(overflow.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config
// Config information for MPLS overflow bandwidth
// adjustment
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables mpls lsp bandwidth overflow adjustment on the lsp. The type is
    // bool. The default value is false.
    Enabled interface{}

    // bandwidth percentage change to trigger an overflow event. The type is
    // interface{} with range: 0..100.
    OverflowThreshold interface{}

    // number of consecutive overflow sample events needed to trigger an overflow
    // adjustment. The type is interface{} with range: 0..65535.
    TriggerEventCount interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "overflow"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("overflow-threshold", types.YLeaf{"OverflowThreshold", config.OverflowThreshold})
    config.EntityData.Leafs.Append("trigger-event-count", types.YLeaf{"TriggerEventCount", config.TriggerEventCount})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State
// Config information for MPLS overflow bandwidth
// adjustment
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables mpls lsp bandwidth overflow adjustment on the lsp. The type is
    // bool. The default value is false.
    Enabled interface{}

    // bandwidth percentage change to trigger an overflow event. The type is
    // interface{} with range: 0..100.
    OverflowThreshold interface{}

    // number of consecutive overflow sample events needed to trigger an overflow
    // adjustment. The type is interface{} with range: 0..65535.
    TriggerEventCount interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "overflow"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("overflow-threshold", types.YLeaf{"OverflowThreshold", state.OverflowThreshold})
    state.EntityData.Leafs.Append("trigger-event-count", types.YLeaf{"TriggerEventCount", state.TriggerEventCount})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow
// configuration of MPLS underflow bandwidth
// adjustement for the LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Config information for MPLS underflow bandwidth adjustment.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config

    // State information for MPLS underflow bandwidth adjustment.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State
}

func (underflow *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) GetEntityData() *types.CommonEntityData {
    underflow.EntityData.YFilter = underflow.YFilter
    underflow.EntityData.YangName = "underflow"
    underflow.EntityData.BundleName = "openconfig"
    underflow.EntityData.ParentYangName = "auto-bandwidth"
    underflow.EntityData.SegmentPath = "underflow"
    underflow.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/" + underflow.EntityData.SegmentPath
    underflow.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    underflow.EntityData.NamespaceTable = openconfig.GetNamespaces()
    underflow.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    underflow.EntityData.Children = types.NewOrderedMap()
    underflow.EntityData.Children.Append("config", types.YChild{"Config", &underflow.Config})
    underflow.EntityData.Children.Append("state", types.YChild{"State", &underflow.State})
    underflow.EntityData.Leafs = types.NewOrderedMap()

    underflow.EntityData.YListKeys = []string {}

    return &(underflow.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config
// Config information for MPLS underflow bandwidth
// adjustment
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables bandwidth underflow adjustment on the lsp. The type is bool. The
    // default value is false.
    Enabled interface{}

    // bandwidth percentage change to trigger and underflow event. The type is
    // interface{} with range: 0..100.
    UnderflowThreshold interface{}

    // number of consecutive underflow sample events needed to trigger an
    // underflow adjustment. The type is interface{} with range: 0..65535.
    TriggerEventCount interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "underflow"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("underflow-threshold", types.YLeaf{"UnderflowThreshold", config.UnderflowThreshold})
    config.EntityData.Leafs.Append("trigger-event-count", types.YLeaf{"TriggerEventCount", config.TriggerEventCount})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State
// State information for MPLS underflow bandwidth
// adjustment
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enables bandwidth underflow adjustment on the lsp. The type is bool. The
    // default value is false.
    Enabled interface{}

    // bandwidth percentage change to trigger and underflow event. The type is
    // interface{} with range: 0..100.
    UnderflowThreshold interface{}

    // number of consecutive underflow sample events needed to trigger an
    // underflow adjustment. The type is interface{} with range: 0..65535.
    TriggerEventCount interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "underflow"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("underflow-threshold", types.YLeaf{"UnderflowThreshold", state.UnderflowThreshold})
    state.EntityData.Leafs.Append("trigger-event-count", types.YLeaf{"TriggerEventCount", state.TriggerEventCount})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes
// Parameters related to LSPs of type P2P
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters for P2P LSPs.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_Config

    // State parameters for P2P LSPs.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_State

    // Primary paths associated with the LSP.
    P2pPrimaryPath NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath

    // Secondary paths for the LSP.
    P2pSecondaryPaths NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths
}

func (p2pTunnelAttributes *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes) GetEntityData() *types.CommonEntityData {
    p2pTunnelAttributes.EntityData.YFilter = p2pTunnelAttributes.YFilter
    p2pTunnelAttributes.EntityData.YangName = "p2p-tunnel-attributes"
    p2pTunnelAttributes.EntityData.BundleName = "openconfig"
    p2pTunnelAttributes.EntityData.ParentYangName = "tunnel"
    p2pTunnelAttributes.EntityData.SegmentPath = "p2p-tunnel-attributes"
    p2pTunnelAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/" + p2pTunnelAttributes.EntityData.SegmentPath
    p2pTunnelAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    p2pTunnelAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    p2pTunnelAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    p2pTunnelAttributes.EntityData.Children = types.NewOrderedMap()
    p2pTunnelAttributes.EntityData.Children.Append("config", types.YChild{"Config", &p2pTunnelAttributes.Config})
    p2pTunnelAttributes.EntityData.Children.Append("state", types.YChild{"State", &p2pTunnelAttributes.State})
    p2pTunnelAttributes.EntityData.Children.Append("p2p-primary-path", types.YChild{"P2pPrimaryPath", &p2pTunnelAttributes.P2pPrimaryPath})
    p2pTunnelAttributes.EntityData.Children.Append("p2p-secondary-paths", types.YChild{"P2pSecondaryPaths", &p2pTunnelAttributes.P2pSecondaryPaths})
    p2pTunnelAttributes.EntityData.Leafs = types.NewOrderedMap()

    p2pTunnelAttributes.EntityData.YListKeys = []string {}

    return &(p2pTunnelAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_Config
// Configuration parameters for P2P LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2P tunnel destination address. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Destination interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "p2p-tunnel-attributes"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", config.Destination})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_State
// State parameters for P2P LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // P2P tunnel destination address. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Destination interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "p2p-tunnel-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("destination", types.YLeaf{"Destination", state.Destination})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath
// Primary paths associated with the LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of p2p primary paths for a tunnel. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath.
    P2pPrimaryPath []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath
}

func (p2pPrimaryPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath) GetEntityData() *types.CommonEntityData {
    p2pPrimaryPath.EntityData.YFilter = p2pPrimaryPath.YFilter
    p2pPrimaryPath.EntityData.YangName = "p2p-primary-path"
    p2pPrimaryPath.EntityData.BundleName = "openconfig"
    p2pPrimaryPath.EntityData.ParentYangName = "p2p-tunnel-attributes"
    p2pPrimaryPath.EntityData.SegmentPath = "p2p-primary-path"
    p2pPrimaryPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/" + p2pPrimaryPath.EntityData.SegmentPath
    p2pPrimaryPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    p2pPrimaryPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    p2pPrimaryPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    p2pPrimaryPath.EntityData.Children = types.NewOrderedMap()
    p2pPrimaryPath.EntityData.Children.Append("p2p-primary-path", types.YChild{"P2pPrimaryPath", nil})
    for i := range p2pPrimaryPath.P2pPrimaryPath {
        p2pPrimaryPath.EntityData.Children.Append(types.GetSegmentPath(p2pPrimaryPath.P2pPrimaryPath[i]), types.YChild{"P2pPrimaryPath", p2pPrimaryPath.P2pPrimaryPath[i]})
    }
    p2pPrimaryPath.EntityData.Leafs = types.NewOrderedMap()

    p2pPrimaryPath.EntityData.YListKeys = []string {}

    return &(p2pPrimaryPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath
// List of p2p primary paths for a tunnel
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path name. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_Config_Name
    Name interface{}

    // Configuration parameters related to paths.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_Config

    // State parameters related to paths.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_State

    // The set of candidate secondary paths which may be used for this primary
    // path. When secondary paths are specified in the list the path of the
    // secondary LSP in use must be restricted to those path options referenced.
    // The priority of the secondary paths is specified within the list. Higher
    // priority values are less preferred - that is to say that a path with
    // priority 0 is the most preferred path. In the case that the list is empty,
    // any secondary path option may be utilised when the current primary path is
    // in use.
    CandidateSecondaryPaths NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths

    // Top-level container for include/exclude constraints for link affinities.
    AdminGroups NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups
}

func (p2pPrimaryPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath) GetEntityData() *types.CommonEntityData {
    p2pPrimaryPath.EntityData.YFilter = p2pPrimaryPath.YFilter
    p2pPrimaryPath.EntityData.YangName = "p2p-primary-path"
    p2pPrimaryPath.EntityData.BundleName = "openconfig"
    p2pPrimaryPath.EntityData.ParentYangName = "p2p-primary-path"
    p2pPrimaryPath.EntityData.SegmentPath = "p2p-primary-path" + types.AddKeyToken(p2pPrimaryPath.Name, "name")
    p2pPrimaryPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/" + p2pPrimaryPath.EntityData.SegmentPath
    p2pPrimaryPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    p2pPrimaryPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    p2pPrimaryPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    p2pPrimaryPath.EntityData.Children = types.NewOrderedMap()
    p2pPrimaryPath.EntityData.Children.Append("config", types.YChild{"Config", &p2pPrimaryPath.Config})
    p2pPrimaryPath.EntityData.Children.Append("state", types.YChild{"State", &p2pPrimaryPath.State})
    p2pPrimaryPath.EntityData.Children.Append("candidate-secondary-paths", types.YChild{"CandidateSecondaryPaths", &p2pPrimaryPath.CandidateSecondaryPaths})
    p2pPrimaryPath.EntityData.Children.Append("admin-groups", types.YChild{"AdminGroups", &p2pPrimaryPath.AdminGroups})
    p2pPrimaryPath.EntityData.Leafs = types.NewOrderedMap()
    p2pPrimaryPath.EntityData.Leafs.Append("name", types.YLeaf{"Name", p2pPrimaryPath.Name})

    p2pPrimaryPath.EntityData.YListKeys = []string {"Name"}

    return &(p2pPrimaryPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_Config
// Configuration parameters related to paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path name. The type is string.
    Name interface{}

    // The method used for computing the path, either locally computed, queried
    // from a server or not computed at all (explicitly configured). The type is
    // one of the following: LOCALLYCOMPUTEDEXTERNALLYQUERIEDEXPLICITLYDEFINED.
    // The default value is oc-mplst:LOCALLY_COMPUTED.
    PathComputationMethod interface{}

    // Flag to enable CSPF for locally computed LSPs. The type is bool.
    UseCspf interface{}

    // Determine the tie-breaking method to choose between equally desirable paths
    // during CSFP computation. The type is CspfTieBreaking.
    CspfTiebreaker interface{}

    // Address of the external path computation server. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    PathComputationServer interface{}

    // reference to a defined path. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_Name
    ExplicitPathName interface{}

    // Specifies a preference for this path. The lower the number higher the
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}

    // sets the time between attempts to establish the LSP. The type is
    // interface{} with range: 1..600. Units are seconds.
    RetryTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "p2p-primary-path"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("path-computation-method", types.YLeaf{"PathComputationMethod", config.PathComputationMethod})
    config.EntityData.Leafs.Append("use-cspf", types.YLeaf{"UseCspf", config.UseCspf})
    config.EntityData.Leafs.Append("cspf-tiebreaker", types.YLeaf{"CspfTiebreaker", config.CspfTiebreaker})
    config.EntityData.Leafs.Append("path-computation-server", types.YLeaf{"PathComputationServer", config.PathComputationServer})
    config.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", config.ExplicitPathName})
    config.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", config.Preference})
    config.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", config.SetupPriority})
    config.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", config.HoldPriority})
    config.EntityData.Leafs.Append("retry-timer", types.YLeaf{"RetryTimer", config.RetryTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_State
// State parameters related to paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path name. The type is string.
    Name interface{}

    // The method used for computing the path, either locally computed, queried
    // from a server or not computed at all (explicitly configured). The type is
    // one of the following: LOCALLYCOMPUTEDEXTERNALLYQUERIEDEXPLICITLYDEFINED.
    // The default value is oc-mplst:LOCALLY_COMPUTED.
    PathComputationMethod interface{}

    // Flag to enable CSPF for locally computed LSPs. The type is bool.
    UseCspf interface{}

    // Determine the tie-breaking method to choose between equally desirable paths
    // during CSFP computation. The type is CspfTieBreaking.
    CspfTiebreaker interface{}

    // Address of the external path computation server. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    PathComputationServer interface{}

    // reference to a defined path. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_Name
    ExplicitPathName interface{}

    // Specifies a preference for this path. The lower the number higher the
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}

    // sets the time between attempts to establish the LSP. The type is
    // interface{} with range: 1..600. Units are seconds.
    RetryTimer interface{}

    // If the signalling protocol specified for this path is RSVP-TE, this leaf
    // provides a reference to the associated session within the RSVP-TE protocol
    // sessions list, such that details of the signaling can be retrieved. The
    // type is string with range: 0..18446744073709551615. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_LocalIndex
    AssociatedRsvpSession interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "p2p-primary-path"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("path-computation-method", types.YLeaf{"PathComputationMethod", state.PathComputationMethod})
    state.EntityData.Leafs.Append("use-cspf", types.YLeaf{"UseCspf", state.UseCspf})
    state.EntityData.Leafs.Append("cspf-tiebreaker", types.YLeaf{"CspfTiebreaker", state.CspfTiebreaker})
    state.EntityData.Leafs.Append("path-computation-server", types.YLeaf{"PathComputationServer", state.PathComputationServer})
    state.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", state.ExplicitPathName})
    state.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", state.Preference})
    state.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", state.SetupPriority})
    state.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", state.HoldPriority})
    state.EntityData.Leafs.Append("retry-timer", types.YLeaf{"RetryTimer", state.RetryTimer})
    state.EntityData.Leafs.Append("associated-rsvp-session", types.YLeaf{"AssociatedRsvpSession", state.AssociatedRsvpSession})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths
// The set of candidate secondary paths which may be used
// for this primary path. When secondary paths are specified
// in the list the path of the secondary LSP in use must be
// restricted to those path options referenced. The
// priority of the secondary paths is specified within the
// list. Higher priority values are less preferred - that is
// to say that a path with priority 0 is the most preferred
// path. In the case that the list is empty, any secondary
// path option may be utilised when the current primary path
// is in use.
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of secondary paths which may be utilised when the current primary path
    // is in use. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath.
    CandidateSecondaryPath []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath
}

func (candidateSecondaryPaths *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths) GetEntityData() *types.CommonEntityData {
    candidateSecondaryPaths.EntityData.YFilter = candidateSecondaryPaths.YFilter
    candidateSecondaryPaths.EntityData.YangName = "candidate-secondary-paths"
    candidateSecondaryPaths.EntityData.BundleName = "openconfig"
    candidateSecondaryPaths.EntityData.ParentYangName = "p2p-primary-path"
    candidateSecondaryPaths.EntityData.SegmentPath = "candidate-secondary-paths"
    candidateSecondaryPaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/" + candidateSecondaryPaths.EntityData.SegmentPath
    candidateSecondaryPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    candidateSecondaryPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    candidateSecondaryPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    candidateSecondaryPaths.EntityData.Children = types.NewOrderedMap()
    candidateSecondaryPaths.EntityData.Children.Append("candidate-secondary-path", types.YChild{"CandidateSecondaryPath", nil})
    for i := range candidateSecondaryPaths.CandidateSecondaryPath {
        candidateSecondaryPaths.EntityData.Children.Append(types.GetSegmentPath(candidateSecondaryPaths.CandidateSecondaryPath[i]), types.YChild{"CandidateSecondaryPath", candidateSecondaryPaths.CandidateSecondaryPath[i]})
    }
    candidateSecondaryPaths.EntityData.Leafs = types.NewOrderedMap()

    candidateSecondaryPaths.EntityData.YListKeys = []string {}

    return &(candidateSecondaryPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath
// List of secondary paths which may be utilised when the
// current primary path is in use
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the secondary path option reference
    // which acts as the key of the candidate-secondary-path list. The type is
    // string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config_SecondaryPath
    SecondaryPath interface{}

    // Configuration parameters relating to the candidate secondary path.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config

    // Operational state parameters relating to the candidate secondary path.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State
}

func (candidateSecondaryPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) GetEntityData() *types.CommonEntityData {
    candidateSecondaryPath.EntityData.YFilter = candidateSecondaryPath.YFilter
    candidateSecondaryPath.EntityData.YangName = "candidate-secondary-path"
    candidateSecondaryPath.EntityData.BundleName = "openconfig"
    candidateSecondaryPath.EntityData.ParentYangName = "candidate-secondary-paths"
    candidateSecondaryPath.EntityData.SegmentPath = "candidate-secondary-path" + types.AddKeyToken(candidateSecondaryPath.SecondaryPath, "secondary-path")
    candidateSecondaryPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/" + candidateSecondaryPath.EntityData.SegmentPath
    candidateSecondaryPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    candidateSecondaryPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    candidateSecondaryPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    candidateSecondaryPath.EntityData.Children = types.NewOrderedMap()
    candidateSecondaryPath.EntityData.Children.Append("config", types.YChild{"Config", &candidateSecondaryPath.Config})
    candidateSecondaryPath.EntityData.Children.Append("state", types.YChild{"State", &candidateSecondaryPath.State})
    candidateSecondaryPath.EntityData.Leafs = types.NewOrderedMap()
    candidateSecondaryPath.EntityData.Leafs.Append("secondary-path", types.YLeaf{"SecondaryPath", candidateSecondaryPath.SecondaryPath})

    candidateSecondaryPath.EntityData.YListKeys = []string {"SecondaryPath"}

    return &(candidateSecondaryPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config
// Configuration parameters relating to the candidate
// secondary path
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A reference to the secondary path that should be utilised when the
    // containing primary path option is in use. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config_Name
    SecondaryPath interface{}

    // The priority of the specified secondary path option. Higher priority
    // options are less preferable - such that a secondary path reference with a
    // priority of 0 is the most preferred. The type is interface{} with range:
    // 0..65535.
    Priority interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "candidate-secondary-path"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("secondary-path", types.YLeaf{"SecondaryPath", config.SecondaryPath})
    config.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", config.Priority})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State
// Operational state parameters relating to the candidate
// secondary path
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A reference to the secondary path that should be utilised when the
    // containing primary path option is in use. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config_Name
    SecondaryPath interface{}

    // The priority of the specified secondary path option. Higher priority
    // options are less preferable - such that a secondary path reference with a
    // priority of 0 is the most preferred. The type is interface{} with range:
    // 0..65535.
    Priority interface{}

    // Indicates the current active path option that has been selected of the
    // candidate secondary paths. The type is bool.
    Active interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "candidate-secondary-path"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("secondary-path", types.YLeaf{"SecondaryPath", state.SecondaryPath})
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("active", types.YLeaf{"Active", state.Active})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups
// Top-level container for include/exclude constraints for
// link affinities
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration data .
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_Config

    // Operational state data .
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_State
}

func (adminGroups *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups) GetEntityData() *types.CommonEntityData {
    adminGroups.EntityData.YFilter = adminGroups.YFilter
    adminGroups.EntityData.YangName = "admin-groups"
    adminGroups.EntityData.BundleName = "openconfig"
    adminGroups.EntityData.ParentYangName = "p2p-primary-path"
    adminGroups.EntityData.SegmentPath = "admin-groups"
    adminGroups.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/" + adminGroups.EntityData.SegmentPath
    adminGroups.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroups.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroups.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroups.EntityData.Children = types.NewOrderedMap()
    adminGroups.EntityData.Children.Append("config", types.YChild{"Config", &adminGroups.Config})
    adminGroups.EntityData.Children.Append("state", types.YChild{"State", &adminGroups.State})
    adminGroups.EntityData.Leafs = types.NewOrderedMap()

    adminGroups.EntityData.YListKeys = []string {}

    return &(adminGroups.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_Config
// Configuration data 
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of references to named admin-groups to exclude in path calculation.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    ExcludeGroup []interface{}

    // list of references to named admin-groups of which all must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAllGroup []interface{}

    // list of references to named admin-groups of which one must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAnyGroup []interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "admin-groups"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("exclude-group", types.YLeaf{"ExcludeGroup", config.ExcludeGroup})
    config.EntityData.Leafs.Append("include-all-group", types.YLeaf{"IncludeAllGroup", config.IncludeAllGroup})
    config.EntityData.Leafs.Append("include-any-group", types.YLeaf{"IncludeAnyGroup", config.IncludeAnyGroup})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_State
// Operational state data 
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of references to named admin-groups to exclude in path calculation.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    ExcludeGroup []interface{}

    // list of references to named admin-groups of which all must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAllGroup []interface{}

    // list of references to named admin-groups of which one must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAnyGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pPrimaryPath_P2pPrimaryPath_AdminGroups_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-groups"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("exclude-group", types.YLeaf{"ExcludeGroup", state.ExcludeGroup})
    state.EntityData.Leafs.Append("include-all-group", types.YLeaf{"IncludeAllGroup", state.IncludeAllGroup})
    state.EntityData.Leafs.Append("include-any-group", types.YLeaf{"IncludeAnyGroup", state.IncludeAnyGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths
// Secondary paths for the LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of p2p primary paths for a tunnel. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath.
    P2pSecondaryPath []*NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath
}

func (p2pSecondaryPaths *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths) GetEntityData() *types.CommonEntityData {
    p2pSecondaryPaths.EntityData.YFilter = p2pSecondaryPaths.YFilter
    p2pSecondaryPaths.EntityData.YangName = "p2p-secondary-paths"
    p2pSecondaryPaths.EntityData.BundleName = "openconfig"
    p2pSecondaryPaths.EntityData.ParentYangName = "p2p-tunnel-attributes"
    p2pSecondaryPaths.EntityData.SegmentPath = "p2p-secondary-paths"
    p2pSecondaryPaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/" + p2pSecondaryPaths.EntityData.SegmentPath
    p2pSecondaryPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    p2pSecondaryPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    p2pSecondaryPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    p2pSecondaryPaths.EntityData.Children = types.NewOrderedMap()
    p2pSecondaryPaths.EntityData.Children.Append("p2p-secondary-path", types.YChild{"P2pSecondaryPath", nil})
    for i := range p2pSecondaryPaths.P2pSecondaryPath {
        p2pSecondaryPaths.EntityData.Children.Append(types.GetSegmentPath(p2pSecondaryPaths.P2pSecondaryPath[i]), types.YChild{"P2pSecondaryPath", p2pSecondaryPaths.P2pSecondaryPath[i]})
    }
    p2pSecondaryPaths.EntityData.Leafs = types.NewOrderedMap()

    p2pSecondaryPaths.EntityData.YListKeys = []string {}

    return &(p2pSecondaryPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath
// List of p2p primary paths for a tunnel
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Path name. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config_Name
    Name interface{}

    // Configuration parameters related to paths.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config

    // State parameters related to paths.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_State

    // Top-level container for include/exclude constraints for link affinities.
    AdminGroups NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups
}

func (p2pSecondaryPath *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath) GetEntityData() *types.CommonEntityData {
    p2pSecondaryPath.EntityData.YFilter = p2pSecondaryPath.YFilter
    p2pSecondaryPath.EntityData.YangName = "p2p-secondary-path"
    p2pSecondaryPath.EntityData.BundleName = "openconfig"
    p2pSecondaryPath.EntityData.ParentYangName = "p2p-secondary-paths"
    p2pSecondaryPath.EntityData.SegmentPath = "p2p-secondary-path" + types.AddKeyToken(p2pSecondaryPath.Name, "name")
    p2pSecondaryPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/" + p2pSecondaryPath.EntityData.SegmentPath
    p2pSecondaryPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    p2pSecondaryPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    p2pSecondaryPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    p2pSecondaryPath.EntityData.Children = types.NewOrderedMap()
    p2pSecondaryPath.EntityData.Children.Append("config", types.YChild{"Config", &p2pSecondaryPath.Config})
    p2pSecondaryPath.EntityData.Children.Append("state", types.YChild{"State", &p2pSecondaryPath.State})
    p2pSecondaryPath.EntityData.Children.Append("admin-groups", types.YChild{"AdminGroups", &p2pSecondaryPath.AdminGroups})
    p2pSecondaryPath.EntityData.Leafs = types.NewOrderedMap()
    p2pSecondaryPath.EntityData.Leafs.Append("name", types.YLeaf{"Name", p2pSecondaryPath.Name})

    p2pSecondaryPath.EntityData.YListKeys = []string {"Name"}

    return &(p2pSecondaryPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config
// Configuration parameters related to paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path name. The type is string.
    Name interface{}

    // The method used for computing the path, either locally computed, queried
    // from a server or not computed at all (explicitly configured). The type is
    // one of the following: LOCALLYCOMPUTEDEXTERNALLYQUERIEDEXPLICITLYDEFINED.
    // The default value is oc-mplst:LOCALLY_COMPUTED.
    PathComputationMethod interface{}

    // Flag to enable CSPF for locally computed LSPs. The type is bool.
    UseCspf interface{}

    // Determine the tie-breaking method to choose between equally desirable paths
    // during CSFP computation. The type is CspfTieBreaking.
    CspfTiebreaker interface{}

    // Address of the external path computation server. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    PathComputationServer interface{}

    // reference to a defined path. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_Name
    ExplicitPathName interface{}

    // Specifies a preference for this path. The lower the number higher the
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}

    // sets the time between attempts to establish the LSP. The type is
    // interface{} with range: 1..600. Units are seconds.
    RetryTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "p2p-secondary-path"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("path-computation-method", types.YLeaf{"PathComputationMethod", config.PathComputationMethod})
    config.EntityData.Leafs.Append("use-cspf", types.YLeaf{"UseCspf", config.UseCspf})
    config.EntityData.Leafs.Append("cspf-tiebreaker", types.YLeaf{"CspfTiebreaker", config.CspfTiebreaker})
    config.EntityData.Leafs.Append("path-computation-server", types.YLeaf{"PathComputationServer", config.PathComputationServer})
    config.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", config.ExplicitPathName})
    config.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", config.Preference})
    config.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", config.SetupPriority})
    config.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", config.HoldPriority})
    config.EntityData.Leafs.Append("retry-timer", types.YLeaf{"RetryTimer", config.RetryTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_State
// State parameters related to paths
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path name. The type is string.
    Name interface{}

    // The method used for computing the path, either locally computed, queried
    // from a server or not computed at all (explicitly configured). The type is
    // one of the following: LOCALLYCOMPUTEDEXTERNALLYQUERIEDEXPLICITLYDEFINED.
    // The default value is oc-mplst:LOCALLY_COMPUTED.
    PathComputationMethod interface{}

    // Flag to enable CSPF for locally computed LSPs. The type is bool.
    UseCspf interface{}

    // Determine the tie-breaking method to choose between equally desirable paths
    // during CSFP computation. The type is CspfTieBreaking.
    CspfTiebreaker interface{}

    // Address of the external path computation server. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    PathComputationServer interface{}

    // reference to a defined path. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_Name
    ExplicitPathName interface{}

    // Specifies a preference for this path. The lower the number higher the
    // preference. The type is interface{} with range: 1..255.
    Preference interface{}

    // RSVP-TE preemption priority during LSP setup, lower is higher priority;
    // default 7 indicates that LSP will not preempt established LSPs during
    // setup. The type is interface{} with range: 0..7. The default value is 7.
    SetupPriority interface{}

    // preemption priority once the LSP is established, lower is higher priority;
    // default 0 indicates other LSPs will not preempt the LSPs once established.
    // The type is interface{} with range: 0..7. The default value is 0.
    HoldPriority interface{}

    // sets the time between attempts to establish the LSP. The type is
    // interface{} with range: 1..600. Units are seconds.
    RetryTimer interface{}

    // If the signalling protocol specified for this path is RSVP-TE, this leaf
    // provides a reference to the associated session within the RSVP-TE protocol
    // sessions list, such that details of the signaling can be retrieved. The
    // type is string with range: 0..18446744073709551615. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_LocalIndex
    AssociatedRsvpSession interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "p2p-secondary-path"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("path-computation-method", types.YLeaf{"PathComputationMethod", state.PathComputationMethod})
    state.EntityData.Leafs.Append("use-cspf", types.YLeaf{"UseCspf", state.UseCspf})
    state.EntityData.Leafs.Append("cspf-tiebreaker", types.YLeaf{"CspfTiebreaker", state.CspfTiebreaker})
    state.EntityData.Leafs.Append("path-computation-server", types.YLeaf{"PathComputationServer", state.PathComputationServer})
    state.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", state.ExplicitPathName})
    state.EntityData.Leafs.Append("preference", types.YLeaf{"Preference", state.Preference})
    state.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", state.SetupPriority})
    state.EntityData.Leafs.Append("hold-priority", types.YLeaf{"HoldPriority", state.HoldPriority})
    state.EntityData.Leafs.Append("retry-timer", types.YLeaf{"RetryTimer", state.RetryTimer})
    state.EntityData.Leafs.Append("associated-rsvp-session", types.YLeaf{"AssociatedRsvpSession", state.AssociatedRsvpSession})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups
// Top-level container for include/exclude constraints for
// link affinities
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration data .
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_Config

    // Operational state data .
    State NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_State
}

func (adminGroups *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups) GetEntityData() *types.CommonEntityData {
    adminGroups.EntityData.YFilter = adminGroups.YFilter
    adminGroups.EntityData.YangName = "admin-groups"
    adminGroups.EntityData.BundleName = "openconfig"
    adminGroups.EntityData.ParentYangName = "p2p-secondary-path"
    adminGroups.EntityData.SegmentPath = "admin-groups"
    adminGroups.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/" + adminGroups.EntityData.SegmentPath
    adminGroups.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroups.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroups.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroups.EntityData.Children = types.NewOrderedMap()
    adminGroups.EntityData.Children.Append("config", types.YChild{"Config", &adminGroups.Config})
    adminGroups.EntityData.Children.Append("state", types.YChild{"State", &adminGroups.State})
    adminGroups.EntityData.Leafs = types.NewOrderedMap()

    adminGroups.EntityData.YListKeys = []string {}

    return &(adminGroups.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_Config
// Configuration data 
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of references to named admin-groups to exclude in path calculation.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    ExcludeGroup []interface{}

    // list of references to named admin-groups of which all must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAllGroup []interface{}

    // list of references to named admin-groups of which one must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAnyGroup []interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "admin-groups"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("exclude-group", types.YLeaf{"ExcludeGroup", config.ExcludeGroup})
    config.EntityData.Leafs.Append("include-all-group", types.YLeaf{"IncludeAllGroup", config.IncludeAllGroup})
    config.EntityData.Leafs.Append("include-any-group", types.YLeaf{"IncludeAnyGroup", config.IncludeAnyGroup})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_State
// Operational state data 
type NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of references to named admin-groups to exclude in path calculation.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    ExcludeGroup []interface{}

    // list of references to named admin-groups of which all must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAllGroup []interface{}

    // list of references to named admin-groups of which one must be included. The
    // type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes_MplsAdminGroups_AdminGroup_AdminGroupName
    IncludeAnyGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2pTunnelAttributes_P2pSecondaryPaths_P2pSecondaryPath_AdminGroups_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-groups"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("exclude-group", types.YLeaf{"ExcludeGroup", state.ExcludeGroup})
    state.EntityData.Leafs.Append("include-all-group", types.YLeaf{"IncludeAllGroup", state.IncludeAllGroup})
    state.EntityData.Leafs.Append("include-any-group", types.YLeaf{"IncludeAnyGroup", state.IncludeAnyGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath
// LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
type NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // select and configure the signaling method for  the LSP.
    PathSetupProtocol NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol
}

func (unconstrainedPath *NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) GetEntityData() *types.CommonEntityData {
    unconstrainedPath.EntityData.YFilter = unconstrainedPath.YFilter
    unconstrainedPath.EntityData.YangName = "unconstrained-path"
    unconstrainedPath.EntityData.BundleName = "openconfig"
    unconstrainedPath.EntityData.ParentYangName = "lsps"
    unconstrainedPath.EntityData.SegmentPath = "unconstrained-path"
    unconstrainedPath.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/" + unconstrainedPath.EntityData.SegmentPath
    unconstrainedPath.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedPath.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedPath.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedPath.EntityData.Children = types.NewOrderedMap()
    unconstrainedPath.EntityData.Children.Append("path-setup-protocol", types.YChild{"PathSetupProtocol", &unconstrainedPath.PathSetupProtocol})
    unconstrainedPath.EntityData.Leafs = types.NewOrderedMap()

    unconstrainedPath.EntityData.YListKeys = []string {}

    return &(unconstrainedPath.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol
// select and configure the signaling method for
//  the LSP
type NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP signaling setup for IGP-congruent LSPs.
    Ldp NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp
}

func (pathSetupProtocol *NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) GetEntityData() *types.CommonEntityData {
    pathSetupProtocol.EntityData.YFilter = pathSetupProtocol.YFilter
    pathSetupProtocol.EntityData.YangName = "path-setup-protocol"
    pathSetupProtocol.EntityData.BundleName = "openconfig"
    pathSetupProtocol.EntityData.ParentYangName = "unconstrained-path"
    pathSetupProtocol.EntityData.SegmentPath = "path-setup-protocol"
    pathSetupProtocol.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/unconstrained-path/" + pathSetupProtocol.EntityData.SegmentPath
    pathSetupProtocol.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    pathSetupProtocol.EntityData.NamespaceTable = openconfig.GetNamespaces()
    pathSetupProtocol.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    pathSetupProtocol.EntityData.Children = types.NewOrderedMap()
    pathSetupProtocol.EntityData.Children.Append("ldp", types.YChild{"Ldp", &pathSetupProtocol.Ldp})
    pathSetupProtocol.EntityData.Leafs = types.NewOrderedMap()

    pathSetupProtocol.EntityData.YListKeys = []string {}

    return &(pathSetupProtocol.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp
// LDP signaling setup for IGP-congruent LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ldp *NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) GetEntityData() *types.CommonEntityData {
    ldp.EntityData.YFilter = ldp.YFilter
    ldp.EntityData.YangName = "ldp"
    ldp.EntityData.BundleName = "openconfig"
    ldp.EntityData.ParentYangName = "path-setup-protocol"
    ldp.EntityData.SegmentPath = "ldp"
    ldp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/" + ldp.EntityData.SegmentPath
    ldp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ldp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ldp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ldp.EntityData.Children = types.NewOrderedMap()
    ldp.EntityData.Leafs = types.NewOrderedMap()

    ldp.EntityData.YListKeys = []string {}

    return &(ldp.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps
// statically configured LSPs, without dynamic
// signaling
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of defined static LSPs. The type is slice of
    // NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp.
    StaticLsp []*NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp
}

func (staticLsps *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) GetEntityData() *types.CommonEntityData {
    staticLsps.EntityData.YFilter = staticLsps.YFilter
    staticLsps.EntityData.YangName = "static-lsps"
    staticLsps.EntityData.BundleName = "openconfig"
    staticLsps.EntityData.ParentYangName = "lsps"
    staticLsps.EntityData.SegmentPath = "static-lsps"
    staticLsps.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/" + staticLsps.EntityData.SegmentPath
    staticLsps.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    staticLsps.EntityData.NamespaceTable = openconfig.GetNamespaces()
    staticLsps.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    staticLsps.EntityData.Children = types.NewOrderedMap()
    staticLsps.EntityData.Children.Append("static-lsp", types.YChild{"StaticLsp", nil})
    for i := range staticLsps.StaticLsp {
        staticLsps.EntityData.Children.Append(types.GetSegmentPath(staticLsps.StaticLsp[i]), types.YChild{"StaticLsp", staticLsps.StaticLsp[i]})
    }
    staticLsps.EntityData.Leafs = types.NewOrderedMap()

    staticLsps.EntityData.YListKeys = []string {}

    return &(staticLsps.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp
// list of defined static LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference the name list key. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config_Name
    Name interface{}

    // Configuration data for the static lsp.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config

    // Operational state data for the static lsp.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State

    // Static LSPs for which the router is an  ingress node.
    Ingress NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress

    // Static LSPs for which the router is an  transit node.
    Transit NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit

    // Static LSPs for which the router is an  egress node.
    Egress NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress
}

func (staticLsp *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetEntityData() *types.CommonEntityData {
    staticLsp.EntityData.YFilter = staticLsp.YFilter
    staticLsp.EntityData.YangName = "static-lsp"
    staticLsp.EntityData.BundleName = "openconfig"
    staticLsp.EntityData.ParentYangName = "static-lsps"
    staticLsp.EntityData.SegmentPath = "static-lsp" + types.AddKeyToken(staticLsp.Name, "name")
    staticLsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/" + staticLsp.EntityData.SegmentPath
    staticLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    staticLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    staticLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    staticLsp.EntityData.Children = types.NewOrderedMap()
    staticLsp.EntityData.Children.Append("config", types.YChild{"Config", &staticLsp.Config})
    staticLsp.EntityData.Children.Append("state", types.YChild{"State", &staticLsp.State})
    staticLsp.EntityData.Children.Append("ingress", types.YChild{"Ingress", &staticLsp.Ingress})
    staticLsp.EntityData.Children.Append("transit", types.YChild{"Transit", &staticLsp.Transit})
    staticLsp.EntityData.Children.Append("egress", types.YChild{"Egress", &staticLsp.Egress})
    staticLsp.EntityData.Leafs = types.NewOrderedMap()
    staticLsp.EntityData.Leafs.Append("name", types.YLeaf{"Name", staticLsp.Name})

    staticLsp.EntityData.YListKeys = []string {"Name"}

    return &(staticLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config
// Configuration data for the static lsp
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // name to identify the LSP. The type is string.
    Name interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "static-lsp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State
// Operational state data for the static lsp
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // name to identify the LSP. The type is string.
    Name interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "static-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress
// Static LSPs for which the router is an
//  ingress node
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration data for ingress LSPs.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config

    // Operational state data for ingress LSPs.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State
}

func (ingress *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "openconfig"
    ingress.EntityData.ParentYangName = "static-lsp"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/" + ingress.EntityData.SegmentPath
    ingress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ingress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ingress.EntityData.Children = types.NewOrderedMap()
    ingress.EntityData.Children.Append("config", types.YChild{"Config", &ingress.Config})
    ingress.EntityData.Children.Append("state", types.YChild{"State", &ingress.State})
    ingress.EntityData.Leafs = types.NewOrderedMap()

    ingress.EntityData.YListKeys = []string {}

    return &(ingress.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config
// Configuration data for ingress LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ingress"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", config.NextHop})
    config.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", config.IncomingLabel})
    config.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", config.PushLabel})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State
// Operational state data for ingress LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ingress"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", state.NextHop})
    state.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", state.IncomingLabel})
    state.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", state.PushLabel})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit
// Static LSPs for which the router is an
//  transit node
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration data for transit LSPs.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config

    // Operational state data for transit LSPs.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State
}

func (transit *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetEntityData() *types.CommonEntityData {
    transit.EntityData.YFilter = transit.YFilter
    transit.EntityData.YangName = "transit"
    transit.EntityData.BundleName = "openconfig"
    transit.EntityData.ParentYangName = "static-lsp"
    transit.EntityData.SegmentPath = "transit"
    transit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/" + transit.EntityData.SegmentPath
    transit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transit.EntityData.Children = types.NewOrderedMap()
    transit.EntityData.Children.Append("config", types.YChild{"Config", &transit.Config})
    transit.EntityData.Children.Append("state", types.YChild{"State", &transit.State})
    transit.EntityData.Leafs = types.NewOrderedMap()

    transit.EntityData.YListKeys = []string {}

    return &(transit.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config
// Configuration data for transit LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", config.NextHop})
    config.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", config.IncomingLabel})
    config.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", config.PushLabel})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State
// Operational state data for transit LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", state.NextHop})
    state.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", state.IncomingLabel})
    state.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", state.PushLabel})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress
// Static LSPs for which the router is an
//  egress node
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration data for egress LSPs.
    Config NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config

    // Operational state data for egress LSPs.
    State NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State
}

func (egress *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "openconfig"
    egress.EntityData.ParentYangName = "static-lsp"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/" + egress.EntityData.SegmentPath
    egress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    egress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    egress.EntityData.Children = types.NewOrderedMap()
    egress.EntityData.Children.Append("config", types.YChild{"Config", &egress.Config})
    egress.EntityData.Children.Append("state", types.YChild{"State", &egress.State})
    egress.EntityData.Leafs = types.NewOrderedMap()

    egress.EntityData.YListKeys = []string {}

    return &(egress.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config
// Configuration data for egress LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (config *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "egress"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", config.NextHop})
    config.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", config.IncomingLabel})
    config.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", config.PushLabel})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State
// Operational state data for egress LSPs
type NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // next hop IP address for the LSP. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NextHop interface{}

    // label value on the incoming packet. The type is one of the following types:
    // int with range: 16..1048575, or enumeration MplsLabel.
    IncomingLabel interface{}

    // label value to push at the current hop for the LSP. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    PushLabel interface{}
}

func (state *NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "egress"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", state.NextHop})
    state.EntityData.Leafs.Append("incoming-label", types.YLeaf{"IncomingLabel", state.IncomingLabel})
    state.EntityData.Leafs.Append("push-label", types.YLeaf{"PushLabel", state.PushLabel})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting
// Configuration and operational state parameters relating to
// segment routing.
type NetworkInstances_NetworkInstance_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters relating to the SRGBs
    // defined for the system.
    Srgbs NetworkInstances_NetworkInstance_SegmentRouting_Srgbs

    // Configuration and operational state parameters relating to the Segment
    // Routing Local Blocks (SRLBs) defined for the system.
    Srlbs NetworkInstances_NetworkInstance_SegmentRouting_Srlbs
}

func (segmentRouting *NetworkInstances_NetworkInstance_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "network-instance"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("srgbs", types.YChild{"Srgbs", &segmentRouting.Srgbs})
    segmentRouting.EntityData.Children.Append("srlbs", types.YChild{"Srlbs", &segmentRouting.Srlbs})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs
// Configuration and operational state parameters relating to the
// SRGBs defined for the system.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single definition of an SRGB which may comprise of multiple sets of
    // dataplane addresses (IPv6 addresses, or MPLS labels). The type is slice of
    // NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb.
    Srgb []*NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb
}

func (srgbs *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) GetEntityData() *types.CommonEntityData {
    srgbs.EntityData.YFilter = srgbs.YFilter
    srgbs.EntityData.YangName = "srgbs"
    srgbs.EntityData.BundleName = "openconfig"
    srgbs.EntityData.ParentYangName = "segment-routing"
    srgbs.EntityData.SegmentPath = "srgbs"
    srgbs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/" + srgbs.EntityData.SegmentPath
    srgbs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbs.EntityData.Children = types.NewOrderedMap()
    srgbs.EntityData.Children.Append("srgb", types.YChild{"Srgb", nil})
    for i := range srgbs.Srgb {
        srgbs.EntityData.Children.Append(types.GetSegmentPath(srgbs.Srgb[i]), types.YChild{"Srgb", srgbs.Srgb[i]})
    }
    srgbs.EntityData.Leafs = types.NewOrderedMap()

    srgbs.EntityData.YListKeys = []string {}

    return &(srgbs.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb
// A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the identifier for the SRGB. The
    // type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    LocalId interface{}

    // Configuration parameters relating to the SRGB.
    Config NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config

    // State parameters relating to the SRGB.
    State NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State
}

func (srgb *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetEntityData() *types.CommonEntityData {
    srgb.EntityData.YFilter = srgb.YFilter
    srgb.EntityData.YangName = "srgb"
    srgb.EntityData.BundleName = "openconfig"
    srgb.EntityData.ParentYangName = "srgbs"
    srgb.EntityData.SegmentPath = "srgb" + types.AddKeyToken(srgb.LocalId, "local-id")
    srgb.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srgbs/" + srgb.EntityData.SegmentPath
    srgb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgb.EntityData.Children = types.NewOrderedMap()
    srgb.EntityData.Children.Append("config", types.YChild{"Config", &srgb.Config})
    srgb.EntityData.Children.Append("state", types.YChild{"State", &srgb.State})
    srgb.EntityData.Leafs = types.NewOrderedMap()
    srgb.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", srgb.LocalId})

    srgb.EntityData.YListKeys = []string {"LocalId"}

    return &(srgb.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config
// Configuration parameters relating to the SRGB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique identifier for the segment routing global block on the local system.
    // The type is string.
    LocalId interface{}

    // The dataplane being used to instantiate the SRGB. When MPLS is specified
    // the set of MPLS label blocks that are defined in the mpls-label-blocks list
    // are used to make up the SRGB. When IPv6 is specified, the set of IPv6
    // prefixes specified in the ipv6-prefixes list are used. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A list of refences to the label blocks that are used to make up the SRGB.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlocks []interface{}

    // A list of IPv6 prefixes which are to be used for segment routing using the
    // IPv6 dataplane. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Ipv6Prefixes []interface{}
}

func (config *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "srgb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srgbs/srgb/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", config.LocalId})
    config.EntityData.Leafs.Append("dataplane-type", types.YLeaf{"DataplaneType", config.DataplaneType})
    config.EntityData.Leafs.Append("mpls-label-blocks", types.YLeaf{"MplsLabelBlocks", config.MplsLabelBlocks})
    config.EntityData.Leafs.Append("ipv6-prefixes", types.YLeaf{"Ipv6Prefixes", config.Ipv6Prefixes})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State
// State parameters relating to the SRGB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique identifier for the segment routing global block on the local system.
    // The type is string.
    LocalId interface{}

    // The dataplane being used to instantiate the SRGB. When MPLS is specified
    // the set of MPLS label blocks that are defined in the mpls-label-blocks list
    // are used to make up the SRGB. When IPv6 is specified, the set of IPv6
    // prefixes specified in the ipv6-prefixes list are used. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A list of refences to the label blocks that are used to make up the SRGB.
    // The type is slice of string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlocks []interface{}

    // A list of IPv6 prefixes which are to be used for segment routing using the
    // IPv6 dataplane. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Ipv6Prefixes []interface{}

    // The total number of SRGB entries that are available within the SRGB. The
    // type is interface{} with range: 0..4294967295.
    Size interface{}

    // The total number of SRGB entries that have already been alocated by
    // protocols referencing the SRGB. The type is interface{} with range:
    // 0..4294967295.
    Used interface{}
}

func (state *NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srgb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srgbs/srgb/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", state.LocalId})
    state.EntityData.Leafs.Append("dataplane-type", types.YLeaf{"DataplaneType", state.DataplaneType})
    state.EntityData.Leafs.Append("mpls-label-blocks", types.YLeaf{"MplsLabelBlocks", state.MplsLabelBlocks})
    state.EntityData.Leafs.Append("ipv6-prefixes", types.YLeaf{"Ipv6Prefixes", state.Ipv6Prefixes})
    state.EntityData.Leafs.Append("size", types.YLeaf{"Size", state.Size})
    state.EntityData.Leafs.Append("used", types.YLeaf{"Used", state.Used})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs
// Configuration and operational state parameters relating to the
// Segment Routing Local Blocks (SRLBs) defined for the system.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A definition of a Segment Routing Local Block, defined to be a set of
    // Segment Identifiers (specified as MPLS labels or IPv6 addreses) that are
    // defined for local allocation by the system. A block may optionally be
    // advertised into an IGP. The type is slice of
    // NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb.
    Srlb []*NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb
}

func (srlbs *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) GetEntityData() *types.CommonEntityData {
    srlbs.EntityData.YFilter = srlbs.YFilter
    srlbs.EntityData.YangName = "srlbs"
    srlbs.EntityData.BundleName = "openconfig"
    srlbs.EntityData.ParentYangName = "segment-routing"
    srlbs.EntityData.SegmentPath = "srlbs"
    srlbs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/" + srlbs.EntityData.SegmentPath
    srlbs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlbs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlbs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlbs.EntityData.Children = types.NewOrderedMap()
    srlbs.EntityData.Children.Append("srlb", types.YChild{"Srlb", nil})
    for i := range srlbs.Srlb {
        srlbs.EntityData.Children.Append(types.GetSegmentPath(srlbs.Srlb[i]), types.YChild{"Srlb", srlbs.Srlb[i]})
    }
    srlbs.EntityData.Leafs = types.NewOrderedMap()

    srlbs.EntityData.YListKeys = []string {}

    return &(srlbs.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb
// A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the local identifier used for the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    LocalId interface{}

    // Configuration parameters relating to the SRLB.
    Config NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config

    // Operational state parmeters relating to the SRLB.
    State NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State
}

func (srlb *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetEntityData() *types.CommonEntityData {
    srlb.EntityData.YFilter = srlb.YFilter
    srlb.EntityData.YangName = "srlb"
    srlb.EntityData.BundleName = "openconfig"
    srlb.EntityData.ParentYangName = "srlbs"
    srlb.EntityData.SegmentPath = "srlb" + types.AddKeyToken(srlb.LocalId, "local-id")
    srlb.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srlbs/" + srlb.EntityData.SegmentPath
    srlb.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srlb.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srlb.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srlb.EntityData.Children = types.NewOrderedMap()
    srlb.EntityData.Children.Append("config", types.YChild{"Config", &srlb.Config})
    srlb.EntityData.Children.Append("state", types.YChild{"State", &srlb.State})
    srlb.EntityData.Leafs = types.NewOrderedMap()
    srlb.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", srlb.LocalId})

    srlb.EntityData.YListKeys = []string {"LocalId"}

    return &(srlb.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config
// Configuration parameters relating to the SRLB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique local identifier used for the Segment Routing Local Block. The
    // identifier is used when referencing the SRLB within other contexts. The
    // type is string.
    LocalId interface{}

    // The dataplane that is to be used for the Segment Routing Local Block. When
    // MPLS is specified, the local block corresponds to a block of MPLS labels;
    // when IPv6 is specified it corresponds to an IPv6 prefix. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A reference to the MPLS label block that is used to contain the SIDs of the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlock interface{}

    // The IPv6 prefix that is used for the SRLB. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Ipv6Prefix interface{}
}

func (config *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "srlb"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srlbs/srlb/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", config.LocalId})
    config.EntityData.Leafs.Append("dataplane-type", types.YLeaf{"DataplaneType", config.DataplaneType})
    config.EntityData.Leafs.Append("mpls-label-block", types.YLeaf{"MplsLabelBlock", config.MplsLabelBlock})
    config.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", config.Ipv6Prefix})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State
// Operational state parmeters relating to the SRLB.
type NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique local identifier used for the Segment Routing Local Block. The
    // identifier is used when referencing the SRLB within other contexts. The
    // type is string.
    LocalId interface{}

    // The dataplane that is to be used for the Segment Routing Local Block. When
    // MPLS is specified, the local block corresponds to a block of MPLS labels;
    // when IPv6 is specified it corresponds to an IPv6 prefix. The type is
    // SrDataplaneType.
    DataplaneType interface{}

    // A reference to the MPLS label block that is used to contain the SIDs of the
    // SRLB. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LocalId
    MplsLabelBlock interface{}

    // The IPv6 prefix that is used for the SRLB. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Ipv6Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srlb"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/segment-routing/srlbs/srlb/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", state.LocalId})
    state.EntityData.Leafs.Append("dataplane-type", types.YLeaf{"DataplaneType", state.DataplaneType})
    state.EntityData.Leafs.Append("mpls-label-block", types.YLeaf{"MplsLabelBlock", state.MplsLabelBlock})
    state.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", state.Ipv6Prefix})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans
// Container for VLAN configuration and state
// variables
type NetworkInstances_NetworkInstance_Vlans struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured VLANs keyed by id. The type is slice of
    // NetworkInstances_NetworkInstance_Vlans_Vlan.
    Vlan []*NetworkInstances_NetworkInstance_Vlans_Vlan
}

func (vlans *NetworkInstances_NetworkInstance_Vlans) GetEntityData() *types.CommonEntityData {
    vlans.EntityData.YFilter = vlans.YFilter
    vlans.EntityData.YangName = "vlans"
    vlans.EntityData.BundleName = "openconfig"
    vlans.EntityData.ParentYangName = "network-instance"
    vlans.EntityData.SegmentPath = "vlans"
    vlans.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + vlans.EntityData.SegmentPath
    vlans.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    vlans.EntityData.NamespaceTable = openconfig.GetNamespaces()
    vlans.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    vlans.EntityData.Children = types.NewOrderedMap()
    vlans.EntityData.Children.Append("vlan", types.YChild{"Vlan", nil})
    for i := range vlans.Vlan {
        vlans.EntityData.Children.Append(types.GetSegmentPath(vlans.Vlan[i]), types.YChild{"Vlan", vlans.Vlan[i]})
    }
    vlans.EntityData.Leafs = types.NewOrderedMap()

    vlans.EntityData.YListKeys = []string {}

    return &(vlans.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan
// Configured VLANs keyed by id
type NetworkInstances_NetworkInstance_Vlans_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. references the configured vlan-id. The type is
    // string with range: 1..4094. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Vlans_Vlan_Config_VlanId
    VlanId interface{}

    // Configuration parameters for VLANs.
    Config NetworkInstances_NetworkInstance_Vlans_Vlan_Config

    // State variables for VLANs.
    State NetworkInstances_NetworkInstance_Vlans_Vlan_State

    // Enclosing container for list of member interfaces.
    Members NetworkInstances_NetworkInstance_Vlans_Vlan_Members
}

func (vlan *NetworkInstances_NetworkInstance_Vlans_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "openconfig"
    vlan.EntityData.ParentYangName = "vlans"
    vlan.EntityData.SegmentPath = "vlan" + types.AddKeyToken(vlan.VlanId, "vlan-id")
    vlan.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/" + vlan.EntityData.SegmentPath
    vlan.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    vlan.EntityData.NamespaceTable = openconfig.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    vlan.EntityData.Children = types.NewOrderedMap()
    vlan.EntityData.Children.Append("config", types.YChild{"Config", &vlan.Config})
    vlan.EntityData.Children.Append("state", types.YChild{"State", &vlan.State})
    vlan.EntityData.Children.Append("members", types.YChild{"Members", &vlan.Members})
    vlan.EntityData.Leafs = types.NewOrderedMap()
    vlan.EntityData.Leafs.Append("vlan-id", types.YLeaf{"VlanId", vlan.VlanId})

    vlan.EntityData.YListKeys = []string {"VlanId"}

    return &(vlan.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Config
// Configuration parameters for VLANs
type NetworkInstances_NetworkInstance_Vlans_Vlan_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface VLAN id. The type is interface{} with range: 1..4094.
    VlanId interface{}

    // Interface VLAN name. The type is string.
    Name interface{}

    // Admin state of the VLAN. The type is Status. The default value is ACTIVE.
    Status interface{}

    // Optionally set the tag protocol identifier field (TPID) that is accepted on
    // the VLAN. The type is one of the following:
    // TPID0X9200TPID0x8A88TPID0x8100TPID0x9100. The default value is
    // oc-vlan-types:TPID_0x8100.
    Tpid interface{}
}

func (config *NetworkInstances_NetworkInstance_Vlans_Vlan_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "vlan"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("vlan-id", types.YLeaf{"VlanId", config.VlanId})
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("status", types.YLeaf{"Status", config.Status})
    config.EntityData.Leafs.Append("tpid", types.YLeaf{"Tpid", config.Tpid})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status represents Admin state of the VLAN
type NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status string

const (
    // VLAN is active
    NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status_ACTIVE NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status = "ACTIVE"

    // VLAN is inactive / suspended
    NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status_SUSPENDED NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status = "SUSPENDED"
)

// NetworkInstances_NetworkInstance_Vlans_Vlan_State
// State variables for VLANs
type NetworkInstances_NetworkInstance_Vlans_Vlan_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface VLAN id. The type is interface{} with range: 1..4094.
    VlanId interface{}

    // Interface VLAN name. The type is string.
    Name interface{}

    // Admin state of the VLAN. The type is Status. The default value is ACTIVE.
    Status interface{}

    // Optionally set the tag protocol identifier field (TPID) that is accepted on
    // the VLAN. The type is one of the following:
    // TPID0X9200TPID0x8A88TPID0x8100TPID0x9100. The default value is
    // oc-vlan-types:TPID_0x8100.
    Tpid interface{}
}

func (state *NetworkInstances_NetworkInstance_Vlans_Vlan_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "vlan"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("vlan-id", types.YLeaf{"VlanId", state.VlanId})
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("status", types.YLeaf{"Status", state.Status})
    state.EntityData.Leafs.Append("tpid", types.YLeaf{"Tpid", state.Tpid})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status represents Admin state of the VLAN
type NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status string

const (
    // VLAN is active
    NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status_ACTIVE NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status = "ACTIVE"

    // VLAN is inactive / suspended
    NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status_SUSPENDED NetworkInstances_NetworkInstance_Vlans_Vlan_State_Status = "SUSPENDED"
)

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members
// Enclosing container for list of member interfaces
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of references to interfaces / subinterfaces associated with the VLAN.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member.
    Member []*NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member
}

func (members *NetworkInstances_NetworkInstance_Vlans_Vlan_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "openconfig"
    members.EntityData.ParentYangName = "vlan"
    members.EntityData.SegmentPath = "members"
    members.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/" + members.EntityData.SegmentPath
    members.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    members.EntityData.NamespaceTable = openconfig.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    members.EntityData.Children = types.NewOrderedMap()
    members.EntityData.Children.Append("member", types.YChild{"Member", nil})
    for i := range members.Member {
        types.SetYListKey(members.Member[i], i)
        members.EntityData.Children.Append(types.GetSegmentPath(members.Member[i]), types.YChild{"Member", members.Member[i]})
    }
    members.EntityData.Leafs = types.NewOrderedMap()

    members.EntityData.YListKeys = []string {}

    return &(members.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member
// List of references to interfaces / subinterfaces
// associated with the VLAN.
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef
}

func (member *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "openconfig"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member" + types.AddNoKeyToken(member)
    member.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/members/" + member.EntityData.SegmentPath
    member.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    member.EntityData.NamespaceTable = openconfig.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    member.EntityData.Children = types.NewOrderedMap()
    member.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &member.InterfaceRef})
    member.EntityData.Leafs = types.NewOrderedMap()

    member.EntityData.YListKeys = []string {}

    return &(member.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "member"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/members/member/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/vlans/vlan/members/member/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts
// The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
type NetworkInstances_NetworkInstance_Afts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The abstract forwarding table for IPv4 unicast. Entries within this table
    // are uniquely keyed on the IPv4 unicast destination prefix which is matched
    // by ingress packets.  The data set represented by the IPv4 Unicast AFT is
    // the set of entries from the IPv4 unicast RIB that have been selected for
    // installation into the FIB of the device exporting the data structure.
    Ipv4Unicast NetworkInstances_NetworkInstance_Afts_Ipv4Unicast

    // The abstract forwarding table for IPv6 unicast. Entries within this table
    // are uniquely keyed on the IPv6 unicast destination prefix which is matched
    // by ingress packets.  The data set represented by the IPv6 Unicast AFTis the
    // set of entries within the IPv6 RIB that .
    Ipv6Unicast NetworkInstances_NetworkInstance_Afts_Ipv6Unicast

    // The abstract forwarding table for policy-based forwarding entries. Since
    // multiple match criteria can be utilised within a policy-based forwarding
    // rule, this AFT provides a flexible match criteria, and is indexed based on
    // an arbitrary 64-bit index. Entries within the AFT may match on multiple
    // field types (e.g., L4 header fields, as well as L2 fields).  Examples of
    // entries within this table are:  - IPv4 policy-based routing based on DSCP. 
    // - MPLS policy-based forwarding entries.
    PolicyForwarding NetworkInstances_NetworkInstance_Afts_PolicyForwarding

    // The abstract forwarding table for MPLS label based forwarding entries.
    // Entries within the table are keyed based on the top-most MPLS label in the
    // stack on the ingress packet.
    Mpls NetworkInstances_NetworkInstance_Afts_Mpls

    // The abstract forwarding table for Ethernet based forwarding entries.
    // Entries within the table are keyed based on the  destination MAC address on
    // the ingress packet.
    Ethernet NetworkInstances_NetworkInstance_Afts_Ethernet
}

func (afts *NetworkInstances_NetworkInstance_Afts) GetEntityData() *types.CommonEntityData {
    afts.EntityData.YFilter = afts.YFilter
    afts.EntityData.YangName = "afts"
    afts.EntityData.BundleName = "openconfig"
    afts.EntityData.ParentYangName = "network-instance"
    afts.EntityData.SegmentPath = "afts"
    afts.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + afts.EntityData.SegmentPath
    afts.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afts.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afts.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afts.EntityData.Children = types.NewOrderedMap()
    afts.EntityData.Children.Append("ipv4-unicast", types.YChild{"Ipv4Unicast", &afts.Ipv4Unicast})
    afts.EntityData.Children.Append("ipv6-unicast", types.YChild{"Ipv6Unicast", &afts.Ipv6Unicast})
    afts.EntityData.Children.Append("policy-forwarding", types.YChild{"PolicyForwarding", &afts.PolicyForwarding})
    afts.EntityData.Children.Append("mpls", types.YChild{"Mpls", &afts.Mpls})
    afts.EntityData.Children.Append("ethernet", types.YChild{"Ethernet", &afts.Ethernet})
    afts.EntityData.Leafs = types.NewOrderedMap()

    afts.EntityData.YListKeys = []string {}

    return &(afts.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast
// The abstract forwarding table for IPv4 unicast. Entries
// within this table are uniquely keyed on the IPv4 unicast
// destination prefix which is matched by ingress packets.
// 
// The data set represented by the IPv4 Unicast AFT is the set
// of entries from the IPv4 unicast RIB that have been selected
// for installation into the FIB of the device exporting the
// data structure.
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the IPv4 unicast entries within the abstract forwarding table. This
    // list is keyed by the destination IPv4 prefix. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry.
    Ipv4Entry []*NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afts"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/" + ipv4Unicast.EntityData.SegmentPath
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = types.NewOrderedMap()
    ipv4Unicast.EntityData.Children.Append("ipv4-entry", types.YChild{"Ipv4Entry", nil})
    for i := range ipv4Unicast.Ipv4Entry {
        ipv4Unicast.EntityData.Children.Append(types.GetSegmentPath(ipv4Unicast.Ipv4Entry[i]), types.YChild{"Ipv4Entry", ipv4Unicast.Ipv4Entry[i]})
    }
    ipv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4Unicast.EntityData.YListKeys = []string {}

    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry
// List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 unicast destination prefix
    // which must be matched to utilise the AFT entry. The type is string with
    // pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_Config_Prefix
    Prefix interface{}

    // Configuration parameters for the IPv4 unicast AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_Config

    // Operational state parameters for the IPv4 unicast AFT entry.
    State NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State

    // The list of next-hops that are to be used for entry within the AFT table.
    // The structure of each next-hop is address family independent, such that it
    // is possible to resolve fully how the next-hop is treated. For example:  -
    // Where ingress IPv4 unicast packets are to be forwarded via  an MPLS LSP,
    // the next-hop list should indicate the MPLS  label stack that is used to the
    // next-hop. - Where ingress MPLS labelled packets are to be forwarded to  an
    // IPv6 nexthop (for example, a CE within a VPN, then the  popped label stack,
    // and IPv6 next-hop address should be  indicated).
    NextHops NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops
}

func (ipv4Entry *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) GetEntityData() *types.CommonEntityData {
    ipv4Entry.EntityData.YFilter = ipv4Entry.YFilter
    ipv4Entry.EntityData.YangName = "ipv4-entry"
    ipv4Entry.EntityData.BundleName = "openconfig"
    ipv4Entry.EntityData.ParentYangName = "ipv4-unicast"
    ipv4Entry.EntityData.SegmentPath = "ipv4-entry" + types.AddKeyToken(ipv4Entry.Prefix, "prefix")
    ipv4Entry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/" + ipv4Entry.EntityData.SegmentPath
    ipv4Entry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Entry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Entry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Entry.EntityData.Children = types.NewOrderedMap()
    ipv4Entry.EntityData.Children.Append("config", types.YChild{"Config", &ipv4Entry.Config})
    ipv4Entry.EntityData.Children.Append("state", types.YChild{"State", &ipv4Entry.State})
    ipv4Entry.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &ipv4Entry.NextHops})
    ipv4Entry.EntityData.Leafs = types.NewOrderedMap()
    ipv4Entry.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Entry.Prefix})

    ipv4Entry.EntityData.YListKeys = []string {"Prefix"}

    return &(ipv4Entry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_Config
// Configuration parameters for the IPv4 unicast AFT entry.
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IPv4 destination prefix that should be matched to utilise the AFT
    // entry. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State
// Operational state parameters for the IPv4 unicast AFT
// entry.
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IPv4 destination prefix that should be matched to utilise the AFT
    // entry. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}

    // If the AFT entry was imported from another network instance (e.g., it
    // corresponds to a L3 forwarding entry which was learned within another
    // network-instance), the value of this leaf reflects the network-instance
    // from which it was learned.  For example, if the local network-instance
    // corresponds to a L3VRF, and routes are imported from the VPNv4
    // address-family of the BGP instance in the DEFAULT_INSTANCE, then this value
    // would reflect the DEFAULT_INSTANCE as the origin-network-instance. The type
    // is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    OriginNetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("packets-forwarded", types.YLeaf{"PacketsForwarded", state.PacketsForwarded})
    state.EntityData.Leafs.Append("octets-forwarded", types.YLeaf{"OctetsForwarded", state.OctetsForwarded})
    state.EntityData.Leafs.Append("origin-network-instance", types.YLeaf{"OriginNetworkInstance", state.OriginNetworkInstance})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops
// The list of next-hops that are to be used for entry within
// the AFT table. The structure of each next-hop is address
// family independent, such that it is possible to resolve fully
// how the next-hop is treated. For example:
// 
// - Where ingress IPv4 unicast packets are to be forwarded via
//  an MPLS LSP, the next-hop list should indicate the MPLS
//  label stack that is used to the next-hop.
// - Where ingress MPLS labelled packets are to be forwarded to
//  an IPv6 nexthop (for example, a CE within a VPN, then the
//  popped label stack, and IPv6 next-hop address should be
//  indicated).
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "ipv4-entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoded as a leaf-list such that the first entry is
    // the label that is outer-most (i.e., furthest from the bottom of the stack)
    // label stack to be popped.  If the local system pops the outer-most label
    // 400, then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 400, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    OriginProtocol interface{}

    // The network-instance within which the next-hop should be resolved. When
    // this leaf is unspecified, the next-hop is resolved within  the local
    // instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    NetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})
    state.EntityData.Leafs.Append("decapsulate-header", types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader})
    state.EntityData.Leafs.Append("encapsulate-header", types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader})
    state.EntityData.Leafs.Append("origin-protocol", types.YLeaf{"OriginProtocol", state.OriginProtocol})
    state.EntityData.Leafs.Append("network-instance", types.YLeaf{"NetworkInstance", state.NetworkInstance})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast
// The abstract forwarding table for IPv6 unicast. Entries
// within this table are uniquely keyed on the IPv6 unicast
// destination prefix which is matched by ingress packets.
// 
// The data set represented by the IPv6 Unicast AFTis the set
// of entries within the IPv6 RIB that 
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the IPv6 unicast entries within the abstract forwarding table. This
    // list is keyed by the destination IPv6 prefix. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry.
    Ipv6Entry []*NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afts"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/" + ipv6Unicast.EntityData.SegmentPath
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = types.NewOrderedMap()
    ipv6Unicast.EntityData.Children.Append("ipv6-entry", types.YChild{"Ipv6Entry", nil})
    for i := range ipv6Unicast.Ipv6Entry {
        ipv6Unicast.EntityData.Children.Append(types.GetSegmentPath(ipv6Unicast.Ipv6Entry[i]), types.YChild{"Ipv6Entry", ipv6Unicast.Ipv6Entry[i]})
    }
    ipv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6Unicast.EntityData.YListKeys = []string {}

    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry
// List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv6 unicast destination prefix
    // which must be matched to utilise the AFT entry. The type is string with
    // pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_Config_Prefix
    Prefix interface{}

    // Configuration parameters for the IPv6 unicast AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_Config

    // Operational state parameters for the IPv6 unicast AFT entry.
    State NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State

    // The list of next-hops that are to be used for entry within the AFT table.
    // The structure of each next-hop is address family independent, such that it
    // is possible to resolve fully how the next-hop is treated. For example:  -
    // Where ingress IPv4 unicast packets are to be forwarded via  an MPLS LSP,
    // the next-hop list should indicate the MPLS  label stack that is used to the
    // next-hop. - Where ingress MPLS labelled packets are to be forwarded to  an
    // IPv6 nexthop (for example, a CE within a VPN, then the  popped label stack,
    // and IPv6 next-hop address should be  indicated).
    NextHops NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops
}

func (ipv6Entry *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) GetEntityData() *types.CommonEntityData {
    ipv6Entry.EntityData.YFilter = ipv6Entry.YFilter
    ipv6Entry.EntityData.YangName = "ipv6-entry"
    ipv6Entry.EntityData.BundleName = "openconfig"
    ipv6Entry.EntityData.ParentYangName = "ipv6-unicast"
    ipv6Entry.EntityData.SegmentPath = "ipv6-entry" + types.AddKeyToken(ipv6Entry.Prefix, "prefix")
    ipv6Entry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/" + ipv6Entry.EntityData.SegmentPath
    ipv6Entry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Entry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Entry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Entry.EntityData.Children = types.NewOrderedMap()
    ipv6Entry.EntityData.Children.Append("config", types.YChild{"Config", &ipv6Entry.Config})
    ipv6Entry.EntityData.Children.Append("state", types.YChild{"State", &ipv6Entry.State})
    ipv6Entry.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &ipv6Entry.NextHops})
    ipv6Entry.EntityData.Leafs = types.NewOrderedMap()
    ipv6Entry.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Entry.Prefix})

    ipv6Entry.EntityData.YListKeys = []string {"Prefix"}

    return &(ipv6Entry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_Config
// Configuration parameters for the IPv6 unicast AFT entry.
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IPv6 destination prefix that should be matched to utilise the AFT
    // entry. The type is string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State
// Operational state parameters for the IPv6 unicast AFT
// entry.
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IPv6 destination prefix that should be matched to utilise the AFT
    // entry. The type is string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}

    // If the AFT entry was imported from another network instance (e.g., it
    // corresponds to a L3 forwarding entry which was learned within another
    // network-instance), the value of this leaf reflects the network-instance
    // from which it was learned.  For example, if the local network-instance
    // corresponds to a L3VRF, and routes are imported from the VPNv4
    // address-family of the BGP instance in the DEFAULT_INSTANCE, then this value
    // would reflect the DEFAULT_INSTANCE as the origin-network-instance. The type
    // is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    OriginNetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("packets-forwarded", types.YLeaf{"PacketsForwarded", state.PacketsForwarded})
    state.EntityData.Leafs.Append("octets-forwarded", types.YLeaf{"OctetsForwarded", state.OctetsForwarded})
    state.EntityData.Leafs.Append("origin-network-instance", types.YLeaf{"OriginNetworkInstance", state.OriginNetworkInstance})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops
// The list of next-hops that are to be used for entry within
// the AFT table. The structure of each next-hop is address
// family independent, such that it is possible to resolve fully
// how the next-hop is treated. For example:
// 
// - Where ingress IPv4 unicast packets are to be forwarded via
//  an MPLS LSP, the next-hop list should indicate the MPLS
//  label stack that is used to the next-hop.
// - Where ingress MPLS labelled packets are to be forwarded to
//  an IPv6 nexthop (for example, a CE within a VPN, then the
//  popped label stack, and IPv6 next-hop address should be
//  indicated).
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "ipv6-entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoded as a leaf-list such that the first entry is
    // the label that is outer-most (i.e., furthest from the bottom of the stack)
    // label stack to be popped.  If the local system pops the outer-most label
    // 400, then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 400, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    OriginProtocol interface{}

    // The network-instance within which the next-hop should be resolved. When
    // this leaf is unspecified, the next-hop is resolved within  the local
    // instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Config_Name
    NetworkInstance interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})
    state.EntityData.Leafs.Append("decapsulate-header", types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader})
    state.EntityData.Leafs.Append("encapsulate-header", types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader})
    state.EntityData.Leafs.Append("origin-protocol", types.YLeaf{"OriginProtocol", state.OriginProtocol})
    state.EntityData.Leafs.Append("network-instance", types.YLeaf{"NetworkInstance", state.NetworkInstance})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding
// The abstract forwarding table for policy-based forwarding
// entries. Since multiple match criteria can be utilised
// within a policy-based forwarding rule, this AFT provides a
// flexible match criteria, and is indexed based on an
// arbitrary 64-bit index. Entries within the AFT may match on
// multiple field types (e.g., L4 header fields, as well as L2
// fields).
// 
// Examples of entries within this table are:
//  - IPv4 policy-based routing based on DSCP.
//  - MPLS policy-based forwarding entries.
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the policy forwarding entries within the abstract forwarding table.
    // Each entry is uniquely identified by an index on the system, due to the
    // arbitrary match conditions that may be implemented within the policy
    // forwarding AFT. The index may change upon changes of the entry if, and only
    // if, the device exporting the AFT replaces the entire entry by removing the
    // previous entry and replacing it with a subsequent updated version. The type
    // is slice of
    // NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry.
    PolicyForwardingEntry []*NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry
}

func (policyForwarding *NetworkInstances_NetworkInstance_Afts_PolicyForwarding) GetEntityData() *types.CommonEntityData {
    policyForwarding.EntityData.YFilter = policyForwarding.YFilter
    policyForwarding.EntityData.YangName = "policy-forwarding"
    policyForwarding.EntityData.BundleName = "openconfig"
    policyForwarding.EntityData.ParentYangName = "afts"
    policyForwarding.EntityData.SegmentPath = "policy-forwarding"
    policyForwarding.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/" + policyForwarding.EntityData.SegmentPath
    policyForwarding.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    policyForwarding.EntityData.NamespaceTable = openconfig.GetNamespaces()
    policyForwarding.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    policyForwarding.EntityData.Children = types.NewOrderedMap()
    policyForwarding.EntityData.Children.Append("policy-forwarding-entry", types.YChild{"PolicyForwardingEntry", nil})
    for i := range policyForwarding.PolicyForwardingEntry {
        policyForwarding.EntityData.Children.Append(types.GetSegmentPath(policyForwarding.PolicyForwardingEntry[i]), types.YChild{"PolicyForwardingEntry", policyForwarding.PolicyForwardingEntry[i]})
    }
    policyForwarding.EntityData.Leafs = types.NewOrderedMap()

    policyForwarding.EntityData.YListKeys = []string {}

    return &(policyForwarding.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry
// List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the arbitary index for the policy
    // forwarding AFT entry. The type is string with range:
    // 0..18446744073709551615. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_Config_Index
    Index interface{}

    // Configuration parameters for the Policy forwarding AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_Config

    // Operational state parameters for the Policy Forwarding AFT entry.
    State NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State

    // The list of next-hops that are to be used for entry within the AFT table.
    // The structure of each next-hop is address family independent, such that it
    // is possible to resolve fully how the next-hop is treated. For example:  -
    // Where ingress IPv4 unicast packets are to be forwarded via  an MPLS LSP,
    // the next-hop list should indicate the MPLS  label stack that is used to the
    // next-hop. - Where ingress MPLS labelled packets are to be forwarded to  an
    // IPv6 nexthop (for example, a CE within a VPN, then the  popped label stack,
    // and IPv6 next-hop address should be  indicated).
    NextHops NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops
}

func (policyForwardingEntry *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) GetEntityData() *types.CommonEntityData {
    policyForwardingEntry.EntityData.YFilter = policyForwardingEntry.YFilter
    policyForwardingEntry.EntityData.YangName = "policy-forwarding-entry"
    policyForwardingEntry.EntityData.BundleName = "openconfig"
    policyForwardingEntry.EntityData.ParentYangName = "policy-forwarding"
    policyForwardingEntry.EntityData.SegmentPath = "policy-forwarding-entry" + types.AddKeyToken(policyForwardingEntry.Index, "index")
    policyForwardingEntry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/" + policyForwardingEntry.EntityData.SegmentPath
    policyForwardingEntry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    policyForwardingEntry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    policyForwardingEntry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    policyForwardingEntry.EntityData.Children = types.NewOrderedMap()
    policyForwardingEntry.EntityData.Children.Append("config", types.YChild{"Config", &policyForwardingEntry.Config})
    policyForwardingEntry.EntityData.Children.Append("state", types.YChild{"State", &policyForwardingEntry.State})
    policyForwardingEntry.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &policyForwardingEntry.NextHops})
    policyForwardingEntry.EntityData.Leafs = types.NewOrderedMap()
    policyForwardingEntry.EntityData.Leafs.Append("index", types.YLeaf{"Index", policyForwardingEntry.Index})

    policyForwardingEntry.EntityData.YListKeys = []string {"Index"}

    return &(policyForwardingEntry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_Config
// Configuration parameters for the Policy forwarding
// AFT entry.
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary 64-bit index identifying the policy forwarding AFT entry. The
    // type is interface{} with range: 0..18446744073709551615.
    Index interface{}

    // The IP prefix that the forwarding entry matches. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    IpPrefix interface{}

    // The MAC address that the forwarding entry matches. Used for Layer 2
    // forwarding entries, e.g., within a VSI instance. The type is string with
    // pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label that the forwarding entry matches. Used for MPLS forwarding
    // entries, whereby the local device acts as an LSR. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    MplsLabel interface{}

    // The value of the MPLS Traffic Class bits (formerly known as the MPLS
    // experimental bits) that are to be matched by the AFT entry. The type is
    // interface{} with range: 0..7.
    MplsTc interface{}

    // The value of the differentiated services code point (DSCP) to be matched
    // for the forwarding entry. The value is specified in cases where specific
    // class-based forwarding based on IP is implemented by the device. The type
    // is interface{} with range: 0..63.
    IpDscp interface{}

    // The value of the IP protocol field of an IPv4 packet, or the next-header
    // field of an IPv6 packet which is to be matched by the AFT entry. This field
    // is utilised where forwarding is performed based on L4 information. The type
    // is one of the following types: int with range: 0..254, or
    // :go:struct:`IPPROTOCOL <ydk/models/packet_match_types/IPPROTOCOL>`.
    IpProtocol interface{}

    // The value of the source port field of the transport header that is to be
    // matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4SrcPort interface{}

    // The value of the destination port field of the transport header that is to
    // be matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4DstPort interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "policy-forwarding-entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})
    config.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", config.IpPrefix})
    config.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", config.MacAddress})
    config.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", config.MplsLabel})
    config.EntityData.Leafs.Append("mpls-tc", types.YLeaf{"MplsTc", config.MplsTc})
    config.EntityData.Leafs.Append("ip-dscp", types.YLeaf{"IpDscp", config.IpDscp})
    config.EntityData.Leafs.Append("ip-protocol", types.YLeaf{"IpProtocol", config.IpProtocol})
    config.EntityData.Leafs.Append("l4-src-port", types.YLeaf{"L4SrcPort", config.L4SrcPort})
    config.EntityData.Leafs.Append("l4-dst-port", types.YLeaf{"L4DstPort", config.L4DstPort})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State
// Operational state parameters for the Policy Forwarding
// AFT entry.
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary 64-bit index identifying the policy forwarding AFT entry. The
    // type is interface{} with range: 0..18446744073709551615.
    Index interface{}

    // The IP prefix that the forwarding entry matches. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    IpPrefix interface{}

    // The MAC address that the forwarding entry matches. Used for Layer 2
    // forwarding entries, e.g., within a VSI instance. The type is string with
    // pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label that the forwarding entry matches. Used for MPLS forwarding
    // entries, whereby the local device acts as an LSR. The type is one of the
    // following types: int with range: 16..1048575, or enumeration MplsLabel.
    MplsLabel interface{}

    // The value of the MPLS Traffic Class bits (formerly known as the MPLS
    // experimental bits) that are to be matched by the AFT entry. The type is
    // interface{} with range: 0..7.
    MplsTc interface{}

    // The value of the differentiated services code point (DSCP) to be matched
    // for the forwarding entry. The value is specified in cases where specific
    // class-based forwarding based on IP is implemented by the device. The type
    // is interface{} with range: 0..63.
    IpDscp interface{}

    // The value of the IP protocol field of an IPv4 packet, or the next-header
    // field of an IPv6 packet which is to be matched by the AFT entry. This field
    // is utilised where forwarding is performed based on L4 information. The type
    // is one of the following types: int with range: 0..254, or
    // :go:struct:`IPPROTOCOL <ydk/models/packet_match_types/IPPROTOCOL>`.
    IpProtocol interface{}

    // The value of the source port field of the transport header that is to be
    // matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4SrcPort interface{}

    // The value of the destination port field of the transport header that is to
    // be matched by the AFT entry. The type is interface{} with range: 0..65535.
    L4DstPort interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "policy-forwarding-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", state.IpPrefix})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("mpls-label", types.YLeaf{"MplsLabel", state.MplsLabel})
    state.EntityData.Leafs.Append("mpls-tc", types.YLeaf{"MplsTc", state.MplsTc})
    state.EntityData.Leafs.Append("ip-dscp", types.YLeaf{"IpDscp", state.IpDscp})
    state.EntityData.Leafs.Append("ip-protocol", types.YLeaf{"IpProtocol", state.IpProtocol})
    state.EntityData.Leafs.Append("l4-src-port", types.YLeaf{"L4SrcPort", state.L4SrcPort})
    state.EntityData.Leafs.Append("l4-dst-port", types.YLeaf{"L4DstPort", state.L4DstPort})
    state.EntityData.Leafs.Append("packets-forwarded", types.YLeaf{"PacketsForwarded", state.PacketsForwarded})
    state.EntityData.Leafs.Append("octets-forwarded", types.YLeaf{"OctetsForwarded", state.OctetsForwarded})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops
// The list of next-hops that are to be used for entry within
// the AFT table. The structure of each next-hop is address
// family independent, such that it is possible to resolve fully
// how the next-hop is treated. For example:
// 
// - Where ingress IPv4 unicast packets are to be forwarded via
//  an MPLS LSP, the next-hop list should indicate the MPLS
//  label stack that is used to the next-hop.
// - Where ingress MPLS labelled packets are to be forwarded to
//  an IPv6 nexthop (for example, a CE within a VPN, then the
//  popped label stack, and IPv6 next-hop address should be
//  indicated).
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "policy-forwarding-entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoded as a leaf-list such that the first entry is
    // the label that is outer-most (i.e., furthest from the bottom of the stack)
    // label stack to be popped.  If the local system pops the outer-most label
    // 400, then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 400, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    OriginProtocol interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})
    state.EntityData.Leafs.Append("decapsulate-header", types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader})
    state.EntityData.Leafs.Append("encapsulate-header", types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader})
    state.EntityData.Leafs.Append("origin-protocol", types.YLeaf{"OriginProtocol", state.OriginProtocol})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls
// The abstract forwarding table for MPLS label based
// forwarding entries. Entries within the table are keyed based
// on the top-most MPLS label in the stack on the ingress
// packet.
type NetworkInstances_NetworkInstance_Afts_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the MPLS entries within the abstract forwarding table. This list is
    // keyed by the top-most MPLS label. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry.
    LabelEntry []*NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry
}

func (mpls *NetworkInstances_NetworkInstance_Afts_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "openconfig"
    mpls.EntityData.ParentYangName = "afts"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("label-entry", types.YChild{"LabelEntry", nil})
    for i := range mpls.LabelEntry {
        mpls.EntityData.Children.Append(types.GetSegmentPath(mpls.LabelEntry[i]), types.YChild{"LabelEntry", mpls.LabelEntry[i]})
    }
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry
// List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the top-most MPLS label matched by
    // the entry. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    Label interface{}

    // Configuration parameters for the MPLS AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_Config

    // Operational state parameters for the MPLS AFT entry.
    State NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State

    // The list of next-hops that are to be used for entry within the AFT table.
    // The structure of each next-hop is address family independent, such that it
    // is possible to resolve fully how the next-hop is treated. For example:  -
    // Where ingress IPv4 unicast packets are to be forwarded via  an MPLS LSP,
    // the next-hop list should indicate the MPLS  label stack that is used to the
    // next-hop. - Where ingress MPLS labelled packets are to be forwarded to  an
    // IPv6 nexthop (for example, a CE within a VPN, then the  popped label stack,
    // and IPv6 next-hop address should be  indicated).
    NextHops NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops
}

func (labelEntry *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) GetEntityData() *types.CommonEntityData {
    labelEntry.EntityData.YFilter = labelEntry.YFilter
    labelEntry.EntityData.YangName = "label-entry"
    labelEntry.EntityData.BundleName = "openconfig"
    labelEntry.EntityData.ParentYangName = "mpls"
    labelEntry.EntityData.SegmentPath = "label-entry" + types.AddKeyToken(labelEntry.Label, "label")
    labelEntry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/" + labelEntry.EntityData.SegmentPath
    labelEntry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    labelEntry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    labelEntry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    labelEntry.EntityData.Children = types.NewOrderedMap()
    labelEntry.EntityData.Children.Append("config", types.YChild{"Config", &labelEntry.Config})
    labelEntry.EntityData.Children.Append("state", types.YChild{"State", &labelEntry.State})
    labelEntry.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &labelEntry.NextHops})
    labelEntry.EntityData.Leafs = types.NewOrderedMap()
    labelEntry.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelEntry.Label})

    labelEntry.EntityData.YListKeys = []string {"Label"}

    return &(labelEntry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_Config
// Configuration parameters for the MPLS AFT entry.
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The top-most MPLS label that should be matched to utilise the AFT entry.
    // The type is one of the following types: int with range: 16..1048575, or
    // enumeration MplsLabel.
    Label interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "label-entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("label", types.YLeaf{"Label", config.Label})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State
// Operational state parameters for the MPLS AFT
// entry.
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The top-most MPLS label that should be matched to utilise the AFT entry.
    // The type is one of the following types: int with range: 16..1048575, or
    // enumeration MplsLabel.
    Label interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "label-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("label", types.YLeaf{"Label", state.Label})
    state.EntityData.Leafs.Append("packets-forwarded", types.YLeaf{"PacketsForwarded", state.PacketsForwarded})
    state.EntityData.Leafs.Append("octets-forwarded", types.YLeaf{"OctetsForwarded", state.OctetsForwarded})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops
// The list of next-hops that are to be used for entry within
// the AFT table. The structure of each next-hop is address
// family independent, such that it is possible to resolve fully
// how the next-hop is treated. For example:
// 
// - Where ingress IPv4 unicast packets are to be forwarded via
//  an MPLS LSP, the next-hop list should indicate the MPLS
//  label stack that is used to the next-hop.
// - Where ingress MPLS labelled packets are to be forwarded to
//  an IPv6 nexthop (for example, a CE within a VPN, then the
//  popped label stack, and IPv6 next-hop address should be
//  indicated).
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "label-entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoded as a leaf-list such that the first entry is
    // the label that is outer-most (i.e., furthest from the bottom of the stack)
    // label stack to be popped.  If the local system pops the outer-most label
    // 400, then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 400, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    OriginProtocol interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})
    state.EntityData.Leafs.Append("decapsulate-header", types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader})
    state.EntityData.Leafs.Append("encapsulate-header", types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader})
    state.EntityData.Leafs.Append("origin-protocol", types.YLeaf{"OriginProtocol", state.OriginProtocol})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet
// The abstract forwarding table for Ethernet based forwarding
// entries. Entries within the table are keyed based on the 
// destination MAC address on the ingress packet.
type NetworkInstances_NetworkInstance_Afts_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Ethernet entries within the abstract forwarding table. This
    // list is keyed by the outer MAC address of the Ethernet frame. The type is
    // slice of NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry.
    MacEntry []*NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry
}

func (ethernet *NetworkInstances_NetworkInstance_Afts_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "openconfig"
    ethernet.EntityData.ParentYangName = "afts"
    ethernet.EntityData.SegmentPath = "ethernet"
    ethernet.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/" + ethernet.EntityData.SegmentPath
    ethernet.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ethernet.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ethernet.EntityData.Children = types.NewOrderedMap()
    ethernet.EntityData.Children.Append("mac-entry", types.YChild{"MacEntry", nil})
    for i := range ethernet.MacEntry {
        ethernet.EntityData.Children.Append(types.GetSegmentPath(ethernet.MacEntry[i]), types.YChild{"MacEntry", ethernet.MacEntry[i]})
    }
    ethernet.EntityData.Leafs = types.NewOrderedMap()

    ethernet.EntityData.YListKeys = []string {}

    return &(ethernet.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry
// List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the outer MAC address matched by the
    // entry. The type is string with pattern:
    // ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_Config_MacAddress
    MacAddress interface{}

    // Configuration parameters for the Ethernet AFT entry.
    Config NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_Config

    // Operational state parameters for the Ethernet AFT entry.
    State NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State

    // The list of next-hops that are to be used for entry within the AFT table.
    // The structure of each next-hop is address family independent, such that it
    // is possible to resolve fully how the next-hop is treated. For example:  -
    // Where ingress IPv4 unicast packets are to be forwarded via  an MPLS LSP,
    // the next-hop list should indicate the MPLS  label stack that is used to the
    // next-hop. - Where ingress MPLS labelled packets are to be forwarded to  an
    // IPv6 nexthop (for example, a CE within a VPN, then the  popped label stack,
    // and IPv6 next-hop address should be  indicated).
    NextHops NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops
}

func (macEntry *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) GetEntityData() *types.CommonEntityData {
    macEntry.EntityData.YFilter = macEntry.YFilter
    macEntry.EntityData.YangName = "mac-entry"
    macEntry.EntityData.BundleName = "openconfig"
    macEntry.EntityData.ParentYangName = "ethernet"
    macEntry.EntityData.SegmentPath = "mac-entry" + types.AddKeyToken(macEntry.MacAddress, "mac-address")
    macEntry.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/" + macEntry.EntityData.SegmentPath
    macEntry.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    macEntry.EntityData.NamespaceTable = openconfig.GetNamespaces()
    macEntry.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    macEntry.EntityData.Children = types.NewOrderedMap()
    macEntry.EntityData.Children.Append("config", types.YChild{"Config", &macEntry.Config})
    macEntry.EntityData.Children.Append("state", types.YChild{"State", &macEntry.State})
    macEntry.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &macEntry.NextHops})
    macEntry.EntityData.Leafs = types.NewOrderedMap()
    macEntry.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", macEntry.MacAddress})

    macEntry.EntityData.YListKeys = []string {"MacAddress"}

    return &(macEntry.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_Config
// Configuration parameters for the Ethernet AFT entry.
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The outer MAC address of the Ethernet frame that must be matched for the
    // AFT entry to be utilised. The type is string with pattern:
    // ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "mac-entry"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", config.MacAddress})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State
// Operational state parameters for the Ethernet AFT
// entry.
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The outer MAC address of the Ethernet frame that must be matched for the
    // AFT entry to be utilised. The type is string with pattern:
    // ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The number of packets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    PacketsForwarded interface{}

    // The number of octets which have matched, and been forwarded, based on the
    // AFT entry. The type is interface{} with range: 0..18446744073709551615.
    OctetsForwarded interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "mac-entry"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("packets-forwarded", types.YLeaf{"PacketsForwarded", state.PacketsForwarded})
    state.EntityData.Leafs.Append("octets-forwarded", types.YLeaf{"OctetsForwarded", state.OctetsForwarded})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops
// The list of next-hops that are to be used for entry within
// the AFT table. The structure of each next-hop is address
// family independent, such that it is possible to resolve fully
// how the next-hop is treated. For example:
// 
// - Where ingress IPv4 unicast packets are to be forwarded via
//  an MPLS LSP, the next-hop list should indicate the MPLS
//  label stack that is used to the next-hop.
// - Where ingress MPLS labelled packets are to be forwarded to
//  an IPv6 nexthop (for example, a CE within a VPN, then the
//  popped label stack, and IPv6 next-hop address should be
//  indicated).
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A next-hop associated with the forwarding instance. The entries within the
    // next-hop list should only reflect next-hops that are actively used by the
    // local system. That is to say inactive, backup or FRR next-hops should not
    // be included within this list. The type is slice of
    // NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "mac-entry"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop
// A next-hop associated with the forwarding instance. The
// entries within the next-hop list should only reflect
// next-hops that are actively used by the local system.
// That is to say inactive, backup or FRR next-hops should
// not be included within this list.
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique index identifying the next-hop entry for
    // the AFT entry. The type is string with range: 0..18446744073709551615.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the AFT next-hop entry.
    Config NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_Config

    // Operational state parameters relating to the AFT next-hop entry.
    State NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_Config
// Configuration parameters relating to the AFT next-hop
// entry
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_State
// Operational state parameters relating to the AFT
// next-hop entry
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique entry for the next-hop. The type is interface{} with range:
    // 0..18446744073709551615.
    Index interface{}

    // The weight of the next-hop. Traffic is balanced according to the ratio
    // described by the relative weights of the next hops that exist for the AFT
    // entry. Note that all next-hops that are specified are assumed to be active
    // next-hops and therefore eligible (and selected) to be installed in the FIB,
    // and hence used for packet forwarding. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // The IP address of the next-hop system. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    IpAddress interface{}

    // The MAC address of the next-hop if resolved by the local network instance.
    // The type is string with pattern: ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$.
    MacAddress interface{}

    // The MPLS label stack to be popped from the packet when switched by the
    // system. The stack is encoded as a leaf-list such that the first entry is
    // the label that is outer-most (i.e., furthest from the bottom of the stack)
    // label stack to be popped.  If the local system pops the outer-most label
    // 400, then the value of this list is [400,]. If the local system removes two
    // labels, the outer-most being 500, and the second of which is 400, then the
    // value of the list is [500, 400].  A swap operation is reflected by entries
    // in the popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type
    // is one of the following types: slice of int with range: 16..1048575, or
    // slice of   :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PoppedMplsLabelStack []interface{}

    // The MPLS label stack imposed when forwarding packets to the next-hop - the
    // stack is encoded as a leaf list whereby the order of the  entries is such
    // that the first entry in the list is the  label at the bottom of the stack
    // to be pushed.  To this end, a packet which is to forwarded to a device
    // using a service label of 42, and a transport label of 8072 will be
    // represented with a label stack list of [42, 8072].  The MPLS label stack
    // list is ordered by the user, such that no system re-ordering of leaves is
    // permitted by the system.  A swap operation is reflected by entries in the
    // popped-mpls-label-stack and pushed-mpls-label-stack nodes. The type is one
    // of the following types: slice of int with range: 16..1048575, or slice of  
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.
    PushedMplsLabelStack []interface{}

    // When forwarding a packet to the specified next-hop, the local system
    // performs a decapsulation of the packet - removing the specified header
    // type. In the case that no next-hop is specified, the packet header is
    // removed, and a subsequent forwarding lookup is performed on the packet
    // encapsulated within the header, matched within the relevant AFT within the
    // specified network-instance. The type is EncapsulationHeaderType.
    DecapsulateHeader interface{}

    // When forwarding a packet to the specified next-hop the local system
    // performs an encapsulation of the packet - adding the specified header type.
    // The type is EncapsulationHeaderType.
    EncapsulateHeader interface{}

    // The protocol from which the AFT entry was learned. The type is one of the
    // following: BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    OriginProtocol interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("ip-address", types.YLeaf{"IpAddress", state.IpAddress})
    state.EntityData.Leafs.Append("mac-address", types.YLeaf{"MacAddress", state.MacAddress})
    state.EntityData.Leafs.Append("popped-mpls-label-stack", types.YLeaf{"PoppedMplsLabelStack", state.PoppedMplsLabelStack})
    state.EntityData.Leafs.Append("pushed-mpls-label-stack", types.YLeaf{"PushedMplsLabelStack", state.PushedMplsLabelStack})
    state.EntityData.Leafs.Append("decapsulate-header", types.YLeaf{"DecapsulateHeader", state.DecapsulateHeader})
    state.EntityData.Leafs.Append("encapsulate-header", types.YLeaf{"EncapsulateHeader", state.EncapsulateHeader})
    state.EntityData.Leafs.Append("origin-protocol", types.YLeaf{"OriginProtocol", state.OriginProtocol})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols
// The routing protocols that are enabled for this
// network-instance.
type NetworkInstances_NetworkInstance_Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A process (instance) of a routing protocol. Some systems may not support
    // more than one instance of a particular routing protocol. The type is slice
    // of NetworkInstances_NetworkInstance_Protocols_Protocol.
    Protocol []*NetworkInstances_NetworkInstance_Protocols_Protocol
}

func (protocols *NetworkInstances_NetworkInstance_Protocols) GetEntityData() *types.CommonEntityData {
    protocols.EntityData.YFilter = protocols.YFilter
    protocols.EntityData.YangName = "protocols"
    protocols.EntityData.BundleName = "openconfig"
    protocols.EntityData.ParentYangName = "network-instance"
    protocols.EntityData.SegmentPath = "protocols"
    protocols.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/" + protocols.EntityData.SegmentPath
    protocols.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    protocols.EntityData.NamespaceTable = openconfig.GetNamespaces()
    protocols.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    protocols.EntityData.Children = types.NewOrderedMap()
    protocols.EntityData.Children.Append("protocol", types.YChild{"Protocol", nil})
    for i := range protocols.Protocol {
        protocols.EntityData.Children.Append(types.GetSegmentPath(protocols.Protocol[i]), types.YChild{"Protocol", protocols.Protocol[i]})
    }
    protocols.EntityData.Leafs = types.NewOrderedMap()

    protocols.EntityData.YListKeys = []string {}

    return &(protocols.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol
// A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
type NetworkInstances_NetworkInstance_Protocols_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The protocol name for the routing or forwarding
    // protocol to be instantiated. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Identifier interface{}

    // This attribute is a key. An operator-assigned identifier for the routing or
    // forwarding protocol. For some processes this leaf may be system defined.
    // The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Config_Name
    Name interface{}

    // Configuration parameters relating to the routing protocol instance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Config

    // State parameters relating to the routing protocol instance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_State

    // Enclosing container for the list of static routes.
    StaticRoutes NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes

    // Enclosing container for locally-defined aggregate routes.
    LocalAggregates NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates

    // Top-level configuration and state for the BGP router.
    Bgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp

    // This container defines top-level ISIS configuration and state information.
    Isis NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
}

func (protocol *NetworkInstances_NetworkInstance_Protocols_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "openconfig"
    protocol.EntityData.ParentYangName = "protocols"
    protocol.EntityData.SegmentPath = "protocol" + types.AddKeyToken(protocol.Identifier, "identifier") + types.AddKeyToken(protocol.Name, "name")
    protocol.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/" + protocol.EntityData.SegmentPath
    protocol.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    protocol.EntityData.NamespaceTable = openconfig.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("config", types.YChild{"Config", &protocol.Config})
    protocol.EntityData.Children.Append("state", types.YChild{"State", &protocol.State})
    protocol.EntityData.Children.Append("static-routes", types.YChild{"StaticRoutes", &protocol.StaticRoutes})
    protocol.EntityData.Children.Append("local-aggregates", types.YChild{"LocalAggregates", &protocol.LocalAggregates})
    protocol.EntityData.Children.Append("bgp", types.YChild{"Bgp", &protocol.Bgp})
    protocol.EntityData.Children.Append("isis", types.YChild{"Isis", &protocol.Isis})
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", protocol.Identifier})
    protocol.EntityData.Leafs.Append("name", types.YLeaf{"Name", protocol.Name})

    protocol.EntityData.YListKeys = []string {"Identifier", "Name"}

    return &(protocol.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Config
// Configuration parameters relating to the routing
// protocol instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The protocol identifier for the instance. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Identifier interface{}

    // A unique name for the protocol instance. The type is string.
    Name interface{}

    // A boolean value indicating whether the local protocol instance is enabled.
    // The type is bool.
    Enabled interface{}

    // The default metric within the RIB for entries that are installed by this
    // protocol instance. This value may be overridden by protocol specific
    // configuration options. The lower the metric specified the more preferable
    // the RIB entry is to be selected for use within the network instance. Where
    // multiple entries have the same metric value then these equal cost paths
    // should be treated according to the specified ECMP path selection behaviour
    // for the instance. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "protocol"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", config.Identifier})
    config.EntityData.Leafs.Append("name", types.YLeaf{"Name", config.Name})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", config.DefaultMetric})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_State
// State parameters relating to the routing protocol
// instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The protocol identifier for the instance. The type is one of the following:
    // BGPISISLOCALAGGREGATESTATICDIRECTLYCONNECTEDOSPFOSPF3.
    Identifier interface{}

    // A unique name for the protocol instance. The type is string.
    Name interface{}

    // A boolean value indicating whether the local protocol instance is enabled.
    // The type is bool.
    Enabled interface{}

    // The default metric within the RIB for entries that are installed by this
    // protocol instance. This value may be overridden by protocol specific
    // configuration options. The lower the metric specified the more preferable
    // the RIB entry is to be selected for use within the network instance. Where
    // multiple entries have the same metric value then these equal cost paths
    // should be treated according to the specified ECMP path selection behaviour
    // for the instance. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "protocol"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", state.Identifier})
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes
// Enclosing container for the list of static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of locally configured static routes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static.
    Static []*NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static
}

func (staticRoutes *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) GetEntityData() *types.CommonEntityData {
    staticRoutes.EntityData.YFilter = staticRoutes.YFilter
    staticRoutes.EntityData.YangName = "static-routes"
    staticRoutes.EntityData.BundleName = "openconfig"
    staticRoutes.EntityData.ParentYangName = "protocol"
    staticRoutes.EntityData.SegmentPath = "static-routes"
    staticRoutes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + staticRoutes.EntityData.SegmentPath
    staticRoutes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    staticRoutes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    staticRoutes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    staticRoutes.EntityData.Children = types.NewOrderedMap()
    staticRoutes.EntityData.Children.Append("static", types.YChild{"Static", nil})
    for i := range staticRoutes.Static {
        staticRoutes.EntityData.Children.Append(types.GetSegmentPath(staticRoutes.Static[i]), types.YChild{"Static", staticRoutes.Static[i]})
    }
    staticRoutes.EntityData.Leafs = types.NewOrderedMap()

    staticRoutes.EntityData.YListKeys = []string {}

    return &(staticRoutes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static
// List of locally configured static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the destination prefix list key. The
    // type is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // Configuration data for static routes.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config

    // Operational state data for static routes.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State

    // Configuration and state parameters relating to the next-hops that are to be
    // utilised for the static route being specified.
    NextHops NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops
}

func (static *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetEntityData() *types.CommonEntityData {
    static.EntityData.YFilter = static.YFilter
    static.EntityData.YangName = "static"
    static.EntityData.BundleName = "openconfig"
    static.EntityData.ParentYangName = "static-routes"
    static.EntityData.SegmentPath = "static" + types.AddKeyToken(static.Prefix, "prefix")
    static.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/" + static.EntityData.SegmentPath
    static.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    static.EntityData.NamespaceTable = openconfig.GetNamespaces()
    static.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    static.EntityData.Children = types.NewOrderedMap()
    static.EntityData.Children.Append("config", types.YChild{"Config", &static.Config})
    static.EntityData.Children.Append("state", types.YChild{"State", &static.State})
    static.EntityData.Children.Append("next-hops", types.YChild{"NextHops", &static.NextHops})
    static.EntityData.Leafs = types.NewOrderedMap()
    static.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", static.Prefix})

    static.EntityData.YListKeys = []string {"Prefix"}

    return &(static.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config
// Configuration data for static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix for the static route, either IPv4 or IPv6. The type is
    // one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SetTag interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "static"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})
    config.EntityData.Leafs.Append("set-tag", types.YLeaf{"SetTag", config.SetTag})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State
// Operational state data for static routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix for the static route, either IPv4 or IPv6. The type is
    // one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SetTag interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "static"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("set-tag", types.YLeaf{"SetTag", state.SetTag})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops
// Configuration and state parameters relating to the
// next-hops that are to be utilised for the static
// route being specified
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of next-hops to be utilised for the static route being specified.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop.
    NextHop []*NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop
}

func (nextHops *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) GetEntityData() *types.CommonEntityData {
    nextHops.EntityData.YFilter = nextHops.YFilter
    nextHops.EntityData.YangName = "next-hops"
    nextHops.EntityData.BundleName = "openconfig"
    nextHops.EntityData.ParentYangName = "static"
    nextHops.EntityData.SegmentPath = "next-hops"
    nextHops.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/" + nextHops.EntityData.SegmentPath
    nextHops.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHops.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHops.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHops.EntityData.Children = types.NewOrderedMap()
    nextHops.EntityData.Children.Append("next-hop", types.YChild{"NextHop", nil})
    for i := range nextHops.NextHop {
        nextHops.EntityData.Children.Append(types.GetSegmentPath(nextHops.NextHop[i]), types.YChild{"NextHop", nextHops.NextHop[i]})
    }
    nextHops.EntityData.Leafs = types.NewOrderedMap()

    nextHops.EntityData.YListKeys = []string {}

    return &(nextHops.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop
// A list of next-hops to be utilised for the static
// route being specified.
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the index of the current next-hop.
    // The index is intended to be a user-specified value which can be used to
    // reference the next-hop in question, without any other semantics being
    // assigned to it. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_Index
    Index interface{}

    // Configuration parameters relating to the next-hop entry.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config

    // Operational state parameters relating to the next-hop entry.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef
}

func (nextHop *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "openconfig"
    nextHop.EntityData.ParentYangName = "next-hops"
    nextHop.EntityData.SegmentPath = "next-hop" + types.AddKeyToken(nextHop.Index, "index")
    nextHop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nextHop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Children.Append("config", types.YChild{"Config", &nextHop.Config})
    nextHop.EntityData.Children.Append("state", types.YChild{"State", &nextHop.State})
    nextHop.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &nextHop.InterfaceRef})
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("index", types.YLeaf{"Index", nextHop.Index})

    nextHop.EntityData.YListKeys = []string {"Index"}

    return &(nextHop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config
// Configuration parameters relating to the next-hop
// entry
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An user-specified identifier utilised to uniquely reference the next-hop
    // entry in the next-hop list. The value of this index has no semantic meaning
    // other than for referencing the entry. The type is string.
    Index interface{}

    // The next-hop that is to be used for the static route - this may be
    // specified as an IP address, an interface or a pre-defined next-hop type -
    // for instance, DROP or LOCAL_LINK. When this leaf is not set, and the
    // interface-ref value is specified for the next-hop, then the system should
    // treat the prefix as though it is directly connected to the interface. The
    // type is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or :go:struct:`LOCALDEFINEDNEXTHOP
    // <ydk/models/local_routing/LOCALDEFINEDNEXTHOP>`.
    NextHop interface{}

    // A metric which is utilised to specify the preference of the next-hop entry
    // when it is injected into the RIB. The lower the metric, the more preferable
    // the prefix is. When this value is not specified the metric is inherited
    // from the default metric utilised for static routes within the network
    // instance that the static routes are being instantiated. When multiple
    // next-hops are specified for a static route, the metric is utilised to
    // determine which of the next-hops is to be installed in the RIB. When
    // multiple next-hops have the same metric (be it specified, or simply the
    // default) then these next-hops should all be installed in the RIB. The type
    // is interface{} with range: 0..4294967295.
    Metric interface{}

    // Determines whether the next-hop should be allowed to be looked up
    // recursively - i.e., via a RIB entry which has been installed by a routing
    // protocol, or another static route - rather than needing to be connected
    // directly to an interface of the local system within the current network
    // instance. When the interface reference specified within the next-hop entry
    // is set (i.e., is not null) then forwarding is restricted to being via the
    // interface specified - and recursion is hence disabled. The type is bool.
    // The default value is false.
    Recurse interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "next-hop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("index", types.YLeaf{"Index", config.Index})
    config.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", config.NextHop})
    config.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", config.Metric})
    config.EntityData.Leafs.Append("recurse", types.YLeaf{"Recurse", config.Recurse})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State
// Operational state parameters relating to the
// next-hop entry
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An user-specified identifier utilised to uniquely reference the next-hop
    // entry in the next-hop list. The value of this index has no semantic meaning
    // other than for referencing the entry. The type is string.
    Index interface{}

    // The next-hop that is to be used for the static route - this may be
    // specified as an IP address, an interface or a pre-defined next-hop type -
    // for instance, DROP or LOCAL_LINK. When this leaf is not set, and the
    // interface-ref value is specified for the next-hop, then the system should
    // treat the prefix as though it is directly connected to the interface. The
    // type is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or :go:struct:`LOCALDEFINEDNEXTHOP
    // <ydk/models/local_routing/LOCALDEFINEDNEXTHOP>`.
    NextHop interface{}

    // A metric which is utilised to specify the preference of the next-hop entry
    // when it is injected into the RIB. The lower the metric, the more preferable
    // the prefix is. When this value is not specified the metric is inherited
    // from the default metric utilised for static routes within the network
    // instance that the static routes are being instantiated. When multiple
    // next-hops are specified for a static route, the metric is utilised to
    // determine which of the next-hops is to be installed in the RIB. When
    // multiple next-hops have the same metric (be it specified, or simply the
    // default) then these next-hops should all be installed in the RIB. The type
    // is interface{} with range: 0..4294967295.
    Metric interface{}

    // Determines whether the next-hop should be allowed to be looked up
    // recursively - i.e., via a RIB entry which has been installed by a routing
    // protocol, or another static route - rather than needing to be connected
    // directly to an interface of the local system within the current network
    // instance. When the interface reference specified within the next-hop entry
    // is set (i.e., is not null) then forwarding is restricted to being via the
    // interface specified - and recursion is hence disabled. The type is bool.
    // The default value is false.
    Recurse interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "next-hop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("index", types.YLeaf{"Index", state.Index})
    state.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", state.NextHop})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("recurse", types.YLeaf{"Recurse", state.Recurse})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "next-hop"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates
// Enclosing container for locally-defined aggregate
// routes
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of aggregates. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate.
    Aggregate []*NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate
}

func (localAggregates *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates) GetEntityData() *types.CommonEntityData {
    localAggregates.EntityData.YFilter = localAggregates.YFilter
    localAggregates.EntityData.YangName = "local-aggregates"
    localAggregates.EntityData.BundleName = "openconfig"
    localAggregates.EntityData.ParentYangName = "protocol"
    localAggregates.EntityData.SegmentPath = "local-aggregates"
    localAggregates.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + localAggregates.EntityData.SegmentPath
    localAggregates.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    localAggregates.EntityData.NamespaceTable = openconfig.GetNamespaces()
    localAggregates.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    localAggregates.EntityData.Children = types.NewOrderedMap()
    localAggregates.EntityData.Children.Append("aggregate", types.YChild{"Aggregate", nil})
    for i := range localAggregates.Aggregate {
        localAggregates.EntityData.Children.Append(types.GetSegmentPath(localAggregates.Aggregate[i]), types.YChild{"Aggregate", localAggregates.Aggregate[i]})
    }
    localAggregates.EntityData.Leafs = types.NewOrderedMap()

    localAggregates.EntityData.YListKeys = []string {}

    return &(localAggregates.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate
// List of aggregates
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the configured prefix for this
    // aggregate. The type is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // Configuration data for aggregate advertisements.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config

    // Operational state data for aggregate advertisements.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State
}

func (aggregate *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate) GetEntityData() *types.CommonEntityData {
    aggregate.EntityData.YFilter = aggregate.YFilter
    aggregate.EntityData.YangName = "aggregate"
    aggregate.EntityData.BundleName = "openconfig"
    aggregate.EntityData.ParentYangName = "local-aggregates"
    aggregate.EntityData.SegmentPath = "aggregate" + types.AddKeyToken(aggregate.Prefix, "prefix")
    aggregate.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/local-aggregates/" + aggregate.EntityData.SegmentPath
    aggregate.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    aggregate.EntityData.NamespaceTable = openconfig.GetNamespaces()
    aggregate.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    aggregate.EntityData.Children = types.NewOrderedMap()
    aggregate.EntityData.Children.Append("config", types.YChild{"Config", &aggregate.Config})
    aggregate.EntityData.Children.Append("state", types.YChild{"State", &aggregate.State})
    aggregate.EntityData.Leafs = types.NewOrderedMap()
    aggregate.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aggregate.Prefix})

    aggregate.EntityData.YListKeys = []string {"Prefix"}

    return &(aggregate.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config
// Configuration data for aggregate advertisements
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate prefix to be advertised. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // When true, install the aggregate route with a discard next-hop -- traffic
    // destined to the aggregate will be discarded with no ICMP message generated.
    // When false, traffic destined to an aggregate address when no constituent
    // routes are present will generate an ICMP unreachable message. The type is
    // bool. The default value is false.
    Discard interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SetTag interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "aggregate"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})
    config.EntityData.Leafs.Append("discard", types.YLeaf{"Discard", config.Discard})
    config.EntityData.Leafs.Append("set-tag", types.YLeaf{"SetTag", config.SetTag})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State
// Operational state data for aggregate
// advertisements
type NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate prefix to be advertised. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // When true, install the aggregate route with a discard next-hop -- traffic
    // destined to the aggregate will be discarded with no ICMP message generated.
    // When false, traffic destined to an aggregate address when no constituent
    // routes are present will generate an ICMP unreachable message. The type is
    // bool. The default value is false.
    Discard interface{}

    // Set a generic tag value on the route. This tag can be used for filtering
    // routes that are distributed to other routing protocols. The type is one of
    // the following types: int with range: 0..4294967295, or string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    SetTag interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "aggregate"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("discard", types.YLeaf{"Discard", state.Discard})
    state.EntityData.Leafs.Append("set-tag", types.YLeaf{"SetTag", state.SetTag})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp
// Top-level configuration and state for the BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global configuration for the BGP router.
    Global NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global

    // Configuration for BGP neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors

    // Configuration for BGP peer-groups.
    PeerGroups NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups
}

func (bgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "openconfig"
    bgp.EntityData.ParentYangName = "protocol"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + bgp.EntityData.SegmentPath
    bgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bgp.EntityData.Children = types.NewOrderedMap()
    bgp.EntityData.Children.Append("global", types.YChild{"Global", &bgp.Global})
    bgp.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &bgp.Neighbors})
    bgp.EntityData.Children.Append("peer-groups", types.YChild{"PeerGroups", &bgp.PeerGroups})
    bgp.EntityData.Leafs = types.NewOrderedMap()

    bgp.EntityData.YListKeys = []string {}

    return &(bgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global
// Global configuration for the BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the global BGP router.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config

    // State information relating to the global BGP router.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State

    // Administrative distance (or preference) assigned to routes received from
    // different sources (external, internal, and local).
    DefaultRouteDistance NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance

    // Parameters indicating whether the local system acts as part of a BGP
    // confederation.
    Confederation NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions

    // Address family specific configuration.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis

    // A list of IP prefixes from which the system should:  - Accept connections
    // to the BGP daemon  - Dynamically configure a BGP neighbor corresponding to
    // the    source address of the remote system, using the parameters    of the
    // specified peer-group. For such neighbors, an entry within the neighbor list
    // should be created, indicating that the peer was dynamically configured, and
    // referencing the peer-group from which the configuration was derived.
    DynamicNeighborPrefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes
}

func (global *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "bgp"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("config", types.YChild{"Config", &global.Config})
    global.EntityData.Children.Append("state", types.YChild{"State", &global.State})
    global.EntityData.Children.Append("default-route-distance", types.YChild{"DefaultRouteDistance", &global.DefaultRouteDistance})
    global.EntityData.Children.Append("confederation", types.YChild{"Confederation", &global.Confederation})
    global.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &global.GracefulRestart})
    global.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &global.UseMultiplePaths})
    global.EntityData.Children.Append("route-selection-options", types.YChild{"RouteSelectionOptions", &global.RouteSelectionOptions})
    global.EntityData.Children.Append("afi-safis", types.YChild{"AfiSafis", &global.AfiSafis})
    global.EntityData.Children.Append("dynamic-neighbor-prefixes", types.YChild{"DynamicNeighborPrefixes", &global.DynamicNeighborPrefixes})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config
// Configuration parameters relating to the global BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local autonomous system number of the router.  Uses the 32-bit as-number
    // type from the model in RFC 6991. The type is interface{} with range:
    // 0..4294967295. This attribute is mandatory.
    As interface{}

    // Router id of the router - an unsigned 32-bit integer expressed in dotted
    // quad notation. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouterId interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "global"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("as", types.YLeaf{"As", config.As})
    config.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", config.RouterId})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State
// State information relating to the global BGP router
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local autonomous system number of the router.  Uses the 32-bit as-number
    // type from the model in RFC 6991. The type is interface{} with range:
    // 0..4294967295. This attribute is mandatory.
    As interface{}

    // Router id of the router - an unsigned 32-bit integer expressed in dotted
    // quad notation. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouterId interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("as", types.YLeaf{"As", state.As})
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})
    state.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", state.TotalPaths})
    state.EntityData.Leafs.Append("total-prefixes", types.YLeaf{"TotalPrefixes", state.TotalPrefixes})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance
// Administrative distance (or preference) assigned to
// routes received from different sources
// (external, internal, and local).
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the default route distance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config

    // State information relating to the default route distance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State
}

func (defaultRouteDistance *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance) GetEntityData() *types.CommonEntityData {
    defaultRouteDistance.EntityData.YFilter = defaultRouteDistance.YFilter
    defaultRouteDistance.EntityData.YangName = "default-route-distance"
    defaultRouteDistance.EntityData.BundleName = "openconfig"
    defaultRouteDistance.EntityData.ParentYangName = "global"
    defaultRouteDistance.EntityData.SegmentPath = "default-route-distance"
    defaultRouteDistance.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + defaultRouteDistance.EntityData.SegmentPath
    defaultRouteDistance.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultRouteDistance.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultRouteDistance.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultRouteDistance.EntityData.Children = types.NewOrderedMap()
    defaultRouteDistance.EntityData.Children.Append("config", types.YChild{"Config", &defaultRouteDistance.Config})
    defaultRouteDistance.EntityData.Children.Append("state", types.YChild{"State", &defaultRouteDistance.State})
    defaultRouteDistance.EntityData.Leafs = types.NewOrderedMap()

    defaultRouteDistance.EntityData.YListKeys = []string {}

    return &(defaultRouteDistance.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config
// Configuration parameters relating to the default route
// distance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance for routes learned from external BGP (eBGP). The
    // type is interface{} with range: 1..255.
    ExternalRouteDistance interface{}

    // Administrative distance for routes learned from internal BGP (iBGP). The
    // type is interface{} with range: 1..255.
    InternalRouteDistance interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "default-route-distance"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("external-route-distance", types.YLeaf{"ExternalRouteDistance", config.ExternalRouteDistance})
    config.EntityData.Leafs.Append("internal-route-distance", types.YLeaf{"InternalRouteDistance", config.InternalRouteDistance})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State
// State information relating to the default route distance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance for routes learned from external BGP (eBGP). The
    // type is interface{} with range: 1..255.
    ExternalRouteDistance interface{}

    // Administrative distance for routes learned from internal BGP (iBGP). The
    // type is interface{} with range: 1..255.
    InternalRouteDistance interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DefaultRouteDistance_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-route-distance"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/default-route-distance/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("external-route-distance", types.YLeaf{"ExternalRouteDistance", state.ExternalRouteDistance})
    state.EntityData.Leafs.Append("internal-route-distance", types.YLeaf{"InternalRouteDistance", state.InternalRouteDistance})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation
// Parameters indicating whether the local system acts as part
// of a BGP confederation
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to BGP confederations.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config

    // State information relating to the BGP confederations.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State
}

func (confederation *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation) GetEntityData() *types.CommonEntityData {
    confederation.EntityData.YFilter = confederation.YFilter
    confederation.EntityData.YangName = "confederation"
    confederation.EntityData.BundleName = "openconfig"
    confederation.EntityData.ParentYangName = "global"
    confederation.EntityData.SegmentPath = "confederation"
    confederation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + confederation.EntityData.SegmentPath
    confederation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    confederation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    confederation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    confederation.EntityData.Children = types.NewOrderedMap()
    confederation.EntityData.Children.Append("config", types.YChild{"Config", &confederation.Config})
    confederation.EntityData.Children.Append("state", types.YChild{"State", &confederation.State})
    confederation.EntityData.Leafs = types.NewOrderedMap()

    confederation.EntityData.YListKeys = []string {}

    return &(confederation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config
// Configuration parameters relating to BGP confederations
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true it indicates that the local-AS is part of a
    // BGP confederation. The type is bool.
    Enabled interface{}

    // Confederation identifier for the autonomous system. The type is interface{}
    // with range: 0..4294967295.
    Identifier interface{}

    // Remote autonomous systems that are to be treated as part of the local
    // confederation. The type is slice of interface{} with range: 0..4294967295.
    MemberAs []interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "confederation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/confederation/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", config.Identifier})
    config.EntityData.Leafs.Append("member-as", types.YLeaf{"MemberAs", config.MemberAs})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State
// State information relating to the BGP confederations
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true it indicates that the local-AS is part of a
    // BGP confederation. The type is bool.
    Enabled interface{}

    // Confederation identifier for the autonomous system. The type is interface{}
    // with range: 0..4294967295.
    Identifier interface{}

    // Remote autonomous systems that are to be treated as part of the local
    // confederation. The type is slice of interface{} with range: 0..4294967295.
    MemberAs []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_Confederation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "confederation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/confederation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", state.Identifier})
    state.EntityData.Leafs.Append("member-as", types.YLeaf{"MemberAs", state.MemberAs})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", config.RestartTime})
    config.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime})
    config.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", config.HelperOnly})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", state.RestartTime})
    state.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime})
    state.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", state.HelperOnly})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "global"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &useMultiplePaths.Ibgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Children.Append("config", types.YChild{"Config", &ibgp.Config})
    ibgp.EntityData.Children.Append("state", types.YChild{"State", &ibgp.State})
    ibgp.EntityData.Leafs = types.NewOrderedMap()

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/ibgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/use-multiple-paths/ibgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "global"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + routeSelectionOptions.EntityData.SegmentPath
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = types.NewOrderedMap()
    routeSelectionOptions.EntityData.Children.Append("config", types.YChild{"Config", &routeSelectionOptions.Config})
    routeSelectionOptions.EntityData.Children.Append("state", types.YChild{"State", &routeSelectionOptions.State})
    routeSelectionOptions.EntityData.Leafs = types.NewOrderedMap()

    routeSelectionOptions.EntityData.YListKeys = []string {}

    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/route-selection-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed})
    config.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength})
    config.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId})
    config.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes})
    config.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", config.EnableAigp})
    config.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/route-selection-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed})
    state.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength})
    state.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId})
    state.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes})
    state.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", state.EnableAigp})
    state.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis
// Address family specific configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi.
    AfiSafi []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "global"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + afiSafis.EntityData.SegmentPath
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = types.NewOrderedMap()
    afiSafis.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", nil})
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children.Append(types.GetSegmentPath(afiSafis.AfiSafi[i]), types.YChild{"AfiSafi", afiSafis.AfiSafi[i]})
    }
    afiSafis.EntityData.Leafs = types.NewOrderedMap()

    afiSafis.EntityData.YListKeys = []string {}

    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3vpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3vpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3vpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3vpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2vpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls

    // BGP EVPN configuration options.
    L2vpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + types.AddKeyToken(afiSafi.AfiSafiName, "afi-safi-name")
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("config", types.YChild{"Config", &afiSafi.Config})
    afiSafi.EntityData.Children.Append("state", types.YChild{"State", &afiSafi.State})
    afiSafi.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &afiSafi.GracefulRestart})
    afiSafi.EntityData.Children.Append("route-selection-options", types.YChild{"RouteSelectionOptions", &afiSafi.RouteSelectionOptions})
    afiSafi.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths})
    afiSafi.EntityData.Children.Append("ipv4-unicast", types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast})
    afiSafi.EntityData.Children.Append("ipv6-unicast", types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast})
    afiSafi.EntityData.Children.Append("ipv4-labeled-unicast", types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast})
    afiSafi.EntityData.Children.Append("ipv6-labeled-unicast", types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-unicast", types.YChild{"L3vpnIpv4Unicast", &afiSafi.L3vpnIpv4Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-unicast", types.YChild{"L3vpnIpv6Unicast", &afiSafi.L3vpnIpv6Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-multicast", types.YChild{"L3vpnIpv4Multicast", &afiSafi.L3vpnIpv4Multicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-multicast", types.YChild{"L3vpnIpv6Multicast", &afiSafi.L3vpnIpv6Multicast})
    afiSafi.EntityData.Children.Append("l2vpn-vpls", types.YChild{"L2vpnVpls", &afiSafi.L2vpnVpls})
    afiSafi.EntityData.Children.Append("l2vpn-evpn", types.YChild{"L2vpnEvpn", &afiSafi.L2vpnEvpn})
    afiSafi.EntityData.Leafs = types.NewOrderedMap()
    afiSafi.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName})

    afiSafi.EntityData.YListKeys = []string {"AfiSafiName"}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", config.AfiSafiName})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", state.AfiSafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", state.TotalPaths})
    state.EntityData.Leafs.Append("total-prefixes", types.YLeaf{"TotalPrefixes", state.TotalPrefixes})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "afi-safi"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + routeSelectionOptions.EntityData.SegmentPath
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = types.NewOrderedMap()
    routeSelectionOptions.EntityData.Children.Append("config", types.YChild{"Config", &routeSelectionOptions.Config})
    routeSelectionOptions.EntityData.Children.Append("state", types.YChild{"State", &routeSelectionOptions.State})
    routeSelectionOptions.EntityData.Leafs = types.NewOrderedMap()

    routeSelectionOptions.EntityData.YListKeys = []string {}

    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed})
    config.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength})
    config.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId})
    config.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes})
    config.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", config.EnableAigp})
    config.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/route-selection-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed})
    state.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength})
    state.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId})
    state.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes})
    state.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", state.EnableAigp})
    state.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &useMultiplePaths.Ibgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Children.Append("config", types.YChild{"Config", &ibgp.Config})
    ibgp.EntityData.Children.Append("state", types.YChild{"State", &ibgp.State})
    ibgp.EntityData.Leafs = types.NewOrderedMap()

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + ipv4Unicast.EntityData.SegmentPath
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = types.NewOrderedMap()
    ipv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit})
    ipv4Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv4Unicast.Config})
    ipv4Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv4Unicast.State})
    ipv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4Unicast.EntityData.YListKeys = []string {}

    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + ipv6Unicast.EntityData.SegmentPath
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = types.NewOrderedMap()
    ipv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit})
    ipv6Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv6Unicast.Config})
    ipv6Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv6Unicast.State})
    ipv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6Unicast.EntityData.YListKeys = []string {}

    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + ipv4LabeledUnicast.EntityData.SegmentPath
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv4LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit})
    ipv4LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + ipv6LabeledUnicast.EntityData.SegmentPath
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv6LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit})
    ipv6LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
}

func (l3vpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Unicast.EntityData.YFilter = l3vpnIpv4Unicast.YFilter
    l3vpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l3vpnIpv4Unicast.EntityData.SegmentPath
    l3vpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Unicast.PrefixLimit})
    l3vpnIpv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
}

func (l3vpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Unicast.EntityData.YFilter = l3vpnIpv6Unicast.YFilter
    l3vpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l3vpnIpv6Unicast.EntityData.SegmentPath
    l3vpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Unicast.PrefixLimit})
    l3vpnIpv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
}

func (l3vpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Multicast.EntityData.YFilter = l3vpnIpv4Multicast.YFilter
    l3vpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l3vpnIpv4Multicast.EntityData.SegmentPath
    l3vpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Multicast.PrefixLimit})
    l3vpnIpv4Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
}

func (l3vpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Multicast.EntityData.YFilter = l3vpnIpv6Multicast.YFilter
    l3vpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l3vpnIpv6Multicast.EntityData.SegmentPath
    l3vpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Multicast.PrefixLimit})
    l3vpnIpv6Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
}

func (l2vpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls) GetEntityData() *types.CommonEntityData {
    l2vpnVpls.EntityData.YFilter = l2vpnVpls.YFilter
    l2vpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2vpnVpls.EntityData.BundleName = "openconfig"
    l2vpnVpls.EntityData.ParentYangName = "afi-safi"
    l2vpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2vpnVpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l2vpnVpls.EntityData.SegmentPath
    l2vpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnVpls.EntityData.Children = types.NewOrderedMap()
    l2vpnVpls.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnVpls.PrefixLimit})
    l2vpnVpls.EntityData.Leafs = types.NewOrderedMap()

    l2vpnVpls.EntityData.YListKeys = []string {}

    return &(l2vpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
}

func (l2vpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn) GetEntityData() *types.CommonEntityData {
    l2vpnEvpn.EntityData.YFilter = l2vpnEvpn.YFilter
    l2vpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2vpnEvpn.EntityData.BundleName = "openconfig"
    l2vpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2vpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2vpnEvpn.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/" + l2vpnEvpn.EntityData.SegmentPath
    l2vpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    l2vpnEvpn.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnEvpn.PrefixLimit})
    l2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()

    l2vpnEvpn.EntityData.YListKeys = []string {}

    return &(l2vpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes
// A list of IP prefixes from which the system should:
//  - Accept connections to the BGP daemon
//  - Dynamically configure a BGP neighbor corresponding to the
//    source address of the remote system, using the parameters
//    of the specified peer-group.
// For such neighbors, an entry within the neighbor list should
// be created, indicating that the peer was dynamically
// configured, and referencing the peer-group from which the
// configuration was derived.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An individual prefix from which dynamic neighbor connections are allowed.
    // The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix.
    DynamicNeighborPrefix []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix
}

func (dynamicNeighborPrefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes) GetEntityData() *types.CommonEntityData {
    dynamicNeighborPrefixes.EntityData.YFilter = dynamicNeighborPrefixes.YFilter
    dynamicNeighborPrefixes.EntityData.YangName = "dynamic-neighbor-prefixes"
    dynamicNeighborPrefixes.EntityData.BundleName = "openconfig"
    dynamicNeighborPrefixes.EntityData.ParentYangName = "global"
    dynamicNeighborPrefixes.EntityData.SegmentPath = "dynamic-neighbor-prefixes"
    dynamicNeighborPrefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/" + dynamicNeighborPrefixes.EntityData.SegmentPath
    dynamicNeighborPrefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    dynamicNeighborPrefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    dynamicNeighborPrefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    dynamicNeighborPrefixes.EntityData.Children = types.NewOrderedMap()
    dynamicNeighborPrefixes.EntityData.Children.Append("dynamic-neighbor-prefix", types.YChild{"DynamicNeighborPrefix", nil})
    for i := range dynamicNeighborPrefixes.DynamicNeighborPrefix {
        dynamicNeighborPrefixes.EntityData.Children.Append(types.GetSegmentPath(dynamicNeighborPrefixes.DynamicNeighborPrefix[i]), types.YChild{"DynamicNeighborPrefix", dynamicNeighborPrefixes.DynamicNeighborPrefix[i]})
    }
    dynamicNeighborPrefixes.EntityData.Leafs = types.NewOrderedMap()

    dynamicNeighborPrefixes.EntityData.YListKeys = []string {}

    return &(dynamicNeighborPrefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix
// An individual prefix from which dynamic neighbor
// connections are allowed.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IP prefix from which source
    // connections are allowed for the dynamic neighbor group. The type is one of
    // the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // Configuration parameters relating to the source prefix for the dynamic BGP
    // neighbor connections.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config

    // Operational state parameters relating to the source prefix for the dynamic
    // BGP neighbor connections.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State
}

func (dynamicNeighborPrefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix) GetEntityData() *types.CommonEntityData {
    dynamicNeighborPrefix.EntityData.YFilter = dynamicNeighborPrefix.YFilter
    dynamicNeighborPrefix.EntityData.YangName = "dynamic-neighbor-prefix"
    dynamicNeighborPrefix.EntityData.BundleName = "openconfig"
    dynamicNeighborPrefix.EntityData.ParentYangName = "dynamic-neighbor-prefixes"
    dynamicNeighborPrefix.EntityData.SegmentPath = "dynamic-neighbor-prefix" + types.AddKeyToken(dynamicNeighborPrefix.Prefix, "prefix")
    dynamicNeighborPrefix.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/" + dynamicNeighborPrefix.EntityData.SegmentPath
    dynamicNeighborPrefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    dynamicNeighborPrefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    dynamicNeighborPrefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    dynamicNeighborPrefix.EntityData.Children = types.NewOrderedMap()
    dynamicNeighborPrefix.EntityData.Children.Append("config", types.YChild{"Config", &dynamicNeighborPrefix.Config})
    dynamicNeighborPrefix.EntityData.Children.Append("state", types.YChild{"State", &dynamicNeighborPrefix.State})
    dynamicNeighborPrefix.EntityData.Leafs = types.NewOrderedMap()
    dynamicNeighborPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", dynamicNeighborPrefix.Prefix})

    dynamicNeighborPrefix.EntityData.YListKeys = []string {"Prefix"}

    return &(dynamicNeighborPrefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config
// Configuration parameters relating to the source prefix
// for the dynamic BGP neighbor connections.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix within which the source address of the remote BGP speaker
    // must fall to be considered eligible to the dynamically configured. The type
    // is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // The peer-group within which the dynamic neighbor will be configured.  The
    // configuration parameters used for the dynamic neighbor are those specified
    // within the referenced peer group. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config_PeerGroupName
    PeerGroup interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "dynamic-neighbor-prefix"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})
    config.EntityData.Leafs.Append("peer-group", types.YLeaf{"PeerGroup", config.PeerGroup})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State
// Operational state parameters relating to the source
// prefix for the dynamic BGP neighbor connections.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix within which the source address of the remote BGP speaker
    // must fall to be considered eligible to the dynamically configured. The type
    // is one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // The peer-group within which the dynamic neighbor will be configured.  The
    // configuration parameters used for the dynamic neighbor are those specified
    // within the referenced peer group. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config_PeerGroupName
    PeerGroup interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Global_DynamicNeighborPrefixes_DynamicNeighborPrefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "dynamic-neighbor-prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("peer-group", types.YLeaf{"PeerGroup", state.PeerGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors
// Configuration for BGP neighbors
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of BGP neighbors configured on the local system, uniquely identified
    // by peer IPv[46] address. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor.
    Neighbor []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "bgp"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor
// List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the address of the BGP neighbor used
    // as a key in the neighbor list. The type is one of the following types:
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NeighborAddress interface{}

    // Configuration parameters relating to the BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config

    // State information relating to the BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State

    // Timers related to a BGP neighbor.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers

    // Transport session parameters for the BGP neighbor.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport

    // Error handling parameters used for the BGP neighbor or group.
    ErrorHandling NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart

    // Logging options for events related to the BGP neighbor or group.
    LoggingOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions

    // eBGP multi-hop parameters for the BGPgroup.
    EbgpMultihop NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop

    // Route reflector parameters for the BGPgroup.
    RouteReflector NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector

    // AS_PATH manipulation parameters for the BGP neighbor or group.
    AsPathOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions

    // Parameters relating to the advertisement and receipt of multiple paths for
    // a single NLRI (add-paths).
    AddPaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths

    // Parameters related to the use of multiple-paths for the same NLRI when they
    // are received only from this neighbor.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy

    // Per-address-family configuration parameters associated with the neighbor.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.NeighborAddress, "neighbor-address")
    neighbor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("config", types.YChild{"Config", &neighbor.Config})
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Children.Append("timers", types.YChild{"Timers", &neighbor.Timers})
    neighbor.EntityData.Children.Append("transport", types.YChild{"Transport", &neighbor.Transport})
    neighbor.EntityData.Children.Append("error-handling", types.YChild{"ErrorHandling", &neighbor.ErrorHandling})
    neighbor.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &neighbor.GracefulRestart})
    neighbor.EntityData.Children.Append("logging-options", types.YChild{"LoggingOptions", &neighbor.LoggingOptions})
    neighbor.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &neighbor.EbgpMultihop})
    neighbor.EntityData.Children.Append("route-reflector", types.YChild{"RouteReflector", &neighbor.RouteReflector})
    neighbor.EntityData.Children.Append("as-path-options", types.YChild{"AsPathOptions", &neighbor.AsPathOptions})
    neighbor.EntityData.Children.Append("add-paths", types.YChild{"AddPaths", &neighbor.AddPaths})
    neighbor.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &neighbor.UseMultiplePaths})
    neighbor.EntityData.Children.Append("apply-policy", types.YChild{"ApplyPolicy", &neighbor.ApplyPolicy})
    neighbor.EntityData.Children.Append("afi-safis", types.YChild{"AfiSafis", &neighbor.AfiSafis})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})

    neighbor.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config
// Configuration parameters relating to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The peer-group with which this neighbor is associated. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_PeerGroupName
    PeerGroup interface{}

    // Address of the BGP peer, either in IPv4 or IPv6. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NeighborAddress interface{}

    // Whether the BGP peer is enabled. In cases where the enabled leaf is set to
    // false, the local system should not initiate connections to the neighbor,
    // and should not respond to TCP connections attempts from the neighbor. If
    // the state of the BGP session is ESTABLISHED at the time that this leaf is
    // set to false, the BGP session should be ceased. The type is bool. The
    // default value is true.
    Enabled interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREPLACEALLPRIVATEASREMOVEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "neighbor"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("peer-group", types.YLeaf{"PeerGroup", config.PeerGroup})
    config.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", config.NeighborAddress})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("peer-as", types.YLeaf{"PeerAs", config.PeerAs})
    config.EntityData.Leafs.Append("local-as", types.YLeaf{"LocalAs", config.LocalAs})
    config.EntityData.Leafs.Append("peer-type", types.YLeaf{"PeerType", config.PeerType})
    config.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", config.AuthPassword})
    config.EntityData.Leafs.Append("remove-private-as", types.YLeaf{"RemovePrivateAs", config.RemovePrivateAs})
    config.EntityData.Leafs.Append("route-flap-damping", types.YLeaf{"RouteFlapDamping", config.RouteFlapDamping})
    config.EntityData.Leafs.Append("send-community", types.YLeaf{"SendCommunity", config.SendCommunity})
    config.EntityData.Leafs.Append("description", types.YLeaf{"Description", config.Description})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State
// State information relating to the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The peer-group with which this neighbor is associated. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_PeerGroupName
    PeerGroup interface{}

    // Address of the BGP peer, either in IPv4 or IPv6. The type is one of the
    // following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    NeighborAddress interface{}

    // Whether the BGP peer is enabled. In cases where the enabled leaf is set to
    // false, the local system should not initiate connections to the neighbor,
    // and should not respond to TCP connections attempts from the neighbor. If
    // the state of the BGP session is ESTABLISHED at the time that this leaf is
    // set to false, the BGP session should be ceased. The type is bool. The
    // default value is true.
    Enabled interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREPLACEALLPRIVATEASREMOVEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}

    // Operational state of the BGP peer. The type is SessionState.
    SessionState interface{}

    // This timestamp indicates the time that the BGP session last transitioned in
    // or out of the Established state.  The value is the timestamp in seconds
    // relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).  The BGP session
    // uptime can be computed by clients as the difference between this value and
    // the current time in UTC (assuming the session is in the ESTABLISHED state,
    // per the session-state leaf). The type is interface{} with range:
    // 0..18446744073709551615.
    LastEstablished interface{}

    // Number of transitions to the Established state for the neighbor session. 
    // This value is analogous to the bgpPeerFsmEstablishedTransitions object from
    // the standard BGP-4 MIB. The type is interface{} with range:
    // 0..18446744073709551615.
    EstablishedTransitions interface{}

    // BGP capabilities negotiated as supported with the peer. The type is slice
    // of [u'GRACEFULRESTART', u'ROUTEREFRESH', u'MPBGP', u'ASN32', u'ADDPATHS'].
    SupportedCapabilities []interface{}

    // When this leaf is set to true, the peer was configured dynamically due to
    // an inbound connection request from a specified source prefix within a
    // dynamic-neighbor-prefix. The type is bool. The default value is false.
    DynamicallyConfigured interface{}

    // Counters for BGP messages sent and received from the neighbor.
    Messages NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages

    // Counters related to queued messages associated with the BGP neighbor.
    Queues NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("messages", types.YChild{"Messages", &state.Messages})
    state.EntityData.Children.Append("queues", types.YChild{"Queues", &state.Queues})
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("peer-group", types.YLeaf{"PeerGroup", state.PeerGroup})
    state.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", state.NeighborAddress})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("peer-as", types.YLeaf{"PeerAs", state.PeerAs})
    state.EntityData.Leafs.Append("local-as", types.YLeaf{"LocalAs", state.LocalAs})
    state.EntityData.Leafs.Append("peer-type", types.YLeaf{"PeerType", state.PeerType})
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})
    state.EntityData.Leafs.Append("remove-private-as", types.YLeaf{"RemovePrivateAs", state.RemovePrivateAs})
    state.EntityData.Leafs.Append("route-flap-damping", types.YLeaf{"RouteFlapDamping", state.RouteFlapDamping})
    state.EntityData.Leafs.Append("send-community", types.YLeaf{"SendCommunity", state.SendCommunity})
    state.EntityData.Leafs.Append("description", types.YLeaf{"Description", state.Description})
    state.EntityData.Leafs.Append("session-state", types.YLeaf{"SessionState", state.SessionState})
    state.EntityData.Leafs.Append("last-established", types.YLeaf{"LastEstablished", state.LastEstablished})
    state.EntityData.Leafs.Append("established-transitions", types.YLeaf{"EstablishedTransitions", state.EstablishedTransitions})
    state.EntityData.Leafs.Append("supported-capabilities", types.YLeaf{"SupportedCapabilities", state.SupportedCapabilities})
    state.EntityData.Leafs.Append("dynamically-configured", types.YLeaf{"DynamicallyConfigured", state.DynamicallyConfigured})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages
// Counters for BGP messages sent and received from the
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Counters relating to BGP messages sent to the neighbor.
    Sent NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent

    // Counters for BGP messages received from the neighbor.
    Received NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received
}

func (messages *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages) GetEntityData() *types.CommonEntityData {
    messages.EntityData.YFilter = messages.YFilter
    messages.EntityData.YangName = "messages"
    messages.EntityData.BundleName = "openconfig"
    messages.EntityData.ParentYangName = "state"
    messages.EntityData.SegmentPath = "messages"
    messages.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/" + messages.EntityData.SegmentPath
    messages.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    messages.EntityData.NamespaceTable = openconfig.GetNamespaces()
    messages.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    messages.EntityData.Children = types.NewOrderedMap()
    messages.EntityData.Children.Append("sent", types.YChild{"Sent", &messages.Sent})
    messages.EntityData.Children.Append("received", types.YChild{"Received", &messages.Received})
    messages.EntityData.Leafs = types.NewOrderedMap()

    messages.EntityData.YListKeys = []string {}

    return &(messages.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent
// Counters relating to BGP messages sent to the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of BGP UPDATE messages announcing, withdrawing or modifying paths
    // exchanged. The type is interface{} with range: 0..18446744073709551615.
    UPDATE interface{}

    // Number of BGP NOTIFICATION messages indicating an error condition has
    // occurred exchanged. The type is interface{} with range:
    // 0..18446744073709551615.
    NOTIFICATION interface{}
}

func (sent *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "openconfig"
    sent.EntityData.ParentYangName = "messages"
    sent.EntityData.SegmentPath = "sent"
    sent.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    sent.EntityData.NamespaceTable = openconfig.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("UPDATE", types.YLeaf{"UPDATE", sent.UPDATE})
    sent.EntityData.Leafs.Append("NOTIFICATION", types.YLeaf{"NOTIFICATION", sent.NOTIFICATION})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received
// Counters for BGP messages received from the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of BGP UPDATE messages announcing, withdrawing or modifying paths
    // exchanged. The type is interface{} with range: 0..18446744073709551615.
    UPDATE interface{}

    // Number of BGP NOTIFICATION messages indicating an error condition has
    // occurred exchanged. The type is interface{} with range:
    // 0..18446744073709551615.
    NOTIFICATION interface{}
}

func (received *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Messages_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "openconfig"
    received.EntityData.ParentYangName = "messages"
    received.EntityData.SegmentPath = "received"
    received.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    received.EntityData.NamespaceTable = openconfig.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("UPDATE", types.YLeaf{"UPDATE", received.UPDATE})
    received.EntityData.Leafs.Append("NOTIFICATION", types.YLeaf{"NOTIFICATION", received.NOTIFICATION})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues
// Counters related to queued messages associated with the
// BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of messages received from the peer currently queued. The type is
    // interface{} with range: 0..4294967295.
    Input interface{}

    // The number of messages queued to be sent to the peer. The type is
    // interface{} with range: 0..4294967295.
    Output interface{}
}

func (queues *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_Queues) GetEntityData() *types.CommonEntityData {
    queues.EntityData.YFilter = queues.YFilter
    queues.EntityData.YangName = "queues"
    queues.EntityData.BundleName = "openconfig"
    queues.EntityData.ParentYangName = "state"
    queues.EntityData.SegmentPath = "queues"
    queues.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/" + queues.EntityData.SegmentPath
    queues.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    queues.EntityData.NamespaceTable = openconfig.GetNamespaces()
    queues.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    queues.EntityData.Children = types.NewOrderedMap()
    queues.EntityData.Leafs = types.NewOrderedMap()
    queues.EntityData.Leafs.Append("input", types.YLeaf{"Input", queues.Input})
    queues.EntityData.Leafs.Append("output", types.YLeaf{"Output", queues.Output})

    queues.EntityData.YListKeys = []string {}

    return &(queues.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState represents Operational state of the BGP peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState string

const (
    // neighbor is down, and in the Idle state of the
    // FSM
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_IDLE NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "IDLE"

    // neighbor is down, and the session is waiting for
    // the underlying transport session to be established
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_CONNECT NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "CONNECT"

    // neighbor is down, and the local system is awaiting
    // a conncetion from the remote peer
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_ACTIVE NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "ACTIVE"

    // neighbor is in the process of being established.
    // The local system has sent an OPEN message
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_OPENSENT NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "OPENSENT"

    // neighbor is in the process of being established.
    // The local system is awaiting a NOTIFICATION or
    // KEEPALIVE message
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_OPENCONFIRM NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "OPENCONFIRM"

    // neighbor is up - the BGP session with the peer is
    // established
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState_ESTABLISHED NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_State_SessionState = "ESTABLISHED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers
// Timers related to a BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to timers used for the BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config

    // State information relating to the timers used for the BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "neighbor"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("config", types.YChild{"Config", &timers.Config})
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config
// Configuration parameters relating to timers used for the
// BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("connect-retry", types.YLeaf{"ConnectRetry", config.ConnectRetry})
    config.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", config.HoldTime})
    config.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", config.KeepaliveInterval})
    config.EntityData.Leafs.Append("minimum-advertisement-interval", types.YLeaf{"MinimumAdvertisementInterval", config.MinimumAdvertisementInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State
// State information relating to the timers used for the BGP
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}

    // The negotiated hold-time for the BGP session. The type is string with
    // range: -92233720368547758.08..92233720368547758.07.
    NegotiatedHoldTime interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("connect-retry", types.YLeaf{"ConnectRetry", state.ConnectRetry})
    state.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", state.HoldTime})
    state.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", state.KeepaliveInterval})
    state.EntityData.Leafs.Append("minimum-advertisement-interval", types.YLeaf{"MinimumAdvertisementInterval", state.MinimumAdvertisementInterval})
    state.EntityData.Leafs.Append("negotiated-hold-time", types.YLeaf{"NegotiatedHoldTime", state.NegotiatedHoldTime})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport
// Transport session parameters for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the transport session(s) used for the
    // BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config

    // State information relating to the transport session(s) used for the BGP
    // neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "neighbor"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + transport.EntityData.SegmentPath
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = types.NewOrderedMap()
    transport.EntityData.Children.Append("config", types.YChild{"Config", &transport.Config})
    transport.EntityData.Children.Append("state", types.YChild{"State", &transport.State})
    transport.EntityData.Leafs = types.NewOrderedMap()

    transport.EntityData.YListKeys = []string {}

    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config
// Configuration parameters relating to the transport
// session(s) used for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or string.
    LocalAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("tcp-mss", types.YLeaf{"TcpMss", config.TcpMss})
    config.EntityData.Leafs.Append("mtu-discovery", types.YLeaf{"MtuDiscovery", config.MtuDiscovery})
    config.EntityData.Leafs.Append("passive-mode", types.YLeaf{"PassiveMode", config.PassiveMode})
    config.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", config.LocalAddress})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State
// State information relating to the transport session(s)
// used for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or string.
    LocalAddress interface{}

    // Local TCP port being used for the TCP session supporting the BGP session.
    // The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Remote address to which the BGP session has been established. The type is
    // one of the following types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    RemoteAddress interface{}

    // Remote port being used by the peer for the TCP session supporting the BGP
    // session. The type is interface{} with range: 0..65535.
    RemotePort interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tcp-mss", types.YLeaf{"TcpMss", state.TcpMss})
    state.EntityData.Leafs.Append("mtu-discovery", types.YLeaf{"MtuDiscovery", state.MtuDiscovery})
    state.EntityData.Leafs.Append("passive-mode", types.YLeaf{"PassiveMode", state.PassiveMode})
    state.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", state.LocalAddress})
    state.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", state.LocalPort})
    state.EntityData.Leafs.Append("remote-address", types.YLeaf{"RemoteAddress", state.RemoteAddress})
    state.EntityData.Leafs.Append("remote-port", types.YLeaf{"RemotePort", state.RemotePort})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling
// Error handling parameters used for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying the behavior or enhanced
    // error handling mechanisms for the BGP neighbor.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config

    // State information relating to enhanced error handling mechanisms for the
    // BGP neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State
}

func (errorHandling *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling) GetEntityData() *types.CommonEntityData {
    errorHandling.EntityData.YFilter = errorHandling.YFilter
    errorHandling.EntityData.YangName = "error-handling"
    errorHandling.EntityData.BundleName = "openconfig"
    errorHandling.EntityData.ParentYangName = "neighbor"
    errorHandling.EntityData.SegmentPath = "error-handling"
    errorHandling.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + errorHandling.EntityData.SegmentPath
    errorHandling.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorHandling.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorHandling.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorHandling.EntityData.Children = types.NewOrderedMap()
    errorHandling.EntityData.Children.Append("config", types.YChild{"Config", &errorHandling.Config})
    errorHandling.EntityData.Children.Append("state", types.YChild{"State", &errorHandling.State})
    errorHandling.EntityData.Leafs = types.NewOrderedMap()

    errorHandling.EntityData.YListKeys = []string {}

    return &(errorHandling.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config
// Configuration parameters enabling or modifying the
// behavior or enhanced error handling mechanisms for the BGP
// neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "error-handling"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("treat-as-withdraw", types.YLeaf{"TreatAsWithdraw", config.TreatAsWithdraw})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State
// State information relating to enhanced error handling
// mechanisms for the BGP neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}

    // The number of BGP UPDATE messages for which the treat-as-withdraw mechanism
    // has been applied based on erroneous message contents. The type is
    // interface{} with range: 0..4294967295.
    ErroneousUpdateMessages interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ErrorHandling_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-handling"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/error-handling/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("treat-as-withdraw", types.YLeaf{"TreatAsWithdraw", state.TreatAsWithdraw})
    state.EntityData.Leafs.Append("erroneous-update-messages", types.YLeaf{"ErroneousUpdateMessages", state.ErroneousUpdateMessages})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "neighbor"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", config.RestartTime})
    config.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime})
    config.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", config.HelperOnly})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}

    // The period of time (advertised by the peer) that the peer expects a restart
    // of a BGP session to take. The type is interface{} with range: 0..4096.
    PeerRestartTime interface{}

    // This flag indicates whether the remote neighbor is currently in the process
    // of restarting, and hence received routes are currently stale. The type is
    // bool.
    PeerRestarting interface{}

    // This flag indicates whether the local neighbor is currently restarting. The
    // flag is unset after all NLRI have been advertised to the peer, and the
    // End-of-RIB (EOR) marker has been unset. The type is bool.
    LocalRestarting interface{}

    // Ths leaf indicates the mode of operation of BGP graceful restart with the
    // peer. The type is Mode.
    Mode interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", state.RestartTime})
    state.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime})
    state.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", state.HelperOnly})
    state.EntityData.Leafs.Append("peer-restart-time", types.YLeaf{"PeerRestartTime", state.PeerRestartTime})
    state.EntityData.Leafs.Append("peer-restarting", types.YLeaf{"PeerRestarting", state.PeerRestarting})
    state.EntityData.Leafs.Append("local-restarting", types.YLeaf{"LocalRestarting", state.LocalRestarting})
    state.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", state.Mode})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode represents restart with the peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode string

const (
    // The local router is operating in helper-only mode, and
    // hence will not retain forwarding state during a local
    // session restart, but will do so during a restart of the
    // remote peer
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_HELPER_ONLY NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "HELPER_ONLY"

    // The local router is operating in both helper mode, and
    // hence retains forwarding state during a remote restart,
    // and also maintains forwarding state during local session
    // restart
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_BILATERAL NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "BILATERAL"

    // The local system is able to retain routes during restart
    // but the remote system is only able to act as a helper
    NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode_REMOTE_HELPER NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_GracefulRestart_State_Mode = "REMOTE_HELPER"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions
// Logging options for events related to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying logging for events relating
    // to the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config

    // State information relating to logging for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State
}

func (loggingOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions) GetEntityData() *types.CommonEntityData {
    loggingOptions.EntityData.YFilter = loggingOptions.YFilter
    loggingOptions.EntityData.YangName = "logging-options"
    loggingOptions.EntityData.BundleName = "openconfig"
    loggingOptions.EntityData.ParentYangName = "neighbor"
    loggingOptions.EntityData.SegmentPath = "logging-options"
    loggingOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + loggingOptions.EntityData.SegmentPath
    loggingOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    loggingOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    loggingOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    loggingOptions.EntityData.Children = types.NewOrderedMap()
    loggingOptions.EntityData.Children.Append("config", types.YChild{"Config", &loggingOptions.Config})
    loggingOptions.EntityData.Children.Append("state", types.YChild{"State", &loggingOptions.State})
    loggingOptions.EntityData.Leafs = types.NewOrderedMap()

    loggingOptions.EntityData.YListKeys = []string {}

    return &(loggingOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config
// Configuration parameters enabling or modifying logging
// for events relating to the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "logging-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("log-neighbor-state-changes", types.YLeaf{"LogNeighborStateChanges", config.LogNeighborStateChanges})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State
// State information relating to logging for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_LoggingOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "logging-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/logging-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("log-neighbor-state-changes", types.YLeaf{"LogNeighborStateChanges", state.LogNeighborStateChanges})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop
// eBGP multi-hop parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multihop for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config

    // State information for eBGP multihop, for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State
}

func (ebgpMultihop *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "openconfig"
    ebgpMultihop.EntityData.ParentYangName = "neighbor"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Children.Append("config", types.YChild{"Config", &ebgpMultihop.Config})
    ebgpMultihop.EntityData.Children.Append("state", types.YChild{"State", &ebgpMultihop.State})
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config
// Configuration parameters relating to eBGP multihop for the
// BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp-multihop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("multihop-ttl", types.YLeaf{"MultihopTtl", config.MultihopTtl})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State
// State information for eBGP multihop, for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp-multihop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/ebgp-multihop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("multihop-ttl", types.YLeaf{"MultihopTtl", state.MultihopTtl})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector
// Route reflector parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuraton parameters relating to route reflection for the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config

    // State information relating to route reflection for the BGPgroup.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State
}

func (routeReflector *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector) GetEntityData() *types.CommonEntityData {
    routeReflector.EntityData.YFilter = routeReflector.YFilter
    routeReflector.EntityData.YangName = "route-reflector"
    routeReflector.EntityData.BundleName = "openconfig"
    routeReflector.EntityData.ParentYangName = "neighbor"
    routeReflector.EntityData.SegmentPath = "route-reflector"
    routeReflector.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + routeReflector.EntityData.SegmentPath
    routeReflector.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeReflector.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeReflector.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeReflector.EntityData.Children = types.NewOrderedMap()
    routeReflector.EntityData.Children.Append("config", types.YChild{"Config", &routeReflector.Config})
    routeReflector.EntityData.Children.Append("state", types.YChild{"State", &routeReflector.State})
    routeReflector.EntityData.Leafs = types.NewOrderedMap()

    routeReflector.EntityData.YListKeys = []string {}

    return &(routeReflector.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config
// Configuraton parameters relating to route reflection
// for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-reflector"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("route-reflector-cluster-id", types.YLeaf{"RouteReflectorClusterId", config.RouteReflectorClusterId})
    config.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", config.RouteReflectorClient})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State
// State information relating to route reflection for the
// BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-reflector"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("route-reflector-cluster-id", types.YLeaf{"RouteReflectorClusterId", state.RouteReflectorClusterId})
    state.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", state.RouteReflectorClient})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions
// AS_PATH manipulation parameters for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to AS_PATH manipulation for the BGP peer
    // or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config

    // State information relating to the AS_PATH manipulation mechanisms for the
    // BGP peer or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State
}

func (asPathOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions) GetEntityData() *types.CommonEntityData {
    asPathOptions.EntityData.YFilter = asPathOptions.YFilter
    asPathOptions.EntityData.YangName = "as-path-options"
    asPathOptions.EntityData.BundleName = "openconfig"
    asPathOptions.EntityData.ParentYangName = "neighbor"
    asPathOptions.EntityData.SegmentPath = "as-path-options"
    asPathOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + asPathOptions.EntityData.SegmentPath
    asPathOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    asPathOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    asPathOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    asPathOptions.EntityData.Children = types.NewOrderedMap()
    asPathOptions.EntityData.Children.Append("config", types.YChild{"Config", &asPathOptions.Config})
    asPathOptions.EntityData.Children.Append("state", types.YChild{"State", &asPathOptions.State})
    asPathOptions.EntityData.Leafs = types.NewOrderedMap()

    asPathOptions.EntityData.YListKeys = []string {}

    return &(asPathOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config
// Configuration parameters relating to AS_PATH manipulation
// for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "as-path-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-own-as", types.YLeaf{"AllowOwnAs", config.AllowOwnAs})
    config.EntityData.Leafs.Append("replace-peer-as", types.YLeaf{"ReplacePeerAs", config.ReplacePeerAs})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State
// State information relating to the AS_PATH manipulation
// mechanisms for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AsPathOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "as-path-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/as-path-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-own-as", types.YLeaf{"AllowOwnAs", state.AllowOwnAs})
    state.EntityData.Leafs.Append("replace-peer-as", types.YLeaf{"ReplacePeerAs", state.ReplacePeerAs})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths
// Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to ADD_PATHS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config

    // State information associated with ADD_PATHS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State
}

func (addPaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths) GetEntityData() *types.CommonEntityData {
    addPaths.EntityData.YFilter = addPaths.YFilter
    addPaths.EntityData.YangName = "add-paths"
    addPaths.EntityData.BundleName = "openconfig"
    addPaths.EntityData.ParentYangName = "neighbor"
    addPaths.EntityData.SegmentPath = "add-paths"
    addPaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + addPaths.EntityData.SegmentPath
    addPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    addPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    addPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    addPaths.EntityData.Children = types.NewOrderedMap()
    addPaths.EntityData.Children.Append("config", types.YChild{"Config", &addPaths.Config})
    addPaths.EntityData.Children.Append("state", types.YChild{"State", &addPaths.State})
    addPaths.EntityData.Leafs = types.NewOrderedMap()

    addPaths.EntityData.YListKeys = []string {}

    return &(addPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config
// Configuration parameters relating to ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "add-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/add-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("receive", types.YLeaf{"Receive", config.Receive})
    config.EntityData.Leafs.Append("send-max", types.YLeaf{"SendMax", config.SendMax})
    config.EntityData.Leafs.Append("eligible-prefix-policy", types.YLeaf{"EligiblePrefixPolicy", config.EligiblePrefixPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State
// State information associated with ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AddPaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "add-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/add-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("receive", types.YLeaf{"Receive", state.Receive})
    state.EntityData.Leafs.Append("send-max", types.YLeaf{"SendMax", state.SendMax})
    state.EntityData.Leafs.Append("eligible-prefix-policy", types.YLeaf{"EligiblePrefixPolicy", state.EligiblePrefixPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths
// Parameters related to the use of multiple-paths for the same
// NLRI when they are received only from this neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State

    // Multipath configuration for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "neighbor"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
// Multipath configuration for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "neighbor"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + applyPolicy.EntityData.SegmentPath
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = types.NewOrderedMap()
    applyPolicy.EntityData.Children.Append("config", types.YChild{"Config", &applyPolicy.Config})
    applyPolicy.EntityData.Children.Append("state", types.YChild{"State", &applyPolicy.State})
    applyPolicy.EntityData.Leafs = types.NewOrderedMap()

    applyPolicy.EntityData.YListKeys = []string {}

    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})
    config.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", config.ExportPolicy})
    config.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/apply-policy/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})
    state.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", state.ExportPolicy})
    state.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis
// Per-address-family configuration parameters associated with
// the neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi.
    AfiSafi []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "neighbor"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/" + afiSafis.EntityData.SegmentPath
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = types.NewOrderedMap()
    afiSafis.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", nil})
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children.Append(types.GetSegmentPath(afiSafis.AfiSafi[i]), types.YChild{"AfiSafi", afiSafis.AfiSafi[i]})
    }
    afiSafis.EntityData.Leafs = types.NewOrderedMap()

    afiSafis.EntityData.YListKeys = []string {}

    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3vpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3vpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3vpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3vpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2vpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls

    // BGP EVPN configuration options.
    L2vpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn

    // Parameters related to the use of multiple-paths for the same NLRI when they
    // are received only from this neighbor.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + types.AddKeyToken(afiSafi.AfiSafiName, "afi-safi-name")
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("config", types.YChild{"Config", &afiSafi.Config})
    afiSafi.EntityData.Children.Append("state", types.YChild{"State", &afiSafi.State})
    afiSafi.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &afiSafi.GracefulRestart})
    afiSafi.EntityData.Children.Append("apply-policy", types.YChild{"ApplyPolicy", &afiSafi.ApplyPolicy})
    afiSafi.EntityData.Children.Append("ipv4-unicast", types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast})
    afiSafi.EntityData.Children.Append("ipv6-unicast", types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast})
    afiSafi.EntityData.Children.Append("ipv4-labeled-unicast", types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast})
    afiSafi.EntityData.Children.Append("ipv6-labeled-unicast", types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-unicast", types.YChild{"L3vpnIpv4Unicast", &afiSafi.L3vpnIpv4Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-unicast", types.YChild{"L3vpnIpv6Unicast", &afiSafi.L3vpnIpv6Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-multicast", types.YChild{"L3vpnIpv4Multicast", &afiSafi.L3vpnIpv4Multicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-multicast", types.YChild{"L3vpnIpv6Multicast", &afiSafi.L3vpnIpv6Multicast})
    afiSafi.EntityData.Children.Append("l2vpn-vpls", types.YChild{"L2vpnVpls", &afiSafi.L2vpnVpls})
    afiSafi.EntityData.Children.Append("l2vpn-evpn", types.YChild{"L2vpnEvpn", &afiSafi.L2vpnEvpn})
    afiSafi.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths})
    afiSafi.EntityData.Leafs = types.NewOrderedMap()
    afiSafi.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName})

    afiSafi.EntityData.YListKeys = []string {"AfiSafiName"}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", config.AfiSafiName})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}

    // This value indicates whether a particular AFI-SAFI has been succesfully
    // negotiated with the peer. An AFI-SAFI may be enabled in the current running
    // configuration, but a session restart may be required in order to negotiate
    // the new capability. The type is bool.
    Active interface{}

    // Prefix counters for the BGP session.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &state.Prefixes})
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", state.AfiSafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("active", types.YLeaf{"Active", state.Active})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
// Prefix counters for the BGP session
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of prefixes received from the neighbor. The type is interface{}
    // with range: 0..4294967295.
    Received interface{}

    // The number of prefixes advertised to the neighbor. The type is interface{}
    // with range: 0..4294967295.
    Sent interface{}

    // The number of advertised prefixes installed in the Loc-RIB. The type is
    // interface{} with range: 0..4294967295.
    Installed interface{}
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "state"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Leafs = types.NewOrderedMap()
    prefixes.EntityData.Leafs.Append("received", types.YLeaf{"Received", prefixes.Received})
    prefixes.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", prefixes.Sent})
    prefixes.EntityData.Leafs.Append("installed", types.YLeaf{"Installed", prefixes.Installed})

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}

    // This leaf indicates whether the neighbor advertised the ability to support
    // graceful-restart for this AFI-SAFI. The type is bool.
    Received interface{}

    // This leaf indicates whether the ability to support graceful-restart has
    // been advertised to the peer. The type is bool.
    Advertised interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("advertised", types.YLeaf{"Advertised", state.Advertised})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "afi-safi"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + applyPolicy.EntityData.SegmentPath
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = types.NewOrderedMap()
    applyPolicy.EntityData.Children.Append("config", types.YChild{"Config", &applyPolicy.Config})
    applyPolicy.EntityData.Children.Append("state", types.YChild{"State", &applyPolicy.State})
    applyPolicy.EntityData.Leafs = types.NewOrderedMap()

    applyPolicy.EntityData.YListKeys = []string {}

    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/apply-policy/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})
    config.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", config.ExportPolicy})
    config.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/apply-policy/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})
    state.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", state.ExportPolicy})
    state.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + ipv4Unicast.EntityData.SegmentPath
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = types.NewOrderedMap()
    ipv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit})
    ipv4Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv4Unicast.Config})
    ipv4Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv4Unicast.State})
    ipv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4Unicast.EntityData.YListKeys = []string {}

    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + ipv6Unicast.EntityData.SegmentPath
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = types.NewOrderedMap()
    ipv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit})
    ipv6Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv6Unicast.Config})
    ipv6Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv6Unicast.State})
    ipv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6Unicast.EntityData.YListKeys = []string {}

    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + ipv4LabeledUnicast.EntityData.SegmentPath
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv4LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit})
    ipv4LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + ipv6LabeledUnicast.EntityData.SegmentPath
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv6LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit})
    ipv6LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
}

func (l3vpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Unicast.EntityData.YFilter = l3vpnIpv4Unicast.YFilter
    l3vpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l3vpnIpv4Unicast.EntityData.SegmentPath
    l3vpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Unicast.PrefixLimit})
    l3vpnIpv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
}

func (l3vpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Unicast.EntityData.YFilter = l3vpnIpv6Unicast.YFilter
    l3vpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l3vpnIpv6Unicast.EntityData.SegmentPath
    l3vpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Unicast.PrefixLimit})
    l3vpnIpv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
}

func (l3vpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Multicast.EntityData.YFilter = l3vpnIpv4Multicast.YFilter
    l3vpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l3vpnIpv4Multicast.EntityData.SegmentPath
    l3vpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Multicast.PrefixLimit})
    l3vpnIpv4Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
}

func (l3vpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Multicast.EntityData.YFilter = l3vpnIpv6Multicast.YFilter
    l3vpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l3vpnIpv6Multicast.EntityData.SegmentPath
    l3vpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Multicast.PrefixLimit})
    l3vpnIpv6Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
}

func (l2vpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls) GetEntityData() *types.CommonEntityData {
    l2vpnVpls.EntityData.YFilter = l2vpnVpls.YFilter
    l2vpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2vpnVpls.EntityData.BundleName = "openconfig"
    l2vpnVpls.EntityData.ParentYangName = "afi-safi"
    l2vpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2vpnVpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l2vpnVpls.EntityData.SegmentPath
    l2vpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnVpls.EntityData.Children = types.NewOrderedMap()
    l2vpnVpls.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnVpls.PrefixLimit})
    l2vpnVpls.EntityData.Leafs = types.NewOrderedMap()

    l2vpnVpls.EntityData.YListKeys = []string {}

    return &(l2vpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-vpls/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
}

func (l2vpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn) GetEntityData() *types.CommonEntityData {
    l2vpnEvpn.EntityData.YFilter = l2vpnEvpn.YFilter
    l2vpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2vpnEvpn.EntityData.BundleName = "openconfig"
    l2vpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2vpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2vpnEvpn.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + l2vpnEvpn.EntityData.SegmentPath
    l2vpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    l2vpnEvpn.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnEvpn.PrefixLimit})
    l2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()

    l2vpnEvpn.EntityData.YListKeys = []string {}

    return &(l2vpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-evpn/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple-paths for the same
// NLRI when they are received only from this neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath configuration for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath configuration for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups
// Configuration for BGP peer-groups
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of BGP peer-groups configured on the local system - uniquely
    // identified by peer-group name. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup.
    PeerGroup []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup
}

func (peerGroups *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups) GetEntityData() *types.CommonEntityData {
    peerGroups.EntityData.YFilter = peerGroups.YFilter
    peerGroups.EntityData.YangName = "peer-groups"
    peerGroups.EntityData.BundleName = "openconfig"
    peerGroups.EntityData.ParentYangName = "bgp"
    peerGroups.EntityData.SegmentPath = "peer-groups"
    peerGroups.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/" + peerGroups.EntityData.SegmentPath
    peerGroups.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    peerGroups.EntityData.NamespaceTable = openconfig.GetNamespaces()
    peerGroups.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    peerGroups.EntityData.Children = types.NewOrderedMap()
    peerGroups.EntityData.Children.Append("peer-group", types.YChild{"PeerGroup", nil})
    for i := range peerGroups.PeerGroup {
        peerGroups.EntityData.Children.Append(types.GetSegmentPath(peerGroups.PeerGroup[i]), types.YChild{"PeerGroup", peerGroups.PeerGroup[i]})
    }
    peerGroups.EntityData.Leafs = types.NewOrderedMap()

    peerGroups.EntityData.YListKeys = []string {}

    return &(peerGroups.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup
// List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the name of the BGP peer-group used
    // as a key in the peer-group list. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config_PeerGroupName
    PeerGroupName interface{}

    // Configuration parameters relating to the BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config

    // State information relating to the BGP peer-group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State

    // Timers related to a BGP peer-group.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers

    // Transport session parameters for the BGP peer-group.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport

    // Error handling parameters used for the BGP peer-group.
    ErrorHandling NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling

    // Parameters relating the graceful restart mechanism for BGP.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart

    // Logging options for events related to the BGP neighbor or group.
    LoggingOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions

    // eBGP multi-hop parameters for the BGPgroup.
    EbgpMultihop NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop

    // Route reflector parameters for the BGPgroup.
    RouteReflector NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector

    // AS_PATH manipulation parameters for the BGP neighbor or group.
    AsPathOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions

    // Parameters relating to the advertisement and receipt of multiple paths for
    // a single NLRI (add-paths).
    AddPaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy

    // Per-address-family configuration parameters associated with thegroup.
    AfiSafis NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis
}

func (peerGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup) GetEntityData() *types.CommonEntityData {
    peerGroup.EntityData.YFilter = peerGroup.YFilter
    peerGroup.EntityData.YangName = "peer-group"
    peerGroup.EntityData.BundleName = "openconfig"
    peerGroup.EntityData.ParentYangName = "peer-groups"
    peerGroup.EntityData.SegmentPath = "peer-group" + types.AddKeyToken(peerGroup.PeerGroupName, "peer-group-name")
    peerGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/" + peerGroup.EntityData.SegmentPath
    peerGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    peerGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    peerGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    peerGroup.EntityData.Children = types.NewOrderedMap()
    peerGroup.EntityData.Children.Append("config", types.YChild{"Config", &peerGroup.Config})
    peerGroup.EntityData.Children.Append("state", types.YChild{"State", &peerGroup.State})
    peerGroup.EntityData.Children.Append("timers", types.YChild{"Timers", &peerGroup.Timers})
    peerGroup.EntityData.Children.Append("transport", types.YChild{"Transport", &peerGroup.Transport})
    peerGroup.EntityData.Children.Append("error-handling", types.YChild{"ErrorHandling", &peerGroup.ErrorHandling})
    peerGroup.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &peerGroup.GracefulRestart})
    peerGroup.EntityData.Children.Append("logging-options", types.YChild{"LoggingOptions", &peerGroup.LoggingOptions})
    peerGroup.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &peerGroup.EbgpMultihop})
    peerGroup.EntityData.Children.Append("route-reflector", types.YChild{"RouteReflector", &peerGroup.RouteReflector})
    peerGroup.EntityData.Children.Append("as-path-options", types.YChild{"AsPathOptions", &peerGroup.AsPathOptions})
    peerGroup.EntityData.Children.Append("add-paths", types.YChild{"AddPaths", &peerGroup.AddPaths})
    peerGroup.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &peerGroup.UseMultiplePaths})
    peerGroup.EntityData.Children.Append("apply-policy", types.YChild{"ApplyPolicy", &peerGroup.ApplyPolicy})
    peerGroup.EntityData.Children.Append("afi-safis", types.YChild{"AfiSafis", &peerGroup.AfiSafis})
    peerGroup.EntityData.Leafs = types.NewOrderedMap()
    peerGroup.EntityData.Leafs.Append("peer-group-name", types.YLeaf{"PeerGroupName", peerGroup.PeerGroupName})

    peerGroup.EntityData.YListKeys = []string {"PeerGroupName"}

    return &(peerGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config
// Configuration parameters relating to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the BGP peer-group. The type is string.
    PeerGroupName interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREPLACEALLPRIVATEASREMOVEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "peer-group"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("peer-group-name", types.YLeaf{"PeerGroupName", config.PeerGroupName})
    config.EntityData.Leafs.Append("peer-as", types.YLeaf{"PeerAs", config.PeerAs})
    config.EntityData.Leafs.Append("local-as", types.YLeaf{"LocalAs", config.LocalAs})
    config.EntityData.Leafs.Append("peer-type", types.YLeaf{"PeerType", config.PeerType})
    config.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", config.AuthPassword})
    config.EntityData.Leafs.Append("remove-private-as", types.YLeaf{"RemovePrivateAs", config.RemovePrivateAs})
    config.EntityData.Leafs.Append("route-flap-damping", types.YLeaf{"RouteFlapDamping", config.RouteFlapDamping})
    config.EntityData.Leafs.Append("send-community", types.YLeaf{"SendCommunity", config.SendCommunity})
    config.EntityData.Leafs.Append("description", types.YLeaf{"Description", config.Description})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State
// State information relating to the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the BGP peer-group. The type is string.
    PeerGroupName interface{}

    // AS number of the peer. The type is interface{} with range: 0..4294967295.
    PeerAs interface{}

    // The local autonomous system number that is to be used when establishing
    // sessions with the remote peer or peer group, if this differs from the
    // global BGP router autonomous system number. The type is interface{} with
    // range: 0..4294967295.
    LocalAs interface{}

    // Explicitly designate the peer or peer group as internal (iBGP) or external
    // (eBGP). The type is PeerType.
    PeerType interface{}

    // Configures an MD5 authentication password for use with neighboring devices.
    // The type is string.
    AuthPassword interface{}

    // Remove private AS numbers from updates sent to peers - when this leaf is
    // not specified, the AS_PATH attribute should be sent to the peer unchanged.
    // The type is one of the following: PRIVATEASREPLACEALLPRIVATEASREMOVEALL.
    RemovePrivateAs interface{}

    // Enable route flap damping. The type is bool. The default value is false.
    RouteFlapDamping interface{}

    // Specify which types of community should be sent to the neighbor or group.
    // The default is to not send the community attribute. The type is
    // CommunityType. The default value is NONE.
    SendCommunity interface{}

    // An optional textual description (intended primarily for use with a peer or
    // group. The type is string.
    Description interface{}

    // Total number of BGP paths within the context. The type is interface{} with
    // range: 0..4294967295.
    TotalPaths interface{}

    // Total number of BGP prefixes received within the context. The type is
    // interface{} with range: 0..4294967295.
    TotalPrefixes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "peer-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("peer-group-name", types.YLeaf{"PeerGroupName", state.PeerGroupName})
    state.EntityData.Leafs.Append("peer-as", types.YLeaf{"PeerAs", state.PeerAs})
    state.EntityData.Leafs.Append("local-as", types.YLeaf{"LocalAs", state.LocalAs})
    state.EntityData.Leafs.Append("peer-type", types.YLeaf{"PeerType", state.PeerType})
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})
    state.EntityData.Leafs.Append("remove-private-as", types.YLeaf{"RemovePrivateAs", state.RemovePrivateAs})
    state.EntityData.Leafs.Append("route-flap-damping", types.YLeaf{"RouteFlapDamping", state.RouteFlapDamping})
    state.EntityData.Leafs.Append("send-community", types.YLeaf{"SendCommunity", state.SendCommunity})
    state.EntityData.Leafs.Append("description", types.YLeaf{"Description", state.Description})
    state.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", state.TotalPaths})
    state.EntityData.Leafs.Append("total-prefixes", types.YLeaf{"TotalPrefixes", state.TotalPrefixes})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers
// Timers related to a BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to timers used for the BGP neighbor or
    // peer group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config

    // State information relating to the timers used for the BGP group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "peer-group"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("config", types.YChild{"Config", &timers.Config})
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config
// Configuration parameters relating to timers used for the
// BGP neighbor or peer group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("connect-retry", types.YLeaf{"ConnectRetry", config.ConnectRetry})
    config.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", config.HoldTime})
    config.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", config.KeepaliveInterval})
    config.EntityData.Leafs.Append("minimum-advertisement-interval", types.YLeaf{"MinimumAdvertisementInterval", config.MinimumAdvertisementInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State
// State information relating to the timers used for the BGP
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds between attempts to establish a session with the
    // peer. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    ConnectRetry interface{}

    // Time interval in seconds that a BGP session will be considered active in
    // the absence of keepalive or other messages from the peer.  The hold-time is
    // typically set to 3x the keepalive-interval. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 90.
    HoldTime interface{}

    // Time interval in seconds between transmission of keepalive messages to the
    // neighbor.  Typically set to 1/3 the hold-time. The type is string with
    // range: -92233720368547758.08..92233720368547758.07. The default value is
    // 30.
    KeepaliveInterval interface{}

    // Minimum time which must elapse between subsequent UPDATE messages relating
    // to a common set of NLRI being transmitted to a peer. This timer is referred
    // to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce
    // the number of UPDATE messages transmitted when a particular set of NLRI
    // exhibit instability. The type is string with range:
    // -92233720368547758.08..92233720368547758.07. The default value is 30.
    MinimumAdvertisementInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("connect-retry", types.YLeaf{"ConnectRetry", state.ConnectRetry})
    state.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", state.HoldTime})
    state.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", state.KeepaliveInterval})
    state.EntityData.Leafs.Append("minimum-advertisement-interval", types.YLeaf{"MinimumAdvertisementInterval", state.MinimumAdvertisementInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport
// Transport session parameters for the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the transport session(s) used for the
    // BGP neighbor or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config

    // State information relating to the transport session(s) used for the BGP
    // neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "peer-group"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + transport.EntityData.SegmentPath
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = types.NewOrderedMap()
    transport.EntityData.Children.Append("config", types.YChild{"Config", &transport.Config})
    transport.EntityData.Children.Append("state", types.YChild{"State", &transport.State})
    transport.EntityData.Leafs = types.NewOrderedMap()

    transport.EntityData.YListKeys = []string {}

    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config
// Configuration parameters relating to the transport
// session(s) used for the BGP neighbor or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or string.
    LocalAddress interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/transport/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("tcp-mss", types.YLeaf{"TcpMss", config.TcpMss})
    config.EntityData.Leafs.Append("mtu-discovery", types.YLeaf{"MtuDiscovery", config.MtuDiscovery})
    config.EntityData.Leafs.Append("passive-mode", types.YLeaf{"PassiveMode", config.PassiveMode})
    config.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", config.LocalAddress})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State
// State information relating to the transport session(s)
// used for the BGP neighbor or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sets the max segment size for BGP TCP sessions. The type is interface{}
    // with range: 0..65535.
    TcpMss interface{}

    // Turns path mtu discovery for BGP TCP sessions on (true) or off (false). The
    // type is bool. The default value is false.
    MtuDiscovery interface{}

    // Wait for peers to issue requests to open a BGP session, rather than
    // initiating sessions from the local router. The type is bool. The default
    // value is false.
    PassiveMode interface{}

    // Set the local IP (either IPv4 or IPv6) address to use for the session when
    // sending BGP update messages.  This may be expressed as either an IP address
    // or reference to the name of an interface. The type is one of the following
    // types: string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$,
    // or string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.,
    // or string.
    LocalAddress interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/transport/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tcp-mss", types.YLeaf{"TcpMss", state.TcpMss})
    state.EntityData.Leafs.Append("mtu-discovery", types.YLeaf{"MtuDiscovery", state.MtuDiscovery})
    state.EntityData.Leafs.Append("passive-mode", types.YLeaf{"PassiveMode", state.PassiveMode})
    state.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", state.LocalAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling
// Error handling parameters used for the BGP peer-group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying the behavior or enhanced
    // error handling mechanisms for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config

    // State information relating to enhanced error handling mechanisms for the
    // BGP group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State
}

func (errorHandling *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling) GetEntityData() *types.CommonEntityData {
    errorHandling.EntityData.YFilter = errorHandling.YFilter
    errorHandling.EntityData.YangName = "error-handling"
    errorHandling.EntityData.BundleName = "openconfig"
    errorHandling.EntityData.ParentYangName = "peer-group"
    errorHandling.EntityData.SegmentPath = "error-handling"
    errorHandling.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + errorHandling.EntityData.SegmentPath
    errorHandling.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorHandling.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorHandling.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorHandling.EntityData.Children = types.NewOrderedMap()
    errorHandling.EntityData.Children.Append("config", types.YChild{"Config", &errorHandling.Config})
    errorHandling.EntityData.Children.Append("state", types.YChild{"State", &errorHandling.State})
    errorHandling.EntityData.Leafs = types.NewOrderedMap()

    errorHandling.EntityData.YListKeys = []string {}

    return &(errorHandling.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config
// Configuration parameters enabling or modifying the
// behavior or enhanced error handling mechanisms for the BGP
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "error-handling"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/error-handling/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("treat-as-withdraw", types.YLeaf{"TreatAsWithdraw", config.TreatAsWithdraw})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State
// State information relating to enhanced error handling
// mechanisms for the BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify whether erroneous UPDATE messages for which the NLRI can be
    // extracted are reated as though the NLRI is withdrawn - avoiding session
    // reset. The type is bool. The default value is false.
    TreatAsWithdraw interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-handling"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/error-handling/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("treat-as-withdraw", types.YLeaf{"TreatAsWithdraw", state.TreatAsWithdraw})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart
// Parameters relating the graceful restart mechanism for BGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config

    // State information associated with graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "peer-group"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config
// Configuration parameters relating to graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", config.RestartTime})
    config.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", config.StaleRoutesTime})
    config.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", config.HelperOnly})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State
// State information associated with graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable the graceful-restart capability. The type is bool.
    Enabled interface{}

    // Estimated time (in seconds) for the local BGP speaker to restart a session.
    // This value is advertise in the graceful restart BGP capability.  This is a
    // 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the
    // suggested default value is <= the hold-time value. The type is interface{}
    // with range: 0..4096.
    RestartTime interface{}

    // An upper-bound on the time thate stale routes will be retained by a router
    // after a session is restarted. If an End-of-RIB (EOR) marker is received
    // prior to this timer expiring stale-routes will be flushed upon its receipt
    // - if no EOR is received, then when this timer expires stale paths will be
    // purged. This timer is referred to as the Selection_Deferral_Timer in
    // RFC4724. The type is string with range:
    // -92233720368547758.08..92233720368547758.07.
    StaleRoutesTime interface{}

    // Enable graceful-restart in helper mode only. When this leaf is set, the
    // local system does not retain forwarding its own state during a restart, but
    // supports procedures for the receiving speaker, as defined in RFC4724. The
    // type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", state.RestartTime})
    state.EntityData.Leafs.Append("stale-routes-time", types.YLeaf{"StaleRoutesTime", state.StaleRoutesTime})
    state.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", state.HelperOnly})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions
// Logging options for events related to the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters enabling or modifying logging for events relating
    // to the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config

    // State information relating to logging for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State
}

func (loggingOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions) GetEntityData() *types.CommonEntityData {
    loggingOptions.EntityData.YFilter = loggingOptions.YFilter
    loggingOptions.EntityData.YangName = "logging-options"
    loggingOptions.EntityData.BundleName = "openconfig"
    loggingOptions.EntityData.ParentYangName = "peer-group"
    loggingOptions.EntityData.SegmentPath = "logging-options"
    loggingOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + loggingOptions.EntityData.SegmentPath
    loggingOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    loggingOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    loggingOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    loggingOptions.EntityData.Children = types.NewOrderedMap()
    loggingOptions.EntityData.Children.Append("config", types.YChild{"Config", &loggingOptions.Config})
    loggingOptions.EntityData.Children.Append("state", types.YChild{"State", &loggingOptions.State})
    loggingOptions.EntityData.Leafs = types.NewOrderedMap()

    loggingOptions.EntityData.YListKeys = []string {}

    return &(loggingOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config
// Configuration parameters enabling or modifying logging
// for events relating to the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "logging-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/logging-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("log-neighbor-state-changes", types.YLeaf{"LogNeighborStateChanges", config.LogNeighborStateChanges})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State
// State information relating to logging for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure logging of peer state changes.  Default is to enable logging of
    // peer state changes. The type is bool. The default value is true.
    LogNeighborStateChanges interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "logging-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/logging-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("log-neighbor-state-changes", types.YLeaf{"LogNeighborStateChanges", state.LogNeighborStateChanges})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop
// eBGP multi-hop parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multihop for the BGP group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config

    // State information for eBGP multihop, for the BGP neighbor or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
}

func (ebgpMultihop *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "openconfig"
    ebgpMultihop.EntityData.ParentYangName = "peer-group"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Children.Append("config", types.YChild{"Config", &ebgpMultihop.Config})
    ebgpMultihop.EntityData.Children.Append("state", types.YChild{"State", &ebgpMultihop.State})
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config
// Configuration parameters relating to eBGP multihop for the
// BGP group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp-multihop"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/ebgp-multihop/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("multihop-ttl", types.YLeaf{"MultihopTtl", config.MultihopTtl})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
// State information for eBGP multihop, for the BGP neighbor
// or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When enabled the referenced group or neighbors are permitted to be
    // indirectly connected - including cases where the TTL can be decremented
    // between the BGP peers. The type is bool. The default value is false.
    Enabled interface{}

    // Time-to-live value to use when packets are sent to the referenced group or
    // neighbors and ebgp-multihop is enabled. The type is interface{} with range:
    // 0..255.
    MultihopTtl interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp-multihop"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/ebgp-multihop/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("multihop-ttl", types.YLeaf{"MultihopTtl", state.MultihopTtl})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector
// Route reflector parameters for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuraton parameters relating to route reflection for the BGPgroup.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config

    // State information relating to route reflection for the BGPgroup.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State
}

func (routeReflector *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector) GetEntityData() *types.CommonEntityData {
    routeReflector.EntityData.YFilter = routeReflector.YFilter
    routeReflector.EntityData.YangName = "route-reflector"
    routeReflector.EntityData.BundleName = "openconfig"
    routeReflector.EntityData.ParentYangName = "peer-group"
    routeReflector.EntityData.SegmentPath = "route-reflector"
    routeReflector.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + routeReflector.EntityData.SegmentPath
    routeReflector.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeReflector.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeReflector.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeReflector.EntityData.Children = types.NewOrderedMap()
    routeReflector.EntityData.Children.Append("config", types.YChild{"Config", &routeReflector.Config})
    routeReflector.EntityData.Children.Append("state", types.YChild{"State", &routeReflector.State})
    routeReflector.EntityData.Leafs = types.NewOrderedMap()

    routeReflector.EntityData.YListKeys = []string {}

    return &(routeReflector.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config
// Configuraton parameters relating to route reflection
// for the BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-reflector"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("route-reflector-cluster-id", types.YLeaf{"RouteReflectorClusterId", config.RouteReflectorClusterId})
    config.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", config.RouteReflectorClient})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State
// State information relating to route reflection for the
// BGPgroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // route-reflector cluster id to use when local router is configured as a
    // route reflector.  Commonly set at the group level, but allows a different
    // cluster id to be set for each neighbor. The type is one of the following
    // types: int with range: 0..4294967295, or string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouteReflectorClusterId interface{}

    // Configure the neighbor as a route reflector client. The type is bool. The
    // default value is false.
    RouteReflectorClient interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-reflector"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("route-reflector-cluster-id", types.YLeaf{"RouteReflectorClusterId", state.RouteReflectorClusterId})
    state.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", state.RouteReflectorClient})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions
// AS_PATH manipulation parameters for the BGP neighbor or
// group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to AS_PATH manipulation for the BGP peer
    // or group.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config

    // State information relating to the AS_PATH manipulation mechanisms for the
    // BGP peer or group.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State
}

func (asPathOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions) GetEntityData() *types.CommonEntityData {
    asPathOptions.EntityData.YFilter = asPathOptions.YFilter
    asPathOptions.EntityData.YangName = "as-path-options"
    asPathOptions.EntityData.BundleName = "openconfig"
    asPathOptions.EntityData.ParentYangName = "peer-group"
    asPathOptions.EntityData.SegmentPath = "as-path-options"
    asPathOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + asPathOptions.EntityData.SegmentPath
    asPathOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    asPathOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    asPathOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    asPathOptions.EntityData.Children = types.NewOrderedMap()
    asPathOptions.EntityData.Children.Append("config", types.YChild{"Config", &asPathOptions.Config})
    asPathOptions.EntityData.Children.Append("state", types.YChild{"State", &asPathOptions.State})
    asPathOptions.EntityData.Leafs = types.NewOrderedMap()

    asPathOptions.EntityData.YListKeys = []string {}

    return &(asPathOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config
// Configuration parameters relating to AS_PATH manipulation
// for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "as-path-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/as-path-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-own-as", types.YLeaf{"AllowOwnAs", config.AllowOwnAs})
    config.EntityData.Leafs.Append("replace-peer-as", types.YLeaf{"ReplacePeerAs", config.ReplacePeerAs})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State
// State information relating to the AS_PATH manipulation
// mechanisms for the BGP peer or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify the number of occurrences of the local BGP speaker's AS that can
    // occur within the AS_PATH before it is rejected. The type is interface{}
    // with range: 0..255. The default value is 0.
    AllowOwnAs interface{}

    // Replace occurrences of the peer's AS in the AS_PATH with the local
    // autonomous system number. The type is bool. The default value is false.
    ReplacePeerAs interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "as-path-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/as-path-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-own-as", types.YLeaf{"AllowOwnAs", state.AllowOwnAs})
    state.EntityData.Leafs.Append("replace-peer-as", types.YLeaf{"ReplacePeerAs", state.ReplacePeerAs})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths
// Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to ADD_PATHS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config

    // State information associated with ADD_PATHS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State
}

func (addPaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths) GetEntityData() *types.CommonEntityData {
    addPaths.EntityData.YFilter = addPaths.YFilter
    addPaths.EntityData.YangName = "add-paths"
    addPaths.EntityData.BundleName = "openconfig"
    addPaths.EntityData.ParentYangName = "peer-group"
    addPaths.EntityData.SegmentPath = "add-paths"
    addPaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + addPaths.EntityData.SegmentPath
    addPaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    addPaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    addPaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    addPaths.EntityData.Children = types.NewOrderedMap()
    addPaths.EntityData.Children.Append("config", types.YChild{"Config", &addPaths.Config})
    addPaths.EntityData.Children.Append("state", types.YChild{"State", &addPaths.State})
    addPaths.EntityData.Leafs = types.NewOrderedMap()

    addPaths.EntityData.YListKeys = []string {}

    return &(addPaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config
// Configuration parameters relating to ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "add-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/add-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("receive", types.YLeaf{"Receive", config.Receive})
    config.EntityData.Leafs.Append("send-max", types.YLeaf{"SendMax", config.SendMax})
    config.EntityData.Leafs.Append("eligible-prefix-policy", types.YLeaf{"EligiblePrefixPolicy", config.EligiblePrefixPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State
// State information associated with ADD_PATHS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable ability to receive multiple path advertisements for an NLRI from the
    // neighbor or group. The type is bool. The default value is false.
    Receive interface{}

    // The maximum number of paths to advertise to neighbors for a single NLRI.
    // The type is interface{} with range: 0..255.
    SendMax interface{}

    // A reference to a routing policy which can be used to restrict the prefixes
    // for which add-paths is enabled. The type is string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    EligiblePrefixPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AddPaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "add-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/add-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("receive", types.YLeaf{"Receive", state.Receive})
    state.EntityData.Leafs.Append("send-max", types.YLeaf{"SendMax", state.SendMax})
    state.EntityData.Leafs.Append("eligible-prefix-policy", types.YLeaf{"EligiblePrefixPolicy", state.EligiblePrefixPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "peer-group"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &useMultiplePaths.Ibgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Children.Append("config", types.YChild{"Config", &ibgp.Config})
    ibgp.EntityData.Children.Append("state", types.YChild{"State", &ibgp.State})
    ibgp.EntityData.Leafs = types.NewOrderedMap()

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ibgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ibgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "peer-group"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + applyPolicy.EntityData.SegmentPath
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = types.NewOrderedMap()
    applyPolicy.EntityData.Children.Append("config", types.YChild{"Config", &applyPolicy.Config})
    applyPolicy.EntityData.Children.Append("state", types.YChild{"State", &applyPolicy.State})
    applyPolicy.EntityData.Leafs = types.NewOrderedMap()

    applyPolicy.EntityData.YListKeys = []string {}

    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/apply-policy/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})
    config.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", config.ExportPolicy})
    config.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/apply-policy/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})
    state.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", state.ExportPolicy})
    state.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis
// Per-address-family configuration parameters associated with
// thegroup
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI configuration available for the neighbour or group. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi.
    AfiSafi []*NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
}

func (afiSafis *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "openconfig"
    afiSafis.EntityData.ParentYangName = "peer-group"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/" + afiSafis.EntityData.SegmentPath
    afiSafis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafis.EntityData.Children = types.NewOrderedMap()
    afiSafis.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", nil})
    for i := range afiSafis.AfiSafi {
        afiSafis.EntityData.Children.Append(types.GetSegmentPath(afiSafis.AfiSafi[i]), types.YChild{"AfiSafi", afiSafis.AfiSafi[i]})
    }
    afiSafis.EntityData.Leafs = types.NewOrderedMap()

    afiSafis.EntityData.YListKeys = []string {}

    return &(afiSafis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
// AFI,SAFI configuration available for the
// neighbour or group
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the AFI-SAFI name used as a key for
    // the AFI-SAFI list. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // Configuration parameters for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config

    // State information relating to the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State

    // Parameters relating to BGP graceful-restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart

    // Parameters relating to options for route selection.
    RouteSelectionOptions NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions

    // Parameters related to the use of multiple paths for the same NLRI.
    UseMultiplePaths NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths

    // Anchor point for routing policies in the model. Import and export policies
    // are with respect to the local routing table, i.e., export (send) and import
    // (receive), depending on the context.
    ApplyPolicy NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy

    // IPv4 unicast configuration options.
    Ipv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast

    // IPv6 unicast configuration options.
    Ipv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast

    // IPv4 Labeled Unicast configuration options.
    Ipv4LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast

    // IPv6 Labeled Unicast configuration options.
    Ipv6LabeledUnicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast

    // Unicast IPv4 L3VPN configuration options.
    L3vpnIpv4Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast

    // Unicast IPv6 L3VPN configuration options.
    L3vpnIpv6Unicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast

    // Multicast IPv4 L3VPN configuration options.
    L3vpnIpv4Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast

    // Multicast IPv6 L3VPN configuration options.
    L3vpnIpv6Multicast NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast

    // BGP-signalled VPLS configuration options.
    L2vpnVpls NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls

    // BGP EVPN configuration options.
    L2vpnEvpn NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + types.AddKeyToken(afiSafi.AfiSafiName, "afi-safi-name")
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("config", types.YChild{"Config", &afiSafi.Config})
    afiSafi.EntityData.Children.Append("state", types.YChild{"State", &afiSafi.State})
    afiSafi.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &afiSafi.GracefulRestart})
    afiSafi.EntityData.Children.Append("route-selection-options", types.YChild{"RouteSelectionOptions", &afiSafi.RouteSelectionOptions})
    afiSafi.EntityData.Children.Append("use-multiple-paths", types.YChild{"UseMultiplePaths", &afiSafi.UseMultiplePaths})
    afiSafi.EntityData.Children.Append("apply-policy", types.YChild{"ApplyPolicy", &afiSafi.ApplyPolicy})
    afiSafi.EntityData.Children.Append("ipv4-unicast", types.YChild{"Ipv4Unicast", &afiSafi.Ipv4Unicast})
    afiSafi.EntityData.Children.Append("ipv6-unicast", types.YChild{"Ipv6Unicast", &afiSafi.Ipv6Unicast})
    afiSafi.EntityData.Children.Append("ipv4-labeled-unicast", types.YChild{"Ipv4LabeledUnicast", &afiSafi.Ipv4LabeledUnicast})
    afiSafi.EntityData.Children.Append("ipv6-labeled-unicast", types.YChild{"Ipv6LabeledUnicast", &afiSafi.Ipv6LabeledUnicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-unicast", types.YChild{"L3vpnIpv4Unicast", &afiSafi.L3vpnIpv4Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-unicast", types.YChild{"L3vpnIpv6Unicast", &afiSafi.L3vpnIpv6Unicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv4-multicast", types.YChild{"L3vpnIpv4Multicast", &afiSafi.L3vpnIpv4Multicast})
    afiSafi.EntityData.Children.Append("l3vpn-ipv6-multicast", types.YChild{"L3vpnIpv6Multicast", &afiSafi.L3vpnIpv6Multicast})
    afiSafi.EntityData.Children.Append("l2vpn-vpls", types.YChild{"L2vpnVpls", &afiSafi.L2vpnVpls})
    afiSafi.EntityData.Children.Append("l2vpn-evpn", types.YChild{"L2vpnEvpn", &afiSafi.L2vpnEvpn})
    afiSafi.EntityData.Leafs = types.NewOrderedMap()
    afiSafi.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", afiSafi.AfiSafiName})

    afiSafi.EntityData.YListKeys = []string {"AfiSafiName"}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config
// Configuration parameters for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi-safi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", config.AfiSafiName})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State
// State information relating to the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI,SAFI. The type is one of the following:
    // L2VPNEVPNL2VPNVPLSIPV4UNICASTL3VPNIPV6MULTICASTL3VPNIPV6UNICASTL3VPNIPV4UNICASTL3VPNIPV4MULTICASTIPV4LABELEDUNICASTIPV6UNICASTIPV6LABELEDUNICAST.
    AfiSafiName interface{}

    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the
    // neighbour or group. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", state.AfiSafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart
// Parameters relating to BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration options for BGP graceful-restart.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config

    // State information for BGP graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "afi-safi"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config
// Configuration options for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
// State information for BGP graceful-restart
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This leaf indicates whether graceful-restart is enabled for this AFI-SAFI.
    // The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions
// Parameters relating to options for route selection
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to route selection options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config

    // State information for the route selection options.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityData() *types.CommonEntityData {
    routeSelectionOptions.EntityData.YFilter = routeSelectionOptions.YFilter
    routeSelectionOptions.EntityData.YangName = "route-selection-options"
    routeSelectionOptions.EntityData.BundleName = "openconfig"
    routeSelectionOptions.EntityData.ParentYangName = "afi-safi"
    routeSelectionOptions.EntityData.SegmentPath = "route-selection-options"
    routeSelectionOptions.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + routeSelectionOptions.EntityData.SegmentPath
    routeSelectionOptions.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routeSelectionOptions.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routeSelectionOptions.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routeSelectionOptions.EntityData.Children = types.NewOrderedMap()
    routeSelectionOptions.EntityData.Children.Append("config", types.YChild{"Config", &routeSelectionOptions.Config})
    routeSelectionOptions.EntityData.Children.Append("state", types.YChild{"State", &routeSelectionOptions.State})
    routeSelectionOptions.EntityData.Leafs = types.NewOrderedMap()

    routeSelectionOptions.EntityData.YListKeys = []string {}

    return &(routeSelectionOptions.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config
// Configuration parameters relating to route selection
// options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-selection-options"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/route-selection-options/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", config.AlwaysCompareMed})
    config.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", config.IgnoreAsPathLength})
    config.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", config.ExternalCompareRouterId})
    config.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", config.AdvertiseInactiveRoutes})
    config.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", config.EnableAigp})
    config.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", config.IgnoreNextHopIgpMetric})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
// State information for the route selection options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Compare multi-exit discriminator (MED) value from different ASes when
    // selecting the best route.  The default behavior is to only compare MEDs for
    // paths received from the same AS. The type is bool. The default value is
    // false.
    AlwaysCompareMed interface{}

    // Ignore the AS path length when selecting the best path. The default is to
    // use the AS path length and prefer paths with shorter length. The type is
    // bool. The default value is false.
    IgnoreAsPathLength interface{}

    // When comparing similar routes received from external BGP peers, use the
    // router-id as a criterion to select the active path. The type is bool. The
    // default value is true.
    ExternalCompareRouterId interface{}

    // Advertise inactive routes to external peers.  The default is to only
    // advertise active routes. The type is bool. The default value is false.
    AdvertiseInactiveRoutes interface{}

    // Flag to enable sending / receiving accumulated IGP attribute in routing
    // updates. The type is bool. The default value is false.
    EnableAigp interface{}

    // Ignore the IGP metric to the next-hop when calculating BGP best-path. The
    // default is to select the route for which the metric to the next-hop is
    // lowest. The type is bool. The default value is false.
    IgnoreNextHopIgpMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-selection-options"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/route-selection-options/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("always-compare-med", types.YLeaf{"AlwaysCompareMed", state.AlwaysCompareMed})
    state.EntityData.Leafs.Append("ignore-as-path-length", types.YLeaf{"IgnoreAsPathLength", state.IgnoreAsPathLength})
    state.EntityData.Leafs.Append("external-compare-router-id", types.YLeaf{"ExternalCompareRouterId", state.ExternalCompareRouterId})
    state.EntityData.Leafs.Append("advertise-inactive-routes", types.YLeaf{"AdvertiseInactiveRoutes", state.AdvertiseInactiveRoutes})
    state.EntityData.Leafs.Append("enable-aigp", types.YLeaf{"EnableAigp", state.EnableAigp})
    state.EntityData.Leafs.Append("ignore-next-hop-igp-metric", types.YLeaf{"IgnoreNextHopIgpMetric", state.IgnoreNextHopIgpMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths
// Parameters related to the use of multiple paths for the
// same NLRI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config

    // State parameters relating to multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State

    // Multipath parameters for eBGP.
    Ebgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp

    // Multipath parameters for iBGP.
    Ibgp NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
}

func (useMultiplePaths *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityData() *types.CommonEntityData {
    useMultiplePaths.EntityData.YFilter = useMultiplePaths.YFilter
    useMultiplePaths.EntityData.YangName = "use-multiple-paths"
    useMultiplePaths.EntityData.BundleName = "openconfig"
    useMultiplePaths.EntityData.ParentYangName = "afi-safi"
    useMultiplePaths.EntityData.SegmentPath = "use-multiple-paths"
    useMultiplePaths.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + useMultiplePaths.EntityData.SegmentPath
    useMultiplePaths.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    useMultiplePaths.EntityData.NamespaceTable = openconfig.GetNamespaces()
    useMultiplePaths.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    useMultiplePaths.EntityData.Children = types.NewOrderedMap()
    useMultiplePaths.EntityData.Children.Append("config", types.YChild{"Config", &useMultiplePaths.Config})
    useMultiplePaths.EntityData.Children.Append("state", types.YChild{"State", &useMultiplePaths.State})
    useMultiplePaths.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &useMultiplePaths.Ebgp})
    useMultiplePaths.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &useMultiplePaths.Ibgp})
    useMultiplePaths.EntityData.Leafs = types.NewOrderedMap()

    useMultiplePaths.EntityData.YListKeys = []string {}

    return &(useMultiplePaths.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config
// Configuration parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "use-multiple-paths"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State
// State parameters relating to multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether the use of multiple paths for the same NLRI is enabled for the
    // neighbor. This value is overridden by any more specific configuration
    // value. The type is bool. The default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "use-multiple-paths"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
// Multipath parameters for eBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to eBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config

    // State information relating to eBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "openconfig"
    ebgp.EntityData.ParentYangName = "use-multiple-paths"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ebgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Children.Append("config", types.YChild{"Config", &ebgp.Config})
    ebgp.EntityData.Children.Append("state", types.YChild{"State", &ebgp.State})
    ebgp.EntityData.Leafs = types.NewOrderedMap()

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
// Configuration parameters relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ebgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ebgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", config.AllowMultipleAs})
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
// State information relating to eBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Allow multipath to use paths from different neighbouring ASes.  The default
    // is to only consider multiple paths from the same neighbouring AS. The type
    // is bool. The default value is false.
    AllowMultipleAs interface{}

    // Maximum number of parallel paths to consider when using BGP multipath. The
    // default is use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ebgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ebgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("allow-multiple-as", types.YLeaf{"AllowMultipleAs", state.AllowMultipleAs})
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
// Multipath parameters for iBGP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to iBGP multipath.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config

    // State information relating to iBGP multipath.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "openconfig"
    ibgp.EntityData.ParentYangName = "use-multiple-paths"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ibgp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Children.Append("config", types.YChild{"Config", &ibgp.Config})
    ibgp.EntityData.Children.Append("state", types.YChild{"State", &ibgp.State})
    ibgp.EntityData.Leafs = types.NewOrderedMap()

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
// Configuration parameters relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ibgp"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ibgp/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", config.MaximumPaths})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
// State information relating to iBGP multipath
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of parallel paths to consider when using iBGP multipath. The
    // default is to use a single path. The type is interface{} with range:
    // 0..4294967295. The default value is 1.
    MaximumPaths interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ibgp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ibgp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", state.MaximumPaths})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy configuration data.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config

    // Operational state for routing policy.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetEntityData() *types.CommonEntityData {
    applyPolicy.EntityData.YFilter = applyPolicy.YFilter
    applyPolicy.EntityData.YangName = "apply-policy"
    applyPolicy.EntityData.BundleName = "openconfig"
    applyPolicy.EntityData.ParentYangName = "afi-safi"
    applyPolicy.EntityData.SegmentPath = "apply-policy"
    applyPolicy.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + applyPolicy.EntityData.SegmentPath
    applyPolicy.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    applyPolicy.EntityData.NamespaceTable = openconfig.GetNamespaces()
    applyPolicy.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    applyPolicy.EntityData.Children = types.NewOrderedMap()
    applyPolicy.EntityData.Children.Append("config", types.YChild{"Config", &applyPolicy.Config})
    applyPolicy.EntityData.Children.Append("state", types.YChild{"State", &applyPolicy.State})
    applyPolicy.EntityData.Leafs = types.NewOrderedMap()

    applyPolicy.EntityData.YListKeys = []string {}

    return &(applyPolicy.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config
// Policy configuration data.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "apply-policy"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})
    config.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", config.ExportPolicy})
    config.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", config.DefaultExportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
// Operational state for routing policy
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}

    // list of policy names in sequence to be applied on sending a routing update
    // in the current context, e.g., for the current peer group, neighbor, address
    // family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ExportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the export
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultExportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "apply-policy"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})
    state.EntityData.Leafs.Append("export-policy", types.YLeaf{"ExportPolicy", state.ExportPolicy})
    state.EntityData.Leafs.Append("default-export-policy", types.YLeaf{"DefaultExportPolicy", state.DefaultExportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast
// IPv4 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityData() *types.CommonEntityData {
    ipv4Unicast.EntityData.YFilter = ipv4Unicast.YFilter
    ipv4Unicast.EntityData.YangName = "ipv4-unicast"
    ipv4Unicast.EntityData.BundleName = "openconfig"
    ipv4Unicast.EntityData.ParentYangName = "afi-safi"
    ipv4Unicast.EntityData.SegmentPath = "ipv4-unicast"
    ipv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + ipv4Unicast.EntityData.SegmentPath
    ipv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Unicast.EntityData.Children = types.NewOrderedMap()
    ipv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4Unicast.PrefixLimit})
    ipv4Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv4Unicast.Config})
    ipv4Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv4Unicast.State})
    ipv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4Unicast.EntityData.YListKeys = []string {}

    return &(ipv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv4-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast
// IPv6 unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit

    // Configuration parameters for common IPv4 and IPv6 unicast AFI-SAFI options.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config

    // State information for common IPv4 and IPv6 unicast parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityData() *types.CommonEntityData {
    ipv6Unicast.EntityData.YFilter = ipv6Unicast.YFilter
    ipv6Unicast.EntityData.YangName = "ipv6-unicast"
    ipv6Unicast.EntityData.BundleName = "openconfig"
    ipv6Unicast.EntityData.ParentYangName = "afi-safi"
    ipv6Unicast.EntityData.SegmentPath = "ipv6-unicast"
    ipv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + ipv6Unicast.EntityData.SegmentPath
    ipv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Unicast.EntityData.Children = types.NewOrderedMap()
    ipv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6Unicast.PrefixLimit})
    ipv6Unicast.EntityData.Children.Append("config", types.YChild{"Config", &ipv6Unicast.Config})
    ipv6Unicast.EntityData.Children.Append("state", types.YChild{"State", &ipv6Unicast.State})
    ipv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6Unicast.EntityData.YListKeys = []string {}

    return &(ipv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "ipv6-unicast"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", config.SendDefaultRoute})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
// State information for common IPv4 and IPv6 unicast
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If set to true, send the default-route to the neighbour(s). The type is
    // bool. The default value is false.
    SendDefaultRoute interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-unicast"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("send-default-route", types.YLeaf{"SendDefaultRoute", state.SendDefaultRoute})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast
// IPv4 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv4LabeledUnicast.EntityData.YFilter = ipv4LabeledUnicast.YFilter
    ipv4LabeledUnicast.EntityData.YangName = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv4LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv4LabeledUnicast.EntityData.SegmentPath = "ipv4-labeled-unicast"
    ipv4LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + ipv4LabeledUnicast.EntityData.SegmentPath
    ipv4LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv4LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv4LabeledUnicast.PrefixLimit})
    ipv4LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv4LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv4LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv4-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast
// IPv6 Labeled Unicast configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityData() *types.CommonEntityData {
    ipv6LabeledUnicast.EntityData.YFilter = ipv6LabeledUnicast.YFilter
    ipv6LabeledUnicast.EntityData.YangName = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.BundleName = "openconfig"
    ipv6LabeledUnicast.EntityData.ParentYangName = "afi-safi"
    ipv6LabeledUnicast.EntityData.SegmentPath = "ipv6-labeled-unicast"
    ipv6LabeledUnicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + ipv6LabeledUnicast.EntityData.SegmentPath
    ipv6LabeledUnicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6LabeledUnicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6LabeledUnicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6LabeledUnicast.EntityData.Children = types.NewOrderedMap()
    ipv6LabeledUnicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &ipv6LabeledUnicast.PrefixLimit})
    ipv6LabeledUnicast.EntityData.Leafs = types.NewOrderedMap()

    ipv6LabeledUnicast.EntityData.YListKeys = []string {}

    return &(ipv6LabeledUnicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "ipv6-labeled-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast
// Unicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
}

func (l3vpnIpv4Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Unicast.EntityData.YFilter = l3vpnIpv4Unicast.YFilter
    l3vpnIpv4Unicast.EntityData.YangName = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Unicast.EntityData.SegmentPath = "l3vpn-ipv4-unicast"
    l3vpnIpv4Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l3vpnIpv4Unicast.EntityData.SegmentPath
    l3vpnIpv4Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Unicast.PrefixLimit})
    l3vpnIpv4Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast
// Unicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
}

func (l3vpnIpv6Unicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Unicast.EntityData.YFilter = l3vpnIpv6Unicast.YFilter
    l3vpnIpv6Unicast.EntityData.YangName = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Unicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Unicast.EntityData.SegmentPath = "l3vpn-ipv6-unicast"
    l3vpnIpv6Unicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l3vpnIpv6Unicast.EntityData.SegmentPath
    l3vpnIpv6Unicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Unicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Unicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Unicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Unicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Unicast.PrefixLimit})
    l3vpnIpv6Unicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Unicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Unicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-unicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Unicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast
// Multicast IPv4 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
}

func (l3vpnIpv4Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv4Multicast.EntityData.YFilter = l3vpnIpv4Multicast.YFilter
    l3vpnIpv4Multicast.EntityData.YangName = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv4Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv4Multicast.EntityData.SegmentPath = "l3vpn-ipv4-multicast"
    l3vpnIpv4Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l3vpnIpv4Multicast.EntityData.SegmentPath
    l3vpnIpv4Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv4Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv4Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv4Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv4Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv4Multicast.PrefixLimit})
    l3vpnIpv4Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv4Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv4Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv4-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv4Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast
// Multicast IPv6 L3VPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
}

func (l3vpnIpv6Multicast *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast) GetEntityData() *types.CommonEntityData {
    l3vpnIpv6Multicast.EntityData.YFilter = l3vpnIpv6Multicast.YFilter
    l3vpnIpv6Multicast.EntityData.YangName = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.BundleName = "openconfig"
    l3vpnIpv6Multicast.EntityData.ParentYangName = "afi-safi"
    l3vpnIpv6Multicast.EntityData.SegmentPath = "l3vpn-ipv6-multicast"
    l3vpnIpv6Multicast.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l3vpnIpv6Multicast.EntityData.SegmentPath
    l3vpnIpv6Multicast.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l3vpnIpv6Multicast.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l3vpnIpv6Multicast.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l3vpnIpv6Multicast.EntityData.Children = types.NewOrderedMap()
    l3vpnIpv6Multicast.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l3vpnIpv6Multicast.PrefixLimit})
    l3vpnIpv6Multicast.EntityData.Leafs = types.NewOrderedMap()

    l3vpnIpv6Multicast.EntityData.YListKeys = []string {}

    return &(l3vpnIpv6Multicast.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l3vpn-ipv6-multicast"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3vpnIpv6Multicast_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls
// BGP-signalled VPLS configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
}

func (l2vpnVpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls) GetEntityData() *types.CommonEntityData {
    l2vpnVpls.EntityData.YFilter = l2vpnVpls.YFilter
    l2vpnVpls.EntityData.YangName = "l2vpn-vpls"
    l2vpnVpls.EntityData.BundleName = "openconfig"
    l2vpnVpls.EntityData.ParentYangName = "afi-safi"
    l2vpnVpls.EntityData.SegmentPath = "l2vpn-vpls"
    l2vpnVpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l2vpnVpls.EntityData.SegmentPath
    l2vpnVpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnVpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnVpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnVpls.EntityData.Children = types.NewOrderedMap()
    l2vpnVpls.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnVpls.PrefixLimit})
    l2vpnVpls.EntityData.Leafs = types.NewOrderedMap()

    l2vpnVpls.EntityData.YListKeys = []string {}

    return &(l2vpnVpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-vpls"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnVpls_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn
// BGP EVPN configuration options
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure the maximum number of prefixes that will be accepted from a peer.
    PrefixLimit NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
}

func (l2vpnEvpn *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn) GetEntityData() *types.CommonEntityData {
    l2vpnEvpn.EntityData.YFilter = l2vpnEvpn.YFilter
    l2vpnEvpn.EntityData.YangName = "l2vpn-evpn"
    l2vpnEvpn.EntityData.BundleName = "openconfig"
    l2vpnEvpn.EntityData.ParentYangName = "afi-safi"
    l2vpnEvpn.EntityData.SegmentPath = "l2vpn-evpn"
    l2vpnEvpn.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/" + l2vpnEvpn.EntityData.SegmentPath
    l2vpnEvpn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    l2vpnEvpn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    l2vpnEvpn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    l2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    l2vpnEvpn.EntityData.Children.Append("prefix-limit", types.YChild{"PrefixLimit", &l2vpnEvpn.PrefixLimit})
    l2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()

    l2vpnEvpn.EntityData.YListKeys = []string {}

    return &(l2vpnEvpn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit
// Configure the maximum number of prefixes that will be
// accepted from a peer
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the prefix limit for the AFI-SAFI.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config

    // State information relating to the prefix-limit for the AFI-SAFI.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
}

func (prefixLimit *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit) GetEntityData() *types.CommonEntityData {
    prefixLimit.EntityData.YFilter = prefixLimit.YFilter
    prefixLimit.EntityData.YangName = "prefix-limit"
    prefixLimit.EntityData.BundleName = "openconfig"
    prefixLimit.EntityData.ParentYangName = "l2vpn-evpn"
    prefixLimit.EntityData.SegmentPath = "prefix-limit"
    prefixLimit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn/" + prefixLimit.EntityData.SegmentPath
    prefixLimit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixLimit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixLimit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixLimit.EntityData.Children = types.NewOrderedMap()
    prefixLimit.EntityData.Children.Append("config", types.YChild{"Config", &prefixLimit.Config})
    prefixLimit.EntityData.Children.Append("state", types.YChild{"State", &prefixLimit.State})
    prefixLimit.EntityData.Leafs = types.NewOrderedMap()

    prefixLimit.EntityData.YListKeys = []string {}

    return &(prefixLimit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-limit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", config.MaxPrefixes})
    config.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", config.PreventTeardown})
    config.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", config.ShutdownThresholdPct})
    config.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", config.RestartTimer})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State
// State information relating to the prefix-limit for the
// AFI-SAFI
type NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes that will be accepted from the neighbour. The
    // type is interface{} with range: 0..4294967295.
    MaxPrefixes interface{}

    // Do not tear down the BGP session when the maximum prefix limit is exceeded,
    // but rather only log a warning. The default of this leaf is false, such that
    // when it is not specified, the session is torn down. The type is bool. The
    // default value is false.
    PreventTeardown interface{}

    // Threshold on number of prefixes that can be received from a neighbour
    // before generation of warning messages or log entries. Expressed as a
    // percentage of max-prefixes. The type is interface{} with range: 0..100.
    ShutdownThresholdPct interface{}

    // Time interval in seconds after which the BGP session is re-established
    // after being torn down due to exceeding the max-prefix limit. The type is
    // string with range: -92233720368547758.08..92233720368547758.07. Units are
    // seconds.
    RestartTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2vpnEvpn_PrefixLimit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-limit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn/prefix-limit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-prefixes", types.YLeaf{"MaxPrefixes", state.MaxPrefixes})
    state.EntityData.Leafs.Append("prevent-teardown", types.YLeaf{"PreventTeardown", state.PreventTeardown})
    state.EntityData.Leafs.Append("shutdown-threshold-pct", types.YLeaf{"ShutdownThresholdPct", state.ShutdownThresholdPct})
    state.EntityData.Leafs.Append("restart-timer", types.YLeaf{"RestartTimer", state.RestartTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
// This container defines top-level ISIS configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines global ISIS configuration and state information.
    Global NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global

    // This container defines ISIS level configuration and state information.
    Levels NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels

    // This container defines global ISIS interface configuration and state
    // information.
    Interfaces NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces
}

func (isis *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "openconfig"
    isis.EntityData.ParentYangName = "protocol"
    isis.EntityData.SegmentPath = "isis"
    isis.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/" + isis.EntityData.SegmentPath
    isis.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isis.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isis.EntityData.Children = types.NewOrderedMap()
    isis.EntityData.Children.Append("global", types.YChild{"Global", &isis.Global})
    isis.EntityData.Children.Append("levels", types.YChild{"Levels", &isis.Levels})
    isis.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &isis.Interfaces})
    isis.EntityData.Leafs = types.NewOrderedMap()

    isis.EntityData.YListKeys = []string {}

    return &(isis.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global
// This container defines global ISIS configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS global configuration router.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config

    // This container defines state for ISIS global router.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State

    // This container defines ISIS LSP Operational Bits.
    LspBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit

    // This container defines ISIS Reference Bandwidth.
    ReferenceBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth

    // This container defines ISIS Non-Stop Routing.
    Nsr NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr

    // This container defines ISIS Graceful Restart.
    GracefulRestart NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart

    // This container defines ISIS timers.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers

    // This container defines ISIS transport.
    Transport NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport

    // Configuration and operational state relating to MPLS-related features in
    // IS-IS.
    Mpls NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls

    // This container defines IGP shortcuts configuration and state information.
    IgpShortcuts NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi

    // Configuration and operational state relating to segment routing.
    SegmentRouting NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting

    // Policies to propagate prefixes between IS-IS levels.
    InterLevelPropagationPolicies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies
}

func (global *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "openconfig"
    global.EntityData.ParentYangName = "isis"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    global.EntityData.NamespaceTable = openconfig.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("config", types.YChild{"Config", &global.Config})
    global.EntityData.Children.Append("state", types.YChild{"State", &global.State})
    global.EntityData.Children.Append("lsp-bit", types.YChild{"LspBit", &global.LspBit})
    global.EntityData.Children.Append("reference-bandwidth", types.YChild{"ReferenceBandwidth", &global.ReferenceBandwidth})
    global.EntityData.Children.Append("nsr", types.YChild{"Nsr", &global.Nsr})
    global.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &global.GracefulRestart})
    global.EntityData.Children.Append("timers", types.YChild{"Timers", &global.Timers})
    global.EntityData.Children.Append("transport", types.YChild{"Transport", &global.Transport})
    global.EntityData.Children.Append("mpls", types.YChild{"Mpls", &global.Mpls})
    global.EntityData.Children.Append("igp-shortcuts", types.YChild{"IgpShortcuts", &global.IgpShortcuts})
    global.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", &global.AfiSafi})
    global.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &global.SegmentRouting})
    global.EntityData.Children.Append("inter-level-propagation-policies", types.YChild{"InterLevelPropagationPolicies", &global.InterLevelPropagationPolicies})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config
// This container defines ISIS global configuration router.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}

    // ISIS Instance. The type is string. The default value is 0.
    Instance interface{}

    // ISIS network entity title (NET). The first 8 bits are usually 49 (private
    // AFI), next 16 bits represent area, next 48 bits represent system id and
    // final 8 bits are set to 0. The type is slice of string with pattern:
    // ^[a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){3,9}\.[a-fA-F0-9]{2}$.
    Net []interface{}

    // Maximum areas supported. The type is interface{} with range: 0..255. The
    // default value is 3.
    MaximumAreaAddresses interface{}

    // ISIS level capability(level-1, level-2,vlevel-1-2). The type is LevelType.
    // The default value is LEVEL_1_2.
    LevelCapability interface{}

    // ISIS max-paths count. The type is interface{} with range: 0..255.
    MaxEcmpPaths interface{}

    // ISIS purge TLV. When set to true, a TLV is added to purges to record the
    // system ID  of the IS generating the purge. The type is bool. The default
    // value is false.
    PoiTlv interface{}

    // ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies the
    // unique instance as well as the topology/topologies to which the PDU
    // applies. The type is bool. The default value is false.
    IidTlv interface{}

    // When set to true, IS will always flood the LSP that triggered an SPF before
    // the router actually runs the SPF computation. The type is bool. The default
    // value is true.
    FastFlooding interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "global"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", config.AuthenticationCheck})
    config.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", config.Instance})
    config.EntityData.Leafs.Append("net", types.YLeaf{"Net", config.Net})
    config.EntityData.Leafs.Append("maximum-area-addresses", types.YLeaf{"MaximumAreaAddresses", config.MaximumAreaAddresses})
    config.EntityData.Leafs.Append("level-capability", types.YLeaf{"LevelCapability", config.LevelCapability})
    config.EntityData.Leafs.Append("max-ecmp-paths", types.YLeaf{"MaxEcmpPaths", config.MaxEcmpPaths})
    config.EntityData.Leafs.Append("poi-tlv", types.YLeaf{"PoiTlv", config.PoiTlv})
    config.EntityData.Leafs.Append("iid-tlv", types.YLeaf{"IidTlv", config.IidTlv})
    config.EntityData.Leafs.Append("fast-flooding", types.YLeaf{"FastFlooding", config.FastFlooding})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State
// This container defines state for ISIS global router.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}

    // ISIS Instance. The type is string. The default value is 0.
    Instance interface{}

    // ISIS network entity title (NET). The first 8 bits are usually 49 (private
    // AFI), next 16 bits represent area, next 48 bits represent system id and
    // final 8 bits are set to 0. The type is slice of string with pattern:
    // ^[a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){3,9}\.[a-fA-F0-9]{2}$.
    Net []interface{}

    // Maximum areas supported. The type is interface{} with range: 0..255. The
    // default value is 3.
    MaximumAreaAddresses interface{}

    // ISIS level capability(level-1, level-2,vlevel-1-2). The type is LevelType.
    // The default value is LEVEL_1_2.
    LevelCapability interface{}

    // ISIS max-paths count. The type is interface{} with range: 0..255.
    MaxEcmpPaths interface{}

    // ISIS purge TLV. When set to true, a TLV is added to purges to record the
    // system ID  of the IS generating the purge. The type is bool. The default
    // value is false.
    PoiTlv interface{}

    // ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies the
    // unique instance as well as the topology/topologies to which the PDU
    // applies. The type is bool. The default value is false.
    IidTlv interface{}

    // When set to true, IS will always flood the LSP that triggered an SPF before
    // the router actually runs the SPF computation. The type is bool. The default
    // value is true.
    FastFlooding interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "global"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", state.AuthenticationCheck})
    state.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", state.Instance})
    state.EntityData.Leafs.Append("net", types.YLeaf{"Net", state.Net})
    state.EntityData.Leafs.Append("maximum-area-addresses", types.YLeaf{"MaximumAreaAddresses", state.MaximumAreaAddresses})
    state.EntityData.Leafs.Append("level-capability", types.YLeaf{"LevelCapability", state.LevelCapability})
    state.EntityData.Leafs.Append("max-ecmp-paths", types.YLeaf{"MaxEcmpPaths", state.MaxEcmpPaths})
    state.EntityData.Leafs.Append("poi-tlv", types.YLeaf{"PoiTlv", state.PoiTlv})
    state.EntityData.Leafs.Append("iid-tlv", types.YLeaf{"IidTlv", state.IidTlv})
    state.EntityData.Leafs.Append("fast-flooding", types.YLeaf{"FastFlooding", state.FastFlooding})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit
// This container defines ISIS LSP Operational Bits.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Overload Bit configuration.
    OverloadBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit

    // This container defines Attached Bit.
    AttachedBit NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
}

func (lspBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit) GetEntityData() *types.CommonEntityData {
    lspBit.EntityData.YFilter = lspBit.YFilter
    lspBit.EntityData.YangName = "lsp-bit"
    lspBit.EntityData.BundleName = "openconfig"
    lspBit.EntityData.ParentYangName = "global"
    lspBit.EntityData.SegmentPath = "lsp-bit"
    lspBit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + lspBit.EntityData.SegmentPath
    lspBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspBit.EntityData.Children = types.NewOrderedMap()
    lspBit.EntityData.Children.Append("overload-bit", types.YChild{"OverloadBit", &lspBit.OverloadBit})
    lspBit.EntityData.Children.Append("attached-bit", types.YChild{"AttachedBit", &lspBit.AttachedBit})
    lspBit.EntityData.Leafs = types.NewOrderedMap()

    lspBit.EntityData.YListKeys = []string {}

    return &(lspBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit
// This container defines Overload Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS Overload Bit configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config

    // This container defines state for ISIS Overload Bit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State

    // This container defines state for ISIS Overload Bit reset triggers.
    ResetTriggers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
}

func (overloadBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit) GetEntityData() *types.CommonEntityData {
    overloadBit.EntityData.YFilter = overloadBit.YFilter
    overloadBit.EntityData.YangName = "overload-bit"
    overloadBit.EntityData.BundleName = "openconfig"
    overloadBit.EntityData.ParentYangName = "lsp-bit"
    overloadBit.EntityData.SegmentPath = "overload-bit"
    overloadBit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/" + overloadBit.EntityData.SegmentPath
    overloadBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    overloadBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    overloadBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    overloadBit.EntityData.Children = types.NewOrderedMap()
    overloadBit.EntityData.Children.Append("config", types.YChild{"Config", &overloadBit.Config})
    overloadBit.EntityData.Children.Append("state", types.YChild{"State", &overloadBit.State})
    overloadBit.EntityData.Children.Append("reset-triggers", types.YChild{"ResetTriggers", &overloadBit.ResetTriggers})
    overloadBit.EntityData.Leafs = types.NewOrderedMap()

    overloadBit.EntityData.YListKeys = []string {}

    return &(overloadBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config
// This container defines ISIS Overload Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, IS-IS overload bit is set. The type is bool. The default
    // value is false.
    SetBit interface{}

    // When set to true, the IS-IS overload bit is set on system boot. The type is
    // bool. The default value is false.
    SetBitOnBoot interface{}

    // When set to true, the local IS advertises links with the highest available
    // metric regardless of their configured metric. The metric value is based on
    // the metric style - if wide metrics are utilised the metric is advertised as
    // 16777214, otherwise they are advertised with a value of 63. The type is
    // bool. The default value is false.
    AdvertiseHighMetric interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "overload-bit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("set-bit", types.YLeaf{"SetBit", config.SetBit})
    config.EntityData.Leafs.Append("set-bit-on-boot", types.YLeaf{"SetBitOnBoot", config.SetBitOnBoot})
    config.EntityData.Leafs.Append("advertise-high-metric", types.YLeaf{"AdvertiseHighMetric", config.AdvertiseHighMetric})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State
// This container defines state for ISIS Overload Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, IS-IS overload bit is set. The type is bool. The default
    // value is false.
    SetBit interface{}

    // When set to true, the IS-IS overload bit is set on system boot. The type is
    // bool. The default value is false.
    SetBitOnBoot interface{}

    // When set to true, the local IS advertises links with the highest available
    // metric regardless of their configured metric. The metric value is based on
    // the metric style - if wide metrics are utilised the metric is advertised as
    // 16777214, otherwise they are advertised with a value of 63. The type is
    // bool. The default value is false.
    AdvertiseHighMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "overload-bit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("set-bit", types.YLeaf{"SetBit", state.SetBit})
    state.EntityData.Leafs.Append("set-bit-on-boot", types.YLeaf{"SetBitOnBoot", state.SetBitOnBoot})
    state.EntityData.Leafs.Append("advertise-high-metric", types.YLeaf{"AdvertiseHighMetric", state.AdvertiseHighMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
// This container defines state for ISIS Overload Bit reset triggers
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS Overload reset trigger reasons. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger.
    ResetTrigger []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
}

func (resetTriggers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers) GetEntityData() *types.CommonEntityData {
    resetTriggers.EntityData.YFilter = resetTriggers.YFilter
    resetTriggers.EntityData.YangName = "reset-triggers"
    resetTriggers.EntityData.BundleName = "openconfig"
    resetTriggers.EntityData.ParentYangName = "overload-bit"
    resetTriggers.EntityData.SegmentPath = "reset-triggers"
    resetTriggers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/" + resetTriggers.EntityData.SegmentPath
    resetTriggers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    resetTriggers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    resetTriggers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    resetTriggers.EntityData.Children = types.NewOrderedMap()
    resetTriggers.EntityData.Children.Append("reset-trigger", types.YChild{"ResetTrigger", nil})
    for i := range resetTriggers.ResetTrigger {
        resetTriggers.EntityData.Children.Append(types.GetSegmentPath(resetTriggers.ResetTrigger[i]), types.YChild{"ResetTrigger", resetTriggers.ResetTrigger[i]})
    }
    resetTriggers.EntityData.Leafs = types.NewOrderedMap()

    resetTriggers.EntityData.YListKeys = []string {}

    return &(resetTriggers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
// This list describes ISIS Overload reset trigger reasons.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the reset trigger reason. The type is
    // one of the following: WAITFORSYSTEMWAITFORBGP.
    ResetTrigger interface{}

    // This container defines ISIS Overload Bit reset trigger configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config

    // This container defines state for ISIS Overload Bit reset triggers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
}

func (resetTrigger *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger) GetEntityData() *types.CommonEntityData {
    resetTrigger.EntityData.YFilter = resetTrigger.YFilter
    resetTrigger.EntityData.YangName = "reset-trigger"
    resetTrigger.EntityData.BundleName = "openconfig"
    resetTrigger.EntityData.ParentYangName = "reset-triggers"
    resetTrigger.EntityData.SegmentPath = "reset-trigger" + types.AddKeyToken(resetTrigger.ResetTrigger, "reset-trigger")
    resetTrigger.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/" + resetTrigger.EntityData.SegmentPath
    resetTrigger.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    resetTrigger.EntityData.NamespaceTable = openconfig.GetNamespaces()
    resetTrigger.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    resetTrigger.EntityData.Children = types.NewOrderedMap()
    resetTrigger.EntityData.Children.Append("config", types.YChild{"Config", &resetTrigger.Config})
    resetTrigger.EntityData.Children.Append("state", types.YChild{"State", &resetTrigger.State})
    resetTrigger.EntityData.Leafs = types.NewOrderedMap()
    resetTrigger.EntityData.Leafs.Append("reset-trigger", types.YLeaf{"ResetTrigger", resetTrigger.ResetTrigger})

    resetTrigger.EntityData.YListKeys = []string {"ResetTrigger"}

    return &(resetTrigger.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config
// This container defines ISIS Overload Bit reset trigger
// configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // In the case that the system sets the overload bit on start, the system
    // should reset the bit (i.e., clear the overload bit) upon the specified
    // trigger. The type is one of the following: WAITFORSYSTEMWAITFORBGP.
    ResetTrigger interface{}

    // If a reset trigger is specified, the system should delay resetting the
    // overload bit for the specified number of seconds after the trigger occurs.
    // The type is interface{} with range: 0..65535. Units are seconds.
    Delay interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reset-trigger"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("reset-trigger", types.YLeaf{"ResetTrigger", config.ResetTrigger})
    config.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", config.Delay})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
// This container defines state for ISIS Overload Bit reset
// triggers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // In the case that the system sets the overload bit on start, the system
    // should reset the bit (i.e., clear the overload bit) upon the specified
    // trigger. The type is one of the following: WAITFORSYSTEMWAITFORBGP.
    ResetTrigger interface{}

    // If a reset trigger is specified, the system should delay resetting the
    // overload bit for the specified number of seconds after the trigger occurs.
    // The type is interface{} with range: 0..65535. Units are seconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "reset-trigger"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("reset-trigger", types.YLeaf{"ResetTrigger", state.ResetTrigger})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
// This container defines Attached Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Attached Bit configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config

    // This container defines state for Link State PDU Bit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
}

func (attachedBit *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit) GetEntityData() *types.CommonEntityData {
    attachedBit.EntityData.YFilter = attachedBit.YFilter
    attachedBit.EntityData.YangName = "attached-bit"
    attachedBit.EntityData.BundleName = "openconfig"
    attachedBit.EntityData.ParentYangName = "lsp-bit"
    attachedBit.EntityData.SegmentPath = "attached-bit"
    attachedBit.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/" + attachedBit.EntityData.SegmentPath
    attachedBit.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    attachedBit.EntityData.NamespaceTable = openconfig.GetNamespaces()
    attachedBit.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    attachedBit.EntityData.Children = types.NewOrderedMap()
    attachedBit.EntityData.Children.Append("config", types.YChild{"Config", &attachedBit.Config})
    attachedBit.EntityData.Children.Append("state", types.YChild{"State", &attachedBit.State})
    attachedBit.EntityData.Leafs = types.NewOrderedMap()

    attachedBit.EntityData.YListKeys = []string {}

    return &(attachedBit.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config
// This container defines Attached Bit configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, if the attached bit is set on an incoming Level 1 IS-IS,
    // the local system ignores it. In this case the local system does not set a
    // default route to the L1L2 router advertising the PDU with the attached bit
    // set. The type is bool. The default value is false.
    IgnoreBit interface{}

    // When set to true, if the local IS acts as a L1L2 router, then the attached
    // bit is not advertised in locally generated PDUs. The type is bool. The
    // default value is false.
    SuppressBit interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "attached-bit"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("ignore-bit", types.YLeaf{"IgnoreBit", config.IgnoreBit})
    config.EntityData.Leafs.Append("suppress-bit", types.YLeaf{"SuppressBit", config.SuppressBit})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
// This container defines state for Link State PDU Bit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, if the attached bit is set on an incoming Level 1 IS-IS,
    // the local system ignores it. In this case the local system does not set a
    // default route to the L1L2 router advertising the PDU with the attached bit
    // set. The type is bool. The default value is false.
    IgnoreBit interface{}

    // When set to true, if the local IS acts as a L1L2 router, then the attached
    // bit is not advertised in locally generated PDUs. The type is bool. The
    // default value is false.
    SuppressBit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "attached-bit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ignore-bit", types.YLeaf{"IgnoreBit", state.IgnoreBit})
    state.EntityData.Leafs.Append("suppress-bit", types.YLeaf{"SuppressBit", state.SuppressBit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth
// This container defines ISIS Reference Bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Reference Bandwidth configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config

    // This container defines state for Reference Bandwidth.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State
}

func (referenceBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth) GetEntityData() *types.CommonEntityData {
    referenceBandwidth.EntityData.YFilter = referenceBandwidth.YFilter
    referenceBandwidth.EntityData.YangName = "reference-bandwidth"
    referenceBandwidth.EntityData.BundleName = "openconfig"
    referenceBandwidth.EntityData.ParentYangName = "global"
    referenceBandwidth.EntityData.SegmentPath = "reference-bandwidth"
    referenceBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + referenceBandwidth.EntityData.SegmentPath
    referenceBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    referenceBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    referenceBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    referenceBandwidth.EntityData.Children = types.NewOrderedMap()
    referenceBandwidth.EntityData.Children.Append("config", types.YChild{"Config", &referenceBandwidth.Config})
    referenceBandwidth.EntityData.Children.Append("state", types.YChild{"State", &referenceBandwidth.State})
    referenceBandwidth.EntityData.Leafs = types.NewOrderedMap()

    referenceBandwidth.EntityData.YListKeys = []string {}

    return &(referenceBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config
// This container defines Reference Bandwidth configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Reference Bandwidth value. The type is interface{} with range:
    // 0..4294967295.
    ReferenceBandwidth interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "reference-bandwidth"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("reference-bandwidth", types.YLeaf{"ReferenceBandwidth", config.ReferenceBandwidth})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State
// This container defines state for Reference Bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Reference Bandwidth value. The type is interface{} with range:
    // 0..4294967295.
    ReferenceBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_ReferenceBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "reference-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("reference-bandwidth", types.YLeaf{"ReferenceBandwidth", state.ReferenceBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr
// This container defines ISIS Non-Stop Routing.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Non-Stop-Routing configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config

    // This container defines state for Non-Stop-Routing.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
}

func (nsr *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "openconfig"
    nsr.EntityData.ParentYangName = "global"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nsr.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("config", types.YChild{"Config", &nsr.Config})
    nsr.EntityData.Children.Append("state", types.YChild{"State", &nsr.State})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config
// This container defines Non-Stop-Routing configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "nsr"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/nsr/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
// This container defines state for Non-Stop-Routing
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "nsr"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/nsr/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart
// This container defines ISIS Graceful Restart.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS graceful-restart configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config

    // This container defines state information for ISIS graceful-restart.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
}

func (gracefulRestart *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "openconfig"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = openconfig.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("config", types.YChild{"Config", &gracefulRestart.Config})
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config
// This container defines ISIS graceful-restart configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Enable or disable the IS-IS graceful restart helper function. When this
    // leaf is set, the local system does not utilise the IS-IS graceful restart
    // procedures during its own restart, but supports retaining forwarding
    // information during a remote speaker's restart. The type is bool.
    HelperOnly interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "graceful-restart"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", config.HelperOnly})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
// This container defines state information for ISIS graceful-restart.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Enable or disable the IS-IS graceful restart helper function. When this
    // leaf is set, the local system does not utilise the IS-IS graceful restart
    // procedures during its own restart, but supports retaining forwarding
    // information during a remote speaker's restart. The type is bool.
    HelperOnly interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("helper-only", types.YLeaf{"HelperOnly", state.HelperOnly})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers
// This container defines ISIS timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS global timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config

    // This container defines state information for ISIS global timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State

    // This container defines ISIS SPF timer settings.
    Spf NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf

    // This container defines ISIS LSP Generation.
    LspGeneration NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "global"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("config", types.YChild{"Config", &timers.Config})
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Children.Append("spf", types.YChild{"Spf", &timers.Spf})
    timers.EntityData.Children.Append("lsp-generation", types.YChild{"LspGeneration", &timers.LspGeneration})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config
// This container defines ISIS global timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds that specifies how long an LSP remains in LSDB
    // without being refreshed. The type is interface{} with range: 0..65535.
    // Units are seconds. The default value is 1200.
    LspLifetimeInterval interface{}

    // Time interval in seconds that specifies how often route topology that a
    // device originates is transmitted in LSPs. The type is interface{} with
    // range: 0..65535. Units are seconds.
    LspRefreshInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("lsp-lifetime-interval", types.YLeaf{"LspLifetimeInterval", config.LspLifetimeInterval})
    config.EntityData.Leafs.Append("lsp-refresh-interval", types.YLeaf{"LspRefreshInterval", config.LspRefreshInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State
// This container defines state information for ISIS global timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds that specifies how long an LSP remains in LSDB
    // without being refreshed. The type is interface{} with range: 0..65535.
    // Units are seconds. The default value is 1200.
    LspLifetimeInterval interface{}

    // Time interval in seconds that specifies how often route topology that a
    // device originates is transmitted in LSPs. The type is interface{} with
    // range: 0..65535. Units are seconds.
    LspRefreshInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-lifetime-interval", types.YLeaf{"LspLifetimeInterval", state.LspLifetimeInterval})
    state.EntityData.Leafs.Append("lsp-refresh-interval", types.YLeaf{"LspRefreshInterval", state.LspRefreshInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf
// This container defines ISIS SPF timer settings.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS SPF timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config

    // This container defines state information for ISIS SPF timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
}

func (spf *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf) GetEntityData() *types.CommonEntityData {
    spf.EntityData.YFilter = spf.YFilter
    spf.EntityData.YangName = "spf"
    spf.EntityData.BundleName = "openconfig"
    spf.EntityData.ParentYangName = "timers"
    spf.EntityData.SegmentPath = "spf"
    spf.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/" + spf.EntityData.SegmentPath
    spf.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    spf.EntityData.NamespaceTable = openconfig.GetNamespaces()
    spf.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    spf.EntityData.Children = types.NewOrderedMap()
    spf.EntityData.Children.Append("config", types.YChild{"Config", &spf.Config})
    spf.EntityData.Children.Append("state", types.YChild{"State", &spf.State})
    spf.EntityData.Leafs = types.NewOrderedMap()

    spf.EntityData.YListKeys = []string {}

    return &(spf.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config
// This container defines ISIS SPF timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Hold Down time interval in milliseconds. The type is interface{} with
    // range: 0..18446744073709551615. Units are milliseconds. The default value
    // is 5000.
    SpfHoldInterval interface{}

    // Time interval in milliseconds between the detection of topology change and
    // when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    SpfFirstInterval interface{}

    // Time interval in milliseconds between the first and second SPF calculation.
    // The type is interface{} with range: 0..18446744073709551615. Units are
    // milliseconds.
    SpfSecondInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "spf"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/spf/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("spf-hold-interval", types.YLeaf{"SpfHoldInterval", config.SpfHoldInterval})
    config.EntityData.Leafs.Append("spf-first-interval", types.YLeaf{"SpfFirstInterval", config.SpfFirstInterval})
    config.EntityData.Leafs.Append("spf-second-interval", types.YLeaf{"SpfSecondInterval", config.SpfSecondInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
// This container defines state information for ISIS SPF timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Hold Down time interval in milliseconds. The type is interface{} with
    // range: 0..18446744073709551615. Units are milliseconds. The default value
    // is 5000.
    SpfHoldInterval interface{}

    // Time interval in milliseconds between the detection of topology change and
    // when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    SpfFirstInterval interface{}

    // Time interval in milliseconds between the first and second SPF calculation.
    // The type is interface{} with range: 0..18446744073709551615. Units are
    // milliseconds.
    SpfSecondInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // AdaptiveTimerType.
    AdaptiveTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "spf"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/spf/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("spf-hold-interval", types.YLeaf{"SpfHoldInterval", state.SpfHoldInterval})
    state.EntityData.Leafs.Append("spf-first-interval", types.YLeaf{"SpfFirstInterval", state.SpfFirstInterval})
    state.EntityData.Leafs.Append("spf-second-interval", types.YLeaf{"SpfSecondInterval", state.SpfSecondInterval})
    state.EntityData.Leafs.Append("adaptive-timer", types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
// This container defines ISIS LSP Generation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS LSP Generation timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config

    // This container defines state information for ISIS LSP Generation timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
}

func (lspGeneration *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration) GetEntityData() *types.CommonEntityData {
    lspGeneration.EntityData.YFilter = lspGeneration.YFilter
    lspGeneration.EntityData.YangName = "lsp-generation"
    lspGeneration.EntityData.BundleName = "openconfig"
    lspGeneration.EntityData.ParentYangName = "timers"
    lspGeneration.EntityData.SegmentPath = "lsp-generation"
    lspGeneration.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/" + lspGeneration.EntityData.SegmentPath
    lspGeneration.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspGeneration.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspGeneration.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspGeneration.EntityData.Children = types.NewOrderedMap()
    lspGeneration.EntityData.Children.Append("config", types.YChild{"Config", &lspGeneration.Config})
    lspGeneration.EntityData.Children.Append("state", types.YChild{"State", &lspGeneration.State})
    lspGeneration.EntityData.Leafs = types.NewOrderedMap()

    lspGeneration.EntityData.YListKeys = []string {}

    return &(lspGeneration.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config
// This container defines ISIS LSP Generation timers
// configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in milliseconds that specifies max interval between two
    // consecutive occurrences of an LSP being generated. The type is interface{}
    // with range: 0..18446744073709551615. Units are milliseconds.
    LspMaxWaitInterval interface{}

    // Time interval in milliseconds that specifies the first LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspFirstWaitInterval interface{}

    // Time interval in milliseconds that specifies the millisecond LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspSecondWaitInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "lsp-generation"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("lsp-max-wait-interval", types.YLeaf{"LspMaxWaitInterval", config.LspMaxWaitInterval})
    config.EntityData.Leafs.Append("lsp-first-wait-interval", types.YLeaf{"LspFirstWaitInterval", config.LspFirstWaitInterval})
    config.EntityData.Leafs.Append("lsp-second-wait-interval", types.YLeaf{"LspSecondWaitInterval", config.LspSecondWaitInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
// This container defines state information for ISIS LSP Generation
// timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in milliseconds that specifies max interval between two
    // consecutive occurrences of an LSP being generated. The type is interface{}
    // with range: 0..18446744073709551615. Units are milliseconds.
    LspMaxWaitInterval interface{}

    // Time interval in milliseconds that specifies the first LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspFirstWaitInterval interface{}

    // Time interval in milliseconds that specifies the millisecond LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are milliseconds.
    LspSecondWaitInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // AdaptiveTimerType.
    AdaptiveTimer interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp-generation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-max-wait-interval", types.YLeaf{"LspMaxWaitInterval", state.LspMaxWaitInterval})
    state.EntityData.Leafs.Append("lsp-first-wait-interval", types.YLeaf{"LspFirstWaitInterval", state.LspFirstWaitInterval})
    state.EntityData.Leafs.Append("lsp-second-wait-interval", types.YLeaf{"LspSecondWaitInterval", state.LspSecondWaitInterval})
    state.EntityData.Leafs.Append("adaptive-timer", types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport
// This container defines ISIS transport.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS transport related configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config

    // This container defines state information for ISIS transport parameters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
}

func (transport *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "openconfig"
    transport.EntityData.ParentYangName = "global"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + transport.EntityData.SegmentPath
    transport.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    transport.EntityData.NamespaceTable = openconfig.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    transport.EntityData.Children = types.NewOrderedMap()
    transport.EntityData.Children.Append("config", types.YChild{"Config", &transport.Config})
    transport.EntityData.Children.Append("state", types.YChild{"State", &transport.State})
    transport.EntityData.Leafs = types.NewOrderedMap()

    transport.EntityData.YListKeys = []string {}

    return &(transport.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config
// This container defines ISIS transport related configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum size in bytes of an IS-IS Link state PDU. The type is
    // interface{} with range: 0..65535.
    LspMtuSize interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "transport"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/transport/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("lsp-mtu-size", types.YLeaf{"LspMtuSize", config.LspMtuSize})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
// This container defines state information for ISIS transport
// parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum size in bytes of an IS-IS Link state PDU. The type is
    // interface{} with range: 0..65535.
    LspMtuSize interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/transport/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-mtu-size", types.YLeaf{"LspMtuSize", state.LspMtuSize})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls
// Configuration and operational state relating to MPLS-related
// features in IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state relating to synchronisation between the
    // LDP and IS-IS.
    IgpLdpSync NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync
}

func (mpls *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "openconfig"
    mpls.EntityData.ParentYangName = "global"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mpls.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("igp-ldp-sync", types.YChild{"IgpLdpSync", &mpls.IgpLdpSync})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync
// Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS/IGP configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config

    // This container defines state information for ISIS/LDP Sync.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State
}

func (igpLdpSync *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync) GetEntityData() *types.CommonEntityData {
    igpLdpSync.EntityData.YFilter = igpLdpSync.YFilter
    igpLdpSync.EntityData.YangName = "igp-ldp-sync"
    igpLdpSync.EntityData.BundleName = "openconfig"
    igpLdpSync.EntityData.ParentYangName = "mpls"
    igpLdpSync.EntityData.SegmentPath = "igp-ldp-sync"
    igpLdpSync.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/mpls/" + igpLdpSync.EntityData.SegmentPath
    igpLdpSync.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    igpLdpSync.EntityData.NamespaceTable = openconfig.GetNamespaces()
    igpLdpSync.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    igpLdpSync.EntityData.Children = types.NewOrderedMap()
    igpLdpSync.EntityData.Children.Append("config", types.YChild{"Config", &igpLdpSync.Config})
    igpLdpSync.EntityData.Children.Append("state", types.YChild{"State", &igpLdpSync.State})
    igpLdpSync.EntityData.Leafs = types.NewOrderedMap()

    igpLdpSync.EntityData.YListKeys = []string {}

    return &(igpLdpSync.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config
// This container defines ISIS/IGP configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, rely on IGP/LDP synchronization. IGP cost for link is
    // maintained at max until LDP adjacencies are established . The type is bool.
    // The default value is true.
    Enabled interface{}

    // Specifies a delay, expressed in units of seconds, between the LDP session
    // to the IGP neighbor being established, and it being considered synchronized
    // by the IGP. The type is interface{} with range: 0..65535. Units are
    // seconds.
    PostSessionUpDelay interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "igp-ldp-sync"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("post-session-up-delay", types.YLeaf{"PostSessionUpDelay", config.PostSessionUpDelay})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State
// This container defines state information for ISIS/LDP Sync.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, rely on IGP/LDP synchronization. IGP cost for link is
    // maintained at max until LDP adjacencies are established . The type is bool.
    // The default value is true.
    Enabled interface{}

    // Specifies a delay, expressed in units of seconds, between the LDP session
    // to the IGP neighbor being established, and it being considered synchronized
    // by the IGP. The type is interface{} with range: 0..65535. Units are
    // seconds.
    PostSessionUpDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Mpls_IgpLdpSync_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "igp-ldp-sync"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("post-session-up-delay", types.YLeaf{"PostSessionUpDelay", state.PostSessionUpDelay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts
// This container defines IGP shortcuts configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi.
    Afi []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi
}

func (igpShortcuts *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts) GetEntityData() *types.CommonEntityData {
    igpShortcuts.EntityData.YFilter = igpShortcuts.YFilter
    igpShortcuts.EntityData.YangName = "igp-shortcuts"
    igpShortcuts.EntityData.BundleName = "openconfig"
    igpShortcuts.EntityData.ParentYangName = "global"
    igpShortcuts.EntityData.SegmentPath = "igp-shortcuts"
    igpShortcuts.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + igpShortcuts.EntityData.SegmentPath
    igpShortcuts.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    igpShortcuts.EntityData.NamespaceTable = openconfig.GetNamespaces()
    igpShortcuts.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    igpShortcuts.EntityData.Children = types.NewOrderedMap()
    igpShortcuts.EntityData.Children.Append("afi", types.YChild{"Afi", nil})
    for i := range igpShortcuts.Afi {
        igpShortcuts.EntityData.Children.Append(types.GetSegmentPath(igpShortcuts.Afi[i]), types.YChild{"Afi", igpShortcuts.Afi[i]})
    }
    igpShortcuts.EntityData.Leafs = types.NewOrderedMap()

    igpShortcuts.EntityData.YListKeys = []string {}

    return &(igpShortcuts.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi
// Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This container defines ISIS Shortcuts configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config

    // This container defines ISIS Shortcuts state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State
}

func (afi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi) GetEntityData() *types.CommonEntityData {
    afi.EntityData.YFilter = afi.YFilter
    afi.EntityData.YangName = "afi"
    afi.EntityData.BundleName = "openconfig"
    afi.EntityData.ParentYangName = "igp-shortcuts"
    afi.EntityData.SegmentPath = "afi" + types.AddKeyToken(afi.AfiName, "afi-name")
    afi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/" + afi.EntityData.SegmentPath
    afi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afi.EntityData.Children = types.NewOrderedMap()
    afi.EntityData.Children.Append("config", types.YChild{"Config", &afi.Config})
    afi.EntityData.Children.Append("state", types.YChild{"State", &afi.State})
    afi.EntityData.Leafs = types.NewOrderedMap()
    afi.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", afi.AfiName})

    afi.EntityData.YListKeys = []string {"AfiName"}

    return &(afi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config
// This container defines ISIS Shortcuts configuration parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Tunnel NH Type(RSVP,SR). When present it implies that nh-type shortcut is
    // enabled for a specified AFI. The type is slice of [u'PATHSETUPSR',
    // u'PATHSETUPRSVP', u'PATHSETUPLDP'].
    NhType []interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "afi"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", config.AfiName})
    config.EntityData.Leafs.Append("nh-type", types.YLeaf{"NhType", config.NhType})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State
// This container defines ISIS Shortcuts state information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Tunnel NH Type(RSVP,SR). When present it implies that nh-type shortcut is
    // enabled for a specified AFI. The type is slice of [u'PATHSETUPSR',
    // u'PATHSETUPRSVP', u'PATHSETUPLDP'].
    NhType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_IgpShortcuts_Afi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "afi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("nh-type", types.YLeaf{"NhType", state.NhType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af.
    Af []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "global"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children.Append(types.GetSegmentPath(afiSafi.Af[i]), types.YChild{"Af", afiSafi.Af[i]})
    }
    afiSafi.EntityData.Leafs = types.NewOrderedMap()

    afiSafi.EntityData.YListKeys = []string {}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State

    // This container defines multi-topology address-family configuration and
    // state information. ISIS TLV 235, 237.
    MultiTopology NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfiName, "afi-name") + types.AddKeyToken(af.SafiName, "safi-name")
    af.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("config", types.YChild{"Config", &af.Config})
    af.EntityData.Children.Append("state", types.YChild{"State", &af.State})
    af.EntityData.Children.Append("multi-topology", types.YChild{"MultiTopology", &af.MultiTopology})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", af.AfiName})
    af.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", af.SafiName})

    af.EntityData.YListKeys = []string {"AfiName", "SafiName"}

    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", config.AfiName})
    config.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", config.SafiName})
    config.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", config.Metric})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology
// This container defines multi-topology address-family configuration
// and state information. ISIS TLV 235, 237.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines AFI-SAFI multi-topology configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config

    // This container defines AFI-SAFI multi-topology state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State
}

func (multiTopology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "openconfig"
    multiTopology.EntityData.ParentYangName = "af"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/" + multiTopology.EntityData.SegmentPath
    multiTopology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    multiTopology.EntityData.Children = types.NewOrderedMap()
    multiTopology.EntityData.Children.Append("config", types.YChild{"Config", &multiTopology.Config})
    multiTopology.EntityData.Children.Append("state", types.YChild{"State", &multiTopology.State})
    multiTopology.EntityData.Leafs = types.NewOrderedMap()

    multiTopology.EntityData.YListKeys = []string {}

    return &(multiTopology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config
// This container defines AFI-SAFI multi-topology configuration
// parameters
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "multi-topology"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", config.AfiName})
    config.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", config.SafiName})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State
// This container defines AFI-SAFI multi-topology state information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafi_Af_MultiTopology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "multi-topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting
// Configuration and operational state relating to segment routing.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the configuration of segment routing
    // for the IGP instance.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config

    // Operational state parameters relating to segment routing for the IGP
    // instance.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
}

func (segmentRouting *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "global"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("config", types.YChild{"Config", &segmentRouting.Config})
    segmentRouting.EntityData.Children.Append("state", types.YChild{"State", &segmentRouting.State})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config
// Configuration parameters relating to the configuration of segment
// routing for the IGP instance.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the segment routing extensions are utilised
    // within the IGP. The type is bool.
    Enabled interface{}

    // A reference to the Segment Routing Global Block (SRGB) that is to be used
    // by this IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    Srgb interface{}

    // A reference to the Segment Routing Local Block (SRLB) that is to be
    // advertised by the IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    Srlb interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "segment-routing"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/segment-routing/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("srgb", types.YLeaf{"Srgb", config.Srgb})
    config.EntityData.Leafs.Append("srlb", types.YLeaf{"Srlb", config.Srlb})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
// Operational state parameters relating to segment routing for the
// IGP instance.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the segment routing extensions are utilised
    // within the IGP. The type is bool.
    Enabled interface{}

    // A reference to the Segment Routing Global Block (SRGB) that is to be used
    // by this IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config_LocalId
    Srgb interface{}

    // A reference to the Segment Routing Local Block (SRLB) that is to be
    // advertised by the IGP instance. The type is string. Refers to
    // network_instance.NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config_LocalId
    Srlb interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/segment-routing/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("srgb", types.YLeaf{"Srgb", state.Srgb})
    state.EntityData.Leafs.Append("srlb", types.YLeaf{"Srlb", state.Srlb})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies
// Policies to propagate prefixes between IS-IS levels.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policies relating to prefixes to be propagated from Level 1 to Level 2.
    Level1ToLevel2 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2

    // Policies relating to prefixes to be propagated from Level2 to Level 1.
    Level2ToLevel1 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
}

func (interLevelPropagationPolicies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies) GetEntityData() *types.CommonEntityData {
    interLevelPropagationPolicies.EntityData.YFilter = interLevelPropagationPolicies.YFilter
    interLevelPropagationPolicies.EntityData.YangName = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.BundleName = "openconfig"
    interLevelPropagationPolicies.EntityData.ParentYangName = "global"
    interLevelPropagationPolicies.EntityData.SegmentPath = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/" + interLevelPropagationPolicies.EntityData.SegmentPath
    interLevelPropagationPolicies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interLevelPropagationPolicies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interLevelPropagationPolicies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interLevelPropagationPolicies.EntityData.Children = types.NewOrderedMap()
    interLevelPropagationPolicies.EntityData.Children.Append("level1-to-level2", types.YChild{"Level1ToLevel2", &interLevelPropagationPolicies.Level1ToLevel2})
    interLevelPropagationPolicies.EntityData.Children.Append("level2-to-level1", types.YChild{"Level2ToLevel1", &interLevelPropagationPolicies.Level2ToLevel1})
    interLevelPropagationPolicies.EntityData.Leafs = types.NewOrderedMap()

    interLevelPropagationPolicies.EntityData.YListKeys = []string {}

    return &(interLevelPropagationPolicies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// Policies relating to prefixes to be propagated from
// Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the propagation of prefixes from IS-IS
    // Level 1 to Level 2.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 1 to Level 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
}

func (level1ToLevel2 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) GetEntityData() *types.CommonEntityData {
    level1ToLevel2.EntityData.YFilter = level1ToLevel2.YFilter
    level1ToLevel2.EntityData.YangName = "level1-to-level2"
    level1ToLevel2.EntityData.BundleName = "openconfig"
    level1ToLevel2.EntityData.ParentYangName = "inter-level-propagation-policies"
    level1ToLevel2.EntityData.SegmentPath = "level1-to-level2"
    level1ToLevel2.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/" + level1ToLevel2.EntityData.SegmentPath
    level1ToLevel2.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level1ToLevel2.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level1ToLevel2.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level1ToLevel2.EntityData.Children = types.NewOrderedMap()
    level1ToLevel2.EntityData.Children.Append("config", types.YChild{"Config", &level1ToLevel2.Config})
    level1ToLevel2.EntityData.Children.Append("state", types.YChild{"State", &level1ToLevel2.State})
    level1ToLevel2.EntityData.Leafs = types.NewOrderedMap()

    level1ToLevel2.EntityData.YListKeys = []string {}

    return &(level1ToLevel2.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config
// Configuration parameters relating to the propagation
// of prefixes from IS-IS Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level1-to-level2"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
// Operational state parameters relating to the
// propagation of prefixes from IS-IS Level 1 to Level 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level1-to-level2"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// Policies relating to prefixes to be propagated from
// Level2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to the propagation of prefixes from IS-IS
    // Level 2 to Level 1.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 2 to Level 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
}

func (level2ToLevel1 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) GetEntityData() *types.CommonEntityData {
    level2ToLevel1.EntityData.YFilter = level2ToLevel1.YFilter
    level2ToLevel1.EntityData.YangName = "level2-to-level1"
    level2ToLevel1.EntityData.BundleName = "openconfig"
    level2ToLevel1.EntityData.ParentYangName = "inter-level-propagation-policies"
    level2ToLevel1.EntityData.SegmentPath = "level2-to-level1"
    level2ToLevel1.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/" + level2ToLevel1.EntityData.SegmentPath
    level2ToLevel1.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level2ToLevel1.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level2ToLevel1.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level2ToLevel1.EntityData.Children = types.NewOrderedMap()
    level2ToLevel1.EntityData.Children.Append("config", types.YChild{"Config", &level2ToLevel1.Config})
    level2ToLevel1.EntityData.Children.Append("state", types.YChild{"State", &level2ToLevel1.State})
    level2ToLevel1.EntityData.Leafs = types.NewOrderedMap()

    level2ToLevel1.EntityData.YListKeys = []string {}

    return &(level2ToLevel1.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config
// Configuration parameters relating to the propagation
// of prefixes from IS-IS Level 2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level2-to-level1"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", config.ImportPolicy})
    config.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", config.DefaultImportPolicy})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
// Operational state parameters relating to the propagation
// of prefixes from IS-IS Level 2 to Level 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e.g., for the current peer group, neighbor,
    // address family, etc. The type is slice of string. Refers to
    // routing_policy.RoutingPolicy_PolicyDefinitions_PolicyDefinition_Name
    ImportPolicy []interface{}

    // explicitly set a default policy if no policy definition in the import
    // policy chain is satisfied. The type is DefaultPolicyType. The default value
    // is REJECT_ROUTE.
    DefaultImportPolicy interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level2-to-level1"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})
    state.EntityData.Leafs.Append("default-import-policy", types.YLeaf{"DefaultImportPolicy", state.DefaultImportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels
// This container defines ISIS level configuration and state
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level within the IS-IS protocol instance. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level.
    Level []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
}

func (levels *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "openconfig"
    levels.EntityData.ParentYangName = "isis"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/" + levels.EntityData.SegmentPath
    levels.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    levels.EntityData.NamespaceTable = openconfig.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    levels.EntityData.Children = types.NewOrderedMap()
    levels.EntityData.Children.Append("level", types.YChild{"Level", nil})
    for i := range levels.Level {
        levels.EntityData.Children.Append(types.GetSegmentPath(levels.Level[i]), types.YChild{"Level", levels.Level[i]})
    }
    levels.EntityData.Leafs = types.NewOrderedMap()

    levels.EntityData.YListKeys = []string {}

    return &(levels.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
// Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to ISIS level-number. The type is string
    // with range: 1..2. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config_LevelNumber
    LevelNumber interface{}

    // This container defines ISIS level based configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config

    // This container defines ISIS level state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State

    // This container defines ISIS system level counters.
    SystemLevelCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters

    // This container defines ISIS LSDB.
    LinkStateDatabase NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase

    // This container defines ISIS TE.
    TrafficEngineering NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering

    // This container defines Administrative Distance (or preference) assigned to
    // ISIS routes (level1 internal, level2 internal, level1 external, level2
    // external).
    RoutePreference NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference

    // This container defines ISIS authentication.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication
}

func (level *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "openconfig"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + types.AddKeyToken(level.LevelNumber, "level-number")
    level.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/" + level.EntityData.SegmentPath
    level.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level.EntityData.Children = types.NewOrderedMap()
    level.EntityData.Children.Append("config", types.YChild{"Config", &level.Config})
    level.EntityData.Children.Append("state", types.YChild{"State", &level.State})
    level.EntityData.Children.Append("system-level-counters", types.YChild{"SystemLevelCounters", &level.SystemLevelCounters})
    level.EntityData.Children.Append("link-state-database", types.YChild{"LinkStateDatabase", &level.LinkStateDatabase})
    level.EntityData.Children.Append("traffic-engineering", types.YChild{"TrafficEngineering", &level.TrafficEngineering})
    level.EntityData.Children.Append("route-preference", types.YChild{"RoutePreference", &level.RoutePreference})
    level.EntityData.Children.Append("authentication", types.YChild{"Authentication", &level.Authentication})
    level.EntityData.Leafs = types.NewOrderedMap()
    level.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", level.LevelNumber})

    level.EntityData.YListKeys = []string {"LevelNumber"}

    return &(level.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config
// This container defines ISIS level based configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // ISIS level number (level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS metric style types(narrow, wide). The type is MetricStyle.
    MetricStyle interface{}

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", config.LevelNumber})
    config.EntityData.Leafs.Append("metric-style", types.YLeaf{"MetricStyle", config.MetricStyle})
    config.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", config.AuthenticationCheck})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State
// This container defines ISIS level state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // ISIS level number (level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS metric style types(narrow, wide). The type is MetricStyle.
    MetricStyle interface{}

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool. The default
    // value is true.
    AuthenticationCheck interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", state.LevelNumber})
    state.EntityData.Leafs.Append("metric-style", types.YLeaf{"MetricStyle", state.MetricStyle})
    state.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", state.AuthenticationCheck})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters
// This container defines ISIS system level counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of system counters for the IS.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
}

func (systemLevelCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters) GetEntityData() *types.CommonEntityData {
    systemLevelCounters.EntityData.YFilter = systemLevelCounters.YFilter
    systemLevelCounters.EntityData.YangName = "system-level-counters"
    systemLevelCounters.EntityData.BundleName = "openconfig"
    systemLevelCounters.EntityData.ParentYangName = "level"
    systemLevelCounters.EntityData.SegmentPath = "system-level-counters"
    systemLevelCounters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + systemLevelCounters.EntityData.SegmentPath
    systemLevelCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    systemLevelCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    systemLevelCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    systemLevelCounters.EntityData.Children = types.NewOrderedMap()
    systemLevelCounters.EntityData.Children.Append("state", types.YChild{"State", &systemLevelCounters.State})
    systemLevelCounters.EntityData.Leafs = types.NewOrderedMap()

    systemLevelCounters.EntityData.YListKeys = []string {}

    return &(systemLevelCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
// The container defines a list of system counters for the IS.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of corrupted in-memory LSPs detected. LSPs received from the wire
    // with a bad checksum are silently dropped and not counted. LSPs received
    // from the wire with parse errors are counted by lsp-errors. MIB Entry:
    // SysCorrLSPs. The type is interface{} with range: 0..4294967295.
    CorruptedLsps interface{}

    // Number of times the database has become overloaded. MIB entry:
    // SysLSPL(Level)DbaseOloads. The type is interface{} with range:
    // 0..4294967295.
    DatabaseOverloads interface{}

    // Number of times a manual address has been dropped from area. MIB Entry:
    // SysManAddrDropFromAreas. The type is interface{} with range: 0..4294967295.
    ManualAddressDropFromAreas interface{}

    // The number of times the system has attempted to exceed the maximum sequence
    // number. MIB Entry: SysAttmptToExMaxSeqNums. The type is interface{} with
    // range: 0..4294967295.
    ExceedMaxSeqNums interface{}

    // Number of times a sequence number skip has occurred. MIB Entry:
    // SysSeqNumSkips. The type is interface{} with range: 0..4294967295.
    SeqNumSkips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. MIB Entry: isisSysOwnLSPPurges. The type is interface{}
    // with range: 0..4294967295.
    OwnLspPurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length from that of the receiving system. MIB Entry:
    // isisSysIDFieldLenMismatches. The type is interface{} with range:
    // 0..4294967295.
    IdLenMismatch interface{}

    // The number of partition changes detected. MIB Entry: SysPartChanges. The
    // type is interface{} with range: 0..4294967295.
    PartChanges interface{}

    // Number of times a PDU is received with a different value for
    // MaximumAreaAddresses from that of the receiving system. MIB Entry:
    // SysMaxAreaAddrMismatches. The type is interface{} with range:
    // 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // The number of authentication key failures. MIB Entry: SysAuthFails. The
    // type is interface{} with range: 0..4294967295.
    AuthFails interface{}

    // The number of times SPF was ran at this level. The type is interface{} with
    // range: 0..4294967295.
    SpfRuns interface{}

    // The number of authentication type mismatches. The type is interface{} with
    // range: 0..4294967295.
    AuthTypeFails interface{}

    // The number of received LSPs with errors. The type is interface{} with
    // range: 0..4294967295.
    LspErrors interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "system-level-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/system-level-counters/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("corrupted-lsps", types.YLeaf{"CorruptedLsps", state.CorruptedLsps})
    state.EntityData.Leafs.Append("database-overloads", types.YLeaf{"DatabaseOverloads", state.DatabaseOverloads})
    state.EntityData.Leafs.Append("manual-address-drop-from-areas", types.YLeaf{"ManualAddressDropFromAreas", state.ManualAddressDropFromAreas})
    state.EntityData.Leafs.Append("exceed-max-seq-nums", types.YLeaf{"ExceedMaxSeqNums", state.ExceedMaxSeqNums})
    state.EntityData.Leafs.Append("seq-num-skips", types.YLeaf{"SeqNumSkips", state.SeqNumSkips})
    state.EntityData.Leafs.Append("own-lsp-purges", types.YLeaf{"OwnLspPurges", state.OwnLspPurges})
    state.EntityData.Leafs.Append("id-len-mismatch", types.YLeaf{"IdLenMismatch", state.IdLenMismatch})
    state.EntityData.Leafs.Append("part-changes", types.YLeaf{"PartChanges", state.PartChanges})
    state.EntityData.Leafs.Append("max-area-address-mismatches", types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches})
    state.EntityData.Leafs.Append("auth-fails", types.YLeaf{"AuthFails", state.AuthFails})
    state.EntityData.Leafs.Append("spf-runs", types.YLeaf{"SpfRuns", state.SpfRuns})
    state.EntityData.Leafs.Append("auth-type-fails", types.YLeaf{"AuthTypeFails", state.AuthTypeFails})
    state.EntityData.Leafs.Append("lsp-errors", types.YLeaf{"LspErrors", state.LspErrors})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase
// This container defines ISIS LSDB.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes LSPs in the LSDB. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp.
    Lsp []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp
}

func (linkStateDatabase *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase) GetEntityData() *types.CommonEntityData {
    linkStateDatabase.EntityData.YFilter = linkStateDatabase.YFilter
    linkStateDatabase.EntityData.YangName = "link-state-database"
    linkStateDatabase.EntityData.BundleName = "openconfig"
    linkStateDatabase.EntityData.ParentYangName = "level"
    linkStateDatabase.EntityData.SegmentPath = "link-state-database"
    linkStateDatabase.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + linkStateDatabase.EntityData.SegmentPath
    linkStateDatabase.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkStateDatabase.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkStateDatabase.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkStateDatabase.EntityData.Children = types.NewOrderedMap()
    linkStateDatabase.EntityData.Children.Append("lsp", types.YChild{"Lsp", nil})
    for i := range linkStateDatabase.Lsp {
        linkStateDatabase.EntityData.Children.Append(types.GetSegmentPath(linkStateDatabase.Lsp[i]), types.YChild{"Lsp", linkStateDatabase.Lsp[i]})
    }
    linkStateDatabase.EntityData.Leafs = types.NewOrderedMap()

    linkStateDatabase.EntityData.YListKeys = []string {}

    return &(linkStateDatabase.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp
// This list describes LSPs in the LSDB.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the Link State PDU ID. The type is
    // string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9][0-9]-[0-9][0-9]$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_LspId
    LspId interface{}

    // State parameters of Link State PDU.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State

    // This container defines Link State PDU State TLVs.
    Tlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs

    // Surrounding container for a list of unknown TLVs.
    UndefinedTlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs
}

func (lsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "openconfig"
    lsp.EntityData.ParentYangName = "link-state-database"
    lsp.EntityData.SegmentPath = "lsp" + types.AddKeyToken(lsp.LspId, "lsp-id")
    lsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/" + lsp.EntityData.SegmentPath
    lsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lsp.EntityData.Children = types.NewOrderedMap()
    lsp.EntityData.Children.Append("state", types.YChild{"State", &lsp.State})
    lsp.EntityData.Children.Append("tlvs", types.YChild{"Tlvs", &lsp.Tlvs})
    lsp.EntityData.Children.Append("undefined-tlvs", types.YChild{"UndefinedTlvs", &lsp.UndefinedTlvs})
    lsp.EntityData.Leafs = types.NewOrderedMap()
    lsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", lsp.LspId})

    lsp.EntityData.YListKeys = []string {"LspId"}

    return &(lsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State
// State parameters of Link State PDU.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSP ID of the LSP. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9][0-9]-[0-9][0-9]$.
    LspId interface{}

    // Number of area addresses permitted for this ISs area. 0 indicates the IS
    // only supports three area addresses (by default). Any number inclusive of 1
    // and 254 indicates the number of areas allowed. The type is interface{} with
    // range: 0..255.
    MaximumAreaAddresses interface{}

    // PDU version. This is set to 1. The type is interface{} with range: 0..255.
    // The default value is 1.
    Version interface{}

    // PDU version2. This is set to 1. The type is interface{} with range: 0..255.
    // The default value is 1.
    Version2 interface{}

    // Length of the ID field of NSAP addresses and NETs used in this routing
    // domain. The type is interface{} with range: 0..255.
    IdLength interface{}

    // Link State PDU type. The type is PduType.
    PduType interface{}

    // Remaining lifetime in seconds before the LSP expiration. The type is
    // interface{} with range: 0..65535. Units are seconds.
    RemainingLifetime interface{}

    // Sequence number of the LSP. The type is interface{} with range:
    // 0..4294967295.
    SequenceNumber interface{}

    // Checksum of the LSP. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // Total length of the LSP. The type is interface{} with range: 0..65535.
    PduLength interface{}

    // LSP Type-Block flags. The type is slice of Flags.
    Flags []interface{}

    // Type of neighboring system. The type is interface{} with range: 1..2.
    IsType interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", state.LspId})
    state.EntityData.Leafs.Append("maximum-area-addresses", types.YLeaf{"MaximumAreaAddresses", state.MaximumAreaAddresses})
    state.EntityData.Leafs.Append("version", types.YLeaf{"Version", state.Version})
    state.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", state.Version2})
    state.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", state.IdLength})
    state.EntityData.Leafs.Append("pdu-type", types.YLeaf{"PduType", state.PduType})
    state.EntityData.Leafs.Append("remaining-lifetime", types.YLeaf{"RemainingLifetime", state.RemainingLifetime})
    state.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", state.SequenceNumber})
    state.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", state.Checksum})
    state.EntityData.Leafs.Append("pdu-length", types.YLeaf{"PduLength", state.PduLength})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("is-type", types.YLeaf{"IsType", state.IsType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags represents LSP Type-Block flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags string

const (
    // When set, the originator supports partition
    // repair.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_PARTITION_REPAIR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "PARTITION_REPAIR"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_ERROR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_ERROR"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_EXPENSE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_EXPENSE"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_DELAY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_DELAY"

    // When set, the originator is attached to another
    // area using the referred metric.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_ATTACHED_DEFAULT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "ATTACHED_DEFAULT"

    // When set, the originator is overloaded, and must
    // be avoided in path calculation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags_OVERLOAD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_Flags = "OVERLOAD"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType represents Link State PDU type.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType string

const (
    // This enum describes ISIS level 1 PDU.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType_LEVEL_1 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType = "LEVEL_1"

    // This enum describes ISIS level 2 PDU.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType_LEVEL_2 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_State_PduType = "LEVEL_2"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs
// This container defines Link State PDU State TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLV types in the LSDB for the specified LSP. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv.
    Tlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv
}

func (tlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs) GetEntityData() *types.CommonEntityData {
    tlvs.EntityData.YFilter = tlvs.YFilter
    tlvs.EntityData.YangName = "tlvs"
    tlvs.EntityData.BundleName = "openconfig"
    tlvs.EntityData.ParentYangName = "lsp"
    tlvs.EntityData.SegmentPath = "tlvs"
    tlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/" + tlvs.EntityData.SegmentPath
    tlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tlvs.EntityData.Children = types.NewOrderedMap()
    tlvs.EntityData.Children.Append("tlv", types.YChild{"Tlv", nil})
    for i := range tlvs.Tlv {
        tlvs.EntityData.Children.Append(types.GetSegmentPath(tlvs.Tlv[i]), types.YChild{"Tlv", tlvs.Tlv[i]})
    }
    tlvs.EntityData.Leafs = types.NewOrderedMap()

    tlvs.EntityData.YListKeys = []string {}

    return &(tlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv
// List of TLV types in the LSDB for the specified LSP.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the TLV's type. The type is one of
    // the following:
    // AREAADDRESSESMTISNEIGHBORATTRIBUTENLPIDMTIPV6REACHABILITYMTISNISNEIGHBORATTRIBUTEISISALIASIDIPV6SRLGIPV4TEROUTERIDMULTITOPOLOGYIPV6INTERFACEADDRESSESDYNAMICNAMEIPV4INTERFACEADDRESSESIPV6TEROUTERIDINSTANCEIDMTIPV4REACHABILITYEXTENDEDIPV4REACHABILITYPURGEOIIPV4EXTERNALREACHABILITYIPV6REACHABILITYIPV4SRLGIPV4INTERNALREACHABILITYROUTERCAPABILITYEXTENDEDISREACHABILITYAUTHENTICATIONIISNEIGHBORS.
    Type interface{}

    // Operational state parameters relating to the specified LSP.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State

    // This container defines TLV 1.
    AreaAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress

    // This container defines TLV 14 - the LSP Buffer Size TLV.
    LspBufferSize NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize

    // This container defines TLV 129.
    Nlpid NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid

    // This container defines TLV 137.
    Hostname NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname

    // This container defines TLV 132.
    Ipv4InterfaceAddresses NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses

    // This container defines TLV 232.
    Ipv6InterfaceAddresses NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses

    // This container defines TLV 134.
    Ipv4TeRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId

    // This container defines TLV 140.
    Ipv6TeRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId

    // This container defines ISIS Instance Identifier TLV.
    InstanceIds NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds

    // This container defines ISIS SRLG TLV 138.
    Ipv4Srlgs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs

    // This container defines ISIS SRLG TLV.
    Ipv6Srlgs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs

    // This container defines ISIS purge TLV.
    PurgeOi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi

    // This container defines router capabilities.
    RouterCapabilities NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities

    // This container describes list of ISIS neighbors and attributes.
    IsReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability

    // This container defines list of IPv4 internal reachability information.
    Ipv4InternalReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability

    // This container defines list of IPv4 external reachability information.
    Ipv4ExternalReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability

    // This container defines authentication information of the node.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication

    // This container defines list of ISIS extended reachability neighbors.
    ExtendedIsReachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability

    // This container defines list of IPv4 extended reachability information.
    ExtendedIpv4Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability

    // This container defines list of IPv6 reachability information.
    Ipv6Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability

    // This container defines the topology supported.
    MultiTopology NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology

    // This container defines list of ISIS topology neighbors for extended ISIS
    // LSP (multiple system IDs). .
    IsisNeighborAttribute NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute

    // This container defines the IS-Alias TLV which allows extension-capable ISs
    // to recognize the Originating System of an Extended LSP set. It identifies
    // the Normal system- id of the Originating System.
    IsAliasId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId

    // This container defines list of ISIS multi-topology neighbors.
    MtIsn NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn

    // This container defines list of ISIS multi-topology neighbors.
    MtIsisNeighborAttribute NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute

    // This container defines list of IPv4 reachability Information in
    // multi-topology environment.
    MtIpv4Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability

    // This container defines list of IPv6 reachability information in multi -
    // topology environment.
    MtIpv6Reachability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability
}

func (tlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv) GetEntityData() *types.CommonEntityData {
    tlv.EntityData.YFilter = tlv.YFilter
    tlv.EntityData.YangName = "tlv"
    tlv.EntityData.BundleName = "openconfig"
    tlv.EntityData.ParentYangName = "tlvs"
    tlv.EntityData.SegmentPath = "tlv" + types.AddKeyToken(tlv.Type, "type")
    tlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/" + tlv.EntityData.SegmentPath
    tlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tlv.EntityData.Children = types.NewOrderedMap()
    tlv.EntityData.Children.Append("state", types.YChild{"State", &tlv.State})
    tlv.EntityData.Children.Append("area-address", types.YChild{"AreaAddress", &tlv.AreaAddress})
    tlv.EntityData.Children.Append("lsp-buffer-size", types.YChild{"LspBufferSize", &tlv.LspBufferSize})
    tlv.EntityData.Children.Append("nlpid", types.YChild{"Nlpid", &tlv.Nlpid})
    tlv.EntityData.Children.Append("hostname", types.YChild{"Hostname", &tlv.Hostname})
    tlv.EntityData.Children.Append("ipv4-interface-addresses", types.YChild{"Ipv4InterfaceAddresses", &tlv.Ipv4InterfaceAddresses})
    tlv.EntityData.Children.Append("ipv6-interface-addresses", types.YChild{"Ipv6InterfaceAddresses", &tlv.Ipv6InterfaceAddresses})
    tlv.EntityData.Children.Append("ipv4-te-router-id", types.YChild{"Ipv4TeRouterId", &tlv.Ipv4TeRouterId})
    tlv.EntityData.Children.Append("ipv6-te-router-id", types.YChild{"Ipv6TeRouterId", &tlv.Ipv6TeRouterId})
    tlv.EntityData.Children.Append("instance-ids", types.YChild{"InstanceIds", &tlv.InstanceIds})
    tlv.EntityData.Children.Append("ipv4-srlgs", types.YChild{"Ipv4Srlgs", &tlv.Ipv4Srlgs})
    tlv.EntityData.Children.Append("ipv6-srlgs", types.YChild{"Ipv6Srlgs", &tlv.Ipv6Srlgs})
    tlv.EntityData.Children.Append("purge-oi", types.YChild{"PurgeOi", &tlv.PurgeOi})
    tlv.EntityData.Children.Append("router-capabilities", types.YChild{"RouterCapabilities", &tlv.RouterCapabilities})
    tlv.EntityData.Children.Append("is-reachability", types.YChild{"IsReachability", &tlv.IsReachability})
    tlv.EntityData.Children.Append("ipv4-internal-reachability", types.YChild{"Ipv4InternalReachability", &tlv.Ipv4InternalReachability})
    tlv.EntityData.Children.Append("ipv4-external-reachability", types.YChild{"Ipv4ExternalReachability", &tlv.Ipv4ExternalReachability})
    tlv.EntityData.Children.Append("authentication", types.YChild{"Authentication", &tlv.Authentication})
    tlv.EntityData.Children.Append("extended-is-reachability", types.YChild{"ExtendedIsReachability", &tlv.ExtendedIsReachability})
    tlv.EntityData.Children.Append("extended-ipv4-reachability", types.YChild{"ExtendedIpv4Reachability", &tlv.ExtendedIpv4Reachability})
    tlv.EntityData.Children.Append("ipv6-reachability", types.YChild{"Ipv6Reachability", &tlv.Ipv6Reachability})
    tlv.EntityData.Children.Append("multi-topology", types.YChild{"MultiTopology", &tlv.MultiTopology})
    tlv.EntityData.Children.Append("isis-neighbor-attribute", types.YChild{"IsisNeighborAttribute", &tlv.IsisNeighborAttribute})
    tlv.EntityData.Children.Append("is-alias-id", types.YChild{"IsAliasId", &tlv.IsAliasId})
    tlv.EntityData.Children.Append("mt-isn", types.YChild{"MtIsn", &tlv.MtIsn})
    tlv.EntityData.Children.Append("mt-isis-neighbor-attribute", types.YChild{"MtIsisNeighborAttribute", &tlv.MtIsisNeighborAttribute})
    tlv.EntityData.Children.Append("mt-ipv4-reachability", types.YChild{"MtIpv4Reachability", &tlv.MtIpv4Reachability})
    tlv.EntityData.Children.Append("mt-ipv6-reachability", types.YChild{"MtIpv6Reachability", &tlv.MtIpv6Reachability})
    tlv.EntityData.Leafs = types.NewOrderedMap()
    tlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", tlv.Type})

    tlv.EntityData.YListKeys = []string {"Type"}

    return &(tlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State
// Operational state parameters relating to the specified
// LSP
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of TLV being described. The type of TLV is expressed as a
    // canonical name. The type is one of the following:
    // AREAADDRESSESMTISNEIGHBORATTRIBUTENLPIDMTIPV6REACHABILITYMTISNISNEIGHBORATTRIBUTEISISALIASIDIPV6SRLGIPV4TEROUTERIDMULTITOPOLOGYIPV6INTERFACEADDRESSESDYNAMICNAMEIPV4INTERFACEADDRESSESIPV6TEROUTERIDINSTANCEIDMTIPV4REACHABILITYEXTENDEDIPV4REACHABILITYPURGEOIIPV4EXTERNALREACHABILITYIPV6REACHABILITYIPV4SRLGIPV4INTERNALREACHABILITYROUTERCAPABILITYEXTENDEDISREACHABILITYAUTHENTICATIONIISNEIGHBORS.
    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress
// This container defines TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State
}

func (areaAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress) GetEntityData() *types.CommonEntityData {
    areaAddress.EntityData.YFilter = areaAddress.YFilter
    areaAddress.EntityData.YangName = "area-address"
    areaAddress.EntityData.BundleName = "openconfig"
    areaAddress.EntityData.ParentYangName = "tlv"
    areaAddress.EntityData.SegmentPath = "area-address"
    areaAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + areaAddress.EntityData.SegmentPath
    areaAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    areaAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    areaAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    areaAddress.EntityData.Children = types.NewOrderedMap()
    areaAddress.EntityData.Children.Append("state", types.YChild{"State", &areaAddress.State})
    areaAddress.EntityData.Leafs = types.NewOrderedMap()

    areaAddress.EntityData.YListKeys = []string {}

    return &(areaAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State
// State parameters of ISIS TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area adress(es) of the IS. Set of manual area addresses of this IS. The
    // type is slice of string with pattern:
    // ^[0-9A-Fa-f]{2}\.([0-9A-Fa-f]{4}\.){0,3}$.
    AreaAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_AreaAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "area-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("area-address", types.YLeaf{"AreaAddress", state.AreaAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize
// This container defines TLV 14 - the LSP Buffer Size TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State
}

func (lspBufferSize *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize) GetEntityData() *types.CommonEntityData {
    lspBufferSize.EntityData.YFilter = lspBufferSize.YFilter
    lspBufferSize.EntityData.YangName = "lsp-buffer-size"
    lspBufferSize.EntityData.BundleName = "openconfig"
    lspBufferSize.EntityData.ParentYangName = "tlv"
    lspBufferSize.EntityData.SegmentPath = "lsp-buffer-size"
    lspBufferSize.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + lspBufferSize.EntityData.SegmentPath
    lspBufferSize.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lspBufferSize.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lspBufferSize.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lspBufferSize.EntityData.Children = types.NewOrderedMap()
    lspBufferSize.EntityData.Children.Append("state", types.YChild{"State", &lspBufferSize.State})
    lspBufferSize.EntityData.Leafs = types.NewOrderedMap()

    lspBufferSize.EntityData.YListKeys = []string {}

    return &(lspBufferSize.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State
// State parameters of TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum MTU that the advertising system can receive, expressed in
    // bytes. The type is interface{} with range: 0..65535. Units are bytes.
    BufferSize interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_LspBufferSize_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp-buffer-size"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/lsp-buffer-size/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("buffer-size", types.YLeaf{"BufferSize", state.BufferSize})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid
// This container defines TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 129.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State
}

func (nlpid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid) GetEntityData() *types.CommonEntityData {
    nlpid.EntityData.YFilter = nlpid.YFilter
    nlpid.EntityData.YangName = "nlpid"
    nlpid.EntityData.BundleName = "openconfig"
    nlpid.EntityData.ParentYangName = "tlv"
    nlpid.EntityData.SegmentPath = "nlpid"
    nlpid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + nlpid.EntityData.SegmentPath
    nlpid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    nlpid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    nlpid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    nlpid.EntityData.Children = types.NewOrderedMap()
    nlpid.EntityData.Children.Append("state", types.YChild{"State", &nlpid.State})
    nlpid.EntityData.Leafs = types.NewOrderedMap()

    nlpid.EntityData.YListKeys = []string {}

    return &(nlpid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State
// State parameters of ISIS TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol supported. IPv4 is defined as (0xcc) and IPv6 - (0x8e). The type
    // is slice of Nlpid_.
    Nlpid []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "nlpid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/nlpid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("nlpid", types.YLeaf{"Nlpid", state.Nlpid})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ represents (0x8e)
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ string

const (
    // IPv4 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid__IPV4 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ = "IPV4"

    // IPv6 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid__IPV6 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Nlpid_State_Nlpid_ = "IPV6"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname
// This container defines TLV 137.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 137.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State
}

func (hostname *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname) GetEntityData() *types.CommonEntityData {
    hostname.EntityData.YFilter = hostname.YFilter
    hostname.EntityData.YangName = "hostname"
    hostname.EntityData.BundleName = "openconfig"
    hostname.EntityData.ParentYangName = "tlv"
    hostname.EntityData.SegmentPath = "hostname"
    hostname.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + hostname.EntityData.SegmentPath
    hostname.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    hostname.EntityData.NamespaceTable = openconfig.GetNamespaces()
    hostname.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    hostname.EntityData.Children = types.NewOrderedMap()
    hostname.EntityData.Children.Append("state", types.YChild{"State", &hostname.State})
    hostname.EntityData.Leafs = types.NewOrderedMap()

    hostname.EntityData.YListKeys = []string {}

    return &(hostname.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State
// State parameters of ISIS TLV 137.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the node. The type is slice of string.
    Hostname []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Hostname_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hostname"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/hostname/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hostname", types.YLeaf{"Hostname", state.Hostname})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses
// This container defines TLV 132.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 132.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State
}

func (ipv4InterfaceAddresses *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddresses.EntityData.YFilter = ipv4InterfaceAddresses.YFilter
    ipv4InterfaceAddresses.EntityData.YangName = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddresses.EntityData.ParentYangName = "tlv"
    ipv4InterfaceAddresses.EntityData.SegmentPath = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv4InterfaceAddresses.EntityData.SegmentPath
    ipv4InterfaceAddresses.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddresses.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddresses.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddresses.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddresses.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddresses.State})
    ipv4InterfaceAddresses.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddresses.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddresses.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State
// State parameters of ISIS TLV 132.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 address(es) of the interface corresponding to the SNPA over which this
    // PDU is to be transmitted. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddresses []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-interface-addresses/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-addresses", types.YLeaf{"Ipv4InterfaceAddresses", state.Ipv4InterfaceAddresses})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses
// This container defines TLV 232.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 232.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State
}

func (ipv6InterfaceAddresses *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddresses.EntityData.YFilter = ipv6InterfaceAddresses.YFilter
    ipv6InterfaceAddresses.EntityData.YangName = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddresses.EntityData.ParentYangName = "tlv"
    ipv6InterfaceAddresses.EntityData.SegmentPath = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv6InterfaceAddresses.EntityData.SegmentPath
    ipv6InterfaceAddresses.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddresses.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddresses.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddresses.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddresses.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddresses.State})
    ipv6InterfaceAddresses.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddresses.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddresses.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State
// State parameters of ISIS TLV 232.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 interface addresses of the node.  MUST contain only the non-link-local
    // IPv6 addresses assigned to the IS. The type is slice of string with
    // pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddresses []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-addresses", types.YLeaf{"Ipv6InterfaceAddresses", state.Ipv6InterfaceAddresses})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId
// This container defines TLV 134.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 134.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State
}

func (ipv4TeRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv4TeRouterId.EntityData.YFilter = ipv4TeRouterId.YFilter
    ipv4TeRouterId.EntityData.YangName = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.BundleName = "openconfig"
    ipv4TeRouterId.EntityData.ParentYangName = "tlv"
    ipv4TeRouterId.EntityData.SegmentPath = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv4TeRouterId.EntityData.SegmentPath
    ipv4TeRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4TeRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4TeRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4TeRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4TeRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4TeRouterId.State})
    ipv4TeRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4TeRouterId.EntityData.YListKeys = []string {}

    return &(ipv4TeRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State
// State parameters of ISIS TLV 134.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Traffic Engineering router ID of the node. For traffic engineering, it
    // guarantees that we have a single stable address that can always be
    // referenced in a path that will be reachable from multiple hops away,
    // regardless of the state of the node's interfaces. The type is slice of
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouterId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId
// This container defines TLV 140.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 140.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State
}

func (ipv6TeRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv6TeRouterId.EntityData.YFilter = ipv6TeRouterId.YFilter
    ipv6TeRouterId.EntityData.YangName = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.BundleName = "openconfig"
    ipv6TeRouterId.EntityData.ParentYangName = "tlv"
    ipv6TeRouterId.EntityData.SegmentPath = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv6TeRouterId.EntityData.SegmentPath
    ipv6TeRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6TeRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6TeRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6TeRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6TeRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6TeRouterId.State})
    ipv6TeRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6TeRouterId.EntityData.YListKeys = []string {}

    return &(ipv6TeRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State
// State parameters of ISIS TLV 140.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Traffic Engineering router ID of the node. For traffic engineering, it
    // guarantees that we have a single stable address that can always be
    // referenced in a path that will be reachable from multiple hops away,
    // regardless of the state of the node's interfaces. The type is slice of
    // string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    RouterId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds
// This container defines ISIS Instance Identifier TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of instance IDs received within TLV 7 within an IS-IS LSP. In the
    // case that more than one instance of TLV 7 is included in the LSP, the
    // instance IDs specified within the instances are concatenated within this
    // list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId.
    InstanceId []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId
}

func (instanceIds *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds) GetEntityData() *types.CommonEntityData {
    instanceIds.EntityData.YFilter = instanceIds.YFilter
    instanceIds.EntityData.YangName = "instance-ids"
    instanceIds.EntityData.BundleName = "openconfig"
    instanceIds.EntityData.ParentYangName = "tlv"
    instanceIds.EntityData.SegmentPath = "instance-ids"
    instanceIds.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + instanceIds.EntityData.SegmentPath
    instanceIds.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    instanceIds.EntityData.NamespaceTable = openconfig.GetNamespaces()
    instanceIds.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    instanceIds.EntityData.Children = types.NewOrderedMap()
    instanceIds.EntityData.Children.Append("instance-id", types.YChild{"InstanceId", nil})
    for i := range instanceIds.InstanceId {
        instanceIds.EntityData.Children.Append(types.GetSegmentPath(instanceIds.InstanceId[i]), types.YChild{"InstanceId", instanceIds.InstanceId[i]})
    }
    instanceIds.EntityData.Leafs = types.NewOrderedMap()

    instanceIds.EntityData.YListKeys = []string {}

    return &(instanceIds.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId
// A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of TLV 7
// is included in the LSP, the instance IDs specified within
// the instances are concatenated within this list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique instance ID. The type is
    // string with range: 0..65535. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State_InstanceId
    InstanceId interface{}

    // State parameters of ISIS TLV 7.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State
}

func (instanceId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId) GetEntityData() *types.CommonEntityData {
    instanceId.EntityData.YFilter = instanceId.YFilter
    instanceId.EntityData.YangName = "instance-id"
    instanceId.EntityData.BundleName = "openconfig"
    instanceId.EntityData.ParentYangName = "instance-ids"
    instanceId.EntityData.SegmentPath = "instance-id" + types.AddKeyToken(instanceId.InstanceId, "instance-id")
    instanceId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/" + instanceId.EntityData.SegmentPath
    instanceId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    instanceId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    instanceId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    instanceId.EntityData.Children = types.NewOrderedMap()
    instanceId.EntityData.Children.Append("state", types.YChild{"State", &instanceId.State})
    instanceId.EntityData.Leafs = types.NewOrderedMap()
    instanceId.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instanceId.InstanceId})

    instanceId.EntityData.YListKeys = []string {"InstanceId"}

    return &(instanceId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State
// State parameters of ISIS TLV 7.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An Instance Identifier (IID) to uniquely identify an IS-IS instance. When
    // the IID = 0, the list of supported ITIDs MUST NOT be present. An IID-TLV
    // with IID = 0 MUST NOT appear in an SNP or LSP. When the TLV appears (with a
    // non-zero IID) in an SNP or LSP, exactly one ITID. MUST be present
    // indicating the topology with which the PDU is associated. If no ITIDs or
    // multiple ITIDs are present or the IID is zero, then the PDU MUST be
    // ignored. The type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Instance-Specific Topology Identifiers (ITIDs). The type is slice of
    // interface{} with range: 0..65535.
    TopologyId []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_InstanceIds_InstanceId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "instance-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", state.InstanceId})
    state.EntityData.Leafs.Append("topology-id", types.YLeaf{"TopologyId", state.TopologyId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs
// This container defines ISIS SRLG TLV 138.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv4 SRLG TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg.
    Ipv4Srlg []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg
}

func (ipv4Srlgs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs) GetEntityData() *types.CommonEntityData {
    ipv4Srlgs.EntityData.YFilter = ipv4Srlgs.YFilter
    ipv4Srlgs.EntityData.YangName = "ipv4-srlgs"
    ipv4Srlgs.EntityData.BundleName = "openconfig"
    ipv4Srlgs.EntityData.ParentYangName = "tlv"
    ipv4Srlgs.EntityData.SegmentPath = "ipv4-srlgs"
    ipv4Srlgs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv4Srlgs.EntityData.SegmentPath
    ipv4Srlgs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Srlgs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Srlgs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Srlgs.EntityData.Children = types.NewOrderedMap()
    ipv4Srlgs.EntityData.Children.Append("ipv4-srlg", types.YChild{"Ipv4Srlg", nil})
    for i := range ipv4Srlgs.Ipv4Srlg {
        ipv4Srlgs.EntityData.Children.Append(types.GetSegmentPath(ipv4Srlgs.Ipv4Srlg[i]), types.YChild{"Ipv4Srlg", ipv4Srlgs.Ipv4Srlg[i]})
    }
    ipv4Srlgs.EntityData.Leafs = types.NewOrderedMap()

    ipv4Srlgs.EntityData.YListKeys = []string {}

    return &(ipv4Srlgs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg
// Instance of the IPv4 SRLG TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of TLV 138. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 138.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State
}

func (ipv4Srlg *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg) GetEntityData() *types.CommonEntityData {
    ipv4Srlg.EntityData.YFilter = ipv4Srlg.YFilter
    ipv4Srlg.EntityData.YangName = "ipv4-srlg"
    ipv4Srlg.EntityData.BundleName = "openconfig"
    ipv4Srlg.EntityData.ParentYangName = "ipv4-srlgs"
    ipv4Srlg.EntityData.SegmentPath = "ipv4-srlg" + types.AddKeyToken(ipv4Srlg.InstanceNumber, "instance-number")
    ipv4Srlg.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/" + ipv4Srlg.EntityData.SegmentPath
    ipv4Srlg.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4Srlg.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4Srlg.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4Srlg.EntityData.Children = types.NewOrderedMap()
    ipv4Srlg.EntityData.Children.Append("state", types.YChild{"State", &ipv4Srlg.State})
    ipv4Srlg.EntityData.Leafs = types.NewOrderedMap()
    ipv4Srlg.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", ipv4Srlg.InstanceNumber})

    ipv4Srlg.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(ipv4Srlg.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State
// State parameters of TLV 138.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The instance identifier is synthesised by the system and may be
    // renumbered for the same SRLG definition in subsequent advertised LSPs if
    // (and only if) the entire list of SRLGs is replaced. The type is interface{}
    // with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // SRLG flags. The type is slice of Flags.
    Flags []interface{}

    // IPv4 interface address. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddress interface{}

    // IPv4 neighbor address. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4NeighborAddress interface{}

    // List of SRLG values. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlgValue []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", state.InstanceNumber})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("psn-number", types.YLeaf{"PsnNumber", state.PsnNumber})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})
    state.EntityData.Leafs.Append("srlg-value", types.YLeaf{"SrlgValue", state.SrlgValue})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags represents SRLG flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags string

const (
    // When set, the interface is numbered, whereas if
    // unset indicates that the interface is
    // unnumbered.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags_NUMBERED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4Srlgs_Ipv4Srlg_State_Flags = "NUMBERED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs
// This container defines ISIS SRLG TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv6 SRLG TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg.
    Ipv6Srlg []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg
}

func (ipv6Srlgs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs) GetEntityData() *types.CommonEntityData {
    ipv6Srlgs.EntityData.YFilter = ipv6Srlgs.YFilter
    ipv6Srlgs.EntityData.YangName = "ipv6-srlgs"
    ipv6Srlgs.EntityData.BundleName = "openconfig"
    ipv6Srlgs.EntityData.ParentYangName = "tlv"
    ipv6Srlgs.EntityData.SegmentPath = "ipv6-srlgs"
    ipv6Srlgs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv6Srlgs.EntityData.SegmentPath
    ipv6Srlgs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Srlgs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Srlgs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Srlgs.EntityData.Children = types.NewOrderedMap()
    ipv6Srlgs.EntityData.Children.Append("ipv6-srlg", types.YChild{"Ipv6Srlg", nil})
    for i := range ipv6Srlgs.Ipv6Srlg {
        ipv6Srlgs.EntityData.Children.Append(types.GetSegmentPath(ipv6Srlgs.Ipv6Srlg[i]), types.YChild{"Ipv6Srlg", ipv6Srlgs.Ipv6Srlg[i]})
    }
    ipv6Srlgs.EntityData.Leafs = types.NewOrderedMap()

    ipv6Srlgs.EntityData.YListKeys = []string {}

    return &(ipv6Srlgs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg
// Instance of the IPv6 SRLG TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of the IPv6
    // Shared Risk Link Group (SRLG) TLV. The type is string with range:
    // 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 139.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State
}

func (ipv6Srlg *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg) GetEntityData() *types.CommonEntityData {
    ipv6Srlg.EntityData.YFilter = ipv6Srlg.YFilter
    ipv6Srlg.EntityData.YangName = "ipv6-srlg"
    ipv6Srlg.EntityData.BundleName = "openconfig"
    ipv6Srlg.EntityData.ParentYangName = "ipv6-srlgs"
    ipv6Srlg.EntityData.SegmentPath = "ipv6-srlg" + types.AddKeyToken(ipv6Srlg.InstanceNumber, "instance-number")
    ipv6Srlg.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/" + ipv6Srlg.EntityData.SegmentPath
    ipv6Srlg.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Srlg.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Srlg.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Srlg.EntityData.Children = types.NewOrderedMap()
    ipv6Srlg.EntityData.Children.Append("state", types.YChild{"State", &ipv6Srlg.State})
    ipv6Srlg.EntityData.Leafs = types.NewOrderedMap()
    ipv6Srlg.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", ipv6Srlg.InstanceNumber})

    ipv6Srlg.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(ipv6Srlg.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State
// State parameters of TLV 139.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The instance identifier is synthesised by the system and may be
    // renumbered for the same SRLG definition in subsequent advertised LSPs if
    // (and only if) the entire list of SRLGs is replaced. The type is interface{}
    // with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // IPv6 SRLG flags. The type is slice of Flags.
    Flags []interface{}

    // IPv6 interface address or Link Local Identifier. The type is string with
    // pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddress interface{}

    // IPv6 neighbor address or Link Remote Identifier. The type is string with
    // pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6NeighborAddress interface{}

    // SRLG values. The type is slice of interface{} with range: 0..4294967295.
    SrlgValue []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", state.InstanceNumber})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("psn-number", types.YLeaf{"PsnNumber", state.PsnNumber})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})
    state.EntityData.Leafs.Append("srlg-value", types.YLeaf{"SrlgValue", state.SrlgValue})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags represents IPv6 SRLG flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags string

const (
    // When set, the IPv6 neighbour address is included,
    // whereas if unset, it is omitted
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags_NA NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Srlgs_Ipv6Srlg_State_Flags = "NA"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi
// This container defines ISIS purge TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State
}

func (purgeOi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi) GetEntityData() *types.CommonEntityData {
    purgeOi.EntityData.YFilter = purgeOi.YFilter
    purgeOi.EntityData.YangName = "purge-oi"
    purgeOi.EntityData.BundleName = "openconfig"
    purgeOi.EntityData.ParentYangName = "tlv"
    purgeOi.EntityData.SegmentPath = "purge-oi"
    purgeOi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + purgeOi.EntityData.SegmentPath
    purgeOi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    purgeOi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    purgeOi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    purgeOi.EntityData.Children = types.NewOrderedMap()
    purgeOi.EntityData.Children.Append("state", types.YChild{"State", &purgeOi.State})
    purgeOi.EntityData.Leafs = types.NewOrderedMap()

    purgeOi.EntityData.YListKeys = []string {}

    return &(purgeOi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State
// State parameters of TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of system IDs carried in this TLV. The type is interface{} with
    // range: 0..255.
    SystemIdCount interface{}

    // System ID of the Intermediate System that inserted this TLV. The type is
    // string with pattern: ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SourceSystemId interface{}

    // System ID of the Intermediate System from which the purge was received. The
    // type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    ReceivedSystemId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_PurgeOi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "purge-oi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/purge-oi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id-count", types.YLeaf{"SystemIdCount", state.SystemIdCount})
    state.EntityData.Leafs.Append("source-system-id", types.YLeaf{"SourceSystemId", state.SourceSystemId})
    state.EntityData.Leafs.Append("received-system-id", types.YLeaf{"ReceivedSystemId", state.ReceivedSystemId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities
// This container defines router capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IS Router capabilities. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability.
    RouterCapability []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability
}

func (routerCapabilities *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities) GetEntityData() *types.CommonEntityData {
    routerCapabilities.EntityData.YFilter = routerCapabilities.YFilter
    routerCapabilities.EntityData.YangName = "router-capabilities"
    routerCapabilities.EntityData.BundleName = "openconfig"
    routerCapabilities.EntityData.ParentYangName = "tlv"
    routerCapabilities.EntityData.SegmentPath = "router-capabilities"
    routerCapabilities.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + routerCapabilities.EntityData.SegmentPath
    routerCapabilities.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routerCapabilities.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routerCapabilities.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routerCapabilities.EntityData.Children = types.NewOrderedMap()
    routerCapabilities.EntityData.Children.Append("router-capability", types.YChild{"RouterCapability", nil})
    for i := range routerCapabilities.RouterCapability {
        routerCapabilities.EntityData.Children.Append(types.GetSegmentPath(routerCapabilities.RouterCapability[i]), types.YChild{"RouterCapability", routerCapabilities.RouterCapability[i]})
    }
    routerCapabilities.EntityData.Leafs = types.NewOrderedMap()

    routerCapabilities.EntityData.YListKeys = []string {}

    return &(routerCapabilities.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability
// This list describes IS Router capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of the router
    // capability TLV. The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_InstanceNumber
    InstanceNumber interface{}

    // State parameters of TLV 242.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State

    // This container describes router capability TLV sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs
}

func (routerCapability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability) GetEntityData() *types.CommonEntityData {
    routerCapability.EntityData.YFilter = routerCapability.YFilter
    routerCapability.EntityData.YangName = "router-capability"
    routerCapability.EntityData.BundleName = "openconfig"
    routerCapability.EntityData.ParentYangName = "router-capabilities"
    routerCapability.EntityData.SegmentPath = "router-capability" + types.AddKeyToken(routerCapability.InstanceNumber, "instance-number")
    routerCapability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/" + routerCapability.EntityData.SegmentPath
    routerCapability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routerCapability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routerCapability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routerCapability.EntityData.Children = types.NewOrderedMap()
    routerCapability.EntityData.Children.Append("state", types.YChild{"State", &routerCapability.State})
    routerCapability.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &routerCapability.Subtlvs})
    routerCapability.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &routerCapability.UndefinedSubtlvs})
    routerCapability.EntityData.Leafs = types.NewOrderedMap()
    routerCapability.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", routerCapability.InstanceNumber})

    routerCapability.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(routerCapability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State
// State parameters of TLV 242.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique instance number for the instance of the router capabilities TLV.
    // The instance number should be autogenerated by the producer of the data and
    // may be renumbered if the entire LSP contents are replaced in subsequent
    // advertisements. The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // IPv4 router-id. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    RouterId interface{}

    // Router capability flags. The type is slice of Flags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "router-capability"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", state.InstanceNumber})
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags represents Router capability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags string

const (
    // When the S bit is set(1), the IS - IS Router
    // CAPABILITY TLV MUST be flooded across the entire
    // routing domain. When the S bit is not set(0),
    // the TLV MUST NOT be leaked between levels . This
    // bit MUST NOT be altered during the TLV
    // leaking.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags_FLOOD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags = "FLOOD"

    // When the IS-IS Router CAPABILITY TLV is leaked
    // from level - 2 to level-1, the Down bit MUST be
    // set. Otherwise, this bit MUST be clear. IS - IS
    // Router capability TLVs with the Down bit set
    // MUST NOT be leaked from level - 1 to level-2.
    // This is to prevent TLV looping.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags_DOWN NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_State_Flags = "DOWN"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs
// This container describes router capability TLV
// sub-TLVs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "router-capability"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified
// TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters of IS Router Capabilities.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State

    // This container defines SR algorithm sub-TLV 19.
    SegmentRoutingAlgorithms NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms

    // This container defines SR Capability sub-TLV 2.
    SegmentRoutingCapability NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("segment-routing-algorithms", types.YChild{"SegmentRoutingAlgorithms", &subtlv.SegmentRoutingAlgorithms})
    subtlv.EntityData.Children.Append("segment-routing-capability", types.YChild{"SegmentRoutingCapability", &subtlv.SegmentRoutingCapability})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State
// State parameters of IS Router Capabilities
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms
// This container defines SR algorithm sub-TLV 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the segment routing algorithsm advertised within the TLV. The type
    // is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm.
    SegmentRoutingAlgorithm []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
}

func (segmentRoutingAlgorithms *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithms.EntityData.YFilter = segmentRoutingAlgorithms.YFilter
    segmentRoutingAlgorithms.EntityData.YangName = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.BundleName = "openconfig"
    segmentRoutingAlgorithms.EntityData.ParentYangName = "subtlv"
    segmentRoutingAlgorithms.EntityData.SegmentPath = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/" + segmentRoutingAlgorithms.EntityData.SegmentPath
    segmentRoutingAlgorithms.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingAlgorithms.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingAlgorithms.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingAlgorithms.EntityData.Children = types.NewOrderedMap()
    segmentRoutingAlgorithms.EntityData.Children.Append("segment-routing-algorithm", types.YChild{"SegmentRoutingAlgorithm", nil})
    for i := range segmentRoutingAlgorithms.SegmentRoutingAlgorithm {
        segmentRoutingAlgorithms.EntityData.Children.Append(types.GetSegmentPath(segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i]), types.YChild{"SegmentRoutingAlgorithm", segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i]})
    }
    segmentRoutingAlgorithms.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutingAlgorithms.EntityData.YListKeys = []string {}

    return &(segmentRoutingAlgorithms.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
// List of the segment routing algorithsm advertised within the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the SR algorithm that the subTLV
    // describes. The type is Algorithm. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm
    Algorithm interface{}

    // State parameters of sub-TLV 19 - Segment Routing Algorithm.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
}

func (segmentRoutingAlgorithm *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithm.EntityData.YFilter = segmentRoutingAlgorithm.YFilter
    segmentRoutingAlgorithm.EntityData.YangName = "segment-routing-algorithm"
    segmentRoutingAlgorithm.EntityData.BundleName = "openconfig"
    segmentRoutingAlgorithm.EntityData.ParentYangName = "segment-routing-algorithms"
    segmentRoutingAlgorithm.EntityData.SegmentPath = "segment-routing-algorithm" + types.AddKeyToken(segmentRoutingAlgorithm.Algorithm, "algorithm")
    segmentRoutingAlgorithm.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-algorithms/" + segmentRoutingAlgorithm.EntityData.SegmentPath
    segmentRoutingAlgorithm.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingAlgorithm.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingAlgorithm.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingAlgorithm.EntityData.Children = types.NewOrderedMap()
    segmentRoutingAlgorithm.EntityData.Children.Append("state", types.YChild{"State", &segmentRoutingAlgorithm.State})
    segmentRoutingAlgorithm.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingAlgorithm.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", segmentRoutingAlgorithm.Algorithm})

    segmentRoutingAlgorithm.EntityData.YListKeys = []string {"Algorithm"}

    return &(segmentRoutingAlgorithm.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
// State parameters of sub-TLV 19 - Segment
// Routing Algorithm.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Segment Routing algorithm that is described by the TLV. The type is
    // Algorithm.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing-algorithm"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-algorithms/segment-routing-algorithm/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm represents by the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm string

const (
    // Shortest Path First (SPF) algorithm based
    // on link metric.  This is the well-known
    // shortest path algorithm as computed by
    // the IS-IS Decision process.  Consistent
    // with the deployed practice for link-
    // state protocols, algorithm 0 permits any
    // node to overwrite the SPF
    // path with a different path based on local
    // policy.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm_SPF NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm = "SPF"

    // Strict Shortest Path First (SPF)
    // algorithm based on link metric. The
    // algorithm is identical to algorithm 0 but
    // algorithm 1 requires that all nodes
    // along the path will honor the SPF routing
    // decision. Local policy MUST NOT alter the
    // forwarding decision computed by algorithm
    // 1 at the node claiming to support
    // algorithm 1.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm_STRICT_SPF NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State_Algorithm = "STRICT_SPF"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
// This container defines SR Capability sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS SR Router Capability.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State

    // SRGB Descriptors included within the SR capability sub-TLV.
    SrgbDescriptors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
}

func (segmentRoutingCapability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability) GetEntityData() *types.CommonEntityData {
    segmentRoutingCapability.EntityData.YFilter = segmentRoutingCapability.YFilter
    segmentRoutingCapability.EntityData.YangName = "segment-routing-capability"
    segmentRoutingCapability.EntityData.BundleName = "openconfig"
    segmentRoutingCapability.EntityData.ParentYangName = "subtlv"
    segmentRoutingCapability.EntityData.SegmentPath = "segment-routing-capability"
    segmentRoutingCapability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/" + segmentRoutingCapability.EntityData.SegmentPath
    segmentRoutingCapability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRoutingCapability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRoutingCapability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRoutingCapability.EntityData.Children = types.NewOrderedMap()
    segmentRoutingCapability.EntityData.Children.Append("state", types.YChild{"State", &segmentRoutingCapability.State})
    segmentRoutingCapability.EntityData.Children.Append("srgb-descriptors", types.YChild{"SrgbDescriptors", &segmentRoutingCapability.SrgbDescriptors})
    segmentRoutingCapability.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutingCapability.EntityData.YListKeys = []string {}

    return &(segmentRoutingCapability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State
// State parameters of IS SR Router Capability
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Capability Flags. The type is slice of Flags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "segment-routing-capability"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags represents Segment Routing Capability Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags string

const (
    // When set, the router is capable of
    // processing SR MPLS encapsulated IPv4
    // packets on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV4_MPLS NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV4_MPLS"

    // When set, the router is capable of
    // processing SR MPLS encapsulated IPv6
    // packets on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV6_MPLS NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV6_MPLS"

    // When set, the router is capable of
    // processing the IPv6 Segment Routing Header
    // on all interfaces.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags_IPV6_SR NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State_Flags = "IPV6_SR"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
// SRGB Descriptors included within the SR
// capability sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Descriptor entry within the SR capabilty sub-TLV. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor.
    SrgbDescriptor []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
}

func (srgbDescriptors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors) GetEntityData() *types.CommonEntityData {
    srgbDescriptors.EntityData.YFilter = srgbDescriptors.YFilter
    srgbDescriptors.EntityData.YangName = "srgb-descriptors"
    srgbDescriptors.EntityData.BundleName = "openconfig"
    srgbDescriptors.EntityData.ParentYangName = "segment-routing-capability"
    srgbDescriptors.EntityData.SegmentPath = "srgb-descriptors"
    srgbDescriptors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/" + srgbDescriptors.EntityData.SegmentPath
    srgbDescriptors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbDescriptors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbDescriptors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbDescriptors.EntityData.Children = types.NewOrderedMap()
    srgbDescriptors.EntityData.Children.Append("srgb-descriptor", types.YChild{"SrgbDescriptor", nil})
    for i := range srgbDescriptors.SrgbDescriptor {
        types.SetYListKey(srgbDescriptors.SrgbDescriptor[i], i)
        srgbDescriptors.EntityData.Children.Append(types.GetSegmentPath(srgbDescriptors.SrgbDescriptor[i]), types.YChild{"SrgbDescriptor", srgbDescriptors.SrgbDescriptor[i]})
    }
    srgbDescriptors.EntityData.Leafs = types.NewOrderedMap()

    srgbDescriptors.EntityData.YListKeys = []string {}

    return &(srgbDescriptors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
// Descriptor entry within the SR capabilty
// sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // State parameters of the SR range.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
}

func (srgbDescriptor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor) GetEntityData() *types.CommonEntityData {
    srgbDescriptor.EntityData.YFilter = srgbDescriptor.YFilter
    srgbDescriptor.EntityData.YangName = "srgb-descriptor"
    srgbDescriptor.EntityData.BundleName = "openconfig"
    srgbDescriptor.EntityData.ParentYangName = "srgb-descriptors"
    srgbDescriptor.EntityData.SegmentPath = "srgb-descriptor" + types.AddNoKeyToken(srgbDescriptor)
    srgbDescriptor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/" + srgbDescriptor.EntityData.SegmentPath
    srgbDescriptor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    srgbDescriptor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    srgbDescriptor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    srgbDescriptor.EntityData.Children = types.NewOrderedMap()
    srgbDescriptor.EntityData.Children.Append("state", types.YChild{"State", &srgbDescriptor.State})
    srgbDescriptor.EntityData.Leafs = types.NewOrderedMap()

    srgbDescriptor.EntityData.YListKeys = []string {}

    return &(srgbDescriptor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
// State parameters of the SR range
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SRGB elements. The range value MUST be greater than 0. The type
    // is interface{} with range: 0..4294967295.
    Range interface{}

    // The first value of the SRGB when expressed as an MPLS label. The type is
    // one of the following types: int with range: 16..1048575, or enumeration
    // MplsLabel.
    Label interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "srgb-descriptor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("range", types.YLeaf{"Range", state.Range})
    state.EntityData.Leafs.Append("label", types.YLeaf{"Label", state.Label})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "router-capability"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/router-capability/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability
// This container describes list of ISIS neighbors and
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors
}

func (isReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability) GetEntityData() *types.CommonEntityData {
    isReachability.EntityData.YFilter = isReachability.YFilter
    isReachability.EntityData.YangName = "is-reachability"
    isReachability.EntityData.BundleName = "openconfig"
    isReachability.EntityData.ParentYangName = "tlv"
    isReachability.EntityData.SegmentPath = "is-reachability"
    isReachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + isReachability.EntityData.SegmentPath
    isReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isReachability.EntityData.Children = types.NewOrderedMap()
    isReachability.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &isReachability.Neighbors})
    isReachability.EntityData.Leafs = types.NewOrderedMap()

    isReachability.EntityData.YListKeys = []string {}

    return &(isReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS reachability neighbor attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors.
    Neighbors []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "is-reachability"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", nil})
    for i := range neighbors.Neighbors {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbors[i]), types.YChild{"Neighbors", neighbors.Neighbors[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors
// IS reachability neighbor attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the system ID of the neighbor. The
    // type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_State_SystemId
    SystemId interface{}

    // State parameters of IS standard neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "neighbors"
    neighbors.EntityData.SegmentPath = "neighbors" + types.AddKeyToken(neighbors.SystemId, "system-id")
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("state", types.YChild{"State", &neighbors.State})
    neighbors.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &neighbors.DefaultMetric})
    neighbors.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &neighbors.DelayMetric})
    neighbors.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &neighbors.ExpenseMetric})
    neighbors.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &neighbors.ErrorMetric})
    neighbors.EntityData.Leafs = types.NewOrderedMap()
    neighbors.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbors.SystemId})

    neighbors.EntityData.YListKeys = []string {"SystemId"}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_State
// State parameters of IS standard neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-ID of IS neighbor. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbors"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "neighbors"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "neighbors"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "neighbors"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "neighbors"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsReachability_Neighbors_Neighbors_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbors/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability
// This container defines list of IPv4 internal reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes
}

func (ipv4InternalReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4InternalReachability.EntityData.YFilter = ipv4InternalReachability.YFilter
    ipv4InternalReachability.EntityData.YangName = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.BundleName = "openconfig"
    ipv4InternalReachability.EntityData.ParentYangName = "tlv"
    ipv4InternalReachability.EntityData.SegmentPath = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv4InternalReachability.EntityData.SegmentPath
    ipv4InternalReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InternalReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InternalReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InternalReachability.EntityData.Children = types.NewOrderedMap()
    ipv4InternalReachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &ipv4InternalReachability.Prefixes})
    ipv4InternalReachability.EntityData.Leafs = types.NewOrderedMap()

    ipv4InternalReachability.EntityData.YListKeys = []string {}

    return &(ipv4InternalReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes and internal reachability attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes.
    Prefixes []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv4-internal-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", nil})
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefixes[i]), types.YChild{"Prefixes", prefixes.Prefixes[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes
// IPv4 prefixes and internal reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix. The type is string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_State_Prefix
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "prefixes"
    prefixes.EntityData.SegmentPath = "prefixes" + types.AddKeyToken(prefixes.Prefix, "prefix")
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("state", types.YChild{"State", &prefixes.State})
    prefixes.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &prefixes.DefaultMetric})
    prefixes.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &prefixes.DelayMetric})
    prefixes.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &prefixes.ExpenseMetric})
    prefixes.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &prefixes.ErrorMetric})
    prefixes.EntityData.Leafs = types.NewOrderedMap()
    prefixes.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixes.Prefix})

    prefixes.EntityData.YListKeys = []string {"Prefix"}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_State
// State parameters of IPv4 standard prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string with
    // pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "prefixes"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "prefixes"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "prefixes"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "prefixes"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4InternalReachability_Prefixes_Prefixes_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefixes/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability
// This container defines list of IPv4 external reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes
}

func (ipv4ExternalReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4ExternalReachability.EntityData.YFilter = ipv4ExternalReachability.YFilter
    ipv4ExternalReachability.EntityData.YangName = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.BundleName = "openconfig"
    ipv4ExternalReachability.EntityData.ParentYangName = "tlv"
    ipv4ExternalReachability.EntityData.SegmentPath = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv4ExternalReachability.EntityData.SegmentPath
    ipv4ExternalReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4ExternalReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4ExternalReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4ExternalReachability.EntityData.Children = types.NewOrderedMap()
    ipv4ExternalReachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &ipv4ExternalReachability.Prefixes})
    ipv4ExternalReachability.EntityData.Leafs = types.NewOrderedMap()

    ipv4ExternalReachability.EntityData.YListKeys = []string {}

    return &(ipv4ExternalReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 external prefixes and reachability attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes.
    Prefixes []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv4-external-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", nil})
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefixes[i]), types.YChild{"Prefixes", prefixes.Prefixes[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes
// IPv4 external prefixes and reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix. The type is string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_State_Prefix
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_State

    // This container defines ISIS Default Metric.
    DefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "prefixes"
    prefixes.EntityData.SegmentPath = "prefixes" + types.AddKeyToken(prefixes.Prefix, "prefix")
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("state", types.YChild{"State", &prefixes.State})
    prefixes.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &prefixes.DefaultMetric})
    prefixes.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &prefixes.DelayMetric})
    prefixes.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &prefixes.ExpenseMetric})
    prefixes.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &prefixes.ErrorMetric})
    prefixes.EntityData.Leafs = types.NewOrderedMap()
    prefixes.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixes.Prefix})

    prefixes.EntityData.YListKeys = []string {"Prefix"}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_State
// State parameters of IPv4 standard prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string with
    // pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric
// This container defines ISIS Default Metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State
}

func (defaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "openconfig"
    defaultMetric.EntityData.ParentYangName = "prefixes"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State
// State parameters for default-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is Flags.
    Flags interface{}

    // ISIS default metric value. This is a metric understood by every
    // Intermediate system in the domain. Each circuit shall have a positive 
    // integral value assigned for this metric. The value may be associated with
    // any  objective function of the circuit, but by convention is intended to
    // measure the capacity of the circuit for handling traffic, for example, its
    // throughput in  bits-per-second. Higher values indicate a lower capacity.
    // The type is interface{} with range: 1..63.
    DefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags represents ISIS Default-Metric Flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags string

const (
    // When set to zero, indicates internal metrics.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags_INTERNAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DefaultMetric_State_Flags = "INTERNAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric
// This container defines the ISIS delay metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric_State
}

func (delayMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "openconfig"
    delayMetric.EntityData.ParentYangName = "prefixes"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric_State
// State parameters of delay-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. This metric measures the transit delay of the
    // associated circuit. It is an optional metric, which if assigned to a
    // circuit shall have a positive integral value. Higher values indicate a
    // longer transit delay. The type is interface{} with range: 1..63.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric
// This container defines the ISIS expense metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric_State
}

func (expenseMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "openconfig"
    expenseMetric.EntityData.ParentYangName = "prefixes"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric_State
// State parameters of expense-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. This metric measures the monetary cost of
    // utilising the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a positive integral value1). Higher values
    // indicate a larger monetary expense. The type is interface{} with range:
    // 1..63.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric
// This container defines the ISIS error metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric_State
}

func (errorMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "openconfig"
    errorMetric.EntityData.ParentYangName = "prefixes"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric_State
// State parameters of error-metric.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. This metric measures the residual error
    // probability of the associated circuit. It is an optional metric, which if
    // assigned to a circuit shall have a non-zero value. Higher values indicate a
    // larger probability of undetected errors on the circuit. The type is
    // interface{} with range: 1..63.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of IsisMetricFlags.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv4ExternalReachability_Prefixes_Prefixes_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability/prefixes/prefixes/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication
// This container defines authentication information of the
// node.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "tlv"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("state", types.YChild{"State", &authentication.State})
    authentication.EntityData.Leafs = types.NewOrderedMap()

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State
// State parameters of TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type to be used. The type is CryptoType.
    CryptoType interface{}

    // Authentication key to be used. The type is string.
    AuthenticationKey interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("crypto-type", types.YLeaf{"CryptoType", state.CryptoType})
    state.EntityData.Leafs.Append("authentication-key", types.YLeaf{"AuthenticationKey", state.AuthenticationKey})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType represents Authentication type to be used.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType string

const (
    // HMAC-MD5 Authentication type.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType_HMAC_MD5 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType = "HMAC_MD5"

    // Cleartext Authentication type.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType_CLEARTEXT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Authentication_State_CryptoType = "CLEARTEXT"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability
// This container defines list of ISIS extended reachability
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors
}

func (extendedIsReachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability) GetEntityData() *types.CommonEntityData {
    extendedIsReachability.EntityData.YFilter = extendedIsReachability.YFilter
    extendedIsReachability.EntityData.YangName = "extended-is-reachability"
    extendedIsReachability.EntityData.BundleName = "openconfig"
    extendedIsReachability.EntityData.ParentYangName = "tlv"
    extendedIsReachability.EntityData.SegmentPath = "extended-is-reachability"
    extendedIsReachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + extendedIsReachability.EntityData.SegmentPath
    extendedIsReachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedIsReachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedIsReachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedIsReachability.EntityData.Children = types.NewOrderedMap()
    extendedIsReachability.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &extendedIsReachability.Neighbors})
    extendedIsReachability.EntityData.Leafs = types.NewOrderedMap()

    extendedIsReachability.EntityData.YListKeys = []string {}

    return &(extendedIsReachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS extended neigbors and reachability attributes. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors.
    Neighbors []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "extended-is-reachability"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", nil})
    for i := range neighbors.Neighbors {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbors[i]), types.YChild{"Neighbors", neighbors.Neighbors[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors
// This list describes ISIS extended neigbors and
// reachability attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the neighboring system's system ID.
    // The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_State_SystemId
    SystemId interface{}

    // State parameters of extended neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "neighbors"
    neighbors.EntityData.SegmentPath = "neighbors" + types.AddKeyToken(neighbors.SystemId, "system-id")
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("state", types.YChild{"State", &neighbors.State})
    neighbors.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &neighbors.Subtlvs})
    neighbors.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &neighbors.UndefinedSubtlvs})
    neighbors.EntityData.Leafs = types.NewOrderedMap()
    neighbors.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbors.SystemId})

    neighbors.EntityData.YListKeys = []string {"SystemId"}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_State
// State parameters of extended neighbor
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-id of the neighbor. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // Metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbors"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbors"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYLINKLOSSISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYADJSIDISREACHABILITYLINKATTRIBUTESISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYADJLANSIDISREACHABILITYUTILIZEDBANDWIDTHISREACHABILITYMINMAXLINKDELAYISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYADMINGROUPISREACHABILITYLINKDELAYISREACHABILITYTEDEFAULTMETRICISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYLINKDELAYVARIATIONROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHMIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYIPV4ROUTERIDIPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYTAG64IPREACHABILITYIPV6ROUTERID.
    Type interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", &subtlv.AdminGroup})
    subtlv.EntityData.Children.Append("ipv4-interface-address", types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv4-neighbor-address", types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress})
    subtlv.EntityData.Children.Append("max-link-bandwidth", types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth})
    subtlv.EntityData.Children.Append("max-reservable-link-bandwidth", types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth})
    subtlv.EntityData.Children.Append("unreserved-bandwidth", types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth})
    subtlv.EntityData.Children.Append("ipv6-interface-address", types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv6-neighbor-address", types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress})
    subtlv.EntityData.Children.Append("extended-admin-group", types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup})
    subtlv.EntityData.Children.Append("te-default-metric", types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric})
    subtlv.EntityData.Children.Append("link-attributes", types.YChild{"LinkAttributes", &subtlv.LinkAttributes})
    subtlv.EntityData.Children.Append("link-protection-type", types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType})
    subtlv.EntityData.Children.Append("bandwidth-constraints", types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints})
    subtlv.EntityData.Children.Append("unconstrained-lsp", types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp})
    subtlv.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &subtlv.AdjacencySids})
    subtlv.EntityData.Children.Append("lan-adjacency-sids", types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids})
    subtlv.EntityData.Children.Append("link-delay", types.YChild{"LinkDelay", &subtlv.LinkDelay})
    subtlv.EntityData.Children.Append("min-max-link-delay", types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay})
    subtlv.EntityData.Children.Append("link-delay-variation", types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation})
    subtlv.EntityData.Children.Append("link-loss", types.YChild{"LinkLoss", &subtlv.LinkLoss})
    subtlv.EntityData.Children.Append("residual-bandwidth", types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth})
    subtlv.EntityData.Children.Append("available-bandwidth", types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth})
    subtlv.EntityData.Children.Append("utilized-bandwidth", types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()

    adminGroup.EntityData.YListKeys = []string {}

    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + ipv4InterfaceAddress.EntityData.SegmentPath
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddress.State})
    ipv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + ipv4NeighborAddress.EntityData.SegmentPath
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4NeighborAddress.State})
    ipv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + maxLinkBandwidth.EntityData.SegmentPath
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxLinkBandwidth.State})
    maxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32..32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + maxReservableLinkBandwidth.EntityData.SegmentPath
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxReservableLinkBandwidth.State})
    maxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32..32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + unreservedBandwidth.EntityData.SegmentPath
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Children.Append("setup-priority", types.YChild{"SetupPriority", nil})
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children.Append(types.GetSegmentPath(unreservedBandwidth.SetupPriority[i]), types.YChild{"SetupPriority", unreservedBandwidth.SetupPriority[i]})
    }
    unreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    unreservedBandwidth.EntityData.YListKeys = []string {}

    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + types.AddKeyToken(setupPriority.Priority, "priority")
    setupPriority.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/unreserved-bandwidth/" + setupPriority.EntityData.SegmentPath
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = types.NewOrderedMap()
    setupPriority.EntityData.Children.Append("state", types.YChild{"State", &setupPriority.State})
    setupPriority.EntityData.Leafs = types.NewOrderedMap()
    setupPriority.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", setupPriority.Priority})

    setupPriority.EntityData.YListKeys = []string {"Priority"}

    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32..32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/unreserved-bandwidth/setup-priority/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + ipv6InterfaceAddress.EntityData.SegmentPath
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddress.State})
    ipv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + ipv6NeighborAddress.EntityData.SegmentPath
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6NeighborAddress.State})
    ipv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + extendedAdminGroup.EntityData.SegmentPath
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &extendedAdminGroup.State})
    extendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    extendedAdminGroup.EntityData.YListKeys = []string {}

    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + teDefaultMetric.EntityData.SegmentPath
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = types.NewOrderedMap()
    teDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &teDefaultMetric.State})
    teDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    teDefaultMetric.EntityData.YListKeys = []string {}

    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + linkAttributes.EntityData.SegmentPath
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = types.NewOrderedMap()
    linkAttributes.EntityData.Children.Append("state", types.YChild{"State", &linkAttributes.State})
    linkAttributes.EntityData.Leafs = types.NewOrderedMap()

    linkAttributes.EntityData.YListKeys = []string {}

    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/link-attributes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-protection", types.YLeaf{"LocalProtection", state.LocalProtection})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + linkProtectionType.EntityData.SegmentPath
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = types.NewOrderedMap()
    linkProtectionType.EntityData.Children.Append("state", types.YChild{"State", &linkProtectionType.State})
    linkProtectionType.EntityData.Leafs = types.NewOrderedMap()

    linkProtectionType.EntityData.YListKeys = []string {}

    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/link-protection-type/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("link-protection-type", types.YLeaf{"LinkProtectionType", state.LinkProtectionType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + bandwidthConstraints.EntityData.SegmentPath
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraints.EntityData.Children.Append("bandwidth-constraint", types.YChild{"BandwidthConstraint", nil})
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraints.BandwidthConstraint[i]), types.YChild{"BandwidthConstraint", bandwidthConstraints.BandwidthConstraint[i]})
    }
    bandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + types.AddKeyToken(bandwidthConstraint.ModelId, "model-id")
    bandwidthConstraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/bandwidth-constraints/" + bandwidthConstraint.EntityData.SegmentPath
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Children.Append("state", types.YChild{"State", &bandwidthConstraint.State})
    bandwidthConstraint.EntityData.Children.Append("constraints", types.YChild{"Constraints", &bandwidthConstraint.Constraints})
    bandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraint.ModelId})

    bandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", state.ModelId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + constraints.EntityData.SegmentPath
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = types.NewOrderedMap()
    constraints.EntityData.Children.Append("constraint", types.YChild{"Constraint", nil})
    for i := range constraints.Constraint {
        constraints.EntityData.Children.Append(types.GetSegmentPath(constraints.Constraint[i]), types.YChild{"Constraint", constraints.Constraint[i]})
    }
    constraints.EntityData.Leafs = types.NewOrderedMap()

    constraints.EntityData.YListKeys = []string {}

    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + types.AddKeyToken(constraint.ConstraintId, "constraint-id")
    constraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/" + constraint.EntityData.SegmentPath
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = types.NewOrderedMap()
    constraint.EntityData.Children.Append("state", types.YChild{"State", &constraint.State})
    constraint.EntityData.Leafs = types.NewOrderedMap()
    constraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", constraint.ConstraintId})

    constraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32..32.
    // Units are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + unconstrainedLsp.EntityData.SegmentPath
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = types.NewOrderedMap()
    unconstrainedLsp.EntityData.Children.Append("state", types.YChild{"State", &unconstrainedLsp.State})
    unconstrainedLsp.EntityData.Leafs = types.NewOrderedMap()

    unconstrainedLsp.EntityData.YListKeys = []string {}

    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/unconstrained-lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("unconstrained-lsp", types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Value, "value")
    adjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", adjacencySid.Value})

    adjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + lanAdjacencySids.EntityData.SegmentPath
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySids.EntityData.Children.Append("lan-adjacency-sid", types.YChild{"LanAdjacencySid", nil})
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(lanAdjacencySids.LanAdjacencySid[i]), types.YChild{"LanAdjacencySid", lanAdjacencySids.LanAdjacencySid[i]})
    }
    lanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    lanAdjacencySids.EntityData.YListKeys = []string {}

    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + types.AddKeyToken(lanAdjacencySid.Value, "value")
    lanAdjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/lan-adjacency-sids/" + lanAdjacencySid.EntityData.SegmentPath
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &lanAdjacencySid.State})
    lanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", lanAdjacencySid.Value})

    lanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + linkDelay.EntityData.SegmentPath
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = types.NewOrderedMap()
    linkDelay.EntityData.Children.Append("state", types.YChild{"State", &linkDelay.State})
    linkDelay.EntityData.Leafs = types.NewOrderedMap()

    linkDelay.EntityData.YListKeys = []string {}

    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + minMaxLinkDelay.EntityData.SegmentPath
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = types.NewOrderedMap()
    minMaxLinkDelay.EntityData.Children.Append("state", types.YChild{"State", &minMaxLinkDelay.State})
    minMaxLinkDelay.EntityData.Leafs = types.NewOrderedMap()

    minMaxLinkDelay.EntityData.YListKeys = []string {}

    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/min-max-link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("min-delay", types.YLeaf{"MinDelay", state.MinDelay})
    state.EntityData.Leafs.Append("max-delay", types.YLeaf{"MaxDelay", state.MaxDelay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + linkDelayVariation.EntityData.SegmentPath
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = types.NewOrderedMap()
    linkDelayVariation.EntityData.Children.Append("state", types.YChild{"State", &linkDelayVariation.State})
    linkDelayVariation.EntityData.Leafs = types.NewOrderedMap()

    linkDelayVariation.EntityData.YListKeys = []string {}

    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/link-delay-variation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + linkLoss.EntityData.SegmentPath
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = types.NewOrderedMap()
    linkLoss.EntityData.Children.Append("state", types.YChild{"State", &linkLoss.State})
    linkLoss.EntityData.Leafs = types.NewOrderedMap()

    linkLoss.EntityData.YListKeys = []string {}

    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/link-loss/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", state.LinkLoss})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + residualBandwidth.EntityData.SegmentPath
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = types.NewOrderedMap()
    residualBandwidth.EntityData.Children.Append("state", types.YChild{"State", &residualBandwidth.State})
    residualBandwidth.EntityData.Leafs = types.NewOrderedMap()

    residualBandwidth.EntityData.YListKeys = []string {}

    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32..32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/residual-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("residual-bandwidth", types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + availableBandwidth.EntityData.SegmentPath
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = types.NewOrderedMap()
    availableBandwidth.EntityData.Children.Append("state", types.YChild{"State", &availableBandwidth.State})
    availableBandwidth.EntityData.Leafs = types.NewOrderedMap()

    availableBandwidth.EntityData.YListKeys = []string {}

    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32..32. Units are bytes per
    // second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/available-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("available-bandwidth", types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/" + utilizedBandwidth.EntityData.SegmentPath
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = types.NewOrderedMap()
    utilizedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &utilizedBandwidth.State})
    utilizedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    utilizedBandwidth.EntityData.YListKeys = []string {}

    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYLINKLOSSISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYADJSIDISREACHABILITYLINKATTRIBUTESISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYADJLANSIDISREACHABILITYUTILIZEDBANDWIDTHISREACHABILITYMINMAXLINKDELAYISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYADMINGROUPISREACHABILITYLINKDELAYISREACHABILITYTEDEFAULTMETRICISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYLINKDELAYVARIATIONROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHMIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYIPV4ROUTERIDIPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYTAG64IPREACHABILITYIPV6ROUTERID.
    Type interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length:
    // 32..32. Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/subtlvs/subtlv/utilized-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("utilized-bandwidth", types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbors"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIsReachability_Neighbors_Neighbors_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability/neighbors/neighbors/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability
// This container defines list of IPv4 extended reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes
}

func (extendedIpv4Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability) GetEntityData() *types.CommonEntityData {
    extendedIpv4Reachability.EntityData.YFilter = extendedIpv4Reachability.YFilter
    extendedIpv4Reachability.EntityData.YangName = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.BundleName = "openconfig"
    extendedIpv4Reachability.EntityData.ParentYangName = "tlv"
    extendedIpv4Reachability.EntityData.SegmentPath = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + extendedIpv4Reachability.EntityData.SegmentPath
    extendedIpv4Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedIpv4Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedIpv4Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedIpv4Reachability.EntityData.Children = types.NewOrderedMap()
    extendedIpv4Reachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &extendedIpv4Reachability.Prefixes})
    extendedIpv4Reachability.EntityData.Leafs = types.NewOrderedMap()

    extendedIpv4Reachability.EntityData.YListKeys = []string {}

    return &(extendedIpv4Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IPv4 extended prefixes and attributes. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix.
    Prefix []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "extended-ipv4-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefix[i]), types.YChild{"Prefix", prefixes.Prefix[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix
// This list describes IPv4 extended prefixes and
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix that the TLV
    // describes the attributes of. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + types.AddKeyToken(prefix.Prefix, "prefix")
    prefix.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Children.Append("state", types.YChild{"State", &prefix.State})
    prefix.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &prefix.Subtlvs})
    prefix.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs})
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})

    prefix.EntityData.YListKeys = []string {"Prefix"}

    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State
// State parameters of an IPv4 extended prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("s-bit", types.YLeaf{"SBit", state.SBit})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("tag", types.YChild{"Tag", &subtlv.Tag})
    subtlv.EntityData.Children.Append("tag64", types.YChild{"Tag64", &subtlv.Tag64})
    subtlv.EntityData.Children.Append("flags", types.YChild{"Flags", &subtlv.Flags})
    subtlv.EntityData.Children.Append("ipv4-source-router-id", types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId})
    subtlv.EntityData.Children.Append("ipv6-source-router-id", types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId})
    subtlv.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &subtlv.PrefixSids})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + tag.EntityData.SegmentPath
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = types.NewOrderedMap()
    tag.EntityData.Children.Append("state", types.YChild{"State", &tag.State})
    tag.EntityData.Leafs = types.NewOrderedMap()

    tag.EntityData.YListKeys = []string {}

    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + tag64.EntityData.SegmentPath
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = types.NewOrderedMap()
    tag64.EntityData.Children.Append("state", types.YChild{"State", &tag64.State})
    tag64.EntityData.Leafs = types.NewOrderedMap()

    tag64.EntityData.YListKeys = []string {}

    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Children.Append("state", types.YChild{"State", &flags.State})
    flags.EntityData.Leafs = types.NewOrderedMap()

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv4SourceRouterId.EntityData.SegmentPath
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4SourceRouterId.State})
    ipv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv6SourceRouterId.EntityData.SegmentPath
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6SourceRouterId.State})
    ipv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Value, "value")
    prefixSid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixSid.Value})

    prefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_ExtendedIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability
// This container defines list of IPv6 reachability
// information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes
}

func (ipv6Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability) GetEntityData() *types.CommonEntityData {
    ipv6Reachability.EntityData.YFilter = ipv6Reachability.YFilter
    ipv6Reachability.EntityData.YangName = "ipv6-reachability"
    ipv6Reachability.EntityData.BundleName = "openconfig"
    ipv6Reachability.EntityData.ParentYangName = "tlv"
    ipv6Reachability.EntityData.SegmentPath = "ipv6-reachability"
    ipv6Reachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + ipv6Reachability.EntityData.SegmentPath
    ipv6Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6Reachability.EntityData.Children = types.NewOrderedMap()
    ipv6Reachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &ipv6Reachability.Prefixes})
    ipv6Reachability.EntityData.Leafs = types.NewOrderedMap()

    ipv6Reachability.EntityData.YListKeys = []string {}

    return &(ipv6Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines IPv6 extended prefix attributes. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes.
    Prefixes []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "ipv6-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", nil})
    for i := range prefixes.Prefixes {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefixes[i]), types.YChild{"Prefixes", prefixes.Prefixes[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes
// This list defines IPv6 extended prefix attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv6 prefix that the TLV
    // corresponds to. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_State_Prefix
    Prefix interface{}

    // State parameters of IPv6 prefix attributes.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "prefixes"
    prefixes.EntityData.SegmentPath = "prefixes" + types.AddKeyToken(prefixes.Prefix, "prefix")
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("state", types.YChild{"State", &prefixes.State})
    prefixes.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &prefixes.Subtlvs})
    prefixes.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &prefixes.UndefinedSubtlvs})
    prefixes.EntityData.Leafs = types.NewOrderedMap()
    prefixes.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixes.Prefix})

    prefixes.EntityData.YListKeys = []string {"Prefix"}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_State
// State parameters of IPv6 prefix attributes
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefixes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("s-bit", types.YLeaf{"SBit", state.SBit})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefixes"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("tag", types.YChild{"Tag", &subtlv.Tag})
    subtlv.EntityData.Children.Append("tag64", types.YChild{"Tag64", &subtlv.Tag64})
    subtlv.EntityData.Children.Append("flags", types.YChild{"Flags", &subtlv.Flags})
    subtlv.EntityData.Children.Append("ipv4-source-router-id", types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId})
    subtlv.EntityData.Children.Append("ipv6-source-router-id", types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId})
    subtlv.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &subtlv.PrefixSids})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + tag.EntityData.SegmentPath
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = types.NewOrderedMap()
    tag.EntityData.Children.Append("state", types.YChild{"State", &tag.State})
    tag.EntityData.Leafs = types.NewOrderedMap()

    tag.EntityData.YListKeys = []string {}

    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + tag64.EntityData.SegmentPath
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = types.NewOrderedMap()
    tag64.EntityData.Children.Append("state", types.YChild{"State", &tag64.State})
    tag64.EntityData.Leafs = types.NewOrderedMap()

    tag64.EntityData.YListKeys = []string {}

    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Children.Append("state", types.YChild{"State", &flags.State})
    flags.EntityData.Leafs = types.NewOrderedMap()

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + ipv4SourceRouterId.EntityData.SegmentPath
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4SourceRouterId.State})
    ipv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + ipv6SourceRouterId.EntityData.SegmentPath
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6SourceRouterId.State})
    ipv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Value, "value")
    prefixSid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixSid.Value})

    prefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/subtlvs/subtlv/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefixes"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_Ipv6Reachability_Prefixes_Prefixes_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefixes/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology
// This container defines the topology supported.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS topologies.
    Topologies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies
}

func (multiTopology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "openconfig"
    multiTopology.EntityData.ParentYangName = "tlv"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + multiTopology.EntityData.SegmentPath
    multiTopology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    multiTopology.EntityData.Children = types.NewOrderedMap()
    multiTopology.EntityData.Children.Append("topologies", types.YChild{"Topologies", &multiTopology.Topologies})
    multiTopology.EntityData.Leafs = types.NewOrderedMap()

    multiTopology.EntityData.YListKeys = []string {}

    return &(multiTopology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies
// This container describes IS topologies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes a topology. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology.
    Topology []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology
}

func (topologies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "openconfig"
    topologies.EntityData.ParentYangName = "multi-topology"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/multi-topology/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    topologies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology
// This list describes a topology.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the multi-topology ID being described
    // by the list entry. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_MtId
    MtId interface{}

    // State parameters of IS multi-topology TLV 229.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State
}

func (topology *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "openconfig"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.MtId, "mt-id")
    topology.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/multi-topology/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    topology.EntityData.NamespaceTable = openconfig.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("state", types.YChild{"State", &topology.State})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", topology.MtId})

    topology.EntityData.YListKeys = []string {"MtId"}

    return &(topology.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State
// State parameters of IS multi-topology TLV 229.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}

    // Attributes of the LSP for the associated topology. The type is Attributes.
    Attributes interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/multi-topology/topologies/topology/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})
    state.EntityData.Leafs.Append("attributes", types.YLeaf{"Attributes", state.Attributes})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes represents topology.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes string

const (
    // When set, node is overloaded, still part of
    // the topology but cannot be used for transit.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes_OVERLOAD NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes = "OVERLOAD"

    // When set, node is attached to another area
    // using the referred metric and can be used as
    // default gateway.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes_ATTACHED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MultiTopology_Topologies_Topology_State_Attributes = "ATTACHED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute
// This container defines list of ISIS topology neighbors
// for extended ISIS LSP (multiple system IDs). 
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors
}

func (isisNeighborAttribute *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute) GetEntityData() *types.CommonEntityData {
    isisNeighborAttribute.EntityData.YFilter = isisNeighborAttribute.YFilter
    isisNeighborAttribute.EntityData.YangName = "isis-neighbor-attribute"
    isisNeighborAttribute.EntityData.BundleName = "openconfig"
    isisNeighborAttribute.EntityData.ParentYangName = "tlv"
    isisNeighborAttribute.EntityData.SegmentPath = "isis-neighbor-attribute"
    isisNeighborAttribute.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + isisNeighborAttribute.EntityData.SegmentPath
    isisNeighborAttribute.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isisNeighborAttribute.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isisNeighborAttribute.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isisNeighborAttribute.EntityData.Children = types.NewOrderedMap()
    isisNeighborAttribute.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &isisNeighborAttribute.Neighbors})
    isisNeighborAttribute.EntityData.Leafs = types.NewOrderedMap()

    isisNeighborAttribute.EntityData.YListKeys = []string {}

    return &(isisNeighborAttribute.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines ISIS extended reachability neighbor attributes. The type
    // is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor.
    Neighbor []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "isis-neighbor-attribute"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor
// This list defines ISIS extended reachability neighbor
// attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the neighboring IS. The type is
    // string with pattern: ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of extended neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.SystemId, "system-id")
    neighbor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &neighbor.Subtlvs})
    neighbor.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbor.SystemId})

    neighbor.EntityData.YListKeys = []string {"SystemId"}

    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State
// State parameters of extended neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-id of the neighbor. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // Metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", &subtlv.AdminGroup})
    subtlv.EntityData.Children.Append("ipv4-interface-address", types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv4-neighbor-address", types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress})
    subtlv.EntityData.Children.Append("max-link-bandwidth", types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth})
    subtlv.EntityData.Children.Append("max-reservable-link-bandwidth", types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth})
    subtlv.EntityData.Children.Append("unreserved-bandwidth", types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth})
    subtlv.EntityData.Children.Append("ipv6-interface-address", types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv6-neighbor-address", types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress})
    subtlv.EntityData.Children.Append("extended-admin-group", types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup})
    subtlv.EntityData.Children.Append("te-default-metric", types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric})
    subtlv.EntityData.Children.Append("link-attributes", types.YChild{"LinkAttributes", &subtlv.LinkAttributes})
    subtlv.EntityData.Children.Append("link-protection-type", types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType})
    subtlv.EntityData.Children.Append("bandwidth-constraints", types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints})
    subtlv.EntityData.Children.Append("unconstrained-lsp", types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp})
    subtlv.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &subtlv.AdjacencySids})
    subtlv.EntityData.Children.Append("lan-adjacency-sids", types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids})
    subtlv.EntityData.Children.Append("link-delay", types.YChild{"LinkDelay", &subtlv.LinkDelay})
    subtlv.EntityData.Children.Append("min-max-link-delay", types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay})
    subtlv.EntityData.Children.Append("link-delay-variation", types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation})
    subtlv.EntityData.Children.Append("link-loss", types.YChild{"LinkLoss", &subtlv.LinkLoss})
    subtlv.EntityData.Children.Append("residual-bandwidth", types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth})
    subtlv.EntityData.Children.Append("available-bandwidth", types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth})
    subtlv.EntityData.Children.Append("utilized-bandwidth", types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()

    adminGroup.EntityData.YListKeys = []string {}

    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv4InterfaceAddress.EntityData.SegmentPath
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddress.State})
    ipv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv4NeighborAddress.EntityData.SegmentPath
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4NeighborAddress.State})
    ipv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + maxLinkBandwidth.EntityData.SegmentPath
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxLinkBandwidth.State})
    maxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32..32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + maxReservableLinkBandwidth.EntityData.SegmentPath
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxReservableLinkBandwidth.State})
    maxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32..32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + unreservedBandwidth.EntityData.SegmentPath
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Children.Append("setup-priority", types.YChild{"SetupPriority", nil})
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children.Append(types.GetSegmentPath(unreservedBandwidth.SetupPriority[i]), types.YChild{"SetupPriority", unreservedBandwidth.SetupPriority[i]})
    }
    unreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    unreservedBandwidth.EntityData.YListKeys = []string {}

    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + types.AddKeyToken(setupPriority.Priority, "priority")
    setupPriority.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/" + setupPriority.EntityData.SegmentPath
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = types.NewOrderedMap()
    setupPriority.EntityData.Children.Append("state", types.YChild{"State", &setupPriority.State})
    setupPriority.EntityData.Leafs = types.NewOrderedMap()
    setupPriority.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", setupPriority.Priority})

    setupPriority.EntityData.YListKeys = []string {"Priority"}

    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32..32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/setup-priority/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv6InterfaceAddress.EntityData.SegmentPath
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddress.State})
    ipv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv6NeighborAddress.EntityData.SegmentPath
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6NeighborAddress.State})
    ipv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + extendedAdminGroup.EntityData.SegmentPath
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &extendedAdminGroup.State})
    extendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    extendedAdminGroup.EntityData.YListKeys = []string {}

    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + teDefaultMetric.EntityData.SegmentPath
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = types.NewOrderedMap()
    teDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &teDefaultMetric.State})
    teDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    teDefaultMetric.EntityData.YListKeys = []string {}

    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkAttributes.EntityData.SegmentPath
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = types.NewOrderedMap()
    linkAttributes.EntityData.Children.Append("state", types.YChild{"State", &linkAttributes.State})
    linkAttributes.EntityData.Leafs = types.NewOrderedMap()

    linkAttributes.EntityData.YListKeys = []string {}

    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-attributes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-protection", types.YLeaf{"LocalProtection", state.LocalProtection})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkProtectionType.EntityData.SegmentPath
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = types.NewOrderedMap()
    linkProtectionType.EntityData.Children.Append("state", types.YChild{"State", &linkProtectionType.State})
    linkProtectionType.EntityData.Leafs = types.NewOrderedMap()

    linkProtectionType.EntityData.YListKeys = []string {}

    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-protection-type/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("link-protection-type", types.YLeaf{"LinkProtectionType", state.LinkProtectionType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + bandwidthConstraints.EntityData.SegmentPath
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraints.EntityData.Children.Append("bandwidth-constraint", types.YChild{"BandwidthConstraint", nil})
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraints.BandwidthConstraint[i]), types.YChild{"BandwidthConstraint", bandwidthConstraints.BandwidthConstraint[i]})
    }
    bandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + types.AddKeyToken(bandwidthConstraint.ModelId, "model-id")
    bandwidthConstraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/" + bandwidthConstraint.EntityData.SegmentPath
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Children.Append("state", types.YChild{"State", &bandwidthConstraint.State})
    bandwidthConstraint.EntityData.Children.Append("constraints", types.YChild{"Constraints", &bandwidthConstraint.Constraints})
    bandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraint.ModelId})

    bandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", state.ModelId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + constraints.EntityData.SegmentPath
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = types.NewOrderedMap()
    constraints.EntityData.Children.Append("constraint", types.YChild{"Constraint", nil})
    for i := range constraints.Constraint {
        constraints.EntityData.Children.Append(types.GetSegmentPath(constraints.Constraint[i]), types.YChild{"Constraint", constraints.Constraint[i]})
    }
    constraints.EntityData.Leafs = types.NewOrderedMap()

    constraints.EntityData.YListKeys = []string {}

    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + types.AddKeyToken(constraint.ConstraintId, "constraint-id")
    constraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/" + constraint.EntityData.SegmentPath
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = types.NewOrderedMap()
    constraint.EntityData.Children.Append("state", types.YChild{"State", &constraint.State})
    constraint.EntityData.Leafs = types.NewOrderedMap()
    constraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", constraint.ConstraintId})

    constraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32..32.
    // Units are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + unconstrainedLsp.EntityData.SegmentPath
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = types.NewOrderedMap()
    unconstrainedLsp.EntityData.Children.Append("state", types.YChild{"State", &unconstrainedLsp.State})
    unconstrainedLsp.EntityData.Leafs = types.NewOrderedMap()

    unconstrainedLsp.EntityData.YListKeys = []string {}

    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unconstrained-lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("unconstrained-lsp", types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Value, "value")
    adjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", adjacencySid.Value})

    adjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + lanAdjacencySids.EntityData.SegmentPath
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySids.EntityData.Children.Append("lan-adjacency-sid", types.YChild{"LanAdjacencySid", nil})
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(lanAdjacencySids.LanAdjacencySid[i]), types.YChild{"LanAdjacencySid", lanAdjacencySids.LanAdjacencySid[i]})
    }
    lanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    lanAdjacencySids.EntityData.YListKeys = []string {}

    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + types.AddKeyToken(lanAdjacencySid.Value, "value")
    lanAdjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/" + lanAdjacencySid.EntityData.SegmentPath
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &lanAdjacencySid.State})
    lanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", lanAdjacencySid.Value})

    lanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkDelay.EntityData.SegmentPath
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = types.NewOrderedMap()
    linkDelay.EntityData.Children.Append("state", types.YChild{"State", &linkDelay.State})
    linkDelay.EntityData.Leafs = types.NewOrderedMap()

    linkDelay.EntityData.YListKeys = []string {}

    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + minMaxLinkDelay.EntityData.SegmentPath
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = types.NewOrderedMap()
    minMaxLinkDelay.EntityData.Children.Append("state", types.YChild{"State", &minMaxLinkDelay.State})
    minMaxLinkDelay.EntityData.Leafs = types.NewOrderedMap()

    minMaxLinkDelay.EntityData.YListKeys = []string {}

    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/min-max-link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("min-delay", types.YLeaf{"MinDelay", state.MinDelay})
    state.EntityData.Leafs.Append("max-delay", types.YLeaf{"MaxDelay", state.MaxDelay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkDelayVariation.EntityData.SegmentPath
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = types.NewOrderedMap()
    linkDelayVariation.EntityData.Children.Append("state", types.YChild{"State", &linkDelayVariation.State})
    linkDelayVariation.EntityData.Leafs = types.NewOrderedMap()

    linkDelayVariation.EntityData.YListKeys = []string {}

    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-delay-variation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkLoss.EntityData.SegmentPath
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = types.NewOrderedMap()
    linkLoss.EntityData.Children.Append("state", types.YChild{"State", &linkLoss.State})
    linkLoss.EntityData.Leafs = types.NewOrderedMap()

    linkLoss.EntityData.YListKeys = []string {}

    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-loss/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", state.LinkLoss})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + residualBandwidth.EntityData.SegmentPath
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = types.NewOrderedMap()
    residualBandwidth.EntityData.Children.Append("state", types.YChild{"State", &residualBandwidth.State})
    residualBandwidth.EntityData.Leafs = types.NewOrderedMap()

    residualBandwidth.EntityData.YListKeys = []string {}

    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32..32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/residual-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("residual-bandwidth", types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + availableBandwidth.EntityData.SegmentPath
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = types.NewOrderedMap()
    availableBandwidth.EntityData.Children.Append("state", types.YChild{"State", &availableBandwidth.State})
    availableBandwidth.EntityData.Leafs = types.NewOrderedMap()

    availableBandwidth.EntityData.YListKeys = []string {}

    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32..32. Units are bytes per
    // second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/available-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("available-bandwidth", types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + utilizedBandwidth.EntityData.SegmentPath
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = types.NewOrderedMap()
    utilizedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &utilizedBandwidth.State})
    utilizedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    utilizedBandwidth.EntityData.YListKeys = []string {}

    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length:
    // 32..32. Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/utilized-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("utilized-bandwidth", types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId
// This container defines the IS-Alias TLV which allows
// extension-capable ISs to recognize the Originating System
// of an Extended LSP set. It identifies the Normal system-
// id of the Originating System.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of alias ID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State
}

func (isAliasId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId) GetEntityData() *types.CommonEntityData {
    isAliasId.EntityData.YFilter = isAliasId.YFilter
    isAliasId.EntityData.YangName = "is-alias-id"
    isAliasId.EntityData.BundleName = "openconfig"
    isAliasId.EntityData.ParentYangName = "tlv"
    isAliasId.EntityData.SegmentPath = "is-alias-id"
    isAliasId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + isAliasId.EntityData.SegmentPath
    isAliasId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    isAliasId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    isAliasId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    isAliasId.EntityData.Children = types.NewOrderedMap()
    isAliasId.EntityData.Children.Append("state", types.YChild{"State", &isAliasId.State})
    isAliasId.EntityData.Leafs = types.NewOrderedMap()

    isAliasId.EntityData.YListKeys = []string {}

    return &(isAliasId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State
// State parameters of alias ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of alias ID(s). The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    AliasId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_IsAliasId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "is-alias-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("alias-id", types.YLeaf{"AliasId", state.AliasId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn
// This container defines list of ISIS multi-topology
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MT-IS neigbor attributes.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors
}

func (mtIsn *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn) GetEntityData() *types.CommonEntityData {
    mtIsn.EntityData.YFilter = mtIsn.YFilter
    mtIsn.EntityData.YangName = "mt-isn"
    mtIsn.EntityData.BundleName = "openconfig"
    mtIsn.EntityData.ParentYangName = "tlv"
    mtIsn.EntityData.SegmentPath = "mt-isn"
    mtIsn.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + mtIsn.EntityData.SegmentPath
    mtIsn.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIsn.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIsn.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIsn.EntityData.Children = types.NewOrderedMap()
    mtIsn.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &mtIsn.Neighbors})
    mtIsn.EntityData.Leafs = types.NewOrderedMap()

    mtIsn.EntityData.YListKeys = []string {}

    return &(mtIsn.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors
// MT-IS neigbor attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor.
    Neighbor []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "mt-isn"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key.        Reference to the topology that the neighbor
    // is within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the System ID of the neighbor. The
    // type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of MT neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.MtId, "mt-id") + types.AddKeyToken(neighbor.SystemId, "system-id")
    neighbor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &neighbor.Subtlvs})
    neighbor.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", neighbor.MtId})
    neighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbor.SystemId})

    neighbor.EntityData.YListKeys = []string {"MtId", "SystemId"}

    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State
// State parameters of MT neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of a topology being announced. The type is interface{} with
    // range: 0..4095.
    MtId interface{}

    // System-id of the IS neighbor. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", &subtlv.AdminGroup})
    subtlv.EntityData.Children.Append("ipv4-interface-address", types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv4-neighbor-address", types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress})
    subtlv.EntityData.Children.Append("max-link-bandwidth", types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth})
    subtlv.EntityData.Children.Append("max-reservable-link-bandwidth", types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth})
    subtlv.EntityData.Children.Append("unreserved-bandwidth", types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth})
    subtlv.EntityData.Children.Append("ipv6-interface-address", types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv6-neighbor-address", types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress})
    subtlv.EntityData.Children.Append("extended-admin-group", types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup})
    subtlv.EntityData.Children.Append("te-default-metric", types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric})
    subtlv.EntityData.Children.Append("link-attributes", types.YChild{"LinkAttributes", &subtlv.LinkAttributes})
    subtlv.EntityData.Children.Append("link-protection-type", types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType})
    subtlv.EntityData.Children.Append("bandwidth-constraints", types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints})
    subtlv.EntityData.Children.Append("unconstrained-lsp", types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp})
    subtlv.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &subtlv.AdjacencySids})
    subtlv.EntityData.Children.Append("lan-adjacency-sids", types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids})
    subtlv.EntityData.Children.Append("link-delay", types.YChild{"LinkDelay", &subtlv.LinkDelay})
    subtlv.EntityData.Children.Append("min-max-link-delay", types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay})
    subtlv.EntityData.Children.Append("link-delay-variation", types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation})
    subtlv.EntityData.Children.Append("link-loss", types.YChild{"LinkLoss", &subtlv.LinkLoss})
    subtlv.EntityData.Children.Append("residual-bandwidth", types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth})
    subtlv.EntityData.Children.Append("available-bandwidth", types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth})
    subtlv.EntityData.Children.Append("utilized-bandwidth", types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()

    adminGroup.EntityData.YListKeys = []string {}

    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + ipv4InterfaceAddress.EntityData.SegmentPath
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddress.State})
    ipv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + ipv4NeighborAddress.EntityData.SegmentPath
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4NeighborAddress.State})
    ipv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + maxLinkBandwidth.EntityData.SegmentPath
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxLinkBandwidth.State})
    maxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32..32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + maxReservableLinkBandwidth.EntityData.SegmentPath
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxReservableLinkBandwidth.State})
    maxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32..32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + unreservedBandwidth.EntityData.SegmentPath
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Children.Append("setup-priority", types.YChild{"SetupPriority", nil})
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children.Append(types.GetSegmentPath(unreservedBandwidth.SetupPriority[i]), types.YChild{"SetupPriority", unreservedBandwidth.SetupPriority[i]})
    }
    unreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    unreservedBandwidth.EntityData.YListKeys = []string {}

    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + types.AddKeyToken(setupPriority.Priority, "priority")
    setupPriority.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/" + setupPriority.EntityData.SegmentPath
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = types.NewOrderedMap()
    setupPriority.EntityData.Children.Append("state", types.YChild{"State", &setupPriority.State})
    setupPriority.EntityData.Leafs = types.NewOrderedMap()
    setupPriority.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", setupPriority.Priority})

    setupPriority.EntityData.YListKeys = []string {"Priority"}

    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32..32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/setup-priority/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + ipv6InterfaceAddress.EntityData.SegmentPath
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddress.State})
    ipv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + ipv6NeighborAddress.EntityData.SegmentPath
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6NeighborAddress.State})
    ipv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + extendedAdminGroup.EntityData.SegmentPath
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &extendedAdminGroup.State})
    extendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    extendedAdminGroup.EntityData.YListKeys = []string {}

    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + teDefaultMetric.EntityData.SegmentPath
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = types.NewOrderedMap()
    teDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &teDefaultMetric.State})
    teDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    teDefaultMetric.EntityData.YListKeys = []string {}

    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + linkAttributes.EntityData.SegmentPath
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = types.NewOrderedMap()
    linkAttributes.EntityData.Children.Append("state", types.YChild{"State", &linkAttributes.State})
    linkAttributes.EntityData.Leafs = types.NewOrderedMap()

    linkAttributes.EntityData.YListKeys = []string {}

    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/link-attributes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-protection", types.YLeaf{"LocalProtection", state.LocalProtection})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + linkProtectionType.EntityData.SegmentPath
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = types.NewOrderedMap()
    linkProtectionType.EntityData.Children.Append("state", types.YChild{"State", &linkProtectionType.State})
    linkProtectionType.EntityData.Leafs = types.NewOrderedMap()

    linkProtectionType.EntityData.YListKeys = []string {}

    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/link-protection-type/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("link-protection-type", types.YLeaf{"LinkProtectionType", state.LinkProtectionType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + bandwidthConstraints.EntityData.SegmentPath
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraints.EntityData.Children.Append("bandwidth-constraint", types.YChild{"BandwidthConstraint", nil})
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraints.BandwidthConstraint[i]), types.YChild{"BandwidthConstraint", bandwidthConstraints.BandwidthConstraint[i]})
    }
    bandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + types.AddKeyToken(bandwidthConstraint.ModelId, "model-id")
    bandwidthConstraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/" + bandwidthConstraint.EntityData.SegmentPath
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Children.Append("state", types.YChild{"State", &bandwidthConstraint.State})
    bandwidthConstraint.EntityData.Children.Append("constraints", types.YChild{"Constraints", &bandwidthConstraint.Constraints})
    bandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraint.ModelId})

    bandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", state.ModelId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + constraints.EntityData.SegmentPath
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = types.NewOrderedMap()
    constraints.EntityData.Children.Append("constraint", types.YChild{"Constraint", nil})
    for i := range constraints.Constraint {
        constraints.EntityData.Children.Append(types.GetSegmentPath(constraints.Constraint[i]), types.YChild{"Constraint", constraints.Constraint[i]})
    }
    constraints.EntityData.Leafs = types.NewOrderedMap()

    constraints.EntityData.YListKeys = []string {}

    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + types.AddKeyToken(constraint.ConstraintId, "constraint-id")
    constraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/" + constraint.EntityData.SegmentPath
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = types.NewOrderedMap()
    constraint.EntityData.Children.Append("state", types.YChild{"State", &constraint.State})
    constraint.EntityData.Leafs = types.NewOrderedMap()
    constraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", constraint.ConstraintId})

    constraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32..32.
    // Units are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + unconstrainedLsp.EntityData.SegmentPath
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = types.NewOrderedMap()
    unconstrainedLsp.EntityData.Children.Append("state", types.YChild{"State", &unconstrainedLsp.State})
    unconstrainedLsp.EntityData.Leafs = types.NewOrderedMap()

    unconstrainedLsp.EntityData.YListKeys = []string {}

    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/unconstrained-lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("unconstrained-lsp", types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Value, "value")
    adjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", adjacencySid.Value})

    adjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + lanAdjacencySids.EntityData.SegmentPath
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySids.EntityData.Children.Append("lan-adjacency-sid", types.YChild{"LanAdjacencySid", nil})
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(lanAdjacencySids.LanAdjacencySid[i]), types.YChild{"LanAdjacencySid", lanAdjacencySids.LanAdjacencySid[i]})
    }
    lanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    lanAdjacencySids.EntityData.YListKeys = []string {}

    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + types.AddKeyToken(lanAdjacencySid.Value, "value")
    lanAdjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/" + lanAdjacencySid.EntityData.SegmentPath
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &lanAdjacencySid.State})
    lanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", lanAdjacencySid.Value})

    lanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + linkDelay.EntityData.SegmentPath
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = types.NewOrderedMap()
    linkDelay.EntityData.Children.Append("state", types.YChild{"State", &linkDelay.State})
    linkDelay.EntityData.Leafs = types.NewOrderedMap()

    linkDelay.EntityData.YListKeys = []string {}

    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + minMaxLinkDelay.EntityData.SegmentPath
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = types.NewOrderedMap()
    minMaxLinkDelay.EntityData.Children.Append("state", types.YChild{"State", &minMaxLinkDelay.State})
    minMaxLinkDelay.EntityData.Leafs = types.NewOrderedMap()

    minMaxLinkDelay.EntityData.YListKeys = []string {}

    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/min-max-link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("min-delay", types.YLeaf{"MinDelay", state.MinDelay})
    state.EntityData.Leafs.Append("max-delay", types.YLeaf{"MaxDelay", state.MaxDelay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + linkDelayVariation.EntityData.SegmentPath
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = types.NewOrderedMap()
    linkDelayVariation.EntityData.Children.Append("state", types.YChild{"State", &linkDelayVariation.State})
    linkDelayVariation.EntityData.Leafs = types.NewOrderedMap()

    linkDelayVariation.EntityData.YListKeys = []string {}

    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/link-delay-variation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + linkLoss.EntityData.SegmentPath
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = types.NewOrderedMap()
    linkLoss.EntityData.Children.Append("state", types.YChild{"State", &linkLoss.State})
    linkLoss.EntityData.Leafs = types.NewOrderedMap()

    linkLoss.EntityData.YListKeys = []string {}

    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/link-loss/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", state.LinkLoss})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + residualBandwidth.EntityData.SegmentPath
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = types.NewOrderedMap()
    residualBandwidth.EntityData.Children.Append("state", types.YChild{"State", &residualBandwidth.State})
    residualBandwidth.EntityData.Leafs = types.NewOrderedMap()

    residualBandwidth.EntityData.YListKeys = []string {}

    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32..32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/residual-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("residual-bandwidth", types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + availableBandwidth.EntityData.SegmentPath
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = types.NewOrderedMap()
    availableBandwidth.EntityData.Children.Append("state", types.YChild{"State", &availableBandwidth.State})
    availableBandwidth.EntityData.Leafs = types.NewOrderedMap()

    availableBandwidth.EntityData.YListKeys = []string {}

    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32..32. Units are bytes per
    // second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/available-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("available-bandwidth", types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/" + utilizedBandwidth.EntityData.SegmentPath
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = types.NewOrderedMap()
    utilizedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &utilizedBandwidth.State})
    utilizedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    utilizedBandwidth.EntityData.YListKeys = []string {}

    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length:
    // 32..32. Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/subtlvs/subtlv/utilized-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("utilized-bandwidth", types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsn_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn/neighbors/neighbor/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute
// This container defines list of ISIS multi-topology
// neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    Neighbors NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors
}

func (mtIsisNeighborAttribute *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute) GetEntityData() *types.CommonEntityData {
    mtIsisNeighborAttribute.EntityData.YFilter = mtIsisNeighborAttribute.YFilter
    mtIsisNeighborAttribute.EntityData.YangName = "mt-isis-neighbor-attribute"
    mtIsisNeighborAttribute.EntityData.BundleName = "openconfig"
    mtIsisNeighborAttribute.EntityData.ParentYangName = "tlv"
    mtIsisNeighborAttribute.EntityData.SegmentPath = "mt-isis-neighbor-attribute"
    mtIsisNeighborAttribute.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + mtIsisNeighborAttribute.EntityData.SegmentPath
    mtIsisNeighborAttribute.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIsisNeighborAttribute.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIsisNeighborAttribute.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIsisNeighborAttribute.EntityData.Children = types.NewOrderedMap()
    mtIsisNeighborAttribute.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &mtIsisNeighborAttribute.Neighbors})
    mtIsisNeighborAttribute.EntityData.Leafs = types.NewOrderedMap()

    mtIsisNeighborAttribute.EntityData.YListKeys = []string {}

    return &(mtIsisNeighborAttribute.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors
// This container describes IS neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of multi-topology neighbors. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor.
    Neighbor []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor
}

func (neighbors *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "openconfig"
    neighbors.EntityData.ParentYangName = "mt-isis-neighbor-attribute"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbors.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor
// List of multi-topology neighbors.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the topology that the neighbor is
    // within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the system ID of the neighbor. The
    // type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State_SystemId
    SystemId interface{}

    // State parameters of MT neighbor.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State

    // This container describes IS Neighbor sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
}

func (neighbor *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "openconfig"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.MtId, "mt-id") + types.AddKeyToken(neighbor.SystemId, "system-id")
    neighbor.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    neighbor.EntityData.NamespaceTable = openconfig.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &neighbor.Subtlvs})
    neighbor.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &neighbor.UndefinedSubtlvs})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", neighbor.MtId})
    neighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbor.SystemId})

    neighbor.EntityData.YListKeys = []string {"MtId", "SystemId"}

    return &(neighbor.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State
// State parameters of MT neighbor.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of a topology being announced. The type is interface{} with
    // range: 0..4095.
    MtId interface{}

    // System-id of the IS neighbor. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs
// This container describes IS Neighbor sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "neighbor"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters of IS neighbor state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State

    // This container defines sub-TLV 3.
    AdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress

    // This container defines sub-TLV 9.
    MaxLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth

    // This container defines unreserved-bandwidth. The units are bytes per
    // second.
    UnreservedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 14.
    ExtendedAdminGroup NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup

    // This container defines sub-TLV 18.
    TeDefaultMetric NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric

    // This container defines link-attributes.
    LinkAttributes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes

    // ISIS LSDB parameters relating to the type of link protection offered.
    LinkProtectionType NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType

    // This container defines bandwidth-constraints. For DS-TE, the existing
    // Maximum Reservable link bandwidth parameter is retained, but its semantics
    // is generalized and interpreted as the aggregate bandwidth constraint across
    // all Class-Types.
    BandwidthConstraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints

    // This container defines sub-TLV 23.
    UnconstrainedLsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp

    // This container defines segment routing adjacency SIDs.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids

    // This container defines segment routing LAN adjacency SIDs.
    LanAdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids

    // This container defines unidirectional link delay.
    LinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay

    // This container defines min/max link delay.
    MinMaxLinkDelay NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay

    // This container defines unidirectional link delay variation.
    LinkDelayVariation NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation

    // This container defines unidirectional link loss delay.
    LinkLoss NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss

    // This container defines unidirectional residual bandwidth.
    ResidualBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth

    // This container defines unidirectional lavailable bandwidth.
    AvailableBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth

    // This container defines unidirectional utilized bandwidth.
    UtilizedBandwidth NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", &subtlv.AdminGroup})
    subtlv.EntityData.Children.Append("ipv4-interface-address", types.YChild{"Ipv4InterfaceAddress", &subtlv.Ipv4InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv4-neighbor-address", types.YChild{"Ipv4NeighborAddress", &subtlv.Ipv4NeighborAddress})
    subtlv.EntityData.Children.Append("max-link-bandwidth", types.YChild{"MaxLinkBandwidth", &subtlv.MaxLinkBandwidth})
    subtlv.EntityData.Children.Append("max-reservable-link-bandwidth", types.YChild{"MaxReservableLinkBandwidth", &subtlv.MaxReservableLinkBandwidth})
    subtlv.EntityData.Children.Append("unreserved-bandwidth", types.YChild{"UnreservedBandwidth", &subtlv.UnreservedBandwidth})
    subtlv.EntityData.Children.Append("ipv6-interface-address", types.YChild{"Ipv6InterfaceAddress", &subtlv.Ipv6InterfaceAddress})
    subtlv.EntityData.Children.Append("ipv6-neighbor-address", types.YChild{"Ipv6NeighborAddress", &subtlv.Ipv6NeighborAddress})
    subtlv.EntityData.Children.Append("extended-admin-group", types.YChild{"ExtendedAdminGroup", &subtlv.ExtendedAdminGroup})
    subtlv.EntityData.Children.Append("te-default-metric", types.YChild{"TeDefaultMetric", &subtlv.TeDefaultMetric})
    subtlv.EntityData.Children.Append("link-attributes", types.YChild{"LinkAttributes", &subtlv.LinkAttributes})
    subtlv.EntityData.Children.Append("link-protection-type", types.YChild{"LinkProtectionType", &subtlv.LinkProtectionType})
    subtlv.EntityData.Children.Append("bandwidth-constraints", types.YChild{"BandwidthConstraints", &subtlv.BandwidthConstraints})
    subtlv.EntityData.Children.Append("unconstrained-lsp", types.YChild{"UnconstrainedLsp", &subtlv.UnconstrainedLsp})
    subtlv.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &subtlv.AdjacencySids})
    subtlv.EntityData.Children.Append("lan-adjacency-sids", types.YChild{"LanAdjacencySids", &subtlv.LanAdjacencySids})
    subtlv.EntityData.Children.Append("link-delay", types.YChild{"LinkDelay", &subtlv.LinkDelay})
    subtlv.EntityData.Children.Append("min-max-link-delay", types.YChild{"MinMaxLinkDelay", &subtlv.MinMaxLinkDelay})
    subtlv.EntityData.Children.Append("link-delay-variation", types.YChild{"LinkDelayVariation", &subtlv.LinkDelayVariation})
    subtlv.EntityData.Children.Append("link-loss", types.YChild{"LinkLoss", &subtlv.LinkLoss})
    subtlv.EntityData.Children.Append("residual-bandwidth", types.YChild{"ResidualBandwidth", &subtlv.ResidualBandwidth})
    subtlv.EntityData.Children.Append("available-bandwidth", types.YChild{"AvailableBandwidth", &subtlv.AvailableBandwidth})
    subtlv.EntityData.Children.Append("utilized-bandwidth", types.YChild{"UtilizedBandwidth", &subtlv.UtilizedBandwidth})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State
// State parameters of IS neighbor state
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup
// This container defines sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
}

func (adminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "openconfig"
    adminGroup.EntityData.ParentYangName = "subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()

    adminGroup.EntityData.YListKeys = []string {}

    return &(adminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State
// State parameters of sub-TLV 3.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator.  Each set bit corresponds to one administrative
    // group assigned to the interface. By convention, the least significant bit
    // is referred to as group 0, and the most significant bit is referred to as
    // group 31. The type is slice of interface{} with range: 0..4294967295.
    AdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv4InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv4InterfaceAddress.EntityData.SegmentPath
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddress.State})
    ipv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. This
    // sub-TLV can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "openconfig"
    ipv4NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv4NeighborAddress.EntityData.SegmentPath
    ipv4NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4NeighborAddress.State})
    ipv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv4NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. This sub-TLV
    // can occur multiple times. The type is slice of string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth
// This container defines sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "openconfig"
    maxLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + maxLinkBandwidth.EntityData.SegmentPath
    maxLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxLinkBandwidth.State})
    maxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors).  It is encoded in 32 bits
    // in IEEE floating point format.  The units are bytes (not bits!) per second.
    // The type is string with length: 32..32. Units are bytes per second.
    MaxLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "openconfig"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + maxReservableLinkBandwidth.EntityData.SegmentPath
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxReservableLinkBandwidth.State})
    maxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxReservableLinkBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link.  Note that for oversubscription purposes,  this can be greater
    // than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating
    // point format.  The units are bytes (not bits!) per second. The type is
    // string with length: 32..32. Units are bytes per second.
    MaxReservableLinkBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth
// This container defines unreserved-bandwidth. The units
// are bytes per second.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority.
    SetupPriority []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
}

func (unreservedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "openconfig"
    unreservedBandwidth.EntityData.ParentYangName = "subtlv"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + unreservedBandwidth.EntityData.SegmentPath
    unreservedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Children.Append("setup-priority", types.YChild{"SetupPriority", nil})
    for i := range unreservedBandwidth.SetupPriority {
        unreservedBandwidth.EntityData.Children.Append(types.GetSegmentPath(unreservedBandwidth.SetupPriority[i]), types.YChild{"SetupPriority", unreservedBandwidth.SetupPriority[i]})
    }
    unreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    unreservedBandwidth.EntityData.YListKeys = []string {}

    return &(unreservedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority
// Setup priority (0 through 7) for unreserved
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is string with range: 0..7.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State_Priority
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
}

func (setupPriority *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority) GetEntityData() *types.CommonEntityData {
    setupPriority.EntityData.YFilter = setupPriority.YFilter
    setupPriority.EntityData.YangName = "setup-priority"
    setupPriority.EntityData.BundleName = "openconfig"
    setupPriority.EntityData.ParentYangName = "unreserved-bandwidth"
    setupPriority.EntityData.SegmentPath = "setup-priority" + types.AddKeyToken(setupPriority.Priority, "priority")
    setupPriority.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/" + setupPriority.EntityData.SegmentPath
    setupPriority.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    setupPriority.EntityData.NamespaceTable = openconfig.GetNamespaces()
    setupPriority.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    setupPriority.EntityData.Children = types.NewOrderedMap()
    setupPriority.EntityData.Children.Append("state", types.YChild{"State", &setupPriority.State})
    setupPriority.EntityData.Leafs = types.NewOrderedMap()
    setupPriority.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", setupPriority.Priority})

    setupPriority.EntityData.YListKeys = []string {"Priority"}

    return &(setupPriority.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State
// State parameters of IS Extended Reachability sub-TLV
// 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..7.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. Note
    // that for oversubscription purposes, this can be greater than the bandwidth
    // of the link. It contains eight 32-bit IEEE floating point numbers(one for
    // each priority). The units are bytes (not bits!) per second. The values
    // correspond to the bandwidth that can be reserved with a setup priority of 0
    // through 7, arranged in increasing order with priority 0 occurring at the
    // start of the sub-TLV, and priority 7 at the end of the sub-TLV. The type is
    // string with length: 32..32. Units are bytes per second.
    UnreservedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnreservedBandwidth_SetupPriority_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "setup-priority"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unreserved-bandwidth/setup-priority/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "openconfig"
    ipv6InterfaceAddress.EntityData.ParentYangName = "subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv6InterfaceAddress.EntityData.SegmentPath
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddress.State})
    ipv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. This sub-TLV can occur multiple
    // times. The type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6InterfaceAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress
// This container defines sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "openconfig"
    ipv6NeighborAddress.EntityData.ParentYangName = "subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + ipv6NeighborAddress.EntityData.SegmentPath
    ipv6NeighborAddress.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6NeighborAddress.State})
    ipv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv6NeighborAddress.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. This sub-TLV can occur multiple times. The
    // type is slice of string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6NeighborAddress []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup
// This container defines sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "openconfig"
    extendedAdminGroup.EntityData.ParentYangName = "subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + extendedAdminGroup.EntityData.SegmentPath
    extendedAdminGroup.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = openconfig.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    extendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &extendedAdminGroup.State})
    extendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    extendedAdminGroup.EntityData.YListKeys = []string {}

    return &(extendedAdminGroup.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric
// This container defines sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
}

func (teDefaultMetric *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "openconfig"
    teDefaultMetric.EntityData.ParentYangName = "subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + teDefaultMetric.EntityData.SegmentPath
    teDefaultMetric.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = openconfig.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    teDefaultMetric.EntityData.Children = types.NewOrderedMap()
    teDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &teDefaultMetric.State})
    teDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    teDefaultMetric.EntityData.YListKeys = []string {}

    return &(teDefaultMetric.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. To
    // preclude overflow within a traffic engineering SPF implementation, all
    // metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to
    // have a metric of MAX_PATH_METRIC. The type is interface{} with range:
    // 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes
// This container defines link-attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 19.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
}

func (linkAttributes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes) GetEntityData() *types.CommonEntityData {
    linkAttributes.EntityData.YFilter = linkAttributes.YFilter
    linkAttributes.EntityData.YangName = "link-attributes"
    linkAttributes.EntityData.BundleName = "openconfig"
    linkAttributes.EntityData.ParentYangName = "subtlv"
    linkAttributes.EntityData.SegmentPath = "link-attributes"
    linkAttributes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkAttributes.EntityData.SegmentPath
    linkAttributes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkAttributes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkAttributes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkAttributes.EntityData.Children = types.NewOrderedMap()
    linkAttributes.EntityData.Children.Append("state", types.YChild{"State", &linkAttributes.State})
    linkAttributes.EntityData.Leafs = types.NewOrderedMap()

    linkAttributes.EntityData.YListKeys = []string {}

    return &(linkAttributes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State
// State parameters of IS Extended Reachability sub-TLV
// 19.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link local-protection attributes. The type is slice of LocalProtection.
    LocalProtection []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-attributes"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-attributes/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("local-protection", types.YLeaf{"LocalProtection", state.LocalProtection})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection represents Link local-protection attributes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection string

const (
    // If set, local protection is available for the
    // link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LOCAL_PROTECTION NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LOCAL_PROTECTION"

    // If set, the link is excluded from local
    // protection.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection_LINK_EXCLUDED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkAttributes_State_LocalProtection = "LINK_EXCLUDED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType
// ISIS LSDB parameters relating to the type of link
// protection offered.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 20.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
}

func (linkProtectionType *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType) GetEntityData() *types.CommonEntityData {
    linkProtectionType.EntityData.YFilter = linkProtectionType.YFilter
    linkProtectionType.EntityData.YangName = "link-protection-type"
    linkProtectionType.EntityData.BundleName = "openconfig"
    linkProtectionType.EntityData.ParentYangName = "subtlv"
    linkProtectionType.EntityData.SegmentPath = "link-protection-type"
    linkProtectionType.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkProtectionType.EntityData.SegmentPath
    linkProtectionType.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkProtectionType.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkProtectionType.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkProtectionType.EntityData.Children = types.NewOrderedMap()
    linkProtectionType.EntityData.Children.Append("state", types.YChild{"State", &linkProtectionType.State})
    linkProtectionType.EntityData.Leafs = types.NewOrderedMap()

    linkProtectionType.EntityData.YListKeys = []string {}

    return &(linkProtectionType.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State
// State parameters of sub-TLV 20.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Link protection capabilities. The type is slice of LinkProtectionType_.
    LinkProtectionType []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-protection-type"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-protection-type/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("link-protection-type", types.YLeaf{"LinkProtectionType", state.LinkProtectionType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ represents Link protection capabilities.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ string

const (
    // If set the link has extra traffic protection. If
    // the link is of type Extra Traffic, it means that
    // the link is protecting another link or links. The
    // LSPs on a link of this type will be lost if any of
    // the links it is protecting fail.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__EXTRA_TRAFFIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "EXTRA_TRAFFIC"

    // If set, the link is unprotected. If the link is
    // of type Unprotected, it means that there is no
    // other link protecting this link.  The LSPs on a
    // link of this type will be lost if the link
    // fails.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__UNPROTECTED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "UNPROTECTED"

    // If set, the link has shared protection. If the
    // link is of type Shared, it means that there are
    // one or more disjoint links of type Extra Traffic
    // that are protecting this link.  These Extra
    // Traffic links are shared between one or more links
    // of type Shared.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__SHARED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "SHARED"

    // If set, the link has dedicated 1:1 protection. If
    // the link is of type Dedicated 1:1, it means that
    // there is one dedicated disjoint link of type Extra
    // Traffic that is protecting this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ONE_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ONE_ONE"

    // If set, the link has dedicated 1+1 protection. If
    // the link is of type Dedicated 1+1, it means that a
    // dedicated disjoint link is protecting this link.
    // However, the protecting link is not advertised in
    // the link state database and is therefore not
    // available for the routing of LSPs.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__PLUS_ONE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "PLUS_ONE"

    // If set the link has enhanced protection.  If the
    // link is of type Enhanced, it means that a
    // protection scheme that is more reliable than
    // Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
    // being used to protect this link.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType__ENHANCED NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkProtectionType_State_LinkProtectionType_ = "ENHANCED"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints
// This container defines bandwidth-constraints. For DS-TE,
// the existing Maximum Reservable link bandwidth parameter
// is retained, but its semantics is generalized and
// interpreted as the aggregate bandwidth constraint across
// all Class-Types
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "openconfig"
    bandwidthConstraints.EntityData.ParentYangName = "subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + bandwidthConstraints.EntityData.SegmentPath
    bandwidthConstraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraints.EntityData.Children.Append("bandwidth-constraint", types.YChild{"BandwidthConstraint", nil})
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraints.BandwidthConstraint[i]), types.YChild{"BandwidthConstraint", bandwidthConstraints.BandwidthConstraint[i]})
    }
    bandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is string with
    // range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State_ModelId
    ModelId interface{}

    // State parameters of IS Extended Reachability sub-TLV 22.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State

    // Constraints contained within the Bandwidth Constraints sub-TLV.
    Constraints NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
}

func (bandwidthConstraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "openconfig"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + types.AddKeyToken(bandwidthConstraint.ModelId, "model-id")
    bandwidthConstraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/" + bandwidthConstraint.EntityData.SegmentPath
    bandwidthConstraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Children.Append("state", types.YChild{"State", &bandwidthConstraint.State})
    bandwidthConstraint.EntityData.Children.Append("constraints", types.YChild{"Constraints", &bandwidthConstraint.Constraints})
    bandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraint.ModelId})

    bandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(bandwidthConstraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State
// State parameters of IS Extended Reachability sub-TLV
// 22.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bandwidth-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", state.ModelId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// Constraints contained within the Bandwidth Constraints sub-TLV
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The BC0
    // level is indicated by the constraint-id leaf being set to 0, with BCN being
    // indicated by constraint-id N. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "openconfig"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/" + constraints.EntityData.SegmentPath
    constraints.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraints.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraints.EntityData.Children = types.NewOrderedMap()
    constraints.EntityData.Children.Append("constraint", types.YChild{"Constraint", nil})
    for i := range constraints.Constraint {
        constraints.EntityData.Children.Append(types.GetSegmentPath(constraints.Constraint[i]), types.YChild{"Constraint", constraints.Constraint[i]})
    }
    constraints.EntityData.Leafs = types.NewOrderedMap()

    constraints.EntityData.YListKeys = []string {}

    return &(constraints.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints within the Bandwidth Constraints
// sub-TLV. The BC0 level is indicated by the constraint-id
// leaf being set to 0, with BCN being indicated by constraint-id
// N.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State_ConstraintId
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "openconfig"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + types.AddKeyToken(constraint.ConstraintId, "constraint-id")
    constraint.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/" + constraint.EntityData.SegmentPath
    constraint.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    constraint.EntityData.NamespaceTable = openconfig.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    constraint.EntityData.Children = types.NewOrderedMap()
    constraint.EntityData.Children.Append("state", types.YChild{"State", &constraint.State})
    constraint.EntityData.Leafs = types.NewOrderedMap()
    constraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", constraint.ConstraintId})

    constraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(constraint.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. BC0 is indicated by
    // this leaf being set to zero, with BCN represented by this leaf being set to
    // N. The type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string with length: 32..32.
    // Units are bytes per second.
    Bandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp
// This container defines sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 23.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
}

func (unconstrainedLsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp) GetEntityData() *types.CommonEntityData {
    unconstrainedLsp.EntityData.YFilter = unconstrainedLsp.YFilter
    unconstrainedLsp.EntityData.YangName = "unconstrained-lsp"
    unconstrainedLsp.EntityData.BundleName = "openconfig"
    unconstrainedLsp.EntityData.ParentYangName = "subtlv"
    unconstrainedLsp.EntityData.SegmentPath = "unconstrained-lsp"
    unconstrainedLsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + unconstrainedLsp.EntityData.SegmentPath
    unconstrainedLsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unconstrainedLsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unconstrainedLsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unconstrainedLsp.EntityData.Children = types.NewOrderedMap()
    unconstrainedLsp.EntityData.Children.Append("state", types.YChild{"State", &unconstrainedLsp.State})
    unconstrainedLsp.EntityData.Leafs = types.NewOrderedMap()

    unconstrainedLsp.EntityData.YListKeys = []string {}

    return &(unconstrainedLsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State
// State parameters of sub-TLV 23.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with
    // zero bandwidth). The type is interface{} with range: 0..65535.
    UnconstrainedLsp interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UnconstrainedLsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unconstrained-lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/unconstrained-lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("unconstrained-lsp", types.YLeaf{"UnconstrainedLsp", state.UnconstrainedLsp})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids
// This container defines segment routing adjacency SIDs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Value
    Value interface{}

    // State parameters of Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Value, "value")
    adjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", adjacencySid.Value})

    adjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags represents Flags associated with Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AdjacencySids_AdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids
// This container defines segment routing LAN adjacency
// SIDs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment
    // attached to a unidirectional adjacency or a set of unidirectional
    // adjacencies. By default, an IGP- Adjacency Segment is local to the node
    // which advertises it. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "openconfig"
    lanAdjacencySids.EntityData.ParentYangName = "subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + lanAdjacencySids.EntityData.SegmentPath
    lanAdjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySids.EntityData.Children.Append("lan-adjacency-sid", types.YChild{"LanAdjacencySid", nil})
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(lanAdjacencySids.LanAdjacencySid[i]), types.YChild{"LanAdjacencySid", lanAdjacencySids.LanAdjacencySid[i]})
    }
    lanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    lanAdjacencySids.EntityData.YListKeys = []string {}

    return &(lanAdjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Value
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "openconfig"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + types.AddKeyToken(lanAdjacencySid.Value, "value")
    lanAdjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/" + lanAdjacencySid.EntityData.SegmentPath
    lanAdjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &lanAdjacencySid.State})
    lanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", lanAdjacencySid.Value})

    lanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(lanAdjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    NeighborId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags represents Flags associated with LAN-Adj-Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers to
    // an adjacency with outgoing IPv6 encapsulation.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_ADDRESS_FAMILY NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "ADDRESS_FAMILY"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_BACKUP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "BACKUP"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "LOCAL"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags_SET NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LanAdjacencySids_LanAdjacencySid_State_Flags = "SET"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay
// This container defines unidirectional link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 33.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
}

func (linkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay) GetEntityData() *types.CommonEntityData {
    linkDelay.EntityData.YFilter = linkDelay.YFilter
    linkDelay.EntityData.YangName = "link-delay"
    linkDelay.EntityData.BundleName = "openconfig"
    linkDelay.EntityData.ParentYangName = "subtlv"
    linkDelay.EntityData.SegmentPath = "link-delay"
    linkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkDelay.EntityData.SegmentPath
    linkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelay.EntityData.Children = types.NewOrderedMap()
    linkDelay.EntityData.Children.Append("state", types.YChild{"State", &linkDelay.State})
    linkDelay.EntityData.Leafs = types.NewOrderedMap()

    linkDelay.EntityData.YListKeys = []string {}

    return &(linkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 33.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Average link delay value (in microseconds) between two directly connected
    // IS-IS neighbors over a configurable interval. The type is interface{} with
    // range: 0..4294967295. Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay
// This container defines min/max link delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 34.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
}

func (minMaxLinkDelay *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay) GetEntityData() *types.CommonEntityData {
    minMaxLinkDelay.EntityData.YFilter = minMaxLinkDelay.YFilter
    minMaxLinkDelay.EntityData.YangName = "min-max-link-delay"
    minMaxLinkDelay.EntityData.BundleName = "openconfig"
    minMaxLinkDelay.EntityData.ParentYangName = "subtlv"
    minMaxLinkDelay.EntityData.SegmentPath = "min-max-link-delay"
    minMaxLinkDelay.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + minMaxLinkDelay.EntityData.SegmentPath
    minMaxLinkDelay.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    minMaxLinkDelay.EntityData.NamespaceTable = openconfig.GetNamespaces()
    minMaxLinkDelay.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    minMaxLinkDelay.EntityData.Children = types.NewOrderedMap()
    minMaxLinkDelay.EntityData.Children.Append("state", types.YChild{"State", &minMaxLinkDelay.State})
    minMaxLinkDelay.EntityData.Leafs = types.NewOrderedMap()

    minMaxLinkDelay.EntityData.YListKeys = []string {}

    return &(minMaxLinkDelay.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State
// State parameters of IS Extended Reachability sub-TLV
// 34.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Minimum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MinDelay interface{}

    // Maximum measured link delay value(in microseconds) between two directly
    // connected IS-IS neighbors over a configurable interval. The type is
    // interface{} with range: 0..4294967295. Units are microseconds.
    MaxDelay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_MinMaxLinkDelay_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "min-max-link-delay"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/min-max-link-delay/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("min-delay", types.YLeaf{"MinDelay", state.MinDelay})
    state.EntityData.Leafs.Append("max-delay", types.YLeaf{"MaxDelay", state.MaxDelay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation
// This container defines unidirectional link delay
// variation.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 35.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
}

func (linkDelayVariation *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation) GetEntityData() *types.CommonEntityData {
    linkDelayVariation.EntityData.YFilter = linkDelayVariation.YFilter
    linkDelayVariation.EntityData.YangName = "link-delay-variation"
    linkDelayVariation.EntityData.BundleName = "openconfig"
    linkDelayVariation.EntityData.ParentYangName = "subtlv"
    linkDelayVariation.EntityData.SegmentPath = "link-delay-variation"
    linkDelayVariation.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkDelayVariation.EntityData.SegmentPath
    linkDelayVariation.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkDelayVariation.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkDelayVariation.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkDelayVariation.EntityData.Children = types.NewOrderedMap()
    linkDelayVariation.EntityData.Children.Append("state", types.YChild{"State", &linkDelayVariation.State})
    linkDelayVariation.EntityData.Leafs = types.NewOrderedMap()

    linkDelayVariation.EntityData.YListKeys = []string {}

    return &(linkDelayVariation.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State
// State parameters of IS Extended Reachability sub-TLV
// 35.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Average link delay between two directly connected IS- IS neighbors over a
    // configurable interval. The type is interface{} with range: 0..4294967295.
    // Units are microseconds.
    Delay interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkDelayVariation_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-delay-variation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-delay-variation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss
// This container defines unidirectional link loss delay.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 36.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
}

func (linkLoss *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss) GetEntityData() *types.CommonEntityData {
    linkLoss.EntityData.YFilter = linkLoss.YFilter
    linkLoss.EntityData.YangName = "link-loss"
    linkLoss.EntityData.BundleName = "openconfig"
    linkLoss.EntityData.ParentYangName = "subtlv"
    linkLoss.EntityData.SegmentPath = "link-loss"
    linkLoss.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + linkLoss.EntityData.SegmentPath
    linkLoss.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    linkLoss.EntityData.NamespaceTable = openconfig.GetNamespaces()
    linkLoss.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    linkLoss.EntityData.Children = types.NewOrderedMap()
    linkLoss.EntityData.Children.Append("state", types.YChild{"State", &linkLoss.State})
    linkLoss.EntityData.Leafs = types.NewOrderedMap()

    linkLoss.EntityData.YListKeys = []string {}

    return &(linkLoss.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State
// State parameters of IS Extended Reachability sub-TLV
// 36.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The A bit is set when the measured value of this parameter exceeds its
    // configured maximum threshold. The A bit is cleared when the measured value
    // falls below its configured reuse threshold. The type is bool.
    ABit interface{}

    // Link packet loss as a percentage of the total traffic sent over a
    // configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is
    // 50.331642%. This value is the highest packet-loss percentage that can be
    // expressed (the assumption being that precision is more important on
    // high-speed links than the ability to advertise loss rates greater than
    // this, and that high- speed links with over 50% loss are unusable).
    // Therefore, measured values that are larger than the field maximum SHOULD be
    // encoded as the maximum value. The type is interface{} with range:
    // 0..4294967295.
    LinkLoss interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_LinkLoss_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "link-loss"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/link-loss/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("a-bit", types.YLeaf{"ABit", state.ABit})
    state.EntityData.Leafs.Append("link-loss", types.YLeaf{"LinkLoss", state.LinkLoss})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth
// This container defines unidirectional residual
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 37.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
}

func (residualBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth) GetEntityData() *types.CommonEntityData {
    residualBandwidth.EntityData.YFilter = residualBandwidth.YFilter
    residualBandwidth.EntityData.YangName = "residual-bandwidth"
    residualBandwidth.EntityData.BundleName = "openconfig"
    residualBandwidth.EntityData.ParentYangName = "subtlv"
    residualBandwidth.EntityData.SegmentPath = "residual-bandwidth"
    residualBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + residualBandwidth.EntityData.SegmentPath
    residualBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    residualBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    residualBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    residualBandwidth.EntityData.Children = types.NewOrderedMap()
    residualBandwidth.EntityData.Children.Append("state", types.YChild{"State", &residualBandwidth.State})
    residualBandwidth.EntityData.Leafs = types.NewOrderedMap()

    residualBandwidth.EntityData.YListKeys = []string {}

    return &(residualBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 37.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled
    // link in IEEE floating-point format with units of bytes per second. For a
    // link or forwarding adjacency, residual bandwidth is defined to be the
    // Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to
    // RSVP-TE label switched paths. For a bundled link, residual bandwidth is
    // defined to be the sum of the component link residual bandwidths. The type
    // is string with length: 32..32. Units are bytes per second.
    ResidualBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_ResidualBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "residual-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/residual-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("residual-bandwidth", types.YLeaf{"ResidualBandwidth", state.ResidualBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth
// This container defines unidirectional lavailable
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 38.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
}

func (availableBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth) GetEntityData() *types.CommonEntityData {
    availableBandwidth.EntityData.YFilter = availableBandwidth.YFilter
    availableBandwidth.EntityData.YangName = "available-bandwidth"
    availableBandwidth.EntityData.BundleName = "openconfig"
    availableBandwidth.EntityData.ParentYangName = "subtlv"
    availableBandwidth.EntityData.SegmentPath = "available-bandwidth"
    availableBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + availableBandwidth.EntityData.SegmentPath
    availableBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    availableBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    availableBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    availableBandwidth.EntityData.Children = types.NewOrderedMap()
    availableBandwidth.EntityData.Children.Append("state", types.YChild{"State", &availableBandwidth.State})
    availableBandwidth.EntityData.Leafs = types.NewOrderedMap()

    availableBandwidth.EntityData.YListKeys = []string {}

    return &(availableBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 38.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:
    // ISREACHABILITYSUBTLVSTYPEISREACHABILITYLINKPROTECTIONTYPEISREACHABILITYLINKLOSSISREACHABILITYIPV4INTERFACEADDRESSISREACHABILITYIPV4NEIGHBORADDRESSISREACHABILITYEXTENDEDADMINGROUPISREACHABILITYBANDWIDTHCONSTRAINTSISREACHABILITYIPV6INTERFACEADDRESSISREACHABILITYADJSIDISREACHABILITYLINKATTRIBUTESISREACHABILITYAVAILABLEBANDWIDTHISREACHABILITYADJLANSIDISREACHABILITYUTILIZEDBANDWIDTHISREACHABILITYMINMAXLINKDELAYISREACHABILITYMAXRESERVABLEBANDWIDTHISREACHABILITYMAXLINKBANDWIDTHISREACHABILITYUNRESERVEDBANDWIDTHISREACHABILITYADMINGROUPISREACHABILITYLINKDELAYISREACHABILITYTEDEFAULTMETRICISREACHABILITYUNCONSTRAINEDLSPISREACHABILITYIPV6NEIGHBORADDRESSISREACHABILITYRESIDUALBANDWIDTHISREACHABILITYLINKDELAYVARIATIONROUTERCAPABILITYSUBTLVSTYPEROUTERCAPABILITYSRCAPABILITYROUTERCAPABILITYSRALGORITHMIPREACHABILITYSUBTLVSTYPEIPREACHABILITYTAGIPREACHABILITYIPV4ROUTERIDIPREACHABILITYPREFIXSIDIPREACHABILITYPREFIXFLAGSIPREACHABILITYTAG64IPREACHABILITYIPV6ROUTERID.
    Type interface{}

    // The available bandwidth on a link, forwarding adjacency, or bundled link in
    // IEEE floating-point format with units of bytes per second. For a link or
    // forwarding adjacency, available bandwidth is defined to be residual
    // bandwidth minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths minus the measured bandwidth used for the actual forwarding of
    // non-RSVP-TE label switched path packets.  For a bundled link, available
    // bandwidth is defined to be the sum of the component link available
    // bandwidths. The type is string with length: 32..32. Units are bytes per
    // second.
    AvailableBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_AvailableBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "available-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/available-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("available-bandwidth", types.YLeaf{"AvailableBandwidth", state.AvailableBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth
// This container defines unidirectional utilized
// bandwidth.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS Extended Reachability sub-TLV 39.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
}

func (utilizedBandwidth *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth) GetEntityData() *types.CommonEntityData {
    utilizedBandwidth.EntityData.YFilter = utilizedBandwidth.YFilter
    utilizedBandwidth.EntityData.YangName = "utilized-bandwidth"
    utilizedBandwidth.EntityData.BundleName = "openconfig"
    utilizedBandwidth.EntityData.ParentYangName = "subtlv"
    utilizedBandwidth.EntityData.SegmentPath = "utilized-bandwidth"
    utilizedBandwidth.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/" + utilizedBandwidth.EntityData.SegmentPath
    utilizedBandwidth.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    utilizedBandwidth.EntityData.NamespaceTable = openconfig.GetNamespaces()
    utilizedBandwidth.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    utilizedBandwidth.EntityData.Children = types.NewOrderedMap()
    utilizedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &utilizedBandwidth.State})
    utilizedBandwidth.EntityData.Leafs = types.NewOrderedMap()

    utilizedBandwidth.EntityData.YListKeys = []string {}

    return &(utilizedBandwidth.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State
// State parameters of IS Extended Reachability sub-TLV
// 39.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // The bandwidth utilization on a link, forwarding adjacency, or bundled link
    // in IEEE floating-point format with units of bytes per second.  For a link
    // or forwarding adjacency, bandwidth utilization represents the actual
    // utilization of the link (i.e., as measured by the advertising node).  For a
    // bundled link, bandwidth utilization is defined to be the sum of the
    // component link bandwidth utilizations. The type is string with length:
    // 32..32. Units are bytes per second.
    UtilizedBandwidth interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_Subtlvs_Subtlv_UtilizedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "utilized-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/subtlvs/subtlv/utilized-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("utilized-bandwidth", types.YLeaf{"UtilizedBandwidth", state.UtilizedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "neighbor"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIsisNeighborAttribute_Neighbors_Neighbor_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute/neighbors/neighbor/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability
// This container defines list of IPv4 reachability
// Information in multi-topology environment.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes
}

func (mtIpv4Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv4Reachability.EntityData.YFilter = mtIpv4Reachability.YFilter
    mtIpv4Reachability.EntityData.YangName = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.BundleName = "openconfig"
    mtIpv4Reachability.EntityData.ParentYangName = "tlv"
    mtIpv4Reachability.EntityData.SegmentPath = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + mtIpv4Reachability.EntityData.SegmentPath
    mtIpv4Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIpv4Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIpv4Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIpv4Reachability.EntityData.Children = types.NewOrderedMap()
    mtIpv4Reachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &mtIpv4Reachability.Prefixes})
    mtIpv4Reachability.EntityData.Leafs = types.NewOrderedMap()

    mtIpv4Reachability.EntityData.YListKeys = []string {}

    return &(mtIpv4Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes that are contained within MT reachability TLV. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix.
    Prefix []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "mt-ipv4-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefix[i]), types.YChild{"Prefix", prefixes.Prefix[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix
// IPv4 prefixes that are contained within MT
// reachability TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the topology ID of the topology that
    // the prefix is within. The type is string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State_MtId
    MtId interface{}

    // This attribute is a key. Reference to the prefix to which reachability is
    // being advertised. The type is string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + types.AddKeyToken(prefix.MtId, "mt-id") + types.AddKeyToken(prefix.Prefix, "prefix")
    prefix.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Children.Append("state", types.YChild{"State", &prefix.State})
    prefix.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &prefix.Subtlvs})
    prefix.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs})
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", prefix.MtId})
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})

    prefix.EntityData.YListKeys = []string {"MtId", "Prefix"}

    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State
// State parameters of an IPv4 extended prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("s-bit", types.YLeaf{"SBit", state.SBit})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("tag", types.YChild{"Tag", &subtlv.Tag})
    subtlv.EntityData.Children.Append("tag64", types.YChild{"Tag64", &subtlv.Tag64})
    subtlv.EntityData.Children.Append("flags", types.YChild{"Flags", &subtlv.Flags})
    subtlv.EntityData.Children.Append("ipv4-source-router-id", types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId})
    subtlv.EntityData.Children.Append("ipv6-source-router-id", types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId})
    subtlv.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &subtlv.PrefixSids})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + tag.EntityData.SegmentPath
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = types.NewOrderedMap()
    tag.EntityData.Children.Append("state", types.YChild{"State", &tag.State})
    tag.EntityData.Leafs = types.NewOrderedMap()

    tag.EntityData.YListKeys = []string {}

    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + tag64.EntityData.SegmentPath
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = types.NewOrderedMap()
    tag64.EntityData.Children.Append("state", types.YChild{"State", &tag64.State})
    tag64.EntityData.Leafs = types.NewOrderedMap()

    tag64.EntityData.YListKeys = []string {}

    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Children.Append("state", types.YChild{"State", &flags.State})
    flags.EntityData.Leafs = types.NewOrderedMap()

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv4SourceRouterId.EntityData.SegmentPath
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4SourceRouterId.State})
    ipv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv6SourceRouterId.EntityData.SegmentPath
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6SourceRouterId.State})
    ipv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Value, "value")
    prefixSid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixSid.Value})

    prefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv4Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability
// This container defines list of IPv6 reachability
// information in multi - topology environment.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS prefixes.
    Prefixes NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes
}

func (mtIpv6Reachability *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv6Reachability.EntityData.YFilter = mtIpv6Reachability.YFilter
    mtIpv6Reachability.EntityData.YangName = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.BundleName = "openconfig"
    mtIpv6Reachability.EntityData.ParentYangName = "tlv"
    mtIpv6Reachability.EntityData.SegmentPath = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/" + mtIpv6Reachability.EntityData.SegmentPath
    mtIpv6Reachability.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    mtIpv6Reachability.EntityData.NamespaceTable = openconfig.GetNamespaces()
    mtIpv6Reachability.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    mtIpv6Reachability.EntityData.Children = types.NewOrderedMap()
    mtIpv6Reachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &mtIpv6Reachability.Prefixes})
    mtIpv6Reachability.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6Reachability.EntityData.YListKeys = []string {}

    return &(mtIpv6Reachability.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes
// This container describes IS prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of IPv6 prefixes contained within MT reachability TLV. The type is
    // slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix.
    Prefix []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix
}

func (prefixes *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "openconfig"
    prefixes.EntityData.ParentYangName = "mt-ipv6-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixes.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range prefixes.Prefix {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefix[i]), types.YChild{"Prefix", prefixes.Prefix[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix
// List of IPv6 prefixes contained within MT
// reachability TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv6 prefix described by the TLV.
    // The type is string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State_Prefix
    Prefix interface{}

    // This attribute is a key. Reference to the multi-topology ID. The type is
    // string with range: 0..4095. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State_MtId
    MtId interface{}

    // State parameters relating an IPv6 prefix attribute.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State

    // This container describes IS prefix sub-TLVs.
    Subtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs

    // This container describes undefined ISIS TLVs.
    UndefinedSubtlvs NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs
}

func (prefix *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "openconfig"
    prefix.EntityData.ParentYangName = "prefixes"
    prefix.EntityData.SegmentPath = "prefix" + types.AddKeyToken(prefix.Prefix, "prefix") + types.AddKeyToken(prefix.MtId, "mt-id")
    prefix.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefix.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Children.Append("state", types.YChild{"State", &prefix.State})
    prefix.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &prefix.Subtlvs})
    prefix.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &prefix.UndefinedSubtlvs})
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", prefix.MtId})

    prefix.EntityData.YListKeys = []string {"Prefix", "MtId"}

    return &(prefix.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State
// State parameters relating an IPv6 prefix attribute
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. Set if a prefix is advertised from a higher level to a
    // lower level (e.g., level 2 to level 1), indicating that the prefix has
    // traveled down the hierarchy. Prefixes that have the up/down bit set may
    // only be advertised down the hierarchy, i.e., to lower levels. When a prefix
    // is first injected into IS-IS, the bit is UNSET. The type is bool.
    UpDown interface{}

    // The external bit. Set when the prefix was distributed into IS-IS from
    // another routing protocol. The type is bool.
    XBit interface{}

    // The sub-tlv present bit. If UNSET, the octets of Sub-TLVs are not present.
    // Otherwise, the bit is set and the octet following the prefix will contain
    // the length of the Sub-TLV portion of the structure. The type is bool.
    SBit interface{}

    // IPv6 prefix contained within extended reachability TLVs. The type is string
    // with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])$.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 1..16777215.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..4095.
    MtId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("x-bit", types.YLeaf{"XBit", state.XBit})
    state.EntityData.Leafs.Append("s-bit", types.YLeaf{"SBit", state.SBit})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs
// This container describes IS prefix sub-TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv.
    Subtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv
}

func (subtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "openconfig"
    subtlvs.EntityData.ParentYangName = "prefix"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv
// List of subTLV types in the LSDB for the specified TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is one of
    // the following:

    Type interface{}

    // State parameters for a prefix.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State

    // This container defines sub-TLV 1.
    Tag NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag

    // This container defines sub-TLV 2.
    Tag64 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64

    // This container defines sub-TLV 4.
    Flags NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId

    // This container defines segment routing extensions for prefixes.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
}

func (subtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "openconfig"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    subtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("state", types.YChild{"State", &subtlv.State})
    subtlv.EntityData.Children.Append("tag", types.YChild{"Tag", &subtlv.Tag})
    subtlv.EntityData.Children.Append("tag64", types.YChild{"Tag64", &subtlv.Tag64})
    subtlv.EntityData.Children.Append("flags", types.YChild{"Flags", &subtlv.Flags})
    subtlv.EntityData.Children.Append("ipv4-source-router-id", types.YChild{"Ipv4SourceRouterId", &subtlv.Ipv4SourceRouterId})
    subtlv.EntityData.Children.Append("ipv6-source-router-id", types.YChild{"Ipv6SourceRouterId", &subtlv.Ipv6SourceRouterId})
    subtlv.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &subtlv.PrefixSids})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State
// State parameters for a prefix.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag
// This container defines sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
}

func (tag *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "openconfig"
    tag.EntityData.ParentYangName = "subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + tag.EntityData.SegmentPath
    tag.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag.EntityData.Children = types.NewOrderedMap()
    tag.EntityData.Children.Append("state", types.YChild{"State", &tag.State})
    tag.EntityData.Leafs = types.NewOrderedMap()

    tag.EntityData.YListKeys = []string {}

    return &(tag.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State
// State parameters of sub-TLV 1.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64
// This container defines sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
}

func (tag64 *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "openconfig"
    tag64.EntityData.ParentYangName = "subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + tag64.EntityData.SegmentPath
    tag64.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    tag64.EntityData.NamespaceTable = openconfig.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    tag64.EntityData.Children = types.NewOrderedMap()
    tag64.EntityData.Children.Append("state", types.YChild{"State", &tag64.State})
    tag64.EntityData.Leafs = types.NewOrderedMap()

    tag64.EntityData.YListKeys = []string {}

    return &(tag64.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State
// State parameters of sub-TLV 2.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. Example uses of these tags
    // include carrying BGP standard (or extended) communities and controlling
    // redistribution between levels and areas, different routing protocols, or
    // multiple instances of IS-IS running on the same router. The type is slice
    // of interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags
// This container defines sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
}

func (flags *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "openconfig"
    flags.EntityData.ParentYangName = "subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    flags.EntityData.NamespaceTable = openconfig.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Children.Append("state", types.YChild{"State", &flags.State})
    flags.EntityData.Leafs = types.NewOrderedMap()

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State
// State parameters of sub-TLV 4.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // Additional prefix reachability flags. The type is slice of Flags_.
    Flags []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ represents Additional prefix reachability flags.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ string

const (
    // External prefix flag. Set if the prefix has been
    // redistributed from another protocol. This includes
    // the case where multiple virtual routers are
    // supported and the source of the redistributed prefix
    // is another IS-IS instance.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__EXTERNAL_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "EXTERNAL_FLAG"

    // Readvertisement flag. Set when the prefix has been
    // leaked from one level to another (upwards or
    // downwards).
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__READVERTISEMENT_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "READVERTISEMENT_FLAG"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable address
    // typically associated with a loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags__NODE_FLAG NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Flags_State_Flags_ = "NODE_FLAG"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId
// This container defines sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "openconfig"
    ipv4SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv4SourceRouterId.EntityData.SegmentPath
    ipv4SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4SourceRouterId.State})
    ipv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv4SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv4 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$.
    Ipv4SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId
// This container defines sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "openconfig"
    ipv6SourceRouterId.EntityData.ParentYangName = "subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + ipv6SourceRouterId.EntityData.SegmentPath
    ipv6SourceRouterId.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6SourceRouterId.State})
    ipv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv6SourceRouterId.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type of subTLV is expressed as a
    // canonical name. The type is one of the following:

    Type interface{}

    // IPv6 Source router ID address. In cases where the advertisement is an
    // identifier for the advertising router (e.g., with the N-flag set in the
    // Prefix Attribute Flags sub-TLV), it may be useful for other routers to know
    // the source of the advertisement. When reachability advertisement is leaked
    // from one level to another, Router ID advertised is always the Router ID of
    // the IS-IS instance that originated the advertisement. This would be true
    // even if the prefix had been learned from another protocol. The type is
    // string with pattern:
    // ^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$.
    Ipv6SourceRouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids
// This container defines segment routing extensions for
// prefixes.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an
    // IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised
    // otherwise) within the SR/IGP domain. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid.
    PrefixSid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is string with range: 0..4294967295. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Value
    Value interface{}

    // State parameters for Prefix-SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Value, "value")
    prefixSid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixSid.Value})

    prefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of Flags.
    Flags []interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags represents Flags associated with Prefix Segment-ID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags string

const (
    // Readvertisment flag. When set, the prefix to which
    // this Prefix-SID is attached, has been propagated by
    // the router either from another level or from
    // redistribution.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_READVERTISEMENT NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "READVERTISEMENT"

    // Node flag. When set, the Prefix-SID refers to the
    // router identified by the prefix. Typically, the
    // N-Flag is set on Prefix-SIDs attached to a router
    // loopback address.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_NODE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "NODE"

    // Penultimate-Hop-Popping flag. When set, then the
    // penultimate hop MUST NOT pop the Prefix-SID before
    // delivering the packet to the node that advertised
    // the Prefix-SID.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "PHP"

    // Explicit-Null flag. When set, any upstream neighbor
    // of the Prefix-SID originator MUST replace the
    // Prefix-SID with a Prefix-SID having an Explicit-NULL
    // value (0 for IPv4 and 2 for IPv6) before forwarding
    // the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "EXPLICIT_NULL"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the flag is
    // UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_VALUE NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "VALUE"

    // Local flag. When set, the value/index carried by
    // the Prefix-SID has local significance. By default
    // the flag is UNSET.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags_LOCAL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_Subtlvs_Subtlv_PrefixSids_PrefixSid_State_Flags = "LOCAL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs
// This container describes undefined ISIS TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "openconfig"
    undefinedSubtlvs.EntityData.ParentYangName = "prefix"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in the model or not
// recognised by system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State_Type
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "openconfig"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_MtIpv6Reachability_Prefixes_Prefix_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs
// Surrounding container for a list of unknown TLVs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs that are not defined within the model, or are not recognised
    // by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv.
    UndefinedTlv []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv
}

func (undefinedTlvs *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs) GetEntityData() *types.CommonEntityData {
    undefinedTlvs.EntityData.YFilter = undefinedTlvs.YFilter
    undefinedTlvs.EntityData.YangName = "undefined-tlvs"
    undefinedTlvs.EntityData.BundleName = "openconfig"
    undefinedTlvs.EntityData.ParentYangName = "lsp"
    undefinedTlvs.EntityData.SegmentPath = "undefined-tlvs"
    undefinedTlvs.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/" + undefinedTlvs.EntityData.SegmentPath
    undefinedTlvs.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedTlvs.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedTlvs.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedTlvs.EntityData.Children = types.NewOrderedMap()
    undefinedTlvs.EntityData.Children.Append("undefined-tlv", types.YChild{"UndefinedTlv", nil})
    for i := range undefinedTlvs.UndefinedTlv {
        undefinedTlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedTlvs.UndefinedTlv[i]), types.YChild{"UndefinedTlv", undefinedTlvs.UndefinedTlv[i]})
    }
    undefinedTlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedTlvs.EntityData.YListKeys = []string {}

    return &(undefinedTlvs.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv
// List of TLVs that are not defined within the model, or are
// not recognised by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the undefined TLV's type. The type is
    // string with range: 0..255. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State_Type
    Type interface{}

    // State parameters of the undefined TLV.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State
}

func (undefinedTlv *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv) GetEntityData() *types.CommonEntityData {
    undefinedTlv.EntityData.YFilter = undefinedTlv.YFilter
    undefinedTlv.EntityData.YangName = "undefined-tlv"
    undefinedTlv.EntityData.BundleName = "openconfig"
    undefinedTlv.EntityData.ParentYangName = "undefined-tlvs"
    undefinedTlv.EntityData.SegmentPath = "undefined-tlv" + types.AddKeyToken(undefinedTlv.Type, "type")
    undefinedTlv.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/" + undefinedTlv.EntityData.SegmentPath
    undefinedTlv.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    undefinedTlv.EntityData.NamespaceTable = openconfig.GetNamespaces()
    undefinedTlv.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    undefinedTlv.EntityData.Children = types.NewOrderedMap()
    undefinedTlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedTlv.State})
    undefinedTlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedTlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedTlv.Type})

    undefinedTlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedTlv.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State
// State parameters of the undefined TLV.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_UndefinedTlvs_UndefinedTlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "undefined-tlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering
// This container defines ISIS TE.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS TE configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config

    // This container defines ISIS TE state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
}

func (trafficEngineering *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering) GetEntityData() *types.CommonEntityData {
    trafficEngineering.EntityData.YFilter = trafficEngineering.YFilter
    trafficEngineering.EntityData.YangName = "traffic-engineering"
    trafficEngineering.EntityData.BundleName = "openconfig"
    trafficEngineering.EntityData.ParentYangName = "level"
    trafficEngineering.EntityData.SegmentPath = "traffic-engineering"
    trafficEngineering.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + trafficEngineering.EntityData.SegmentPath
    trafficEngineering.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    trafficEngineering.EntityData.NamespaceTable = openconfig.GetNamespaces()
    trafficEngineering.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    trafficEngineering.EntityData.Children = types.NewOrderedMap()
    trafficEngineering.EntityData.Children.Append("config", types.YChild{"Config", &trafficEngineering.Config})
    trafficEngineering.EntityData.Children.Append("state", types.YChild{"State", &trafficEngineering.State})
    trafficEngineering.EntityData.Leafs = types.NewOrderedMap()

    trafficEngineering.EntityData.YListKeys = []string {}

    return &(trafficEngineering.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config
// This container defines ISIS TE configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // IPv4 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4RouterId interface{}

    // IPv6 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6RouterId interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "traffic-engineering"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/traffic-engineering/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("ipv4-router-id", types.YLeaf{"Ipv4RouterId", config.Ipv4RouterId})
    config.EntityData.Leafs.Append("ipv6-router-id", types.YLeaf{"Ipv6RouterId", config.Ipv6RouterId})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
// This container defines ISIS TE state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // IPv4 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4RouterId interface{}

    // IPv6 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6RouterId interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "traffic-engineering"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/traffic-engineering/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("ipv4-router-id", types.YLeaf{"Ipv4RouterId", state.Ipv4RouterId})
    state.EntityData.Leafs.Append("ipv6-router-id", types.YLeaf{"Ipv6RouterId", state.Ipv6RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference
// This container defines Administrative Distance (or preference)
// assigned to ISIS routes (level1 internal, level2 internal, level1
// external, level2 external).
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines route preference configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config

    // This container defines ISIS route preference state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
}

func (routePreference *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference) GetEntityData() *types.CommonEntityData {
    routePreference.EntityData.YFilter = routePreference.YFilter
    routePreference.EntityData.YangName = "route-preference"
    routePreference.EntityData.BundleName = "openconfig"
    routePreference.EntityData.ParentYangName = "level"
    routePreference.EntityData.SegmentPath = "route-preference"
    routePreference.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + routePreference.EntityData.SegmentPath
    routePreference.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    routePreference.EntityData.NamespaceTable = openconfig.GetNamespaces()
    routePreference.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    routePreference.EntityData.Children = types.NewOrderedMap()
    routePreference.EntityData.Children.Append("config", types.YChild{"Config", &routePreference.Config})
    routePreference.EntityData.Children.Append("state", types.YChild{"State", &routePreference.State})
    routePreference.EntityData.Leafs = types.NewOrderedMap()

    routePreference.EntityData.YListKeys = []string {}

    return &(routePreference.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config
// This container defines route preference configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative Distance(preference) for external ISIS routes. The type is
    // interface{} with range: 1..255.
    ExternalRoutePreference interface{}

    // Administrative Distance(preference) for internal ISIS routes. The type is
    // interface{} with range: 1..255.
    InternalRoutePreference interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "route-preference"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/route-preference/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("external-route-preference", types.YLeaf{"ExternalRoutePreference", config.ExternalRoutePreference})
    config.EntityData.Leafs.Append("internal-route-preference", types.YLeaf{"InternalRoutePreference", config.InternalRoutePreference})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
// This container defines ISIS route preference state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative Distance(preference) for external ISIS routes. The type is
    // interface{} with range: 1..255.
    ExternalRoutePreference interface{}

    // Administrative Distance(preference) for internal ISIS routes. The type is
    // interface{} with range: 1..255.
    InternalRoutePreference interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "route-preference"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/route-preference/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("external-route-preference", types.YLeaf{"ExternalRoutePreference", state.ExternalRoutePreference})
    state.EntityData.Leafs.Append("internal-route-preference", types.YLeaf{"InternalRoutePreference", state.InternalRoutePreference})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "level"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("config", types.YChild{"Config", &authentication.Config})
    authentication.EntityData.Children.Append("state", types.YChild{"State", &authentication.State})
    authentication.EntityData.Children.Append("key", types.YChild{"Key", &authentication.Key})
    authentication.EntityData.Children.Append("keychain", types.YChild{"Keychain", &authentication.Keychain})
    authentication.EntityData.Leafs = types.NewOrderedMap()

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable for IS-IS CSNPs. The type is bool. The default value is
    // false.
    CsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS PSNPs. The type is bool. The
    // default value is false.
    PsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS LSPs. The type is bool. The
    // default value is false.
    LspAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("csnp-authentication", types.YLeaf{"CsnpAuthentication", config.CsnpAuthentication})
    config.EntityData.Leafs.Append("psnp-authentication", types.YLeaf{"PsnpAuthentication", config.PsnpAuthentication})
    config.EntityData.Leafs.Append("lsp-authentication", types.YLeaf{"LspAuthentication", config.LspAuthentication})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable or disable for IS-IS CSNPs. The type is bool. The default value is
    // false.
    CsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS PSNPs. The type is bool. The
    // default value is false.
    PsnpAuthentication interface{}

    // Enable or disable authentication for IS-IS LSPs. The type is bool. The
    // default value is false.
    LspAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("csnp-authentication", types.YLeaf{"CsnpAuthentication", state.CsnpAuthentication})
    state.EntityData.Leafs.Append("psnp-authentication", types.YLeaf{"PsnpAuthentication", state.PsnpAuthentication})
    state.EntityData.Leafs.Append("lsp-authentication", types.YLeaf{"LspAuthentication", state.LspAuthentication})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("config", types.YChild{"Config", &key.Config})
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/key/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", config.AuthPassword})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_Authentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces
// This container defines global ISIS interface configuration and
// state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list contains ISIS interfaces. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface.
    Interface []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface
}

func (interfaces *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "openconfig"
    interfaces.EntityData.ParentYangName = "isis"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaces.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface
// This list contains ISIS interfaces.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to interface-id. The type is string.
    // Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config_InterfaceId
    InterfaceId interface{}

    // This container defines ISIS interface configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config

    // This container defines state information for ISIS interfaces.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State

    // This container defines state information for ISIS circuit counters.
    CircuitCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters

    // This container defines ISIS authentication.
    Authentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi

    // This container defines ISIS level specific configuration and state
    // information.
    Levels NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels

    // This container describes ISIS interface timers configuration.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers

    // This container defines BFD.
    Bfd NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd

    // Reference to an interface or subinterface.
    InterfaceRef NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef
}

func (self *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "openconfig"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceId, "interface-id")
    self.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    self.EntityData.NamespaceTable = openconfig.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("config", types.YChild{"Config", &self.Config})
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Children.Append("circuit-counters", types.YChild{"CircuitCounters", &self.CircuitCounters})
    self.EntityData.Children.Append("authentication", types.YChild{"Authentication", &self.Authentication})
    self.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", &self.AfiSafi})
    self.EntityData.Children.Append("levels", types.YChild{"Levels", &self.Levels})
    self.EntityData.Children.Append("timers", types.YChild{"Timers", &self.Timers})
    self.EntityData.Children.Append("bfd", types.YChild{"Bfd", &self.Bfd})
    self.EntityData.Children.Append("interface-ref", types.YChild{"InterfaceRef", &self.InterfaceRef})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", self.InterfaceId})

    self.EntityData.YListKeys = []string {"InterfaceId"}

    return &(self.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config
// This container defines ISIS interface configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Interface for which ISIS configuration is to be applied. The type is
    // string.
    InterfaceId interface{}

    // When set to true, the referenced interface is a passive interface such that
    // it is not eligible to establish adjacencies with other systems, but is
    // advertised into the IS-IS topology. The type is bool. The default value is
    // false.
    Passive interface{}

    // This leaf controls padding type for IS-IS Hello PDUs. The type is
    // HelloPaddingType.
    HelloPadding interface{}

    // ISIS circuit type (p2p, broadcast). The type is CircuitType.
    CircuitType interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})
    config.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", config.InterfaceId})
    config.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", config.Passive})
    config.EntityData.Leafs.Append("hello-padding", types.YLeaf{"HelloPadding", config.HelloPadding})
    config.EntityData.Leafs.Append("circuit-type", types.YLeaf{"CircuitType", config.CircuitType})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State
// This container defines state information for ISIS interfaces.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}

    // Interface for which ISIS configuration is to be applied. The type is
    // string.
    InterfaceId interface{}

    // When set to true, the referenced interface is a passive interface such that
    // it is not eligible to establish adjacencies with other systems, but is
    // advertised into the IS-IS topology. The type is bool. The default value is
    // false.
    Passive interface{}

    // This leaf controls padding type for IS-IS Hello PDUs. The type is
    // HelloPaddingType.
    HelloPadding interface{}

    // ISIS circuit type (p2p, broadcast). The type is CircuitType.
    CircuitType interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", state.InterfaceId})
    state.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", state.Passive})
    state.EntityData.Leafs.Append("hello-padding", types.YLeaf{"HelloPadding", state.HelloPadding})
    state.EntityData.Leafs.Append("circuit-type", types.YLeaf{"CircuitType", state.CircuitType})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters
// This container defines state information for ISIS circuit counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of counters for IS circuit.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State
}

func (circuitCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters) GetEntityData() *types.CommonEntityData {
    circuitCounters.EntityData.YFilter = circuitCounters.YFilter
    circuitCounters.EntityData.YangName = "circuit-counters"
    circuitCounters.EntityData.BundleName = "openconfig"
    circuitCounters.EntityData.ParentYangName = "interface"
    circuitCounters.EntityData.SegmentPath = "circuit-counters"
    circuitCounters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + circuitCounters.EntityData.SegmentPath
    circuitCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    circuitCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    circuitCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    circuitCounters.EntityData.Children = types.NewOrderedMap()
    circuitCounters.EntityData.Children.Append("state", types.YChild{"State", &circuitCounters.State})
    circuitCounters.EntityData.Leafs = types.NewOrderedMap()

    circuitCounters.EntityData.YListKeys = []string {}

    return &(circuitCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State
// The container defines a list of counters for IS circuit.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of times an adjacency state change has occurred on this circuit. MIB
    // Entry: CircAdjChanges. The type is interface{} with range: 0..4294967295.
    AdjChanges interface{}

    // Number of times initialization of this circuit has failed. This counts
    // events such as PPP NCP failures. MIB Entry: CircInitFails. The type is
    // interface{} with range: 0..4294967295.
    InitFails interface{}

    // Number of times an adjacency has been rejected on this circuit. MIB Entry:
    // CircRejAdjs. The type is interface{} with range: 0..4294967295.
    RejectedAdj interface{}

    // Number of times an IS-IS control PDU with an ID field length different from
    // that for this system has been received. MIB Entry:
    // CircIDFieldLenMismatches. The type is interface{} with range:
    // 0..4294967295.
    IdFieldLenMismatches interface{}

    // Number of times an IS-IS control PDU with a max area address field
    // different from that for this system has been received. MIB Entry:
    // CircMaxAreaAddrMismatches. The type is interface{} with range:
    // 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // Number of times an IS-IS control PDU with an auth type field different from
    // that for this system has been received. MIB Entry: CircAuthTypeFails. The
    // type is interface{} with range: 0..4294967295.
    AuthTypeFails interface{}

    // Number of times an IS-IS control PDU with the correct auth type has failed
    // to pass authentication validation. MIB Entry: CircAuthFails. The type is
    // interface{} with range: 0..4294967295.
    AuthFails interface{}

    // Number of times the Designated IS has changed on this circuit at this
    // level. If the circuit is point to point, this count is zero. MIB Entry:
    // CircLANDesISChanges. The type is interface{} with range: 0..4294967295.
    LanDisChanges interface{}

    // Number of adjacencies on this circuit. MIB Entry: CircNumAdj. The type is
    // interface{} with range: 0..4294967295.
    AdjNumber interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_CircuitCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "circuit-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("adj-changes", types.YLeaf{"AdjChanges", state.AdjChanges})
    state.EntityData.Leafs.Append("init-fails", types.YLeaf{"InitFails", state.InitFails})
    state.EntityData.Leafs.Append("rejected-adj", types.YLeaf{"RejectedAdj", state.RejectedAdj})
    state.EntityData.Leafs.Append("id-field-len-mismatches", types.YLeaf{"IdFieldLenMismatches", state.IdFieldLenMismatches})
    state.EntityData.Leafs.Append("max-area-address-mismatches", types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches})
    state.EntityData.Leafs.Append("auth-type-fails", types.YLeaf{"AuthTypeFails", state.AuthTypeFails})
    state.EntityData.Leafs.Append("auth-fails", types.YLeaf{"AuthFails", state.AuthFails})
    state.EntityData.Leafs.Append("lan-dis-changes", types.YLeaf{"LanDisChanges", state.LanDisChanges})
    state.EntityData.Leafs.Append("adj-number", types.YLeaf{"AdjNumber", state.AdjNumber})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain
}

func (authentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "openconfig"
    authentication.EntityData.ParentYangName = "interface"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    authentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("config", types.YChild{"Config", &authentication.Config})
    authentication.EntityData.Children.Append("state", types.YChild{"State", &authentication.State})
    authentication.EntityData.Children.Append("key", types.YChild{"Key", &authentication.Key})
    authentication.EntityData.Children.Append("keychain", types.YChild{"Keychain", &authentication.Keychain})
    authentication.EntityData.Leafs = types.NewOrderedMap()

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("hello-authentication", types.YLeaf{"HelloAuthentication", config.HelloAuthentication})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-authentication", types.YLeaf{"HelloAuthentication", state.HelloAuthentication})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("config", types.YChild{"Config", &key.Config})
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/key/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", config.AuthPassword})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Authentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af.
    Af []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "interface"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children.Append(types.GetSegmentPath(afiSafi.Af[i]), types.YChild{"Af", afiSafi.Af[i]})
    }
    afiSafi.EntityData.Leafs = types.NewOrderedMap()

    afiSafi.EntityData.YListKeys = []string {}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters. Single topology
    // is the default setting.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfiName, "afi-name") + types.AddKeyToken(af.SafiName, "safi-name")
    af.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("config", types.YChild{"Config", &af.Config})
    af.EntityData.Children.Append("state", types.YChild{"State", &af.State})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", af.AfiName})
    af.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", af.SafiName})

    af.EntityData.YListKeys = []string {"AfiName", "SafiName"}

    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters. Single
// topology is the default setting.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", config.AfiName})
    config.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", config.SafiName})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels
// This container defines ISIS level specific configuration and
// state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level on an IS-IS enabled interface. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level.
    Level []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level
}

func (levels *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "openconfig"
    levels.EntityData.ParentYangName = "interface"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + levels.EntityData.SegmentPath
    levels.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    levels.EntityData.NamespaceTable = openconfig.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    levels.EntityData.Children = types.NewOrderedMap()
    levels.EntityData.Children.Append("level", types.YChild{"Level", nil})
    for i := range levels.Level {
        levels.EntityData.Children.Append(types.GetSegmentPath(levels.Level[i]), types.YChild{"Level", levels.Level[i]})
    }
    levels.EntityData.Leafs = types.NewOrderedMap()

    levels.EntityData.YListKeys = []string {}

    return &(levels.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level
// Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to ISIS level-number. The type is string
    // with range: 1..2. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config_LevelNumber
    LevelNumber interface{}

    // This container defines interface ISIS level configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config

    // This container defines interface ISIS level state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State

    // This container defines ISIS interface packet counters.
    PacketCounters NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters

    // This container defines ISIS adjacencies.
    Adjacencies NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies

    // This container defines ISIS timers.
    Timers NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers

    // This container defines address-family specific configuration and state
    // information.
    AfiSafi NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi

    // This container defines ISIS authentication.
    HelloAuthentication NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication
}

func (level *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "openconfig"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + types.AddKeyToken(level.LevelNumber, "level-number")
    level.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/" + level.EntityData.SegmentPath
    level.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    level.EntityData.NamespaceTable = openconfig.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    level.EntityData.Children = types.NewOrderedMap()
    level.EntityData.Children.Append("config", types.YChild{"Config", &level.Config})
    level.EntityData.Children.Append("state", types.YChild{"State", &level.State})
    level.EntityData.Children.Append("packet-counters", types.YChild{"PacketCounters", &level.PacketCounters})
    level.EntityData.Children.Append("adjacencies", types.YChild{"Adjacencies", &level.Adjacencies})
    level.EntityData.Children.Append("timers", types.YChild{"Timers", &level.Timers})
    level.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", &level.AfiSafi})
    level.EntityData.Children.Append("hello-authentication", types.YChild{"HelloAuthentication", &level.HelloAuthentication})
    level.EntityData.Leafs = types.NewOrderedMap()
    level.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", level.LevelNumber})

    level.EntityData.YListKeys = []string {"LevelNumber"}

    return &(level.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config
// This container defines interface ISIS level configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number(level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS passive interface admin enable/disable function. The type is bool. The
    // default value is false.
    Passive interface{}

    // ISIS neighbor priority(LAN hello PDU only). The type is interface{} with
    // range: 0..127.
    Priority interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "level"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", config.LevelNumber})
    config.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", config.Passive})
    config.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", config.Priority})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State
// This container defines interface ISIS level state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number(level-1, level-2). The type is interface{} with range:
    // 1..2.
    LevelNumber interface{}

    // ISIS passive interface admin enable/disable function. The type is bool. The
    // default value is false.
    Passive interface{}

    // ISIS neighbor priority(LAN hello PDU only). The type is interface{} with
    // range: 0..127.
    Priority interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool. The
    // default value is false.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "level"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", state.LevelNumber})
    state.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", state.Passive})
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters
// This container defines ISIS interface packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP packet counters.
    Lsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp

    // This container defines IIH packet counters.
    Iih NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih

    // This container defines ISH packet counters.
    Ish NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish

    // This container defines ESH packet counters.
    Esh NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh

    // This container defines PSNP packet counters.
    Psnp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp

    // Operational state parameters relating to CNSPs.
    Cnsp NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp

    // Operational state parameters relating to IS-IS PDUs that are not otherwise
    // classified - referred to as Unknown PDUs.
    Unknown NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown
}

func (packetCounters *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters) GetEntityData() *types.CommonEntityData {
    packetCounters.EntityData.YFilter = packetCounters.YFilter
    packetCounters.EntityData.YangName = "packet-counters"
    packetCounters.EntityData.BundleName = "openconfig"
    packetCounters.EntityData.ParentYangName = "level"
    packetCounters.EntityData.SegmentPath = "packet-counters"
    packetCounters.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + packetCounters.EntityData.SegmentPath
    packetCounters.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    packetCounters.EntityData.NamespaceTable = openconfig.GetNamespaces()
    packetCounters.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    packetCounters.EntityData.Children = types.NewOrderedMap()
    packetCounters.EntityData.Children.Append("lsp", types.YChild{"Lsp", &packetCounters.Lsp})
    packetCounters.EntityData.Children.Append("iih", types.YChild{"Iih", &packetCounters.Iih})
    packetCounters.EntityData.Children.Append("ish", types.YChild{"Ish", &packetCounters.Ish})
    packetCounters.EntityData.Children.Append("esh", types.YChild{"Esh", &packetCounters.Esh})
    packetCounters.EntityData.Children.Append("psnp", types.YChild{"Psnp", &packetCounters.Psnp})
    packetCounters.EntityData.Children.Append("cnsp", types.YChild{"Cnsp", &packetCounters.Cnsp})
    packetCounters.EntityData.Children.Append("unknown", types.YChild{"Unknown", &packetCounters.Unknown})
    packetCounters.EntityData.Leafs = types.NewOrderedMap()

    packetCounters.EntityData.YListKeys = []string {}

    return &(packetCounters.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp
// This container defines LSP packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP PDU counters.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State
}

func (lsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "openconfig"
    lsp.EntityData.ParentYangName = "packet-counters"
    lsp.EntityData.SegmentPath = "lsp"
    lsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + lsp.EntityData.SegmentPath
    lsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    lsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    lsp.EntityData.Children = types.NewOrderedMap()
    lsp.EntityData.Children.Append("state", types.YChild{"State", &lsp.State})
    lsp.EntityData.Leafs = types.NewOrderedMap()

    lsp.EntityData.YListKeys = []string {}

    return &(lsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State
// This container defines LSP PDU counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Lsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih
// This container defines IIH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational counters relating to IIH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State
}

func (iih *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih) GetEntityData() *types.CommonEntityData {
    iih.EntityData.YFilter = iih.YFilter
    iih.EntityData.YangName = "iih"
    iih.EntityData.BundleName = "openconfig"
    iih.EntityData.ParentYangName = "packet-counters"
    iih.EntityData.SegmentPath = "iih"
    iih.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + iih.EntityData.SegmentPath
    iih.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    iih.EntityData.NamespaceTable = openconfig.GetNamespaces()
    iih.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    iih.EntityData.Children = types.NewOrderedMap()
    iih.EntityData.Children.Append("state", types.YChild{"State", &iih.State})
    iih.EntityData.Leafs = types.NewOrderedMap()

    iih.EntityData.YListKeys = []string {}

    return &(iih.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State
// Operational counters relating to IIH PDUs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Iih_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "iih"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish
// This container defines ISH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state relating to ISH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State
}

func (ish *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish) GetEntityData() *types.CommonEntityData {
    ish.EntityData.YFilter = ish.YFilter
    ish.EntityData.YangName = "ish"
    ish.EntityData.BundleName = "openconfig"
    ish.EntityData.ParentYangName = "packet-counters"
    ish.EntityData.SegmentPath = "ish"
    ish.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + ish.EntityData.SegmentPath
    ish.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    ish.EntityData.NamespaceTable = openconfig.GetNamespaces()
    ish.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    ish.EntityData.Children = types.NewOrderedMap()
    ish.EntityData.Children.Append("state", types.YChild{"State", &ish.State})
    ish.EntityData.Leafs = types.NewOrderedMap()

    ish.EntityData.YListKeys = []string {}

    return &(ish.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State
// Operational state relating to ISH PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Ish_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "ish"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh
// This container defines ESH packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state relating to ESH PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State
}

func (esh *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh) GetEntityData() *types.CommonEntityData {
    esh.EntityData.YFilter = esh.YFilter
    esh.EntityData.YangName = "esh"
    esh.EntityData.BundleName = "openconfig"
    esh.EntityData.ParentYangName = "packet-counters"
    esh.EntityData.SegmentPath = "esh"
    esh.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + esh.EntityData.SegmentPath
    esh.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    esh.EntityData.NamespaceTable = openconfig.GetNamespaces()
    esh.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    esh.EntityData.Children = types.NewOrderedMap()
    esh.EntityData.Children.Append("state", types.YChild{"State", &esh.State})
    esh.EntityData.Leafs = types.NewOrderedMap()

    esh.EntityData.YListKeys = []string {}

    return &(esh.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State
// Operational state relating to ESH PDUs
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Esh_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "esh"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp
// This container defines PSNP packet counters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to PSNPs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State
}

func (psnp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp) GetEntityData() *types.CommonEntityData {
    psnp.EntityData.YFilter = psnp.YFilter
    psnp.EntityData.YangName = "psnp"
    psnp.EntityData.BundleName = "openconfig"
    psnp.EntityData.ParentYangName = "packet-counters"
    psnp.EntityData.SegmentPath = "psnp"
    psnp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + psnp.EntityData.SegmentPath
    psnp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    psnp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    psnp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    psnp.EntityData.Children = types.NewOrderedMap()
    psnp.EntityData.Children.Append("state", types.YChild{"State", &psnp.State})
    psnp.EntityData.Leafs = types.NewOrderedMap()

    psnp.EntityData.YListKeys = []string {}

    return &(psnp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State
// Packet counters relating to PSNPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Psnp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "psnp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp
// Operational state parameters relating to CNSPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to CNSPs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State
}

func (cnsp *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp) GetEntityData() *types.CommonEntityData {
    cnsp.EntityData.YFilter = cnsp.YFilter
    cnsp.EntityData.YangName = "cnsp"
    cnsp.EntityData.BundleName = "openconfig"
    cnsp.EntityData.ParentYangName = "packet-counters"
    cnsp.EntityData.SegmentPath = "cnsp"
    cnsp.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + cnsp.EntityData.SegmentPath
    cnsp.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    cnsp.EntityData.NamespaceTable = openconfig.GetNamespaces()
    cnsp.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    cnsp.EntityData.Children = types.NewOrderedMap()
    cnsp.EntityData.Children.Append("state", types.YChild{"State", &cnsp.State})
    cnsp.EntityData.Leafs = types.NewOrderedMap()

    cnsp.EntityData.YListKeys = []string {}

    return &(cnsp.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State
// Packet counters relating to CNSPs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Cnsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "cnsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/cnsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown
// Operational state parameters relating to IS-IS PDUs that are not
// otherwise classified - referred to as Unknown PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to unknown PDUs.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State
}

func (unknown *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "openconfig"
    unknown.EntityData.ParentYangName = "packet-counters"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/" + unknown.EntityData.SegmentPath
    unknown.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    unknown.EntityData.NamespaceTable = openconfig.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    unknown.EntityData.Children = types.NewOrderedMap()
    unknown.EntityData.Children.Append("state", types.YChild{"State", &unknown.State})
    unknown.EntityData.Leafs = types.NewOrderedMap()

    unknown.EntityData.YListKeys = []string {}

    return &(unknown.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State
// Packet counters relating to unknown PDUs.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU received on the interface that have
    // been dropped. The type is interface{} with range: 0..4294967295.
    Dropped interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}

    // The number of the specified type of PDU that that have been retransmitted
    // by the local system on the interface. The type is interface{} with range:
    // 0..4294967295.
    Retransmit interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_PacketCounters_Unknown_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "unknown"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("dropped", types.YLeaf{"Dropped", state.Dropped})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})
    state.EntityData.Leafs.Append("retransmit", types.YLeaf{"Retransmit", state.Retransmit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies
// This container defines ISIS adjacencies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the local system's IS-IS adjacencies. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency.
    Adjacency []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency
}

func (adjacencies *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies) GetEntityData() *types.CommonEntityData {
    adjacencies.EntityData.YFilter = adjacencies.YFilter
    adjacencies.EntityData.YangName = "adjacencies"
    adjacencies.EntityData.BundleName = "openconfig"
    adjacencies.EntityData.ParentYangName = "level"
    adjacencies.EntityData.SegmentPath = "adjacencies"
    adjacencies.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + adjacencies.EntityData.SegmentPath
    adjacencies.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencies.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencies.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencies.EntityData.Children = types.NewOrderedMap()
    adjacencies.EntityData.Children.Append("adjacency", types.YChild{"Adjacency", nil})
    for i := range adjacencies.Adjacency {
        adjacencies.EntityData.Children.Append(types.GetSegmentPath(adjacencies.Adjacency[i]), types.YChild{"Adjacency", adjacencies.Adjacency[i]})
    }
    adjacencies.EntityData.Leafs = types.NewOrderedMap()

    adjacencies.EntityData.YListKeys = []string {}

    return &(adjacencies.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency
// List of the local system's IS-IS adjacencies.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IS neighbor. The type is string
    // with pattern: ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$. Refers to
    // network_instance.NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_SystemId
    SystemId interface{}

    // Operational state relating to the IS-IS adjacency with the remote system.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State
}

func (adjacency *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency) GetEntityData() *types.CommonEntityData {
    adjacency.EntityData.YFilter = adjacency.YFilter
    adjacency.EntityData.YangName = "adjacency"
    adjacency.EntityData.BundleName = "openconfig"
    adjacency.EntityData.ParentYangName = "adjacencies"
    adjacency.EntityData.SegmentPath = "adjacency" + types.AddKeyToken(adjacency.SystemId, "system-id")
    adjacency.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/" + adjacency.EntityData.SegmentPath
    adjacency.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacency.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacency.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacency.EntityData.Children = types.NewOrderedMap()
    adjacency.EntityData.Children.Append("state", types.YChild{"State", &adjacency.State})
    adjacency.EntityData.Leafs = types.NewOrderedMap()
    adjacency.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", adjacency.SystemId})

    adjacency.EntityData.YListKeys = []string {"SystemId"}

    return &(adjacency.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State
// Operational state relating to the IS-IS adjacency with the
// remote system
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS neighbor system-id. The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    SystemId interface{}

    // ISIS Neighbor IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpv4Address interface{}

    // ISIS Neighbor IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborIpv6Address interface{}

    // ISIS neighbor SNPA. The type is string with length: 0..20.
    NeighborSnpa interface{}

    // Local extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    LocalExtendedCircuitId interface{}

    // ISIS neighbor extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    NeighborExtendedCircuitId interface{}

    // Priority of the neighboring IS(LAN Hello only). The type is interface{}
    // with range: 0..127.
    Priority interface{}

    // DIS System ID(LAN hello only). The type is string with pattern:
    // ^[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}$.
    DisSystemId interface{}

    // Received ISIS circuit type (level-1, level-2, level-1-2). The type is
    // LevelType.
    NeighborCircuitType interface{}

    // Formed ISIS adjacency type(level-1, level-2, level-1-2). The type is
    // LevelType.
    AdjacencyType interface{}

    // P2P 3-way ISIS adjacency state(up, down, init, failed). The type is
    // IsisInterfaceAdjState.
    AdjacencyState interface{}

    // Holding time in seconds for adjacency. This value is based on received
    // hello PDUs and the elapsed time since receipt. The type is interface{} with
    // range: 0..65535. Units are seconds.
    RemainingHoldTime interface{}

    // Adjacency up time. The type is interface{} with range: 0..4294967295.
    UpTime interface{}

    // When set to true, ISIS multi-topology is supported. The type is bool.
    MultiTopology interface{}

    // ISIS topology type support(ipv4-unicast, ipv6-unicast, ipv4-multicast,
    // ipv6-multicast). The type is slice of [u'IPV6UNICAST', u'IPV4MULTICAST',
    // u'IPV6MULTICAST', u'IPV4UNICAST'].
    Topology []interface{}

    // When set to true, Graceful-restart signaling is supported. The type is
    // bool.
    RestartSupport interface{}

    // When set to true, adjacency is not advertised. The SA bit is used by a
    // starting router to  request that its neighbor suppress advertisement of the
    // adjacency  to the starting router in the neighbor's LSPs. The type is bool.
    RestartSuppress interface{}

    // When set to true, neighbor is being helped. The RR bit is used by a
    // (re)starting router to signal to its neighbors that a (re)start is in
    // progress. The type is bool.
    RestartStatus interface{}

    // List of ISIS area-address(es). The type is slice of string with pattern:
    // ^[0-9A-Fa-f]{2}\.([0-9A-Fa-f]{4}\.){0,3}$.
    AreaAddress []interface{}

    // Supported Protocol. IPv4 is defined as (0xcc) and IPv6 - (0x8e). ISIS
    // reference is TLV 129. The type is slice of Nlpid.
    Nlpid []interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("neighbor-ipv4-address", types.YLeaf{"NeighborIpv4Address", state.NeighborIpv4Address})
    state.EntityData.Leafs.Append("neighbor-ipv6-address", types.YLeaf{"NeighborIpv6Address", state.NeighborIpv6Address})
    state.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", state.NeighborSnpa})
    state.EntityData.Leafs.Append("local-extended-circuit-id", types.YLeaf{"LocalExtendedCircuitId", state.LocalExtendedCircuitId})
    state.EntityData.Leafs.Append("neighbor-extended-circuit-id", types.YLeaf{"NeighborExtendedCircuitId", state.NeighborExtendedCircuitId})
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("dis-system-id", types.YLeaf{"DisSystemId", state.DisSystemId})
    state.EntityData.Leafs.Append("neighbor-circuit-type", types.YLeaf{"NeighborCircuitType", state.NeighborCircuitType})
    state.EntityData.Leafs.Append("adjacency-type", types.YLeaf{"AdjacencyType", state.AdjacencyType})
    state.EntityData.Leafs.Append("adjacency-state", types.YLeaf{"AdjacencyState", state.AdjacencyState})
    state.EntityData.Leafs.Append("remaining-hold-time", types.YLeaf{"RemainingHoldTime", state.RemainingHoldTime})
    state.EntityData.Leafs.Append("up-time", types.YLeaf{"UpTime", state.UpTime})
    state.EntityData.Leafs.Append("multi-topology", types.YLeaf{"MultiTopology", state.MultiTopology})
    state.EntityData.Leafs.Append("topology", types.YLeaf{"Topology", state.Topology})
    state.EntityData.Leafs.Append("restart-support", types.YLeaf{"RestartSupport", state.RestartSupport})
    state.EntityData.Leafs.Append("restart-suppress", types.YLeaf{"RestartSuppress", state.RestartSuppress})
    state.EntityData.Leafs.Append("restart-status", types.YLeaf{"RestartStatus", state.RestartStatus})
    state.EntityData.Leafs.Append("area-address", types.YLeaf{"AreaAddress", state.AreaAddress})
    state.EntityData.Leafs.Append("nlpid", types.YLeaf{"Nlpid", state.Nlpid})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid represents and IPv6 - (0x8e). ISIS reference is TLV 129.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid string

const (
    // IPv4 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid_IPV4 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid = "IPV4"

    // IPv6 Address family.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid_IPV6 NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Adjacencies_Adjacency_State_Nlpid = "IPV6"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers
// This container defines ISIS timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS interface hello-timers configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config

    // This container defines ISIS interface hello-timers state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "level"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("config", types.YChild{"Config", &timers.Config})
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config
// This container defines ISIS interface hello-timers configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS hello-interval value. The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // ISIS hello-multiplier value. The type is interface{} with range: 0..255.
    HelloMultiplier interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", config.HelloInterval})
    config.EntityData.Leafs.Append("hello-multiplier", types.YLeaf{"HelloMultiplier", config.HelloMultiplier})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State
// This container defines ISIS interface hello-timers state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS hello-interval value. The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // ISIS hello-multiplier value. The type is interface{} with range: 0..255.
    HelloMultiplier interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", state.HelloInterval})
    state.EntityData.Leafs.Append("hello-multiplier", types.YLeaf{"HelloMultiplier", state.HelloMultiplier})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi
// This container defines address-family specific configuration
// and state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af.
    Af []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af
}

func (afiSafi *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "openconfig"
    afiSafi.EntityData.ParentYangName = "level"
    afiSafi.EntityData.SegmentPath = "afi-safi"
    afiSafi.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = openconfig.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afiSafi.Af {
        afiSafi.EntityData.Children.Append(types.GetSegmentPath(afiSafi.Af[i]), types.YChild{"Af", afiSafi.Af[i]})
    }
    afiSafi.EntityData.Leafs = types.NewOrderedMap()

    afiSafi.EntityData.YListKeys = []string {}

    return &(afiSafi.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af
// Address-family/Subsequent Address-family list.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to address-family type. The type is one
    // of the following: IPV4IPV6.
    AfiName interface{}

    // This attribute is a key. Reference to subsequent address-family type. The
    // type is one of the following: UNICASTMULTICAST.
    SafiName interface{}

    // This container defines AFI-SAFI configuration parameters. Single topology
    // is the default setting.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config

    // This container defines AFI-SAFI State information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State

    // Configuration and operatioanl state parameters relating to segment routing
    // for an interface within the IGP.
    SegmentRouting NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting
}

func (af *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "openconfig"
    af.EntityData.ParentYangName = "afi-safi"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfiName, "afi-name") + types.AddKeyToken(af.SafiName, "safi-name")
    af.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    af.EntityData.NamespaceTable = openconfig.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("config", types.YChild{"Config", &af.Config})
    af.EntityData.Children.Append("state", types.YChild{"State", &af.State})
    af.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &af.SegmentRouting})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", af.AfiName})
    af.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", af.SafiName})

    af.EntityData.YListKeys = []string {"AfiName", "SafiName"}

    return &(af.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config
// This container defines AFI-SAFI configuration parameters. Single
// topology is the default setting.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "af"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", config.AfiName})
    config.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", config.SafiName})
    config.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", config.Metric})
    config.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", config.Enabled})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State
// This container defines AFI-SAFI State information
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is one of the following: IPV4IPV6.
    AfiName interface{}

    // Subsequent address-family type. The type is one of the following:
    // UNICASTMULTICAST.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295. The default value is 10.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "af"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting
// Configuration and operatioanl state parameters relating to segment
// routing for an interface within the IGP.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters relating to the
    // advertisement of a segment routing IGP-Prefix SID for this interface.
    PrefixSids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids

    // Configuration and operational state parameters relating to the
    // advertisement of a segment routing adjacency SID for this interface.
    AdjacencySids NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids
}

func (segmentRouting *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "openconfig"
    segmentRouting.EntityData.ParentYangName = "af"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = openconfig.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &segmentRouting.PrefixSids})
    segmentRouting.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &segmentRouting.AdjacencySids})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids
// Configuration and operational state parameters relating to
// the advertisement of a segment routing IGP-Prefix SID for this
// interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IGP prefix that should have a segment routing IGP-Prefix SID allocated
    // to it. The value of the SID is specified by the SID ID, as an absolute
    // value. If the absolute value falls within the SRGB, the Global flag should
    // be advertised by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid.
    PrefixSid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid
}

func (prefixSids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "openconfig"
    prefixSids.EntityData.ParentYangName = "segment-routing"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid
// An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the prefix for which the IGP-Prefix
    // SID is to be advertised. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Configuration parameters for the IGP Prefix SID.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config

    // Operational state parameters for the IGP-Prefix SID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State
}

func (prefixSid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "openconfig"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Prefix, "prefix")
    prefixSid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("config", types.YChild{"Config", &prefixSid.Config})
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixSid.Prefix})

    prefixSid.EntityData.YListKeys = []string {"Prefix"}

    return &(prefixSid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config
// Configuration parameters for the IGP Prefix SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix for which the IGP prefix SID should be advertised. The value
    // specified is a local prefix on the interface which is advertised into the
    // IGP. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // The Segment Identifier to be used when advertising the IGP Prefix SID. The
    // type is one of the following types: int with range: 16..1048575, or
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`., or string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SidId interface{}

    // The options associated with the IGP prefix SID for MPLS. The value of this
    // leaf specifies the option that the SID should be advertised into the IGP
    // with. The type is LabelOptions.
    LabelOptions interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "prefix-sid"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", config.Prefix})
    config.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", config.SidId})
    config.EntityData.Leafs.Append("label-options", types.YLeaf{"LabelOptions", config.LabelOptions})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions represents into the IGP with.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions string

const (
    // When this value is specified, the penultimate hop must not pop
    // the Prefix-SID label before forwarding it to the local system.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions_NO_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions = "NO_PHP"

    // When set, the penultimate hop must swap the prefix SID for the
    // relevant explicit null label before forwarding the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_LabelOptions = "EXPLICIT_NULL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State
// Operational state parameters for the IGP-Prefix SID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix for which the IGP prefix SID should be advertised. The value
    // specified is a local prefix on the interface which is advertised into the
    // IGP. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // The Segment Identifier to be used when advertising the IGP Prefix SID. The
    // type is one of the following types: int with range: 16..1048575, or
    // :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`., or string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SidId interface{}

    // The options associated with the IGP prefix SID for MPLS. The value of this
    // leaf specifies the option that the SID should be advertised into the IGP
    // with. The type is LabelOptions.
    LabelOptions interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", state.SidId})
    state.EntityData.Leafs.Append("label-options", types.YLeaf{"LabelOptions", state.LabelOptions})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions represents into the IGP with.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions string

const (
    // When this value is specified, the penultimate hop must not pop
    // the Prefix-SID label before forwarding it to the local system.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions_NO_PHP NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions = "NO_PHP"

    // When set, the penultimate hop must swap the prefix SID for the
    // relevant explicit null label before forwarding the packet.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions_EXPLICIT_NULL NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_LabelOptions = "EXPLICIT_NULL"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids
// Configuration and operational state parameters relating to
// the advertisement of a segment routing adjacency SID for this
// interface.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An Adjacency SID to be advertised for the specified interface. The
    // Adj-SID's identifier (the SID ID) must be unique, with flags specified
    // indicating the parameters that should be set for the SID. Where a SID value
    // is specified that is allocated from the SRGB, the global flag must be set
    // by the system. The type is slice of
    // NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid.
    AdjacencySid []*NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid
}

func (adjacencySids *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "openconfig"
    adjacencySids.EntityData.ParentYangName = "segment-routing"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid
// An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the neighbor with which the Adjacency
    // SID is associated. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Reference to the segment identifier to be used by
    // the local system. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.,
    // or
    // :go:struct:`NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId
    // <ydk/models/network_instance/NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId>`.
    SidId interface{}

    // Configuraton parameters relating to the AdjSID.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config

    // Operational state parameters relating to the AdjSID.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "openconfig"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Neighbor, "neighbor") + types.AddKeyToken(adjacencySid.SidId, "sid-id")
    adjacencySid.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = openconfig.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("config", types.YChild{"Config", &adjacencySid.Config})
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("neighbor", types.YLeaf{"Neighbor", adjacencySid.Neighbor})
    adjacencySid.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", adjacencySid.SidId})

    adjacencySid.EntityData.YListKeys = []string {"Neighbor", "SidId"}

    return &(adjacencySid.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config
// Configuraton parameters relating to the AdjSID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of the Adj-SID to be advertised. Where a static SID identifier is
    // specified, this should be advertised directly by the system. Where the
    // DYNAMIC value is specified, this should be treated as a dynamically
    // allocated value. When the MPLS data plane is in use the dynamic value
    // should not fall within a reserved-label-block. The type is one of the
    // following types: int with range: 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/mpls_types/MplsLabel>`., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.,
    // or enumeration
    // NetworkInstances.NetworkInstance.Protocols.Protocol.Isis.Interfaces.Interface.Levels.Level.AfiSafi.Af.SegmentRouting.AdjacencySids.AdjacencySid.State.SidId.
    SidId interface{}

    // Whether the Adj-SID should be considered to be eligible for protection
    // using IP or MPLS FRR during a network failure. When this value is set to
    // true, the B-flag of the Adj-SID is set to 1, and the local system should
    // provide FRR paths for the associated label forwarding entry. When it is set
    // to false, the local system must not provide FRR for the specified LFIB
    // entry. The type is bool. The default value is true.
    ProtectionEligible interface{}

    // When set to true, the Adj-SID is indicated to be part of a group, and the G
    // flag is set to 1 in the corresponding advertisement in the IGP. The type is
    // bool. The default value is false.
    Group interface{}

    // The remote system on the interface with which the Adj-SID is associated.
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Neighbor interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "adjacency-sid"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", config.SidId})
    config.EntityData.Leafs.Append("protection-eligible", types.YLeaf{"ProtectionEligible", config.ProtectionEligible})
    config.EntityData.Leafs.Append("group", types.YLeaf{"Group", config.Group})
    config.EntityData.Leafs.Append("neighbor", types.YLeaf{"Neighbor", config.Neighbor})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId represents the dynamic value should not fall within a reserved-label-block.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId string

const (
    // The SID chosen for the Adjacency SID should be dynamically
    // allocated from the system's dynamic range of Segment
    // Identifiers. For MPLS, this range should be considered to be
    // those labels that do not fall within a reserved label block.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_DYNAMIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State
// Operational state parameters relating to the AdjSID.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of the Adj-SID to be advertised. Where a static SID identifier is
    // specified, this should be advertised directly by the system. Where the
    // DYNAMIC value is specified, this should be treated as a dynamically
    // allocated value. When the MPLS data plane is in use the dynamic value
    // should not fall within a reserved-label-block. The type is one of the
    // following types: int with range: 16..1048575, or :go:struct:`MplsLabel
    // <ydk/models/mpls_types/MplsLabel>`., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.,
    // or enumeration
    // NetworkInstances.NetworkInstance.Protocols.Protocol.Isis.Interfaces.Interface.Levels.Level.AfiSafi.Af.SegmentRouting.AdjacencySids.AdjacencySid.State.SidId.
    SidId interface{}

    // Whether the Adj-SID should be considered to be eligible for protection
    // using IP or MPLS FRR during a network failure. When this value is set to
    // true, the B-flag of the Adj-SID is set to 1, and the local system should
    // provide FRR paths for the associated label forwarding entry. When it is set
    // to false, the local system must not provide FRR for the specified LFIB
    // entry. The type is bool. The default value is true.
    ProtectionEligible interface{}

    // When set to true, the Adj-SID is indicated to be part of a group, and the G
    // flag is set to 1 in the corresponding advertisement in the IGP. The type is
    // bool. The default value is false.
    Group interface{}

    // The remote system on the interface with which the Adj-SID is associated.
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // Where an Adjacency SID with a dynamic value is to be allocated by the
    // system, this leaf reports to the value of the Adj-SID allocated to this
    // interface. The type is one of the following types: int with range:
    // 16..1048575, or :go:struct:`MplsLabel <ydk/models/mpls_types/MplsLabel>`.,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    AllocatedDynamicLocal interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", state.SidId})
    state.EntityData.Leafs.Append("protection-eligible", types.YLeaf{"ProtectionEligible", state.ProtectionEligible})
    state.EntityData.Leafs.Append("group", types.YLeaf{"Group", state.Group})
    state.EntityData.Leafs.Append("neighbor", types.YLeaf{"Neighbor", state.Neighbor})
    state.EntityData.Leafs.Append("allocated-dynamic-local", types.YLeaf{"AllocatedDynamicLocal", state.AllocatedDynamicLocal})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId represents the dynamic value should not fall within a reserved-label-block.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId string

const (
    // The SID chosen for the Adjacency SID should be dynamically
    // allocated from the system's dynamic range of Segment
    // Identifiers. For MPLS, this range should be considered to be
    // those labels that do not fall within a reserved label block.
    NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_DYNAMIC NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId = "DYNAMIC"
)

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication
// This container defines ISIS authentication.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config

    // This container defines ISIS authentication state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State

    // This container defines ISIS authentication key.
    Key NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key

    // This container defines keychain parameters.
    Keychain NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain
}

func (helloAuthentication *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication) GetEntityData() *types.CommonEntityData {
    helloAuthentication.EntityData.YFilter = helloAuthentication.YFilter
    helloAuthentication.EntityData.YangName = "hello-authentication"
    helloAuthentication.EntityData.BundleName = "openconfig"
    helloAuthentication.EntityData.ParentYangName = "level"
    helloAuthentication.EntityData.SegmentPath = "hello-authentication"
    helloAuthentication.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/" + helloAuthentication.EntityData.SegmentPath
    helloAuthentication.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    helloAuthentication.EntityData.NamespaceTable = openconfig.GetNamespaces()
    helloAuthentication.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    helloAuthentication.EntityData.Children = types.NewOrderedMap()
    helloAuthentication.EntityData.Children.Append("config", types.YChild{"Config", &helloAuthentication.Config})
    helloAuthentication.EntityData.Children.Append("state", types.YChild{"State", &helloAuthentication.State})
    helloAuthentication.EntityData.Children.Append("key", types.YChild{"Key", &helloAuthentication.Key})
    helloAuthentication.EntityData.Children.Append("keychain", types.YChild{"Keychain", &helloAuthentication.Keychain})
    helloAuthentication.EntityData.Leafs = types.NewOrderedMap()

    helloAuthentication.EntityData.YListKeys = []string {}

    return &(helloAuthentication.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config
// This container defines ISIS authentication configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "hello-authentication"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("hello-authentication", types.YLeaf{"HelloAuthentication", config.HelloAuthentication})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State
// This container defines ISIS authentication state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabled or disable ISIS Hello authentication. The type is bool. The default
    // value is false.
    HelloAuthentication interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "hello-authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-authentication", types.YLeaf{"HelloAuthentication", state.HelloAuthentication})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key
// This container defines ISIS authentication key
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key configuration.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config

    // This container defines ISIS authentication key state.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State
}

func (key *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "openconfig"
    key.EntityData.ParentYangName = "hello-authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    key.EntityData.NamespaceTable = openconfig.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("config", types.YChild{"Config", &key.Config})
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config
// This container defines ISIS authentication key configuration.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "key"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/key/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", config.AuthPassword})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State
// This container defines ISIS authentication key state.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain
// This container defines keychain parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (keychain *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_HelloAuthentication_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "openconfig"
    keychain.EntityData.ParentYangName = "hello-authentication"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    keychain.EntityData.NamespaceTable = openconfig.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers
// This container describes ISIS interface timers configuration
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration parameters relating to interface timers for IS-IS.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config

    // This container defines state information for ISIS interface timers.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State
}

func (timers *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "openconfig"
    timers.EntityData.ParentYangName = "interface"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    timers.EntityData.NamespaceTable = openconfig.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("config", types.YChild{"Config", &timers.Config})
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config
// Configuration parameters relating to interface
// timers for IS-IS
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The interval, specified in seconds, at which periodic CSNP packets should
    // be transmitted by the local IS. The type is interface{} with range:
    // 0..65535. Units are seconds.
    CsnpInterval interface{}

    // The interval interval in milliseconds between the detection of topology
    // change and when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    LspPacingInterval interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "timers"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("csnp-interval", types.YLeaf{"CsnpInterval", config.CsnpInterval})
    config.EntityData.Leafs.Append("lsp-pacing-interval", types.YLeaf{"LspPacingInterval", config.LspPacingInterval})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State
// This container defines state information for ISIS interface timers.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The interval, specified in seconds, at which periodic CSNP packets should
    // be transmitted by the local IS. The type is interface{} with range:
    // 0..65535. Units are seconds.
    CsnpInterval interface{}

    // The interval interval in milliseconds between the detection of topology
    // change and when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are milliseconds.
    LspPacingInterval interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("csnp-interval", types.YLeaf{"CsnpInterval", state.CsnpInterval})
    state.EntityData.Leafs.Append("lsp-pacing-interval", types.YLeaf{"LspPacingInterval", state.LspPacingInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd
// This container defines BFD.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines BFD configuration parameters.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config

    // This container defines BFD state information.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State
}

func (bfd *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "openconfig"
    bfd.EntityData.ParentYangName = "interface"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    bfd.EntityData.NamespaceTable = openconfig.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Children.Append("config", types.YChild{"Config", &bfd.Config})
    bfd.EntityData.Children.Append("state", types.YChild{"State", &bfd.State})
    bfd.EntityData.Leafs = types.NewOrderedMap()

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config
// This container defines BFD configuration parameters.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, BFD TLV is used. This enables support for the IS-IS BFD
    // TLV options, which specify that a BFD session must be established before an
    // IS-IS adjacency can transition to the established state. This option should
    // be enabled on all IS-IS neighbors on a shared interface. The type is bool.
    BfdTlv interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "bfd"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("bfd-tlv", types.YLeaf{"BfdTlv", config.BfdTlv})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State
// This container defines BFD state information.
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, BFD TLV is used. This enables support for the IS-IS BFD
    // TLV options, which specify that a BFD session must be established before an
    // IS-IS adjacency can transition to the established state. This option should
    // be enabled on all IS-IS neighbors on a shared interface. The type is bool.
    BfdTlv interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Bfd_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "bfd"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("bfd-tlv", types.YLeaf{"BfdTlv", state.BfdTlv})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef
// Reference to an interface or subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured reference to interface / subinterface.
    Config NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config

    // Operational state for interface-ref.
    State NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State
}

func (interfaceRef *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef) GetEntityData() *types.CommonEntityData {
    interfaceRef.EntityData.YFilter = interfaceRef.YFilter
    interfaceRef.EntityData.YangName = "interface-ref"
    interfaceRef.EntityData.BundleName = "openconfig"
    interfaceRef.EntityData.ParentYangName = "interface"
    interfaceRef.EntityData.SegmentPath = "interface-ref"
    interfaceRef.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/" + interfaceRef.EntityData.SegmentPath
    interfaceRef.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    interfaceRef.EntityData.NamespaceTable = openconfig.GetNamespaces()
    interfaceRef.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    interfaceRef.EntityData.Children = types.NewOrderedMap()
    interfaceRef.EntityData.Children.Append("config", types.YChild{"Config", &interfaceRef.Config})
    interfaceRef.EntityData.Children.Append("state", types.YChild{"State", &interfaceRef.State})
    interfaceRef.EntityData.Leafs = types.NewOrderedMap()

    interfaceRef.EntityData.YListKeys = []string {}

    return &(interfaceRef.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config
// Configured reference to interface / subinterface
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (config *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_Config) GetEntityData() *types.CommonEntityData {
    config.EntityData.YFilter = config.YFilter
    config.EntityData.YangName = "config"
    config.EntityData.BundleName = "openconfig"
    config.EntityData.ParentYangName = "interface-ref"
    config.EntityData.SegmentPath = "config"
    config.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/" + config.EntityData.SegmentPath
    config.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    config.EntityData.NamespaceTable = openconfig.GetNamespaces()
    config.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    config.EntityData.Children = types.NewOrderedMap()
    config.EntityData.Leafs = types.NewOrderedMap()
    config.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", config.Interface})
    config.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", config.Subinterface})

    config.EntityData.YListKeys = []string {}

    return &(config.EntityData)
}

// NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State
// Operational state for interface-ref
type NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference to a base interface.  If a reference to a subinterface is
    // required, this leaf must be specified to indicate the base interface. The
    // type is string. Refers to interfaces.Interfaces_Interface_Name
    Interface interface{}

    // Reference to a subinterface -- this requires the base interface to be
    // specified using the interface leaf in this container.  If only a reference
    // to a base interface is requuired, this leaf should not be set. The type is
    // string with range: 0..4294967295. Refers to
    // interfaces.Interfaces_Interface_Subinterfaces_Subinterface_Index
    Subinterface interface{}
}

func (state *NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_InterfaceRef_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "openconfig"
    state.EntityData.ParentYangName = "interface-ref"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "openconfig-network-instance:network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = openconfig.GetCapabilities()
    state.EntityData.NamespaceTable = openconfig.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = openconfig.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", state.Interface})
    state.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", state.Subinterface})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

